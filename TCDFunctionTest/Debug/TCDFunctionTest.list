
TCDFunctionTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800a000  0800a000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a15c  0800a15c  0000c17c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a15c  0800a15c  0000b15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a164  0800a164  0000c17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a164  0800a164  0000b164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a168  0800a168  0000b168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800a16c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046e4  2000017c  0800a2e8  0000c17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004860  0800a2e8  0000c860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e4b  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fd  00000000  00000000  00020ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000246f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e56  00000000  00000000  000259c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a35b  00000000  00000000  00026816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b93  00000000  00000000  00040b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b215  00000000  00000000  00058704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3919  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  000f395c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f8cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000017c 	.word	0x2000017c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fe8 	.word	0x08009fe8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000180 	.word	0x20000180
 80001dc:	08009fe8 	.word	0x08009fe8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe72 	bl	800125c <HAL_Init>

  /* USER CODE BEGIN Init */
  InitializeHeaderFooter();
 8000578:	f000 fbc4 	bl	8000d04 <InitializeHeaderFooter>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f82a 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 faf6 	bl	8000b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000584:	f000 fad4 	bl	8000b30 <MX_DMA_Init>
  MX_TIM2_Init();
 8000588:	f000 f8e2 	bl	8000750 <MX_TIM2_Init>
  MX_TIM3_Init();
 800058c:	f000 f958 	bl	8000840 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000590:	f000 f9cc 	bl	800092c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000594:	f000 fa3c 	bl	8000a10 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000598:	f008 fb5a 	bl	8008c50 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800059c:	f000 f886 	bl	80006ac <MX_ADC1_Init>
//  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
////  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
//  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH

  if (!start_command_received) {
 80005a0:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <main+0x58>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d107      	bne.n	80005ba <main+0x4a>
  CDC_Transmit_FS("Target Ready\r\n",14);
 80005aa:	210e      	movs	r1, #14
 80005ac:	4807      	ldr	r0, [pc, #28]	@ (80005cc <main+0x5c>)
 80005ae:	f008 fc13 	bl	8008dd8 <CDC_Transmit_FS>
  HAL_Delay(1000);}
 80005b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b6:	f000 fec3 	bl	8001340 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  single_capture_flag = 1;
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <main+0x60>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]

  while (1)
  {

	  SingleCapture();
 80005c0:	f000 fafe 	bl	8000bc0 <SingleCapture>
 80005c4:	e7fc      	b.n	80005c0 <main+0x50>
 80005c6:	bf00      	nop
 80005c8:	20003328 	.word	0x20003328
 80005cc:	0800a000 	.word	0x0800a000
 80005d0:	2000332b 	.word	0x2000332b

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f009 f86e 	bl	80096c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a28      	ldr	r2, [pc, #160]	@ (80006a4 <SystemClock_Config+0xd0>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <SystemClock_Config+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <SystemClock_Config+0xd4>)
 8000622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000648:	2319      	movs	r3, #25
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fad0 	bl	8003c04 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066a:	f000 fba7 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fd32 	bl	80040f4 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000696:	f000 fb91 	bl	8000dbc <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006be:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006c0:	4a22      	ldr	r2, [pc, #136]	@ (800074c <MX_ADC1_Init+0xa0>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c4:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006f0:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 80006f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_ADC1_Init+0x9c>)
 8000704:	2201      	movs	r2, #1
 8000706:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_ADC1_Init+0x9c>)
 800070c:	2201      	movs	r2, #1
 800070e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000710:	480d      	ldr	r0, [pc, #52]	@ (8000748 <MX_ADC1_Init+0x9c>)
 8000712:	f000 fe39 	bl	8001388 <HAL_ADC_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800071c:	f000 fb4e 	bl	8000dbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000720:	2303      	movs	r3, #3
 8000722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_ADC1_Init+0x9c>)
 8000732:	f000 ff71 	bl	8001618 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800073c:	f000 fb3e 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000198 	.word	0x20000198
 800074c:	40012000 	.word	0x40012000

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08e      	sub	sp, #56	@ 0x38
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000780:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <MX_TIM2_Init+0xe8>)
 8000782:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000786:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000788:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <MX_TIM2_Init+0xe8>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078e:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <MX_TIM2_Init+0xe8>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 8000794:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <MX_TIM2_Init+0xe8>)
 8000796:	4a29      	ldr	r2, [pc, #164]	@ (800083c <MX_TIM2_Init+0xec>)
 8000798:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079a:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <MX_TIM2_Init+0xe8>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <MX_TIM2_Init+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a6:	4824      	ldr	r0, [pc, #144]	@ (8000838 <MX_TIM2_Init+0xe8>)
 80007a8:	f003 fe5c 	bl	8004464 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80007b2:	f000 fb03 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c0:	4619      	mov	r1, r3
 80007c2:	481d      	ldr	r0, [pc, #116]	@ (8000838 <MX_TIM2_Init+0xe8>)
 80007c4:	f004 fa20 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007ce:	f000 faf5 	bl	8000dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007d2:	4819      	ldr	r0, [pc, #100]	@ (8000838 <MX_TIM2_Init+0xe8>)
 80007d4:	f003 fef8 	bl	80045c8 <HAL_TIM_PWM_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007de:	f000 faed 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80007e2:	2310      	movs	r3, #16
 80007e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80007e6:	2380      	movs	r3, #128	@ 0x80
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4619      	mov	r1, r3
 80007f0:	4811      	ldr	r0, [pc, #68]	@ (8000838 <MX_TIM2_Init+0xe8>)
 80007f2:	f004 fea3 	bl	800553c <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007fc:	f000 fade 	bl	8000dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000800:	2370      	movs	r3, #112	@ 0x70
 8000802:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 8000804:	f242 2373 	movw	r3, #8819	@ 0x2273
 8000808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800080a:	2302      	movs	r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_TIM2_Init+0xe8>)
 800081a:	f004 f933 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000824:	f000 faca 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <MX_TIM2_Init+0xe8>)
 800082a:	f000 fbd3 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 800082e:	bf00      	nop
 8000830:	3738      	adds	r7, #56	@ 0x38
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000240 	.word	0x20000240
 800083c:	000802c7 	.word	0x000802c7

08000840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	@ 0x38
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	615a      	str	r2, [r3, #20]
 800086e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000872:	4a2d      	ldr	r2, [pc, #180]	@ (8000928 <MX_TIM3_Init+0xe8>)
 8000874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000876:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_TIM3_Init+0xe4>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 8000882:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000884:	22a7      	movs	r2, #167	@ 0xa7
 8000886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_TIM3_Init+0xe4>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000894:	4823      	ldr	r0, [pc, #140]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000896:	f003 fde5 	bl	8004464 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80008a0:	f000 fa8c 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481c      	ldr	r0, [pc, #112]	@ (8000924 <MX_TIM3_Init+0xe4>)
 80008b2:	f004 f9a9 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80008bc:	f000 fa7e 	bl	8000dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008c0:	4818      	ldr	r0, [pc, #96]	@ (8000924 <MX_TIM3_Init+0xe4>)
 80008c2:	f003 fe81 	bl	80045c8 <HAL_TIM_PWM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80008cc:	f000 fa76 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4619      	mov	r1, r3
 80008de:	4811      	ldr	r0, [pc, #68]	@ (8000924 <MX_TIM3_Init+0xe4>)
 80008e0:	f004 fe2c 	bl	800553c <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80008ea:	f000 fa67 	bl	8000dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ee:	2360      	movs	r3, #96	@ 0x60
 80008f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 80008f2:	2353      	movs	r3, #83	@ 0x53
 80008f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	4807      	ldr	r0, [pc, #28]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000906:	f004 f8bd 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000910:	f000 fa54 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000914:	4803      	ldr	r0, [pc, #12]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000916:	f000 fb5d 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 800091a:	bf00      	nop
 800091c:	3738      	adds	r7, #56	@ 0x38
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000288 	.word	0x20000288
 8000928:	40000400 	.word	0x40000400

0800092c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800095c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 800095e:	4a2b      	ldr	r2, [pc, #172]	@ (8000a0c <MX_TIM4_Init+0xe0>)
 8000960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000962:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 800096e:	4b26      	ldr	r3, [pc, #152]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 8000970:	22a7      	movs	r2, #167	@ 0xa7
 8000972:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b23      	ldr	r3, [pc, #140]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000980:	4821      	ldr	r0, [pc, #132]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 8000982:	f003 fd6f 	bl	8004464 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800098c:	f000 fa16 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800099a:	4619      	mov	r1, r3
 800099c:	481a      	ldr	r0, [pc, #104]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 800099e:	f004 f933 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80009a8:	f000 fa08 	bl	8000dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009ac:	4816      	ldr	r0, [pc, #88]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 80009ae:	f003 fe0b 	bl	80045c8 <HAL_TIM_PWM_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80009b8:	f000 fa00 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4619      	mov	r1, r3
 80009ca:	480f      	ldr	r0, [pc, #60]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 80009cc:	f004 fdb6 	bl	800553c <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80009d6:	f000 f9f1 	bl	8000dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009da:	2360      	movs	r3, #96	@ 0x60
 80009dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 80009de:	2329      	movs	r3, #41	@ 0x29
 80009e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	220c      	movs	r2, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 80009f2:	f004 f847 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80009fc:	f000 f9de 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3738      	adds	r7, #56	@ 0x38
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200002d0 	.word	0x200002d0
 8000a0c:	40000800 	.word	0x40000800

08000a10 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b092      	sub	sp, #72	@ 0x48
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	615a      	str	r2, [r3, #20]
 8000a4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a50:	4b34      	ldr	r3, [pc, #208]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a52:	4a35      	ldr	r2, [pc, #212]	@ (8000b28 <MX_TIM5_Init+0x118>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000a56:	4b33      	ldr	r3, [pc, #204]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 8000a62:	4b30      	ldr	r3, [pc, #192]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a64:	4a31      	ldr	r2, [pc, #196]	@ (8000b2c <MX_TIM5_Init+0x11c>)
 8000a66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a74:	482b      	ldr	r0, [pc, #172]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a76:	f003 fcf5 	bl	8004464 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000a80:	f000 f99c 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a88:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4824      	ldr	r0, [pc, #144]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a92:	f004 f8b9 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a9c:	f000 f98e 	bl	8000dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000aa0:	4820      	ldr	r0, [pc, #128]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000aa2:	f003 fd91 	bl	80045c8 <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000aac:	f000 f986 	bl	8000dbc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4819      	ldr	r0, [pc, #100]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000ac0:	f004 f969 	bl	8004d96 <HAL_TIM_SlaveConfigSynchro>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000aca:	f000 f977 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ad2:	2380      	movs	r3, #128	@ 0x80
 8000ad4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4811      	ldr	r0, [pc, #68]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000ade:	f004 fd2d 	bl	800553c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000ae8:	f000 f968 	bl	8000dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aec:	2360      	movs	r3, #96	@ 0x60
 8000aee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000af0:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000af4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	2208      	movs	r2, #8
 8000b02:	4619      	mov	r1, r3
 8000b04:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000b06:	f003 ffbd 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000b10:	f000 f954 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b14:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000b16:	f000 fa5d 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000b1a:	bf00      	nop
 8000b1c:	3748      	adds	r7, #72	@ 0x48
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000318 	.word	0x20000318
 8000b28:	40000c00 	.word	0x40000c00
 8000b2c:	000802c7 	.word	0x000802c7

08000b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_DMA_Init+0x3c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b6c <MX_DMA_Init+0x3c>)
 8000b40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_DMA_Init+0x3c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2038      	movs	r0, #56	@ 0x38
 8000b58:	f001 f8d9 	bl	8001d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b5c:	2038      	movs	r0, #56	@ 0x38
 8000b5e:	f001 f8f2 	bl	8001d46 <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <SingleCapture>:

/* USER CODE BEGIN 4 */
void SingleCapture(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	if(single_capture_flag == 1){
 8000bc4:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <SingleCapture+0x94>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d127      	bne.n	8000c1c <SingleCapture+0x5c>
	  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay for icg
 8000bcc:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <SingleCapture+0x98>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2242      	movs	r2, #66	@ 0x42
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_COUNTER(&htim5, 0); // sh
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <SingleCapture+0x9c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_COUNTER(&htim3, 0); // fm
 8000bdc:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <SingleCapture+0xa0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8000be4:	2108      	movs	r1, #8
 8000be6:	481d      	ldr	r0, [pc, #116]	@ (8000c5c <SingleCapture+0x9c>)
 8000be8:	f003 fd48 	bl	800467c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8000bec:	2100      	movs	r1, #0
 8000bee:	481c      	ldr	r0, [pc, #112]	@ (8000c60 <SingleCapture+0xa0>)
 8000bf0:	f003 fd44 	bl	800467c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4818      	ldr	r0, [pc, #96]	@ (8000c58 <SingleCapture+0x98>)
 8000bf8:	f003 fd40 	bl	800467c <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim2);
 8000bfc:	4816      	ldr	r0, [pc, #88]	@ (8000c58 <SingleCapture+0x98>)
 8000bfe:	f003 fc81 	bl	8004504 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 8000c02:	210c      	movs	r1, #12
 8000c04:	4817      	ldr	r0, [pc, #92]	@ (8000c64 <SingleCapture+0xa4>)
 8000c06:	f003 fd39 	bl	800467c <HAL_TIM_PWM_Start>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000c0a:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000c0e:	4916      	ldr	r1, [pc, #88]	@ (8000c68 <SingleCapture+0xa8>)
 8000c10:	4816      	ldr	r0, [pc, #88]	@ (8000c6c <SingleCapture+0xac>)
 8000c12:	f000 fbfd 	bl	8001410 <HAL_ADC_Start_DMA>
	  single_capture_flag = 0;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <SingleCapture+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
	}

	  if(count_signals >= signals){
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <SingleCapture+0xb0>)
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <SingleCapture+0xb4>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d312      	bcc.n	8000c4e <SingleCapture+0x8e>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); //ICG
 8000c28:	2100      	movs	r1, #0
 8000c2a:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <SingleCapture+0x98>)
 8000c2c:	f003 fdd6 	bl	80047dc <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); //fM
 8000c30:	2100      	movs	r1, #0
 8000c32:	480b      	ldr	r0, [pc, #44]	@ (8000c60 <SingleCapture+0xa0>)
 8000c34:	f003 fdd2 	bl	80047dc <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //ADC
 8000c38:	210c      	movs	r1, #12
 8000c3a:	480a      	ldr	r0, [pc, #40]	@ (8000c64 <SingleCapture+0xa4>)
 8000c3c:	f003 fdce 	bl	80047dc <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); //SH
 8000c40:	2108      	movs	r1, #8
 8000c42:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <SingleCapture+0x9c>)
 8000c44:	f003 fdca 	bl	80047dc <HAL_TIM_PWM_Stop>
		  count_signals = 0;
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <SingleCapture+0xb0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
	  }




}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000332b 	.word	0x2000332b
 8000c58:	20000240 	.word	0x20000240
 8000c5c:	20000318 	.word	0x20000318
 8000c60:	20000288 	.word	0x20000288
 8000c64:	200002d0 	.word	0x200002d0
 8000c68:	20000448 	.word	0x20000448
 8000c6c:	20000198 	.word	0x20000198
 8000c70:	20003329 	.word	0x20003329
 8000c74:	2000002c 	.word	0x2000002c

08000c78 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	adc_flag = 1;
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
//	HAL_ADC_Stop_DMA(&hadc1);
//	CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	2000332a 	.word	0x2000332a

08000c98 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca8:	d105      	bne.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x1e>
			count_signals++;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cb4:	701a      	strb	r2, [r3, #0]
			}
		}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20003329 	.word	0x20003329

08000cc8 <CDCReceiveCallback>:



//when the stm receives anything, it checks if it is the string start

void CDCReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
    // Ensure the buffer is null-terminated
    Buf[Len] = '\0';
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]

    // Check for the "start" command
    if (strncmp((char*)Buf, "start", 5) == 0) {
 8000cdc:	2205      	movs	r2, #5
 8000cde:	4907      	ldr	r1, [pc, #28]	@ (8000cfc <CDCReceiveCallback+0x34>)
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f008 fcf7 	bl	80096d4 <strncmp>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <CDCReceiveCallback+0x2a>
    	single_capture_flag = 1;
 8000cec:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <CDCReceiveCallback+0x38>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]


    }
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	0800a010 	.word	0x0800a010
 8000d00:	2000332b 	.word	0x2000332b

08000d04 <InitializeHeaderFooter>:
    // Configure the SH signal with the calculated period and pulse width
    Configure_SH_Signal(T_SH_ticks, SH_pulse_ticks);
}


void InitializeHeaderFooter(void) {
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	b093      	sub	sp, #76	@ 0x4c
 8000d08:	af0c      	add	r7, sp, #48	@ 0x30
    // Construct the header
    snprintf(header, HEADER_SIZE,
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <InitializeHeaderFooter+0x80>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	4a1d      	ldr	r2, [pc, #116]	@ (8000d88 <InitializeHeaderFooter+0x84>)
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	491d      	ldr	r1, [pc, #116]	@ (8000d8c <InitializeHeaderFooter+0x88>)
 8000d16:	6809      	ldr	r1, [r1, #0]
 8000d18:	481d      	ldr	r0, [pc, #116]	@ (8000d90 <InitializeHeaderFooter+0x8c>)
 8000d1a:	6800      	ldr	r0, [r0, #0]
 8000d1c:	4c1d      	ldr	r4, [pc, #116]	@ (8000d94 <InitializeHeaderFooter+0x90>)
 8000d1e:	6824      	ldr	r4, [r4, #0]
 8000d20:	4d1c      	ldr	r5, [pc, #112]	@ (8000d94 <InitializeHeaderFooter+0x90>)
 8000d22:	686d      	ldr	r5, [r5, #4]
 8000d24:	4e1b      	ldr	r6, [pc, #108]	@ (8000d94 <InitializeHeaderFooter+0x90>)
 8000d26:	68b6      	ldr	r6, [r6, #8]
 8000d28:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <InitializeHeaderFooter+0x90>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <InitializeHeaderFooter+0x94>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <InitializeHeaderFooter+0x98>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <InitializeHeaderFooter+0x9c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <InitializeHeaderFooter+0xa0>)
 8000d42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	9308      	str	r3, [sp, #32]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	9307      	str	r3, [sp, #28]
 8000d54:	9606      	str	r6, [sp, #24]
 8000d56:	9505      	str	r5, [sp, #20]
 8000d58:	9404      	str	r4, [sp, #16]
 8000d5a:	9003      	str	r0, [sp, #12]
 8000d5c:	9102      	str	r1, [sp, #8]
 8000d5e:	9201      	str	r2, [sp, #4]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <InitializeHeaderFooter+0xa4>)
 8000d66:	4a11      	ldr	r2, [pc, #68]	@ (8000dac <InitializeHeaderFooter+0xa8>)
 8000d68:	21c8      	movs	r1, #200	@ 0xc8
 8000d6a:	4811      	ldr	r0, [pc, #68]	@ (8000db0 <InitializeHeaderFooter+0xac>)
 8000d6c:	f008 fc76 	bl	800965c <sniprintf>
        VersionNo, MajorVersion, FileFormatNo, CustomizationNo, CameraType,
        DataInfo[0], DataInfo[1], DataInfo[2], DataInfo[3],
        MeasureMode, SheetData, Profile, ScaleUnitChars);

    // Construct the footer (this example just uses a simple footer, customize as needed)
    snprintf(footer, FOOTER_SIZE, "\n");
 8000d70:	4a10      	ldr	r2, [pc, #64]	@ (8000db4 <InitializeHeaderFooter+0xb0>)
 8000d72:	2102      	movs	r1, #2
 8000d74:	4810      	ldr	r0, [pc, #64]	@ (8000db8 <InitializeHeaderFooter+0xb4>)
 8000d76:	f008 fc71 	bl	800965c <sniprintf>
}
 8000d7a:	bf00      	nop
 8000d7c:	371c      	adds	r7, #28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000004 	.word	0x20000004
 8000d88:	20000360 	.word	0x20000360
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	2000000c 	.word	0x2000000c
 8000d94:	20000364 	.word	0x20000364
 8000d98:	20000010 	.word	0x20000010
 8000d9c:	20000378 	.word	0x20000378
 8000da0:	20000014 	.word	0x20000014
 8000da4:	20000018 	.word	0x20000018
 8000da8:	20000000 	.word	0x20000000
 8000dac:	0800a018 	.word	0x0800a018
 8000db0:	2000037c 	.word	0x2000037c
 8000db4:	0800a0c4 	.word	0x0800a0c4
 8000db8:	20000444 	.word	0x20000444

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <Error_Handler+0x8>

08000dc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a08      	ldr	r2, [pc, #32]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef0 <HAL_ADC_MspInit+0xd8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d156      	bne.n	8000ee8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a2c      	ldr	r2, [pc, #176]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a25      	ldr	r2, [pc, #148]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e72:	2308      	movs	r3, #8
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	481c      	ldr	r0, [pc, #112]	@ (8000ef8 <HAL_ADC_MspInit+0xe0>)
 8000e86:	f001 fae9 	bl	800245c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f00 <HAL_ADC_MspInit+0xe8>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000eac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000eb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ecc:	480b      	ldr	r0, [pc, #44]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000ece:	f000 ff55 	bl	8001d7c <HAL_DMA_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ed8:	f7ff ff70 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000ee0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ee2:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	@ 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	200001e0 	.word	0x200001e0
 8000f00:	40026410 	.word	0x40026410

08000f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f14:	d116      	bne.n	8000f44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	4a29      	ldr	r2, [pc, #164]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f26:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	201c      	movs	r0, #28
 8000f38:	f000 fee9 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f3c:	201c      	movs	r0, #28
 8000f3e:	f000 ff02 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f42:	e03a      	b.n	8000fba <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc8 <HAL_TIM_Base_MspInit+0xc4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10e      	bne.n	8000f6c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5e:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
}
 8000f6a:	e026      	b.n	8000fba <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <HAL_TIM_Base_MspInit+0xc8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10e      	bne.n	8000f94 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	4a11      	ldr	r2, [pc, #68]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
}
 8000f92:	e012      	b.n	8000fba <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <HAL_TIM_Base_MspInit+0xcc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10d      	bne.n	8000fba <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40000400 	.word	0x40000400
 8000fcc:	40000800 	.word	0x40000800
 8000fd0:	40000c00 	.word	0x40000c00

08000fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff4:	d11e      	bne.n	8001034 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <HAL_TIM_MspPostInit+0xf8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a33      	ldr	r2, [pc, #204]	@ (80010cc <HAL_TIM_MspPostInit+0xf8>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <HAL_TIM_MspPostInit+0xf8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001012:	2301      	movs	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800101a:	2302      	movs	r3, #2
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4828      	ldr	r0, [pc, #160]	@ (80010d0 <HAL_TIM_MspPostInit+0xfc>)
 800102e:	f001 fa15 	bl	800245c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001032:	e046      	b.n	80010c2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a26      	ldr	r2, [pc, #152]	@ (80010d4 <HAL_TIM_MspPostInit+0x100>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d11e      	bne.n	800107c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <HAL_TIM_MspPostInit+0xf8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <HAL_TIM_MspPostInit+0xf8>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <HAL_TIM_MspPostInit+0xf8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800105a:	2340      	movs	r3, #64	@ 0x40
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800106a:	2302      	movs	r3, #2
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4816      	ldr	r0, [pc, #88]	@ (80010d0 <HAL_TIM_MspPostInit+0xfc>)
 8001076:	f001 f9f1 	bl	800245c <HAL_GPIO_Init>
}
 800107a:	e022      	b.n	80010c2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <HAL_TIM_MspPostInit+0x104>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d11d      	bne.n	80010c2 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <HAL_TIM_MspPostInit+0xf8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a0f      	ldr	r2, [pc, #60]	@ (80010cc <HAL_TIM_MspPostInit+0xf8>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <HAL_TIM_MspPostInit+0xf8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010a2:	2304      	movs	r3, #4
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010b2:	2302      	movs	r3, #2
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <HAL_TIM_MspPostInit+0xfc>)
 80010be:	f001 f9cd 	bl	800245c <HAL_GPIO_Init>
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	@ 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40000400 	.word	0x40000400
 80010d8:	40000c00 	.word	0x40000c00

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <NMI_Handler+0x4>

080010e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <MemManage_Handler+0x4>

080010f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <UsageFault_Handler+0x4>

08001104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001132:	f000 f8e5 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <TIM2_IRQHandler+0x10>)
 8001142:	f003 fbaf 	bl	80048a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000240 	.word	0x20000240

08001150 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <DMA2_Stream0_IRQHandler+0x10>)
 8001156:	f000 ff17 	bl	8001f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200001e0 	.word	0x200001e0

08001164 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <OTG_FS_IRQHandler+0x10>)
 800116a:	f001 fc3f 	bl	80029ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20004014 	.word	0x20004014

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	@ (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f008 faa6 	bl	80096f8 <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20010000 	.word	0x20010000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	2000332c 	.word	0x2000332c
 80011e0:	20004860 	.word	0x20004860

080011e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001240 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800120c:	f7ff ffea 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	@ (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	@ (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f008 fa65 	bl	8009704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff f999 	bl	8000570 <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800124c:	0800a16c 	.word	0x0800a16c
  ldr r2, =_sbss
 8001250:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001254:	20004860 	.word	0x20004860

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <HAL_Init+0x40>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_Init+0x40>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	@ (800129c <HAL_Init+0x40>)
 800127e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 fd37 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	200f      	movs	r0, #15
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fd9a 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023c00 	.word	0x40023c00

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fd4f 	bl	8001d62 <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f000 fd17 	bl	8001d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	@ (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000030 	.word	0x20000030
 80012f8:	20000038 	.word	0x20000038
 80012fc:	20000034 	.word	0x20000034

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000038 	.word	0x20000038
 8001324:	20003330 	.word	0x20003330

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20003330 	.word	0x20003330

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <HAL_Delay+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffde 	bl	8001328 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000038 	.word	0x20000038

08001388 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e033      	b.n	8001406 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fd36 	bl	8000e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013ce:	f023 0302 	bic.w	r3, r3, #2
 80013d2:	f043 0202 	orr.w	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fa3e 	bl	800185c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80013f6:	e001      	b.n	80013fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_ADC_Start_DMA+0x1e>
 800142a:	2302      	movs	r3, #2
 800142c:	e0ce      	b.n	80015cc <HAL_ADC_Start_DMA+0x1bc>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b01      	cmp	r3, #1
 8001442:	d018      	beq.n	8001476 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001454:	4b5f      	ldr	r3, [pc, #380]	@ (80015d4 <HAL_ADC_Start_DMA+0x1c4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a5f      	ldr	r2, [pc, #380]	@ (80015d8 <HAL_ADC_Start_DMA+0x1c8>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9a      	lsrs	r2, r3, #18
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001468:	e002      	b.n	8001470 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	3b01      	subs	r3, #1
 800146e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f9      	bne.n	800146a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001484:	d107      	bne.n	8001496 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001494:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	f040 8086 	bne.w	80015b2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014e4:	d106      	bne.n	80014f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	f023 0206 	bic.w	r2, r3, #6
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80014f2:	e002      	b.n	80014fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001502:	4b36      	ldr	r3, [pc, #216]	@ (80015dc <HAL_ADC_Start_DMA+0x1cc>)
 8001504:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150a:	4a35      	ldr	r2, [pc, #212]	@ (80015e0 <HAL_ADC_Start_DMA+0x1d0>)
 800150c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001512:	4a34      	ldr	r2, [pc, #208]	@ (80015e4 <HAL_ADC_Start_DMA+0x1d4>)
 8001514:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151a:	4a33      	ldr	r2, [pc, #204]	@ (80015e8 <HAL_ADC_Start_DMA+0x1d8>)
 800151c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001526:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001536:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001546:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	334c      	adds	r3, #76	@ 0x4c
 8001552:	4619      	mov	r1, r3
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f000 fcbe 	bl	8001ed8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10f      	bne.n	8001588 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d129      	bne.n	80015ca <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	e020      	b.n	80015ca <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <HAL_ADC_Start_DMA+0x1dc>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d11b      	bne.n	80015ca <HAL_ADC_Start_DMA+0x1ba>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d114      	bne.n	80015ca <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e00b      	b.n	80015ca <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f043 0210 	orr.w	r2, r3, #16
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f043 0201 	orr.w	r2, r3, #1
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000030 	.word	0x20000030
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	40012300 	.word	0x40012300
 80015e0:	08001a55 	.word	0x08001a55
 80015e4:	08001b0f 	.word	0x08001b0f
 80015e8:	08001b2b 	.word	0x08001b2b
 80015ec:	40012000 	.word	0x40012000

080015f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1c>
 8001630:	2302      	movs	r3, #2
 8001632:	e105      	b.n	8001840 <HAL_ADC_ConfigChannel+0x228>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b09      	cmp	r3, #9
 8001642:	d925      	bls.n	8001690 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68d9      	ldr	r1, [r3, #12]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	3b1e      	subs	r3, #30
 800165a:	2207      	movs	r2, #7
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43da      	mvns	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	400a      	ands	r2, r1
 8001668:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68d9      	ldr	r1, [r3, #12]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	4603      	mov	r3, r0
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4403      	add	r3, r0
 8001682:	3b1e      	subs	r3, #30
 8001684:	409a      	lsls	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	e022      	b.n	80016d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6919      	ldr	r1, [r3, #16]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	2207      	movs	r2, #7
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	400a      	ands	r2, r1
 80016b2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6919      	ldr	r1, [r3, #16]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4403      	add	r3, r0
 80016cc:	409a      	lsls	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d824      	bhi.n	8001728 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	3b05      	subs	r3, #5
 80016f0:	221f      	movs	r2, #31
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	400a      	ands	r2, r1
 80016fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	4618      	mov	r0, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	3b05      	subs	r3, #5
 800171a:	fa00 f203 	lsl.w	r2, r0, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	635a      	str	r2, [r3, #52]	@ 0x34
 8001726:	e04c      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b0c      	cmp	r3, #12
 800172e:	d824      	bhi.n	800177a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b23      	subs	r3, #35	@ 0x23
 8001742:	221f      	movs	r2, #31
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43da      	mvns	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	400a      	ands	r2, r1
 8001750:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	3b23      	subs	r3, #35	@ 0x23
 800176c:	fa00 f203 	lsl.w	r2, r0, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	631a      	str	r2, [r3, #48]	@ 0x30
 8001778:	e023      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b41      	subs	r3, #65	@ 0x41
 800178c:	221f      	movs	r2, #31
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	400a      	ands	r2, r1
 800179a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3b41      	subs	r3, #65	@ 0x41
 80017b6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <HAL_ADC_ConfigChannel+0x234>)
 80017c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a21      	ldr	r2, [pc, #132]	@ (8001850 <HAL_ADC_ConfigChannel+0x238>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d109      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1cc>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b12      	cmp	r3, #18
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <HAL_ADC_ConfigChannel+0x238>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d123      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x21e>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d003      	beq.n	80017fe <HAL_ADC_ConfigChannel+0x1e6>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b11      	cmp	r3, #17
 80017fc:	d11b      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d111      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <HAL_ADC_ConfigChannel+0x23c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a10      	ldr	r2, [pc, #64]	@ (8001858 <HAL_ADC_ConfigChannel+0x240>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0c9a      	lsrs	r2, r3, #18
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001828:	e002      	b.n	8001830 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	3b01      	subs	r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f9      	bne.n	800182a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40012300 	.word	0x40012300
 8001850:	40012000 	.word	0x40012000
 8001854:	20000030 	.word	0x20000030
 8001858:	431bde83 	.word	0x431bde83

0800185c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001864:	4b79      	ldr	r3, [pc, #484]	@ (8001a4c <ADC_Init+0x1f0>)
 8001866:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	431a      	orrs	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	021a      	lsls	r2, r3, #8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6899      	ldr	r1, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ee:	4a58      	ldr	r2, [pc, #352]	@ (8001a50 <ADC_Init+0x1f4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d022      	beq.n	800193a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001902:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6899      	ldr	r1, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6899      	ldr	r1, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	e00f      	b.n	800195a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001958:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0202 	bic.w	r2, r2, #2
 8001968:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6899      	ldr	r1, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7e1b      	ldrb	r3, [r3, #24]
 8001974:	005a      	lsls	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01b      	beq.n	80019c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001996:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6859      	ldr	r1, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	3b01      	subs	r3, #1
 80019b4:	035a      	lsls	r2, r3, #13
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	e007      	b.n	80019d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	051a      	lsls	r2, r3, #20
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6899      	ldr	r1, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a12:	025a      	lsls	r2, r3, #9
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	029a      	lsls	r2, r3, #10
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	609a      	str	r2, [r3, #8]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40012300 	.word	0x40012300
 8001a50:	0f000001 	.word	0x0f000001

08001a54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d13c      	bne.n	8001ae8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d12b      	bne.n	8001ae0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d127      	bne.n	8001ae0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a96:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d119      	bne.n	8001ae0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0220 	bic.w	r2, r2, #32
 8001aba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f7ff f8c9 	bl	8000c78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ae6:	e00e      	b.n	8001b06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff fd85 	bl	8001604 <HAL_ADC_ErrorCallback>
}
 8001afa:	e004      	b.n	8001b06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	4798      	blx	r3
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7ff fd67 	bl	80015f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b36:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2240      	movs	r2, #64	@ 0x40
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	f043 0204 	orr.w	r2, r3, #4
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fd5a 	bl	8001604 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4907      	ldr	r1, [pc, #28]	@ (8001bf4 <__NVIC_EnableIRQ+0x38>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	@ (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff8e 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff29 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff3e 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff8e 	bl	8001c4c <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff31 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffa2 	bl	8001cb4 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff face 	bl	8001328 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e099      	b.n	8001ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db8:	e00f      	b.n	8001dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dba:	f7ff fab5 	bl	8001328 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d908      	bls.n	8001dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e078      	b.n	8001ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e8      	bne.n	8001dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4b38      	ldr	r3, [pc, #224]	@ (8001ed4 <HAL_DMA_Init+0x158>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d107      	bne.n	8001e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f023 0307 	bic.w	r3, r3, #7
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d117      	bne.n	8001e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00e      	beq.n	8001e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fa6f 	bl	8002364 <DMA_CheckFifoParam>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2240      	movs	r2, #64	@ 0x40
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e016      	b.n	8001ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fa26 	bl	80022f8 <DMA_CalcBaseAndBitshift>
 8001eac:	4603      	mov	r3, r0
 8001eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb4:	223f      	movs	r2, #63	@ 0x3f
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	f010803f 	.word	0xf010803f

08001ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_DMA_Start_IT+0x26>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e040      	b.n	8001f80 <HAL_DMA_Start_IT+0xa8>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d12f      	bne.n	8001f72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f9b8 	bl	800229c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f30:	223f      	movs	r2, #63	@ 0x3f
 8001f32:	409a      	lsls	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0216 	orr.w	r2, r2, #22
 8001f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0208 	orr.w	r2, r2, #8
 8001f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e005      	b.n	8001f7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f94:	4b8e      	ldr	r3, [pc, #568]	@ (80021d0 <HAL_DMA_IRQHandler+0x248>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a8e      	ldr	r2, [pc, #568]	@ (80021d4 <HAL_DMA_IRQHandler+0x24c>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0a9b      	lsrs	r3, r3, #10
 8001fa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01a      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0204 	bic.w	r2, r2, #4
 8001fda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002016:	2201      	movs	r2, #1
 8002018:	409a      	lsls	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	f043 0202 	orr.w	r2, r3, #2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202e:	2204      	movs	r2, #4
 8002030:	409a      	lsls	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d012      	beq.n	8002060 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00b      	beq.n	8002060 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	2204      	movs	r2, #4
 800204e:	409a      	lsls	r2, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	f043 0204 	orr.w	r2, r3, #4
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	2210      	movs	r2, #16
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d043      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d03c      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002082:	2210      	movs	r2, #16
 8002084:	409a      	lsls	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d018      	beq.n	80020ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d108      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d024      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
 80020b6:	e01f      	b.n	80020f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01b      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
 80020c8:	e016      	b.n	80020f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0208 	bic.w	r2, r2, #8
 80020e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	2220      	movs	r2, #32
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 808f 	beq.w	8002228 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 8087 	beq.w	8002228 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211e:	2220      	movs	r2, #32
 8002120:	409a      	lsls	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b05      	cmp	r3, #5
 8002130:	d136      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0216 	bic.w	r2, r2, #22
 8002140:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002150:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <HAL_DMA_IRQHandler+0x1da>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0208 	bic.w	r2, r2, #8
 8002170:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002176:	223f      	movs	r2, #63	@ 0x3f
 8002178:	409a      	lsls	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002192:	2b00      	cmp	r3, #0
 8002194:	d07e      	beq.n	8002294 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
        }
        return;
 800219e:	e079      	b.n	8002294 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01d      	beq.n	80021ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10d      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d031      	beq.n	8002228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
 80021cc:	e02c      	b.n	8002228 <HAL_DMA_IRQHandler+0x2a0>
 80021ce:	bf00      	nop
 80021d0:	20000030 	.word	0x20000030
 80021d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d023      	beq.n	8002228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
 80021e8:	e01e      	b.n	8002228 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10f      	bne.n	8002218 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0210 	bic.w	r2, r2, #16
 8002206:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	2b00      	cmp	r3, #0
 800222e:	d032      	beq.n	8002296 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d022      	beq.n	8002282 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2205      	movs	r2, #5
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	3301      	adds	r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	d307      	bcc.n	8002270 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f2      	bne.n	8002254 <HAL_DMA_IRQHandler+0x2cc>
 800226e:	e000      	b.n	8002272 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002270:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
 8002292:	e000      	b.n	8002296 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002294:	bf00      	nop
    }
  }
}
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b40      	cmp	r3, #64	@ 0x40
 80022c8:	d108      	bne.n	80022dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022da:	e007      	b.n	80022ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	60da      	str	r2, [r3, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3b10      	subs	r3, #16
 8002308:	4a14      	ldr	r2, [pc, #80]	@ (800235c <DMA_CalcBaseAndBitshift+0x64>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002312:	4a13      	ldr	r2, [pc, #76]	@ (8002360 <DMA_CalcBaseAndBitshift+0x68>)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d909      	bls.n	800233a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	1d1a      	adds	r2, r3, #4
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	659a      	str	r2, [r3, #88]	@ 0x58
 8002338:	e007      	b.n	800234a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	aaaaaaab 	.word	0xaaaaaaab
 8002360:	0800a120 	.word	0x0800a120

08002364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d11f      	bne.n	80023be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d856      	bhi.n	8002432 <DMA_CheckFifoParam+0xce>
 8002384:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <DMA_CheckFifoParam+0x28>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	0800239d 	.word	0x0800239d
 8002390:	080023af 	.word	0x080023af
 8002394:	0800239d 	.word	0x0800239d
 8002398:	08002433 	.word	0x08002433
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d046      	beq.n	8002436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ac:	e043      	b.n	8002436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023b6:	d140      	bne.n	800243a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023bc:	e03d      	b.n	800243a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023c6:	d121      	bne.n	800240c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d837      	bhi.n	800243e <DMA_CheckFifoParam+0xda>
 80023ce:	a201      	add	r2, pc, #4	@ (adr r2, 80023d4 <DMA_CheckFifoParam+0x70>)
 80023d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d4:	080023e5 	.word	0x080023e5
 80023d8:	080023eb 	.word	0x080023eb
 80023dc:	080023e5 	.word	0x080023e5
 80023e0:	080023fd 	.word	0x080023fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e030      	b.n	800244c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d025      	beq.n	8002442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023fa:	e022      	b.n	8002442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002404:	d11f      	bne.n	8002446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800240a:	e01c      	b.n	8002446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d903      	bls.n	800241a <DMA_CheckFifoParam+0xb6>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d003      	beq.n	8002420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002418:	e018      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      break;
 800241e:	e015      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00e      	beq.n	800244a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      break;
 8002430:	e00b      	b.n	800244a <DMA_CheckFifoParam+0xe6>
      break;
 8002432:	bf00      	nop
 8002434:	e00a      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
 8002438:	e008      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 800243a:	bf00      	nop
 800243c:	e006      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
 8002440:	e004      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e002      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;   
 8002446:	bf00      	nop
 8002448:	e000      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
    }
  } 
  
  return status; 
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	@ 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	e159      	b.n	800272c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	429a      	cmp	r2, r3
 8002492:	f040 8148 	bne.w	8002726 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d005      	beq.n	80024ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d130      	bne.n	8002510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 0201 	and.w	r2, r3, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b03      	cmp	r3, #3
 800251a:	d017      	beq.n	800254c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d123      	bne.n	80025a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a2 	beq.w	8002726 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b57      	ldr	r3, [pc, #348]	@ (8002744 <HAL_GPIO_Init+0x2e8>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	4a56      	ldr	r2, [pc, #344]	@ (8002744 <HAL_GPIO_Init+0x2e8>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025f2:	4b54      	ldr	r3, [pc, #336]	@ (8002744 <HAL_GPIO_Init+0x2e8>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fe:	4a52      	ldr	r2, [pc, #328]	@ (8002748 <HAL_GPIO_Init+0x2ec>)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	220f      	movs	r2, #15
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a49      	ldr	r2, [pc, #292]	@ (800274c <HAL_GPIO_Init+0x2f0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d019      	beq.n	800265e <HAL_GPIO_Init+0x202>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a48      	ldr	r2, [pc, #288]	@ (8002750 <HAL_GPIO_Init+0x2f4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_GPIO_Init+0x1fe>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a47      	ldr	r2, [pc, #284]	@ (8002754 <HAL_GPIO_Init+0x2f8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00d      	beq.n	8002656 <HAL_GPIO_Init+0x1fa>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a46      	ldr	r2, [pc, #280]	@ (8002758 <HAL_GPIO_Init+0x2fc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <HAL_GPIO_Init+0x1f6>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a45      	ldr	r2, [pc, #276]	@ (800275c <HAL_GPIO_Init+0x300>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d101      	bne.n	800264e <HAL_GPIO_Init+0x1f2>
 800264a:	2304      	movs	r3, #4
 800264c:	e008      	b.n	8002660 <HAL_GPIO_Init+0x204>
 800264e:	2307      	movs	r3, #7
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x204>
 8002652:	2303      	movs	r3, #3
 8002654:	e004      	b.n	8002660 <HAL_GPIO_Init+0x204>
 8002656:	2302      	movs	r3, #2
 8002658:	e002      	b.n	8002660 <HAL_GPIO_Init+0x204>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x204>
 800265e:	2300      	movs	r3, #0
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	f002 0203 	and.w	r2, r2, #3
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	4093      	lsls	r3, r2
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002670:	4935      	ldr	r1, [pc, #212]	@ (8002748 <HAL_GPIO_Init+0x2ec>)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267e:	4b38      	ldr	r3, [pc, #224]	@ (8002760 <HAL_GPIO_Init+0x304>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002760 <HAL_GPIO_Init+0x304>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002760 <HAL_GPIO_Init+0x304>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026cc:	4a24      	ldr	r2, [pc, #144]	@ (8002760 <HAL_GPIO_Init+0x304>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026d2:	4b23      	ldr	r3, [pc, #140]	@ (8002760 <HAL_GPIO_Init+0x304>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002760 <HAL_GPIO_Init+0x304>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026fc:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <HAL_GPIO_Init+0x304>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002720:	4a0f      	ldr	r2, [pc, #60]	@ (8002760 <HAL_GPIO_Init+0x304>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3301      	adds	r3, #1
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b0f      	cmp	r3, #15
 8002730:	f67f aea2 	bls.w	8002478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3724      	adds	r7, #36	@ 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	40013800 	.word	0x40013800
 800274c:	40020000 	.word	0x40020000
 8002750:	40020400 	.word	0x40020400
 8002754:	40020800 	.word	0x40020800
 8002758:	40020c00 	.word	0x40020c00
 800275c:	40021000 	.word	0x40021000
 8002760:	40013c00 	.word	0x40013c00

08002764 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af02      	add	r7, sp, #8
 800276a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e101      	b.n	800297a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f006 fc59 	bl	8009048 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027a4:	d102      	bne.n	80027ac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f003 f85c 	bl	800586e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7c1a      	ldrb	r2, [r3, #16]
 80027be:	f88d 2000 	strb.w	r2, [sp]
 80027c2:	3304      	adds	r3, #4
 80027c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c6:	f002 ff3b 	bl	8005640 <USB_CoreInit>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0ce      	b.n	800297a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 f854 	bl	8005890 <USB_SetCurrentMode>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e0bf      	b.n	800297a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
 80027fe:	e04a      	b.n	8002896 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	3315      	adds	r3, #21
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3314      	adds	r3, #20
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	b298      	uxth	r0, r3
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	332e      	adds	r3, #46	@ 0x2e
 800283c:	4602      	mov	r2, r0
 800283e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	3318      	adds	r3, #24
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	331c      	adds	r3, #28
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	3320      	adds	r3, #32
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	3324      	adds	r3, #36	@ 0x24
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	3301      	adds	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	791b      	ldrb	r3, [r3, #4]
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	429a      	cmp	r2, r3
 800289e:	d3af      	bcc.n	8002800 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	e044      	b.n	8002930 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	3301      	adds	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	791b      	ldrb	r3, [r3, #4]
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3b5      	bcc.n	80028a6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	7c1a      	ldrb	r2, [r3, #16]
 8002942:	f88d 2000 	strb.w	r2, [sp]
 8002946:	3304      	adds	r3, #4
 8002948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294a:	f002 ffed 	bl	8005928 <USB_DevInit>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e00c      	b.n	800297a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f004 f831 	bl	80069da <USB_DevDisconnect>

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_PCD_Start+0x1c>
 800299a:	2302      	movs	r3, #2
 800299c:	e022      	b.n	80029e4 <HAL_PCD_Start+0x62>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 ff3e 	bl	800584c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 ffdf 	bl	8006998 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b08d      	sub	sp, #52	@ 0x34
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 f89d 	bl	8006b42 <USB_GetMode>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 848c 	bne.w	8003328 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f004 f801 	bl	8006a1c <USB_ReadInterrupts>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8482 	beq.w	8003326 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f003 ffee 	bl	8006a1c <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d107      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f002 0202 	and.w	r2, r2, #2
 8002a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 ffdc 	bl	8006a1c <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d161      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0210 	bic.w	r2, r2, #16
 8002a7c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f003 020f 	and.w	r2, r3, #15
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	0c5b      	lsrs	r3, r3, #17
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d124      	bne.n	8002af4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d035      	beq.n	8002b22 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6a38      	ldr	r0, [r7, #32]
 8002aca:	f003 fe13 	bl	80066f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ada:	441a      	add	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aec:	441a      	add	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	615a      	str	r2, [r3, #20]
 8002af2:	e016      	b.n	8002b22 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	0c5b      	lsrs	r3, r3, #17
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d110      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b06:	2208      	movs	r2, #8
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6a38      	ldr	r0, [r7, #32]
 8002b0c:	f003 fdf2 	bl	80066f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b1c:	441a      	add	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0210 	orr.w	r2, r2, #16
 8002b30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 ff70 	bl	8006a1c <USB_ReadInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b46:	f040 80a7 	bne.w	8002c98 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f003 ff75 	bl	8006a42 <USB_ReadDevAllOutEpInterrupt>
 8002b58:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b5a:	e099      	b.n	8002c90 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 808e 	beq.w	8002c84 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 ff99 	bl	8006aaa <USB_ReadDevOutEPInterrupt>
 8002b78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	2301      	movs	r3, #1
 8002b94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fea1 	bl	80038e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 ff77 	bl	8003ab0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2310      	movs	r3, #16
 8002bdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d030      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf0:	2b80      	cmp	r3, #128	@ 0x80
 8002bf2:	d109      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c06:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	78db      	ldrb	r3, [r3, #3]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d108      	bne.n	8002c38 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	4619      	mov	r1, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f006 fb04 	bl	8009240 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c44:	461a      	mov	r2, r3
 8002c46:	2302      	movs	r3, #2
 8002c48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c60:	461a      	mov	r2, r3
 8002c62:	2320      	movs	r3, #32
 8002c64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	3301      	adds	r3, #1
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f47f af62 	bne.w	8002b5c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 febd 	bl	8006a1c <USB_ReadInterrupts>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ca8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cac:	f040 80db 	bne.w	8002e66 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f003 fede 	bl	8006a76 <USB_ReadDevAllInEpInterrupt>
 8002cba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002cc0:	e0cd      	b.n	8002e5e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80c2 	beq.w	8002e52 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 ff04 	bl	8006ae6 <USB_ReadDevInEPInterrupt>
 8002cde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d057      	beq.n	8002d9a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69f9      	ldr	r1, [r7, #28]
 8002d06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	799b      	ldrb	r3, [r3, #6]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d132      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3320      	adds	r3, #32
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4403      	add	r3, r0
 8002d48:	331c      	adds	r3, #28
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4419      	add	r1, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4403      	add	r3, r0
 8002d5c:	3320      	adds	r3, #32
 8002d5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d113      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x3a2>
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3324      	adds	r3, #36	@ 0x24
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d108      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d86:	461a      	mov	r2, r3
 8002d88:	2101      	movs	r1, #1
 8002d8a:	f003 ff0b 	bl	8006ba4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f006 f9d8 	bl	800914a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db0:	461a      	mov	r2, r3
 8002db2:	2308      	movs	r3, #8
 8002db4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2310      	movs	r3, #16
 8002dd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002de8:	461a      	mov	r2, r3
 8002dea:	2340      	movs	r3, #64	@ 0x40
 8002dec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d023      	beq.n	8002e40 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dfa:	6a38      	ldr	r0, [r7, #32]
 8002dfc:	f002 fef8 	bl	8005bf0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	3310      	adds	r3, #16
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	3304      	adds	r3, #4
 8002e12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	78db      	ldrb	r3, [r3, #3]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d108      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f006 fa1b 	bl	8009264 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fcbb 	bl	80037c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	3301      	adds	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f47f af2e 	bne.w	8002cc2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fdd6 	bl	8006a1c <USB_ReadInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e7a:	d122      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d108      	bne.n	8002eac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fea1 	bl	8003bec <HAL_PCDEx_LPM_Callback>
 8002eaa:	e002      	b.n	8002eb2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f006 f9b9 	bl	8009224 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fda8 	bl	8006a1c <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ed6:	d112      	bne.n	8002efe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d102      	bne.n	8002eee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f006 f975 	bl	80091d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002efc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fd8a 	bl	8006a1c <USB_ReadInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f12:	f040 80b7 	bne.w	8003084 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2110      	movs	r1, #16
 8002f30:	4618      	mov	r0, r3
 8002f32:	f002 fe5d 	bl	8005bf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f36:	2300      	movs	r3, #0
 8002f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f3a:	e046      	b.n	8002fca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f60:	0151      	lsls	r1, r2, #5
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	440a      	add	r2, r1
 8002f66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f94:	0151      	lsls	r1, r2, #5
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	440a      	add	r2, r1
 8002f9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fa2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb4:	0151      	lsls	r1, r2, #5
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	440a      	add	r2, r1
 8002fba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fc2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	791b      	ldrb	r3, [r3, #4]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d3b2      	bcc.n	8002f3c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fe4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002fe8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7bdb      	ldrb	r3, [r3, #15]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d016      	beq.n	8003020 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003002:	f043 030b 	orr.w	r3, r3, #11
 8003006:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003018:	f043 030b 	orr.w	r3, r3, #11
 800301c:	6453      	str	r3, [r2, #68]	@ 0x44
 800301e:	e015      	b.n	800304c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800302e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003032:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003036:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003046:	f043 030b 	orr.w	r3, r3, #11
 800304a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800305a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800305e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800306e:	461a      	mov	r2, r3
 8003070:	f003 fd98 	bl	8006ba4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fcc7 	bl	8006a1c <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003098:	d123      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 fd5d 	bl	8006b5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 fe1a 	bl	8005ce2 <USB_GetDevSpeed>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681c      	ldr	r4, [r3, #0]
 80030ba:	f001 f9c7 	bl	800444c <HAL_RCC_GetHCLKFreq>
 80030be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030c4:	461a      	mov	r2, r3
 80030c6:	4620      	mov	r0, r4
 80030c8:	f002 fb1e 	bl	8005708 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f006 f864 	bl	800919a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80030e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fc98 	bl	8006a1c <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d10a      	bne.n	800310c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f006 f841 	bl	800917e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f002 0208 	and.w	r2, r2, #8
 800310a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f003 fc83 	bl	8006a1c <USB_ReadInterrupts>
 8003116:	4603      	mov	r3, r0
 8003118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311c:	2b80      	cmp	r3, #128	@ 0x80
 800311e:	d123      	bne.n	8003168 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800312c:	2301      	movs	r3, #1
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003130:	e014      	b.n	800315c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d105      	bne.n	8003156 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fb08 	bl	8003766 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	3301      	adds	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	791b      	ldrb	r3, [r3, #4]
 8003160:	461a      	mov	r2, r3
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	4293      	cmp	r3, r2
 8003166:	d3e4      	bcc.n	8003132 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fc55 	bl	8006a1c <USB_ReadInterrupts>
 8003172:	4603      	mov	r3, r0
 8003174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003178:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800317c:	d13c      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800317e:	2301      	movs	r3, #1
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
 8003182:	e02b      	b.n	80031dc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3318      	adds	r3, #24
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d115      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da12      	bge.n	80031d6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	3317      	adds	r3, #23
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4619      	mov	r1, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fac8 	bl	8003766 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	3301      	adds	r3, #1
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	791b      	ldrb	r3, [r3, #4]
 80031e0:	461a      	mov	r2, r3
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d3cd      	bcc.n	8003184 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80031f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 fc0d 	bl	8006a1c <USB_ReadInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003208:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800320c:	d156      	bne.n	80032bc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800320e:	2301      	movs	r3, #1
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
 8003212:	e045      	b.n	80032a0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d12e      	bne.n	800329a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800323c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	da2b      	bge.n	800329a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800324e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003252:	429a      	cmp	r2, r3
 8003254:	d121      	bne.n	800329a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003296:	6053      	str	r3, [r2, #4]
            break;
 8003298:	e008      	b.n	80032ac <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	3301      	adds	r3, #1
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	791b      	ldrb	r3, [r3, #4]
 80032a4:	461a      	mov	r2, r3
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d3b3      	bcc.n	8003214 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80032ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 fbab 	bl	8006a1c <USB_ReadInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d0:	d10a      	bne.n	80032e8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f005 ffd8 	bl	8009288 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 fb95 	bl	8006a1c <USB_ReadInterrupts>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d115      	bne.n	8003328 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f005 ffc8 	bl	80092a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	e000      	b.n	8003328 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003326:	bf00      	nop
    }
  }
}
 8003328:	3734      	adds	r7, #52	@ 0x34
 800332a:	46bd      	mov	sp, r7
 800332c:	bd90      	pop	{r4, r7, pc}

0800332e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_PCD_SetAddress+0x1a>
 8003344:	2302      	movs	r3, #2
 8003346:	e012      	b.n	800336e <HAL_PCD_SetAddress+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f003 faf4 	bl	800694c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	4608      	mov	r0, r1
 8003380:	4611      	mov	r1, r2
 8003382:	461a      	mov	r2, r3
 8003384:	4603      	mov	r3, r0
 8003386:	70fb      	strb	r3, [r7, #3]
 8003388:	460b      	mov	r3, r1
 800338a:	803b      	strh	r3, [r7, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003398:	2b00      	cmp	r3, #0
 800339a:	da0f      	bge.n	80033bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 020f 	and.w	r2, r3, #15
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	3310      	adds	r3, #16
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	3304      	adds	r3, #4
 80033b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	705a      	strb	r2, [r3, #1]
 80033ba:	e00f      	b.n	80033dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	f003 020f 	and.w	r2, r3, #15
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033e8:	883a      	ldrh	r2, [r7, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	78ba      	ldrb	r2, [r7, #2]
 80033f2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003406:	78bb      	ldrb	r3, [r7, #2]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d102      	bne.n	8003412 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_PCD_EP_Open+0xaa>
 800341c:	2302      	movs	r3, #2
 800341e:	e00e      	b.n	800343e <HAL_PCD_EP_Open+0xc8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	4618      	mov	r0, r3
 8003430:	f002 fc7c 	bl	8005d2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800343c:	7afb      	ldrb	r3, [r7, #11]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003456:	2b00      	cmp	r3, #0
 8003458:	da0f      	bge.n	800347a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3310      	adds	r3, #16
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	705a      	strb	r2, [r3, #1]
 8003478:	e00f      	b.n	800349a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	3304      	adds	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_PCD_EP_Close+0x6e>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e00e      	b.n	80034d2 <HAL_PCD_EP_Close+0x8c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68f9      	ldr	r1, [r7, #12]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f002 fcba 	bl	8005e3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	460b      	mov	r3, r1
 80034e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ea:	7afb      	ldrb	r3, [r7, #11]
 80034ec:	f003 020f 	and.w	r2, r3, #15
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	3304      	adds	r3, #4
 8003502:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2200      	movs	r2, #0
 8003514:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800351c:	7afb      	ldrb	r3, [r7, #11]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	b2da      	uxtb	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	799b      	ldrb	r3, [r3, #6]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d102      	bne.n	8003536 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	799b      	ldrb	r3, [r3, #6]
 800353e:	461a      	mov	r2, r3
 8003540:	6979      	ldr	r1, [r7, #20]
 8003542:	f002 fd57 	bl	8005ff4 <USB_EPStartXfer>

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	460b      	mov	r3, r1
 800358e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003590:	7afb      	ldrb	r3, [r7, #11]
 8003592:	f003 020f 	and.w	r2, r3, #15
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	3310      	adds	r3, #16
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2200      	movs	r2, #0
 80035b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2201      	movs	r2, #1
 80035be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c0:	7afb      	ldrb	r3, [r7, #11]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	799b      	ldrb	r3, [r3, #6]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d102      	bne.n	80035da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	799b      	ldrb	r3, [r3, #6]
 80035e2:	461a      	mov	r2, r3
 80035e4:	6979      	ldr	r1, [r7, #20]
 80035e6:	f002 fd05 	bl	8005ff4 <USB_EPStartXfer>

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	7912      	ldrb	r2, [r2, #4]
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e04f      	b.n	80036b2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	da0f      	bge.n	800363a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3310      	adds	r3, #16
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	3304      	adds	r3, #4
 8003630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	705a      	strb	r2, [r3, #1]
 8003638:	e00d      	b.n	8003656 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4413      	add	r3, r2
 800364c:	3304      	adds	r3, #4
 800364e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	b2da      	uxtb	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_PCD_EP_SetStall+0x82>
 8003672:	2302      	movs	r3, #2
 8003674:	e01d      	b.n	80036b2 <HAL_PCD_EP_SetStall+0xbe>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	4618      	mov	r0, r3
 8003686:	f003 f88d 	bl	80067a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7999      	ldrb	r1, [r3, #6]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036a2:	461a      	mov	r2, r3
 80036a4:	f003 fa7e 	bl	8006ba4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	7912      	ldrb	r2, [r2, #4]
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e042      	b.n	800375e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	da0f      	bge.n	8003700 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	f003 020f 	and.w	r2, r3, #15
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	3310      	adds	r3, #16
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4413      	add	r3, r2
 80036f4:	3304      	adds	r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	705a      	strb	r2, [r3, #1]
 80036fe:	e00f      	b.n	8003720 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	f003 020f 	and.w	r2, r3, #15
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	3304      	adds	r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_PCD_EP_ClrStall+0x86>
 800373c:	2302      	movs	r3, #2
 800373e:	e00e      	b.n	800375e <HAL_PCD_EP_ClrStall+0xa4>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68f9      	ldr	r1, [r7, #12]
 800374e:	4618      	mov	r0, r3
 8003750:	f003 f896 	bl	8006880 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	460b      	mov	r3, r1
 8003770:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003776:	2b00      	cmp	r3, #0
 8003778:	da0c      	bge.n	8003794 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	f003 020f 	and.w	r2, r3, #15
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	3310      	adds	r3, #16
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	e00c      	b.n	80037ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 020f 	and.w	r2, r3, #15
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	3304      	adds	r3, #4
 80037ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 feb5 	bl	8006524 <USB_EPStopXfer>
 80037ba:	4603      	mov	r3, r0
 80037bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80037be:	7afb      	ldrb	r3, [r7, #11]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	@ 0x28
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	3310      	adds	r3, #16
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4413      	add	r3, r2
 80037ec:	3304      	adds	r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d901      	bls.n	8003800 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e06b      	b.n	80038d8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	429a      	cmp	r2, r3
 8003814:	d902      	bls.n	800381c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	3303      	adds	r3, #3
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003824:	e02a      	b.n	800387c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	429a      	cmp	r2, r3
 800383a:	d902      	bls.n	8003842 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3303      	adds	r3, #3
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	68d9      	ldr	r1, [r3, #12]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	4603      	mov	r3, r0
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f002 ff0a 	bl	8006678 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	441a      	add	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	441a      	add	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	429a      	cmp	r2, r3
 8003890:	d809      	bhi.n	80038a6 <PCD_WriteEmptyTxFifo+0xde>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800389a:	429a      	cmp	r2, r3
 800389c:	d203      	bcs.n	80038a6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1bf      	bne.n	8003826 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d811      	bhi.n	80038d6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	2201      	movs	r2, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	6939      	ldr	r1, [r7, #16]
 80038ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038d2:	4013      	ands	r3, r2
 80038d4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3720      	adds	r7, #32
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	333c      	adds	r3, #60	@ 0x3c
 80038f8:	3304      	adds	r3, #4
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	799b      	ldrb	r3, [r3, #6]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d17b      	bne.n	8003a0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d015      	beq.n	800394c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	4a61      	ldr	r2, [pc, #388]	@ (8003aa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	f240 80b9 	bls.w	8003a9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80b3 	beq.w	8003a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003942:	461a      	mov	r2, r3
 8003944:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003948:	6093      	str	r3, [r2, #8]
 800394a:	e0a7      	b.n	8003a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003962:	461a      	mov	r2, r3
 8003964:	2320      	movs	r3, #32
 8003966:	6093      	str	r3, [r2, #8]
 8003968:	e098      	b.n	8003a9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 8093 	bne.w	8003a9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	4a4b      	ldr	r2, [pc, #300]	@ (8003aa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d90f      	bls.n	800399e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003994:	461a      	mov	r2, r3
 8003996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800399a:	6093      	str	r3, [r2, #8]
 800399c:	e07e      	b.n	8003a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	4413      	add	r3, r2
 80039b0:	3304      	adds	r3, #4
 80039b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a1a      	ldr	r2, [r3, #32]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	0159      	lsls	r1, r3, #5
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	440b      	add	r3, r1
 80039c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ca:	1ad2      	subs	r2, r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d114      	bne.n	8003a00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039e8:	461a      	mov	r2, r3
 80039ea:	2101      	movs	r1, #1
 80039ec:	f003 f8da 	bl	8006ba4 <USB_EP0_OutStart>
 80039f0:	e006      	b.n	8003a00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	441a      	add	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f005 fb84 	bl	8009114 <HAL_PCD_DataOutStageCallback>
 8003a0c:	e046      	b.n	8003a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	4a26      	ldr	r2, [pc, #152]	@ (8003aac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d124      	bne.n	8003a60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a32:	6093      	str	r3, [r2, #8]
 8003a34:	e032      	b.n	8003a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2320      	movs	r3, #32
 8003a50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	4619      	mov	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f005 fb5b 	bl	8009114 <HAL_PCD_DataOutStageCallback>
 8003a5e:	e01d      	b.n	8003a9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d114      	bne.n	8003a90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d108      	bne.n	8003a90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f003 f88a 	bl	8006ba4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	4619      	mov	r1, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f005 fb3c 	bl	8009114 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	4f54300a 	.word	0x4f54300a
 8003aac:	4f54310a 	.word	0x4f54310a

08003ab0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	333c      	adds	r3, #60	@ 0x3c
 8003ac8:	3304      	adds	r3, #4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a15      	ldr	r2, [pc, #84]	@ (8003b38 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d90e      	bls.n	8003b04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d009      	beq.n	8003b04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003afc:	461a      	mov	r2, r3
 8003afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f005 faf3 	bl	80090f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d90c      	bls.n	8003b2c <PCD_EP_OutSetupPacket_int+0x7c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	799b      	ldrb	r3, [r3, #6]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d108      	bne.n	8003b2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b24:	461a      	mov	r2, r3
 8003b26:	2101      	movs	r1, #1
 8003b28:	f003 f83c 	bl	8006ba4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	4f54300a 	.word	0x4f54300a

08003b3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d107      	bne.n	8003b6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b5a:	883b      	ldrh	r3, [r7, #0]
 8003b5c:	0419      	lsls	r1, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b68:	e028      	b.n	8003bbc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	4413      	add	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	e00d      	b.n	8003b9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	3340      	adds	r3, #64	@ 0x40
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	4413      	add	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	3301      	adds	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d3ec      	bcc.n	8003b7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ba4:	883b      	ldrh	r3, [r7, #0]
 8003ba6:	0418      	lsls	r0, r3, #16
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6819      	ldr	r1, [r3, #0]
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	4302      	orrs	r2, r0
 8003bb4:	3340      	adds	r3, #64	@ 0x40
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e267      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d075      	beq.n	8003d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c22:	4b88      	ldr	r3, [pc, #544]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d00c      	beq.n	8003c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2e:	4b85      	ldr	r3, [pc, #532]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d112      	bne.n	8003c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3a:	4b82      	ldr	r3, [pc, #520]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	4b7e      	ldr	r3, [pc, #504]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d05b      	beq.n	8003d0c <HAL_RCC_OscConfig+0x108>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d157      	bne.n	8003d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e242      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c68:	d106      	bne.n	8003c78 <HAL_RCC_OscConfig+0x74>
 8003c6a:	4b76      	ldr	r3, [pc, #472]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a75      	ldr	r2, [pc, #468]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e01d      	b.n	8003cb4 <HAL_RCC_OscConfig+0xb0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c80:	d10c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x98>
 8003c82:	4b70      	ldr	r3, [pc, #448]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6f      	ldr	r2, [pc, #444]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a6c      	ldr	r2, [pc, #432]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e00b      	b.n	8003cb4 <HAL_RCC_OscConfig+0xb0>
 8003c9c:	4b69      	ldr	r3, [pc, #420]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a68      	ldr	r2, [pc, #416]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	4b66      	ldr	r3, [pc, #408]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a65      	ldr	r2, [pc, #404]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fb34 	bl	8001328 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fd fb30 	bl	8001328 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	@ 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e207      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0xc0>
 8003ce2:	e014      	b.n	8003d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fb20 	bl	8001328 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fd fb1c 	bl	8001328 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	@ 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e1f3      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	4b51      	ldr	r3, [pc, #324]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0xe8>
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d063      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d26:	4b47      	ldr	r3, [pc, #284]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d11c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d32:	4b44      	ldr	r3, [pc, #272]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d116      	bne.n	8003d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_RCC_OscConfig+0x152>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d001      	beq.n	8003d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e1c7      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d56:	4b3b      	ldr	r3, [pc, #236]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4937      	ldr	r1, [pc, #220]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6a:	e03a      	b.n	8003de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d74:	4b34      	ldr	r3, [pc, #208]	@ (8003e48 <HAL_RCC_OscConfig+0x244>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7a:	f7fd fad5 	bl	8001328 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d82:	f7fd fad1 	bl	8001328 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e1a8      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	4b2b      	ldr	r3, [pc, #172]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da0:	4b28      	ldr	r3, [pc, #160]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4925      	ldr	r1, [pc, #148]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
 8003db4:	e015      	b.n	8003de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db6:	4b24      	ldr	r3, [pc, #144]	@ (8003e48 <HAL_RCC_OscConfig+0x244>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd fab4 	bl	8001328 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc4:	f7fd fab0 	bl	8001328 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e187      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d036      	beq.n	8003e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d016      	beq.n	8003e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df6:	4b15      	ldr	r3, [pc, #84]	@ (8003e4c <HAL_RCC_OscConfig+0x248>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfc:	f7fd fa94 	bl	8001328 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e04:	f7fd fa90 	bl	8001328 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e167      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <HAL_RCC_OscConfig+0x240>)
 8003e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x200>
 8003e22:	e01b      	b.n	8003e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e24:	4b09      	ldr	r3, [pc, #36]	@ (8003e4c <HAL_RCC_OscConfig+0x248>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd fa7d 	bl	8001328 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e30:	e00e      	b.n	8003e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e32:	f7fd fa79 	bl	8001328 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d907      	bls.n	8003e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e150      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
 8003e44:	40023800 	.word	0x40023800
 8003e48:	42470000 	.word	0x42470000
 8003e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e50:	4b88      	ldr	r3, [pc, #544]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ea      	bne.n	8003e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8097 	beq.w	8003f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6e:	4b81      	ldr	r3, [pc, #516]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	4a7c      	ldr	r2, [pc, #496]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e96:	2301      	movs	r3, #1
 8003e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	4b77      	ldr	r3, [pc, #476]	@ (8004078 <HAL_RCC_OscConfig+0x474>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d118      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ea6:	4b74      	ldr	r3, [pc, #464]	@ (8004078 <HAL_RCC_OscConfig+0x474>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a73      	ldr	r2, [pc, #460]	@ (8004078 <HAL_RCC_OscConfig+0x474>)
 8003eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb2:	f7fd fa39 	bl	8001328 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eba:	f7fd fa35 	bl	8001328 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e10c      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8004078 <HAL_RCC_OscConfig+0x474>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d106      	bne.n	8003eee <HAL_RCC_OscConfig+0x2ea>
 8003ee0:	4b64      	ldr	r3, [pc, #400]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee4:	4a63      	ldr	r2, [pc, #396]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eec:	e01c      	b.n	8003f28 <HAL_RCC_OscConfig+0x324>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x30c>
 8003ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efa:	4a5e      	ldr	r2, [pc, #376]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003efc:	f043 0304 	orr.w	r3, r3, #4
 8003f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f02:	4b5c      	ldr	r3, [pc, #368]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f06:	4a5b      	ldr	r2, [pc, #364]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f0e:	e00b      	b.n	8003f28 <HAL_RCC_OscConfig+0x324>
 8003f10:	4b58      	ldr	r3, [pc, #352]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f14:	4a57      	ldr	r2, [pc, #348]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f1c:	4b55      	ldr	r3, [pc, #340]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f20:	4a54      	ldr	r2, [pc, #336]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003f22:	f023 0304 	bic.w	r3, r3, #4
 8003f26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d015      	beq.n	8003f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fd f9fa 	bl	8001328 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fd f9f6 	bl	8001328 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e0cb      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4e:	4b49      	ldr	r3, [pc, #292]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0ee      	beq.n	8003f38 <HAL_RCC_OscConfig+0x334>
 8003f5a:	e014      	b.n	8003f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5c:	f7fd f9e4 	bl	8001328 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fd f9e0 	bl	8001328 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0b5      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1ee      	bne.n	8003f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d105      	bne.n	8003f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8c:	4b39      	ldr	r3, [pc, #228]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	4a38      	ldr	r2, [pc, #224]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80a1 	beq.w	80040e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fa2:	4b34      	ldr	r3, [pc, #208]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d05c      	beq.n	8004068 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d141      	bne.n	800403a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb6:	4b31      	ldr	r3, [pc, #196]	@ (800407c <HAL_RCC_OscConfig+0x478>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fd f9b4 	bl	8001328 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fd f9b0 	bl	8001328 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e087      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	4b27      	ldr	r3, [pc, #156]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	019b      	lsls	r3, r3, #6
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	491b      	ldr	r1, [pc, #108]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800400c:	4b1b      	ldr	r3, [pc, #108]	@ (800407c <HAL_RCC_OscConfig+0x478>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fd f989 	bl	8001328 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401a:	f7fd f985 	bl	8001328 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e05c      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402c:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x416>
 8004038:	e054      	b.n	80040e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b10      	ldr	r3, [pc, #64]	@ (800407c <HAL_RCC_OscConfig+0x478>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fd f972 	bl	8001328 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd f96e 	bl	8001328 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e045      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405a:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <HAL_RCC_OscConfig+0x470>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x444>
 8004066:	e03d      	b.n	80040e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d107      	bne.n	8004080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e038      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
 8004074:	40023800 	.word	0x40023800
 8004078:	40007000 	.word	0x40007000
 800407c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004080:	4b1b      	ldr	r3, [pc, #108]	@ (80040f0 <HAL_RCC_OscConfig+0x4ec>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d028      	beq.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d121      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d11a      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040b0:	4013      	ands	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d111      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	3b01      	subs	r3, #1
 80040ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d107      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800

080040f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0cc      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004108:	4b68      	ldr	r3, [pc, #416]	@ (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d90c      	bls.n	8004130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b65      	ldr	r3, [pc, #404]	@ (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b63      	ldr	r3, [pc, #396]	@ (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0b8      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004148:	4b59      	ldr	r3, [pc, #356]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a58      	ldr	r2, [pc, #352]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004160:	4b53      	ldr	r3, [pc, #332]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a52      	ldr	r2, [pc, #328]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800416a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b50      	ldr	r3, [pc, #320]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	494d      	ldr	r1, [pc, #308]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d044      	beq.n	8004214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	4b47      	ldr	r3, [pc, #284]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d119      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e07f      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d107      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	4b3f      	ldr	r3, [pc, #252]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06f      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	4b3b      	ldr	r3, [pc, #236]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e067      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b37      	ldr	r3, [pc, #220]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4934      	ldr	r1, [pc, #208]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e4:	f7fd f8a0 	bl	8001328 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fd f89c 	bl	8001328 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e04f      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b2b      	ldr	r3, [pc, #172]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004214:	4b25      	ldr	r3, [pc, #148]	@ (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d20c      	bcs.n	800423c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b22      	ldr	r3, [pc, #136]	@ (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b20      	ldr	r3, [pc, #128]	@ (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e032      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	4b19      	ldr	r3, [pc, #100]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4916      	ldr	r1, [pc, #88]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004266:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	490e      	ldr	r1, [pc, #56]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800427a:	f000 f821 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 800427e:	4602      	mov	r2, r0
 8004280:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	490a      	ldr	r1, [pc, #40]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 800428c:	5ccb      	ldrb	r3, [r1, r3]
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	4a09      	ldr	r2, [pc, #36]	@ (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004296:	4b09      	ldr	r3, [pc, #36]	@ (80042bc <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd f800 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023c00 	.word	0x40023c00
 80042b0:	40023800 	.word	0x40023800
 80042b4:	0800a110 	.word	0x0800a110
 80042b8:	20000030 	.word	0x20000030
 80042bc:	20000034 	.word	0x20000034

080042c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c4:	b090      	sub	sp, #64	@ 0x40
 80042c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80042cc:	2300      	movs	r3, #0
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d0:	2300      	movs	r3, #0
 80042d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d8:	4b59      	ldr	r3, [pc, #356]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d00d      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x40>
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	f200 80a1 	bhi.w	800442c <HAL_RCC_GetSysClockFreq+0x16c>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x34>
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d003      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x3a>
 80042f2:	e09b      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b53      	ldr	r3, [pc, #332]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x184>)
 80042f6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80042f8:	e09b      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042fa:	4b53      	ldr	r3, [pc, #332]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x188>)
 80042fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042fe:	e098      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004300:	4b4f      	ldr	r3, [pc, #316]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004308:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800430a:	4b4d      	ldr	r3, [pc, #308]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d028      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004316:	4b4a      	ldr	r3, [pc, #296]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	2200      	movs	r2, #0
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	627a      	str	r2, [r7, #36]	@ 0x24
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004328:	2100      	movs	r1, #0
 800432a:	4b47      	ldr	r3, [pc, #284]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x188>)
 800432c:	fb03 f201 	mul.w	r2, r3, r1
 8004330:	2300      	movs	r3, #0
 8004332:	fb00 f303 	mul.w	r3, r0, r3
 8004336:	4413      	add	r3, r2
 8004338:	4a43      	ldr	r2, [pc, #268]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x188>)
 800433a:	fba0 1202 	umull	r1, r2, r0, r2
 800433e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004340:	460a      	mov	r2, r1
 8004342:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004346:	4413      	add	r3, r2
 8004348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800434a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434c:	2200      	movs	r2, #0
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	61fa      	str	r2, [r7, #28]
 8004352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004356:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800435a:	f7fb ff91 	bl	8000280 <__aeabi_uldivmod>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4613      	mov	r3, r2
 8004364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004366:	e053      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004368:	4b35      	ldr	r3, [pc, #212]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	2200      	movs	r2, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	617a      	str	r2, [r7, #20]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800437a:	f04f 0b00 	mov.w	fp, #0
 800437e:	4652      	mov	r2, sl
 8004380:	465b      	mov	r3, fp
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	0159      	lsls	r1, r3, #5
 800438c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004390:	0150      	lsls	r0, r2, #5
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	ebb2 080a 	subs.w	r8, r2, sl
 800439a:	eb63 090b 	sbc.w	r9, r3, fp
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043b2:	ebb2 0408 	subs.w	r4, r2, r8
 80043b6:	eb63 0509 	sbc.w	r5, r3, r9
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	00eb      	lsls	r3, r5, #3
 80043c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c8:	00e2      	lsls	r2, r4, #3
 80043ca:	4614      	mov	r4, r2
 80043cc:	461d      	mov	r5, r3
 80043ce:	eb14 030a 	adds.w	r3, r4, sl
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	eb45 030b 	adc.w	r3, r5, fp
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043e6:	4629      	mov	r1, r5
 80043e8:	028b      	lsls	r3, r1, #10
 80043ea:	4621      	mov	r1, r4
 80043ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043f0:	4621      	mov	r1, r4
 80043f2:	028a      	lsls	r2, r1, #10
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043fa:	2200      	movs	r2, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	60fa      	str	r2, [r7, #12]
 8004400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004404:	f7fb ff3c 	bl	8000280 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4613      	mov	r3, r2
 800440e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004410:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	3301      	adds	r3, #1
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004420:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800442a:	e002      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x184>)
 800442e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004434:	4618      	mov	r0, r3
 8004436:	3740      	adds	r7, #64	@ 0x40
 8004438:	46bd      	mov	sp, r7
 800443a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800
 8004444:	00f42400 	.word	0x00f42400
 8004448:	017d7840 	.word	0x017d7840

0800444c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b03      	ldr	r3, [pc, #12]	@ (8004460 <HAL_RCC_GetHCLKFreq+0x14>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000030 	.word	0x20000030

08004464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e041      	b.n	80044fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc fd3a 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 fce2 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e044      	b.n	80045a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1e      	ldr	r2, [pc, #120]	@ (80045b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d018      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x6c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004546:	d013      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x6c>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1a      	ldr	r2, [pc, #104]	@ (80045b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00e      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x6c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a19      	ldr	r2, [pc, #100]	@ (80045bc <HAL_TIM_Base_Start_IT+0xb8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x6c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a17      	ldr	r2, [pc, #92]	@ (80045c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x6c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a16      	ldr	r2, [pc, #88]	@ (80045c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d111      	bne.n	8004594 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b06      	cmp	r3, #6
 8004580:	d010      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004592:	e007      	b.n	80045a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40014000 	.word	0x40014000

080045c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e041      	b.n	800465e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f839 	bl	8004666 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f000 fc30 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <HAL_TIM_PWM_Start+0x24>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e022      	b.n	80046e6 <HAL_TIM_PWM_Start+0x6a>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d109      	bne.n	80046ba <HAL_TIM_PWM_Start+0x3e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	bf14      	ite	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	2300      	moveq	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	e015      	b.n	80046e6 <HAL_TIM_PWM_Start+0x6a>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d109      	bne.n	80046d4 <HAL_TIM_PWM_Start+0x58>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e008      	b.n	80046e6 <HAL_TIM_PWM_Start+0x6a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e068      	b.n	80047c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_PWM_Start+0x82>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046fc:	e013      	b.n	8004726 <HAL_TIM_PWM_Start+0xaa>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d104      	bne.n	800470e <HAL_TIM_PWM_Start+0x92>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800470c:	e00b      	b.n	8004726 <HAL_TIM_PWM_Start+0xaa>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d104      	bne.n	800471e <HAL_TIM_PWM_Start+0xa2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800471c:	e003      	b.n	8004726 <HAL_TIM_PWM_Start+0xaa>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2201      	movs	r2, #1
 800472c:	6839      	ldr	r1, [r7, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fedf 	bl	80054f2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a23      	ldr	r2, [pc, #140]	@ (80047c8 <HAL_TIM_PWM_Start+0x14c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d107      	bne.n	800474e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800474c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1d      	ldr	r2, [pc, #116]	@ (80047c8 <HAL_TIM_PWM_Start+0x14c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d018      	beq.n	800478a <HAL_TIM_PWM_Start+0x10e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004760:	d013      	beq.n	800478a <HAL_TIM_PWM_Start+0x10e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a19      	ldr	r2, [pc, #100]	@ (80047cc <HAL_TIM_PWM_Start+0x150>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00e      	beq.n	800478a <HAL_TIM_PWM_Start+0x10e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a17      	ldr	r2, [pc, #92]	@ (80047d0 <HAL_TIM_PWM_Start+0x154>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d009      	beq.n	800478a <HAL_TIM_PWM_Start+0x10e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a16      	ldr	r2, [pc, #88]	@ (80047d4 <HAL_TIM_PWM_Start+0x158>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_TIM_PWM_Start+0x10e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a14      	ldr	r2, [pc, #80]	@ (80047d8 <HAL_TIM_PWM_Start+0x15c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d111      	bne.n	80047ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b06      	cmp	r3, #6
 800479a:	d010      	beq.n	80047be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ac:	e007      	b.n	80047be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0201 	orr.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800
 80047d4:	40000c00 	.word	0x40000c00
 80047d8:	40014000 	.word	0x40014000

080047dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2200      	movs	r2, #0
 80047ec:	6839      	ldr	r1, [r7, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fe7f 	bl	80054f2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a29      	ldr	r2, [pc, #164]	@ (80048a0 <HAL_TIM_PWM_Stop+0xc4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d117      	bne.n	800482e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10f      	bne.n	800482e <HAL_TIM_PWM_Stop+0x52>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	f240 4344 	movw	r3, #1092	@ 0x444
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d107      	bne.n	800482e <HAL_TIM_PWM_Stop+0x52>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800482c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a1a      	ldr	r2, [r3, #32]
 8004834:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10f      	bne.n	800485e <HAL_TIM_PWM_Stop+0x82>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	f240 4344 	movw	r3, #1092	@ 0x444
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d107      	bne.n	800485e <HAL_TIM_PWM_Stop+0x82>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d104      	bne.n	800486e <HAL_TIM_PWM_Stop+0x92>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800486c:	e013      	b.n	8004896 <HAL_TIM_PWM_Stop+0xba>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b04      	cmp	r3, #4
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Stop+0xa2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800487c:	e00b      	b.n	8004896 <HAL_TIM_PWM_Stop+0xba>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Stop+0xb2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800488c:	e003      	b.n	8004896 <HAL_TIM_PWM_Stop+0xba>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40010000 	.word	0x40010000

080048a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d020      	beq.n	8004908 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01b      	beq.n	8004908 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0202 	mvn.w	r2, #2
 80048d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa9d 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fa8f 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 faa0 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d020      	beq.n	8004954 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0204 	mvn.w	r2, #4
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fa77 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa69 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa7a 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0208 	mvn.w	r2, #8
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2204      	movs	r2, #4
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fa51 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa43 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fa54 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d020      	beq.n	80049ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01b      	beq.n	80049ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0210 	mvn.w	r2, #16
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2208      	movs	r2, #8
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fa2b 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fa1d 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fa2e 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00c      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0201 	mvn.w	r2, #1
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fc f944 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fdfc 	bl	800562c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00c      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f9ff 	bl	8004e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00c      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0220 	mvn.w	r2, #32
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fdce 	bl	8005618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e0ae      	b.n	8004c00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b0c      	cmp	r3, #12
 8004aae:	f200 809f 	bhi.w	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004bf1 	.word	0x08004bf1
 8004ac0:	08004bf1 	.word	0x08004bf1
 8004ac4:	08004bf1 	.word	0x08004bf1
 8004ac8:	08004b2d 	.word	0x08004b2d
 8004acc:	08004bf1 	.word	0x08004bf1
 8004ad0:	08004bf1 	.word	0x08004bf1
 8004ad4:	08004bf1 	.word	0x08004bf1
 8004ad8:	08004b6f 	.word	0x08004b6f
 8004adc:	08004bf1 	.word	0x08004bf1
 8004ae0:	08004bf1 	.word	0x08004bf1
 8004ae4:	08004bf1 	.word	0x08004bf1
 8004ae8:	08004baf 	.word	0x08004baf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fa46 	bl	8004f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0208 	orr.w	r2, r2, #8
 8004b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0204 	bic.w	r2, r2, #4
 8004b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6999      	ldr	r1, [r3, #24]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	619a      	str	r2, [r3, #24]
      break;
 8004b2a:	e064      	b.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fa8c 	bl	8005050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6999      	ldr	r1, [r3, #24]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	021a      	lsls	r2, r3, #8
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	619a      	str	r2, [r3, #24]
      break;
 8004b6c:	e043      	b.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fad7 	bl	8005128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0208 	orr.w	r2, r2, #8
 8004b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0204 	bic.w	r2, r2, #4
 8004b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69d9      	ldr	r1, [r3, #28]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	61da      	str	r2, [r3, #28]
      break;
 8004bac:	e023      	b.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fb21 	bl	80051fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69d9      	ldr	r1, [r3, #28]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	021a      	lsls	r2, r3, #8
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	61da      	str	r2, [r3, #28]
      break;
 8004bee:	e002      	b.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIM_ConfigClockSource+0x1c>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0b4      	b.n	8004d8e <HAL_TIM_ConfigClockSource+0x186>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c5c:	d03e      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0xd4>
 8004c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c62:	f200 8087 	bhi.w	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c6a:	f000 8086 	beq.w	8004d7a <HAL_TIM_ConfigClockSource+0x172>
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c72:	d87f      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b70      	cmp	r3, #112	@ 0x70
 8004c76:	d01a      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0xa6>
 8004c78:	2b70      	cmp	r3, #112	@ 0x70
 8004c7a:	d87b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b60      	cmp	r3, #96	@ 0x60
 8004c7e:	d050      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x11a>
 8004c80:	2b60      	cmp	r3, #96	@ 0x60
 8004c82:	d877      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b50      	cmp	r3, #80	@ 0x50
 8004c86:	d03c      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0xfa>
 8004c88:	2b50      	cmp	r3, #80	@ 0x50
 8004c8a:	d873      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b40      	cmp	r3, #64	@ 0x40
 8004c8e:	d058      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x13a>
 8004c90:	2b40      	cmp	r3, #64	@ 0x40
 8004c92:	d86f      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b30      	cmp	r3, #48	@ 0x30
 8004c96:	d064      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	2b30      	cmp	r3, #48	@ 0x30
 8004c9a:	d86b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d060      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d867      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d05c      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d05a      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004cac:	e062      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cbe:	f000 fbf8 	bl	80054b2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	609a      	str	r2, [r3, #8]
      break;
 8004cda:	e04f      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cec:	f000 fbe1 	bl	80054b2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cfe:	609a      	str	r2, [r3, #8]
      break;
 8004d00:	e03c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 fb55 	bl	80053be <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2150      	movs	r1, #80	@ 0x50
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fbae 	bl	800547c <TIM_ITRx_SetConfig>
      break;
 8004d20:	e02c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 fb74 	bl	800541c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2160      	movs	r1, #96	@ 0x60
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fb9e 	bl	800547c <TIM_ITRx_SetConfig>
      break;
 8004d40:	e01c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f000 fb35 	bl	80053be <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2140      	movs	r1, #64	@ 0x40
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fb8e 	bl	800547c <TIM_ITRx_SetConfig>
      break;
 8004d60:	e00c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f000 fb85 	bl	800547c <TIM_ITRx_SetConfig>
      break;
 8004d72:	e003      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
      break;
 8004d78:	e000      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_SlaveConfigSynchro+0x18>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e031      	b.n	8004e12 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fa6b 	bl	800529c <TIM_SlaveTimer_SetConfig>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e018      	b.n	8004e12 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dee:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dfe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3a      	ldr	r2, [pc, #232]	@ (8004f68 <TIM_Base_SetConfig+0xfc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00f      	beq.n	8004ea4 <TIM_Base_SetConfig+0x38>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_Base_SetConfig+0x38>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a37      	ldr	r2, [pc, #220]	@ (8004f6c <TIM_Base_SetConfig+0x100>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_Base_SetConfig+0x38>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a36      	ldr	r2, [pc, #216]	@ (8004f70 <TIM_Base_SetConfig+0x104>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_Base_SetConfig+0x38>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a35      	ldr	r2, [pc, #212]	@ (8004f74 <TIM_Base_SetConfig+0x108>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d108      	bne.n	8004eb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f68 <TIM_Base_SetConfig+0xfc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01b      	beq.n	8004ef6 <TIM_Base_SetConfig+0x8a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec4:	d017      	beq.n	8004ef6 <TIM_Base_SetConfig+0x8a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a28      	ldr	r2, [pc, #160]	@ (8004f6c <TIM_Base_SetConfig+0x100>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <TIM_Base_SetConfig+0x8a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a27      	ldr	r2, [pc, #156]	@ (8004f70 <TIM_Base_SetConfig+0x104>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00f      	beq.n	8004ef6 <TIM_Base_SetConfig+0x8a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a26      	ldr	r2, [pc, #152]	@ (8004f74 <TIM_Base_SetConfig+0x108>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00b      	beq.n	8004ef6 <TIM_Base_SetConfig+0x8a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a25      	ldr	r2, [pc, #148]	@ (8004f78 <TIM_Base_SetConfig+0x10c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d007      	beq.n	8004ef6 <TIM_Base_SetConfig+0x8a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a24      	ldr	r2, [pc, #144]	@ (8004f7c <TIM_Base_SetConfig+0x110>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <TIM_Base_SetConfig+0x8a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a23      	ldr	r2, [pc, #140]	@ (8004f80 <TIM_Base_SetConfig+0x114>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d108      	bne.n	8004f08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f68 <TIM_Base_SetConfig+0xfc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d103      	bne.n	8004f3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f023 0201 	bic.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	611a      	str	r2, [r3, #16]
  }
}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40000c00 	.word	0x40000c00
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800

08004f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f023 0201 	bic.w	r2, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f023 0302 	bic.w	r3, r3, #2
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a1c      	ldr	r2, [pc, #112]	@ (800504c <TIM_OC1_SetConfig+0xc8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10c      	bne.n	8004ffa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0308 	bic.w	r3, r3, #8
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 0304 	bic.w	r3, r3, #4
 8004ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a13      	ldr	r2, [pc, #76]	@ (800504c <TIM_OC1_SetConfig+0xc8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d111      	bne.n	8005026 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40010000 	.word	0x40010000

08005050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 0210 	bic.w	r2, r3, #16
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0320 	bic.w	r3, r3, #32
 800509a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005124 <TIM_OC2_SetConfig+0xd4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10d      	bne.n	80050cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a15      	ldr	r2, [pc, #84]	@ (8005124 <TIM_OC2_SetConfig+0xd4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d113      	bne.n	80050fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000

08005128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a1d      	ldr	r2, [pc, #116]	@ (80051f8 <TIM_OC3_SetConfig+0xd0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10d      	bne.n	80051a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800518c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a14      	ldr	r2, [pc, #80]	@ (80051f8 <TIM_OC3_SetConfig+0xd0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d113      	bne.n	80051d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	621a      	str	r2, [r3, #32]
}
 80051ec:	bf00      	nop
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40010000 	.word	0x40010000

080051fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	031b      	lsls	r3, r3, #12
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a10      	ldr	r2, [pc, #64]	@ (8005298 <TIM_OC4_SetConfig+0x9c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d109      	bne.n	8005270 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005262:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000

0800529c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b70      	cmp	r3, #112	@ 0x70
 80052e4:	d01a      	beq.n	800531c <TIM_SlaveTimer_SetConfig+0x80>
 80052e6:	2b70      	cmp	r3, #112	@ 0x70
 80052e8:	d860      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
 80052ea:	2b60      	cmp	r3, #96	@ 0x60
 80052ec:	d054      	beq.n	8005398 <TIM_SlaveTimer_SetConfig+0xfc>
 80052ee:	2b60      	cmp	r3, #96	@ 0x60
 80052f0:	d85c      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
 80052f2:	2b50      	cmp	r3, #80	@ 0x50
 80052f4:	d046      	beq.n	8005384 <TIM_SlaveTimer_SetConfig+0xe8>
 80052f6:	2b50      	cmp	r3, #80	@ 0x50
 80052f8:	d858      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
 80052fa:	2b40      	cmp	r3, #64	@ 0x40
 80052fc:	d019      	beq.n	8005332 <TIM_SlaveTimer_SetConfig+0x96>
 80052fe:	2b40      	cmp	r3, #64	@ 0x40
 8005300:	d854      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
 8005302:	2b30      	cmp	r3, #48	@ 0x30
 8005304:	d055      	beq.n	80053b2 <TIM_SlaveTimer_SetConfig+0x116>
 8005306:	2b30      	cmp	r3, #48	@ 0x30
 8005308:	d850      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
 800530a:	2b20      	cmp	r3, #32
 800530c:	d051      	beq.n	80053b2 <TIM_SlaveTimer_SetConfig+0x116>
 800530e:	2b20      	cmp	r3, #32
 8005310:	d84c      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d04d      	beq.n	80053b2 <TIM_SlaveTimer_SetConfig+0x116>
 8005316:	2b10      	cmp	r3, #16
 8005318:	d04b      	beq.n	80053b2 <TIM_SlaveTimer_SetConfig+0x116>
 800531a:	e047      	b.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800532c:	f000 f8c1 	bl	80054b2 <TIM_ETR_SetConfig>
      break;
 8005330:	e040      	b.n	80053b4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b05      	cmp	r3, #5
 8005338:	d101      	bne.n	800533e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e03b      	b.n	80053b6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0201 	bic.w	r2, r2, #1
 8005354:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005364:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	4313      	orrs	r3, r2
 8005370:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	621a      	str	r2, [r3, #32]
      break;
 8005382:	e017      	b.n	80053b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005390:	461a      	mov	r2, r3
 8005392:	f000 f814 	bl	80053be <TIM_TI1_ConfigInputStage>
      break;
 8005396:	e00d      	b.n	80053b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053a4:	461a      	mov	r2, r3
 80053a6:	f000 f839 	bl	800541c <TIM_TI2_ConfigInputStage>
      break;
 80053aa:	e003      	b.n	80053b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	75fb      	strb	r3, [r7, #23]
      break;
 80053b0:	e000      	b.n	80053b4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80053b2:	bf00      	nop
  }

  return status;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053be:	b480      	push	{r7}
 80053c0:	b087      	sub	sp, #28
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f023 0201 	bic.w	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 030a 	bic.w	r3, r3, #10
 80053fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	621a      	str	r2, [r3, #32]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0210 	bic.w	r2, r3, #16
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	031b      	lsls	r3, r3, #12
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005458:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	621a      	str	r2, [r3, #32]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005492:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	f043 0307 	orr.w	r3, r3, #7
 800549e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	609a      	str	r2, [r3, #8]
}
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b087      	sub	sp, #28
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	021a      	lsls	r2, r3, #8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4313      	orrs	r3, r2
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	609a      	str	r2, [r3, #8]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b087      	sub	sp, #28
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	2201      	movs	r2, #1
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	43db      	mvns	r3, r3
 8005514:	401a      	ands	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a1a      	ldr	r2, [r3, #32]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	431a      	orrs	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	621a      	str	r2, [r3, #32]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005550:	2302      	movs	r3, #2
 8005552:	e050      	b.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1c      	ldr	r2, [pc, #112]	@ (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d018      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a0:	d013      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a18      	ldr	r2, [pc, #96]	@ (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00e      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a16      	ldr	r2, [pc, #88]	@ (800560c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a15      	ldr	r2, [pc, #84]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a13      	ldr	r2, [pc, #76]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10c      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40014000 	.word	0x40014000

08005618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005640:	b084      	sub	sp, #16
 8005642:	b580      	push	{r7, lr}
 8005644:	b084      	sub	sp, #16
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	f107 001c 	add.w	r0, r7, #28
 800564e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005652:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005656:	2b01      	cmp	r3, #1
 8005658:	d123      	bne.n	80056a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800566e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005682:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005686:	2b01      	cmp	r3, #1
 8005688:	d105      	bne.n	8005696 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fae2 	bl	8006c60 <USB_CoreReset>
 800569c:	4603      	mov	r3, r0
 800569e:	73fb      	strb	r3, [r7, #15]
 80056a0:	e01b      	b.n	80056da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f001 fad6 	bl	8006c60 <USB_CoreReset>
 80056b4:	4603      	mov	r3, r0
 80056b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80056cc:	e005      	b.n	80056da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056da:	7fbb      	ldrb	r3, [r7, #30]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10b      	bne.n	80056f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f043 0206 	orr.w	r2, r3, #6
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005704:	b004      	add	sp, #16
 8005706:	4770      	bx	lr

08005708 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4613      	mov	r3, r2
 8005714:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d165      	bne.n	80057e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4a41      	ldr	r2, [pc, #260]	@ (8005824 <USB_SetTurnaroundTime+0x11c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d906      	bls.n	8005732 <USB_SetTurnaroundTime+0x2a>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4a40      	ldr	r2, [pc, #256]	@ (8005828 <USB_SetTurnaroundTime+0x120>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d202      	bcs.n	8005732 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800572c:	230f      	movs	r3, #15
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e062      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a3c      	ldr	r2, [pc, #240]	@ (8005828 <USB_SetTurnaroundTime+0x120>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d306      	bcc.n	8005748 <USB_SetTurnaroundTime+0x40>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4a3b      	ldr	r2, [pc, #236]	@ (800582c <USB_SetTurnaroundTime+0x124>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d202      	bcs.n	8005748 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005742:	230e      	movs	r3, #14
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e057      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4a38      	ldr	r2, [pc, #224]	@ (800582c <USB_SetTurnaroundTime+0x124>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d306      	bcc.n	800575e <USB_SetTurnaroundTime+0x56>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4a37      	ldr	r2, [pc, #220]	@ (8005830 <USB_SetTurnaroundTime+0x128>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d202      	bcs.n	800575e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005758:	230d      	movs	r3, #13
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	e04c      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4a33      	ldr	r2, [pc, #204]	@ (8005830 <USB_SetTurnaroundTime+0x128>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d306      	bcc.n	8005774 <USB_SetTurnaroundTime+0x6c>
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4a32      	ldr	r2, [pc, #200]	@ (8005834 <USB_SetTurnaroundTime+0x12c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d802      	bhi.n	8005774 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800576e:	230c      	movs	r3, #12
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	e041      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4a2f      	ldr	r2, [pc, #188]	@ (8005834 <USB_SetTurnaroundTime+0x12c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d906      	bls.n	800578a <USB_SetTurnaroundTime+0x82>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4a2e      	ldr	r2, [pc, #184]	@ (8005838 <USB_SetTurnaroundTime+0x130>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d802      	bhi.n	800578a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005784:	230b      	movs	r3, #11
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e036      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4a2a      	ldr	r2, [pc, #168]	@ (8005838 <USB_SetTurnaroundTime+0x130>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d906      	bls.n	80057a0 <USB_SetTurnaroundTime+0x98>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4a29      	ldr	r2, [pc, #164]	@ (800583c <USB_SetTurnaroundTime+0x134>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d802      	bhi.n	80057a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800579a:	230a      	movs	r3, #10
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e02b      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4a26      	ldr	r2, [pc, #152]	@ (800583c <USB_SetTurnaroundTime+0x134>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d906      	bls.n	80057b6 <USB_SetTurnaroundTime+0xae>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4a25      	ldr	r2, [pc, #148]	@ (8005840 <USB_SetTurnaroundTime+0x138>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d202      	bcs.n	80057b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80057b0:	2309      	movs	r3, #9
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e020      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4a21      	ldr	r2, [pc, #132]	@ (8005840 <USB_SetTurnaroundTime+0x138>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d306      	bcc.n	80057cc <USB_SetTurnaroundTime+0xc4>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4a20      	ldr	r2, [pc, #128]	@ (8005844 <USB_SetTurnaroundTime+0x13c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d802      	bhi.n	80057cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80057c6:	2308      	movs	r3, #8
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	e015      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005844 <USB_SetTurnaroundTime+0x13c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d906      	bls.n	80057e2 <USB_SetTurnaroundTime+0xda>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005848 <USB_SetTurnaroundTime+0x140>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d202      	bcs.n	80057e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80057dc:	2307      	movs	r3, #7
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e00a      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80057e2:	2306      	movs	r3, #6
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	e007      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80057ee:	2309      	movs	r3, #9
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	e001      	b.n	80057f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80057f4:	2309      	movs	r3, #9
 80057f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	029b      	lsls	r3, r3, #10
 800580c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	00d8acbf 	.word	0x00d8acbf
 8005828:	00e4e1c0 	.word	0x00e4e1c0
 800582c:	00f42400 	.word	0x00f42400
 8005830:	01067380 	.word	0x01067380
 8005834:	011a499f 	.word	0x011a499f
 8005838:	01312cff 	.word	0x01312cff
 800583c:	014ca43f 	.word	0x014ca43f
 8005840:	016e3600 	.word	0x016e3600
 8005844:	01a6ab1f 	.word	0x01a6ab1f
 8005848:	01e84800 	.word	0x01e84800

0800584c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f043 0201 	orr.w	r2, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d115      	bne.n	80058de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058be:	200a      	movs	r0, #10
 80058c0:	f7fb fd3e 	bl	8001340 <HAL_Delay>
      ms += 10U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	330a      	adds	r3, #10
 80058c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f001 f939 	bl	8006b42 <USB_GetMode>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d01e      	beq.n	8005914 <USB_SetCurrentMode+0x84>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80058da:	d9f0      	bls.n	80058be <USB_SetCurrentMode+0x2e>
 80058dc:	e01a      	b.n	8005914 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d115      	bne.n	8005910 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058f0:	200a      	movs	r0, #10
 80058f2:	f7fb fd25 	bl	8001340 <HAL_Delay>
      ms += 10U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	330a      	adds	r3, #10
 80058fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f001 f920 	bl	8006b42 <USB_GetMode>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <USB_SetCurrentMode+0x84>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2bc7      	cmp	r3, #199	@ 0xc7
 800590c:	d9f0      	bls.n	80058f0 <USB_SetCurrentMode+0x60>
 800590e:	e001      	b.n	8005914 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e005      	b.n	8005920 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2bc8      	cmp	r3, #200	@ 0xc8
 8005918:	d101      	bne.n	800591e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005928:	b084      	sub	sp, #16
 800592a:	b580      	push	{r7, lr}
 800592c:	b086      	sub	sp, #24
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005942:	2300      	movs	r3, #0
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	e009      	b.n	800595c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	3340      	adds	r3, #64	@ 0x40
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	2200      	movs	r2, #0
 8005954:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	3301      	adds	r3, #1
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b0e      	cmp	r3, #14
 8005960:	d9f2      	bls.n	8005948 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005962:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11c      	bne.n	80059a4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005978:	f043 0302 	orr.w	r3, r3, #2
 800597c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80059a2:	e00b      	b.n	80059bc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059c2:	461a      	mov	r2, r3
 80059c4:	2300      	movs	r3, #0
 80059c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d10d      	bne.n	80059ec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059d8:	2100      	movs	r1, #0
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f968 	bl	8005cb0 <USB_SetDevSpeed>
 80059e0:	e008      	b.n	80059f4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059e2:	2101      	movs	r1, #1
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f963 	bl	8005cb0 <USB_SetDevSpeed>
 80059ea:	e003      	b.n	80059f4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059ec:	2103      	movs	r1, #3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f95e 	bl	8005cb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059f4:	2110      	movs	r1, #16
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f8fa 	bl	8005bf0 <USB_FlushTxFifo>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f924 	bl	8005c54 <USB_FlushRxFifo>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2300      	movs	r3, #0
 8005a20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a34:	461a      	mov	r2, r3
 8005a36:	2300      	movs	r3, #0
 8005a38:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	e043      	b.n	8005ac8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a56:	d118      	bne.n	8005a8a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e013      	b.n	8005a9c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a80:	461a      	mov	r2, r3
 8005a82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e008      	b.n	8005a9c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a96:	461a      	mov	r2, r3
 8005a98:	2300      	movs	r3, #0
 8005a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2300      	movs	r3, #0
 8005aac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aba:	461a      	mov	r2, r3
 8005abc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005acc:	461a      	mov	r2, r3
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d3b5      	bcc.n	8005a40 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	e043      	b.n	8005b62 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005af0:	d118      	bne.n	8005b24 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b04:	461a      	mov	r2, r3
 8005b06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	e013      	b.n	8005b36 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e008      	b.n	8005b36 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b30:	461a      	mov	r2, r3
 8005b32:	2300      	movs	r3, #0
 8005b34:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b42:	461a      	mov	r2, r3
 8005b44:	2300      	movs	r3, #0
 8005b46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b54:	461a      	mov	r2, r3
 8005b56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b66:	461a      	mov	r2, r3
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d3b5      	bcc.n	8005ada <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b80:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005b8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f043 0210 	orr.w	r2, r3, #16
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	4b10      	ldr	r3, [pc, #64]	@ (8005bec <USB_DevInit+0x2c4>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f043 0208 	orr.w	r2, r3, #8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bc4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d107      	bne.n	8005bdc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bd4:	f043 0304 	orr.w	r3, r3, #4
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005be8:	b004      	add	sp, #16
 8005bea:	4770      	bx	lr
 8005bec:	803c3800 	.word	0x803c3800

08005bf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c0a:	d901      	bls.n	8005c10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e01b      	b.n	8005c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	daf2      	bge.n	8005bfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	019b      	lsls	r3, r3, #6
 8005c20:	f043 0220 	orr.w	r2, r3, #32
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c34:	d901      	bls.n	8005c3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e006      	b.n	8005c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d0f0      	beq.n	8005c28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c6c:	d901      	bls.n	8005c72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e018      	b.n	8005ca4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	daf2      	bge.n	8005c60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2210      	movs	r2, #16
 8005c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c90:	d901      	bls.n	8005c96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e006      	b.n	8005ca4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b10      	cmp	r3, #16
 8005ca0:	d0f0      	beq.n	8005c84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b087      	sub	sp, #28
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0306 	and.w	r3, r3, #6
 8005cfa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d102      	bne.n	8005d08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]
 8005d06:	e00a      	b.n	8005d1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d002      	beq.n	8005d14 <USB_GetDevSpeed+0x32>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b06      	cmp	r3, #6
 8005d12:	d102      	bne.n	8005d1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d14:	2302      	movs	r3, #2
 8005d16:	75fb      	strb	r3, [r7, #23]
 8005d18:	e001      	b.n	8005d1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d1a:	230f      	movs	r3, #15
 8005d1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	785b      	ldrb	r3, [r3, #1]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d13a      	bne.n	8005dbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	2101      	movs	r1, #1
 8005d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	68f9      	ldr	r1, [r7, #12]
 8005d62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d155      	bne.n	8005e2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	791b      	ldrb	r3, [r3, #4]
 8005d9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	059b      	lsls	r3, r3, #22
 8005da2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005da4:	4313      	orrs	r3, r2
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e036      	b.n	8005e2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc4:	69da      	ldr	r2, [r3, #28]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	2101      	movs	r1, #1
 8005dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd4:	041b      	lsls	r3, r3, #16
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d11a      	bne.n	8005e2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	791b      	ldrb	r3, [r3, #4]
 8005e10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e12:	430b      	orrs	r3, r1
 8005e14:	4313      	orrs	r3, r2
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d161      	bne.n	8005f1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e6e:	d11f      	bne.n	8005eb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005eae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	68f9      	ldr	r1, [r7, #12]
 8005ecc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	43db      	mvns	r3, r3
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	0159      	lsls	r1, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	440b      	add	r3, r1
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f12:	4619      	mov	r1, r3
 8005f14:	4b35      	ldr	r3, [pc, #212]	@ (8005fec <USB_DeactivateEndpoint+0x1b0>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]
 8005f1a:	e060      	b.n	8005fde <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f32:	d11f      	bne.n	8005f74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	2101      	movs	r1, #1
 8005f86:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8a:	041b      	lsls	r3, r3, #16
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f94:	4013      	ands	r3, r2
 8005f96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	2101      	movs	r1, #1
 8005faa:	fa01 f303 	lsl.w	r3, r1, r3
 8005fae:	041b      	lsls	r3, r3, #16
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fb8:	4013      	ands	r3, r2
 8005fba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	0159      	lsls	r1, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	440b      	add	r3, r1
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <USB_DeactivateEndpoint+0x1b4>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	ec337800 	.word	0xec337800
 8005ff0:	eff37800 	.word	0xeff37800

08005ff4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08a      	sub	sp, #40	@ 0x28
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	4613      	mov	r3, r2
 8006000:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	2b01      	cmp	r3, #1
 8006012:	f040 817a 	bne.w	800630a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d132      	bne.n	8006084 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006038:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800603c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006040:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800605c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006060:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	0151      	lsls	r1, r2, #5
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	440a      	add	r2, r1
 8006078:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800607c:	0cdb      	lsrs	r3, r3, #19
 800607e:	04db      	lsls	r3, r3, #19
 8006080:	6113      	str	r3, [r2, #16]
 8006082:	e092      	b.n	80061aa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800609e:	0cdb      	lsrs	r3, r3, #19
 80060a0:	04db      	lsls	r3, r3, #19
 80060a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060c6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d11a      	bne.n	8006104 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d903      	bls.n	80060e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006100:	6113      	str	r3, [r2, #16]
 8006102:	e01b      	b.n	800613c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006110:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6919      	ldr	r1, [r3, #16]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	440b      	add	r3, r1
 800611c:	1e59      	subs	r1, r3, #1
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	fbb1 f3f3 	udiv	r3, r1, r3
 8006126:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006128:	4ba2      	ldr	r3, [pc, #648]	@ (80063b4 <USB_EPStartXfer+0x3c0>)
 800612a:	400b      	ands	r3, r1
 800612c:	69b9      	ldr	r1, [r7, #24]
 800612e:	0148      	lsls	r0, r1, #5
 8006130:	69f9      	ldr	r1, [r7, #28]
 8006132:	4401      	add	r1, r0
 8006134:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006138:	4313      	orrs	r3, r2
 800613a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006152:	69b9      	ldr	r1, [r7, #24]
 8006154:	0148      	lsls	r0, r1, #5
 8006156:	69f9      	ldr	r1, [r7, #28]
 8006158:	4401      	add	r1, r0
 800615a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800615e:	4313      	orrs	r3, r2
 8006160:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	791b      	ldrb	r3, [r3, #4]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d11f      	bne.n	80061aa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006184:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006188:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d14b      	bne.n	8006248 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d009      	beq.n	80061cc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c4:	461a      	mov	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	791b      	ldrb	r3, [r3, #4]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d128      	bne.n	8006226 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d110      	bne.n	8006206 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e00f      	b.n	8006226 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006224:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006240:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e165      	b.n	8006514 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	0151      	lsls	r1, r2, #5
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	440a      	add	r2, r1
 800625e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006262:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006266:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	791b      	ldrb	r3, [r3, #4]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d015      	beq.n	800629c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 814d 	beq.w	8006514 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	2101      	movs	r1, #1
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	69f9      	ldr	r1, [r7, #28]
 8006292:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006296:	4313      	orrs	r3, r2
 8006298:	634b      	str	r3, [r1, #52]	@ 0x34
 800629a:	e13b      	b.n	8006514 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d110      	bne.n	80062ce <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	e00f      	b.n	80062ee <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	68d9      	ldr	r1, [r3, #12]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781a      	ldrb	r2, [r3, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	b298      	uxth	r0, r3
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	4603      	mov	r3, r0
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f9b8 	bl	8006678 <USB_WritePacket>
 8006308:	e104      	b.n	8006514 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	0151      	lsls	r1, r2, #5
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	440a      	add	r2, r1
 8006320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006324:	0cdb      	lsrs	r3, r3, #19
 8006326:	04db      	lsls	r3, r3, #19
 8006328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	440a      	add	r2, r1
 8006340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006344:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006348:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800634c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d131      	bne.n	80063b8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006382:	69b9      	ldr	r1, [r7, #24]
 8006384:	0148      	lsls	r0, r1, #5
 8006386:	69f9      	ldr	r1, [r7, #28]
 8006388:	4401      	add	r1, r0
 800638a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800638e:	4313      	orrs	r3, r2
 8006390:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063b0:	6113      	str	r3, [r2, #16]
 80063b2:	e061      	b.n	8006478 <USB_EPStartXfer+0x484>
 80063b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d123      	bne.n	8006408 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063cc:	691a      	ldr	r2, [r3, #16]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d6:	69b9      	ldr	r1, [r7, #24]
 80063d8:	0148      	lsls	r0, r1, #5
 80063da:	69f9      	ldr	r1, [r7, #28]
 80063dc:	4401      	add	r1, r0
 80063de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063e2:	4313      	orrs	r3, r2
 80063e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006400:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006404:	6113      	str	r3, [r2, #16]
 8006406:	e037      	b.n	8006478 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	4413      	add	r3, r2
 8006412:	1e5a      	subs	r2, r3, #1
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	8afa      	ldrh	r2, [r7, #22]
 8006424:	fb03 f202 	mul.w	r2, r3, r2
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	8afb      	ldrh	r3, [r7, #22]
 800643c:	04d9      	lsls	r1, r3, #19
 800643e:	4b38      	ldr	r3, [pc, #224]	@ (8006520 <USB_EPStartXfer+0x52c>)
 8006440:	400b      	ands	r3, r1
 8006442:	69b9      	ldr	r1, [r7, #24]
 8006444:	0148      	lsls	r0, r1, #5
 8006446:	69f9      	ldr	r1, [r7, #28]
 8006448:	4401      	add	r1, r0
 800644a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800644e:	4313      	orrs	r3, r2
 8006450:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645e:	691a      	ldr	r2, [r3, #16]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006468:	69b9      	ldr	r1, [r7, #24]
 800646a:	0148      	lsls	r0, r1, #5
 800646c:	69f9      	ldr	r1, [r7, #28]
 800646e:	4401      	add	r1, r0
 8006470:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006474:	4313      	orrs	r3, r2
 8006476:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d10d      	bne.n	800649a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	68d9      	ldr	r1, [r3, #12]
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006496:	460a      	mov	r2, r1
 8006498:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	791b      	ldrb	r3, [r3, #4]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d128      	bne.n	80064f4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d110      	bne.n	80064d4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e00f      	b.n	80064f4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	440a      	add	r2, r1
 800650a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800650e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006512:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3720      	adds	r7, #32
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	1ff80000 	.word	0x1ff80000

08006524 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d14a      	bne.n	80065d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800655a:	f040 8086 	bne.w	800666a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	7812      	ldrb	r2, [r2, #0]
 8006572:	0151      	lsls	r1, r2, #5
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	440a      	add	r2, r1
 8006578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800657c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006580:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3301      	adds	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d902      	bls.n	80065bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	75fb      	strb	r3, [r7, #23]
          break;
 80065ba:	e056      	b.n	800666a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065d4:	d0e7      	beq.n	80065a6 <USB_EPStopXfer+0x82>
 80065d6:	e048      	b.n	800666a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065f0:	d13b      	bne.n	800666a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	440a      	add	r2, r1
 800660c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006610:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006614:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006634:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006638:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006646:	4293      	cmp	r3, r2
 8006648:	d902      	bls.n	8006650 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
          break;
 800664e:	e00c      	b.n	800666a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006668:	d0e7      	beq.n	800663a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800666a:	7dfb      	ldrb	r3, [r7, #23]
}
 800666c:	4618      	mov	r0, r3
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006678:	b480      	push	{r7}
 800667a:	b089      	sub	sp, #36	@ 0x24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	4611      	mov	r1, r2
 8006684:	461a      	mov	r2, r3
 8006686:	460b      	mov	r3, r1
 8006688:	71fb      	strb	r3, [r7, #7]
 800668a:	4613      	mov	r3, r2
 800668c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006696:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d123      	bne.n	80066e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800669e:	88bb      	ldrh	r3, [r7, #4]
 80066a0:	3303      	adds	r3, #3
 80066a2:	089b      	lsrs	r3, r3, #2
 80066a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066a6:	2300      	movs	r3, #0
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	e018      	b.n	80066de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066ac:	79fb      	ldrb	r3, [r7, #7]
 80066ae:	031a      	lsls	r2, r3, #12
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066b8:	461a      	mov	r2, r3
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	3301      	adds	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	3301      	adds	r3, #1
 80066ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	3301      	adds	r3, #1
 80066d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	3301      	adds	r3, #1
 80066d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	3301      	adds	r3, #1
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d3e2      	bcc.n	80066ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3724      	adds	r7, #36	@ 0x24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b08b      	sub	sp, #44	@ 0x2c
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	089b      	lsrs	r3, r3, #2
 800670e:	b29b      	uxth	r3, r3
 8006710:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800671a:	2300      	movs	r3, #0
 800671c:	623b      	str	r3, [r7, #32]
 800671e:	e014      	b.n	800674a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	601a      	str	r2, [r3, #0]
    pDest++;
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	3301      	adds	r3, #1
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	3301      	adds	r3, #1
 8006736:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	3301      	adds	r3, #1
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	3301      	adds	r3, #1
 8006742:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	3301      	adds	r3, #1
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	6a3a      	ldr	r2, [r7, #32]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	429a      	cmp	r2, r3
 8006750:	d3e6      	bcc.n	8006720 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006752:	8bfb      	ldrh	r3, [r7, #30]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01e      	beq.n	8006796 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006762:	461a      	mov	r2, r3
 8006764:	f107 0310 	add.w	r3, r7, #16
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	701a      	strb	r2, [r3, #0]
      i++;
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	3301      	adds	r3, #1
 8006782:	623b      	str	r3, [r7, #32]
      pDest++;
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	3301      	adds	r3, #1
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800678a:	8bfb      	ldrh	r3, [r7, #30]
 800678c:	3b01      	subs	r3, #1
 800678e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006790:	8bfb      	ldrh	r3, [r7, #30]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1ea      	bne.n	800676c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006798:	4618      	mov	r0, r3
 800679a:	372c      	adds	r7, #44	@ 0x2c
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d12c      	bne.n	800681a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	db12      	blt.n	80067f8 <USB_EPSetStall+0x54>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00f      	beq.n	80067f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	0151      	lsls	r1, r2, #5
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	440a      	add	r2, r1
 80067ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80067f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	0151      	lsls	r1, r2, #5
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	440a      	add	r2, r1
 800680e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006812:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	e02b      	b.n	8006872 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	db12      	blt.n	8006852 <USB_EPSetStall+0xae>
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00f      	beq.n	8006852 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800684c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006850:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800686c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006870:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d128      	bne.n	80068ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	791b      	ldrb	r3, [r3, #4]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d003      	beq.n	80068cc <USB_EPClearStall+0x4c>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	791b      	ldrb	r3, [r3, #4]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d138      	bne.n	800693e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	e027      	b.n	800693e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006908:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800690c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	791b      	ldrb	r3, [r3, #4]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d003      	beq.n	800691e <USB_EPClearStall+0x9e>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	791b      	ldrb	r3, [r3, #4]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d10f      	bne.n	800693e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	440a      	add	r2, r1
 8006934:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800693c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800696a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800696e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006980:	68f9      	ldr	r1, [r7, #12]
 8006982:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006986:	4313      	orrs	r3, r2
 8006988:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069c6:	f023 0302 	bic.w	r3, r3, #2
 80069ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069da:	b480      	push	{r7}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069f4:	f023 0303 	bic.w	r3, r3, #3
 80069f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a08:	f043 0302 	orr.w	r3, r3, #2
 8006a0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4013      	ands	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a34:	68fb      	ldr	r3, [r7, #12]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	4013      	ands	r3, r2
 8006a64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	0c1b      	lsrs	r3, r3, #16
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	4013      	ands	r3, r2
 8006a98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	b29b      	uxth	r3, r3
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b087      	sub	sp, #28
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	460b      	mov	r3, r1
 8006af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	fa22 f303 	lsr.w	r3, r2, r3
 8006b16:	01db      	lsls	r3, r3, #7
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4013      	ands	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b34:	68bb      	ldr	r3, [r7, #8]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b7c:	f023 0307 	bic.w	r3, r3, #7
 8006b80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	460b      	mov	r3, r1
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	333c      	adds	r3, #60	@ 0x3c
 8006bba:	3304      	adds	r3, #4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	4a26      	ldr	r2, [pc, #152]	@ (8006c5c <USB_EP0_OutStart+0xb8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d90a      	bls.n	8006bde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bd8:	d101      	bne.n	8006bde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e037      	b.n	8006c4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be4:	461a      	mov	r2, r3
 8006be6:	2300      	movs	r3, #0
 8006be8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c0c:	f043 0318 	orr.w	r3, r3, #24
 8006c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c20:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006c24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c26:	7afb      	ldrb	r3, [r7, #11]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d10f      	bne.n	8006c4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c46:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	4f54300a 	.word	0x4f54300a

08006c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c78:	d901      	bls.n	8006c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e01b      	b.n	8006cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	daf2      	bge.n	8006c6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f043 0201 	orr.w	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ca2:	d901      	bls.n	8006ca8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e006      	b.n	8006cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d0f0      	beq.n	8006c96 <USB_CoreReset+0x36>

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
	...

08006cc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cd0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006cd4:	f002 fc7e 	bl	80095d4 <USBD_static_malloc>
 8006cd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	32b0      	adds	r2, #176	@ 0xb0
 8006cea:	2100      	movs	r1, #0
 8006cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e0d4      	b.n	8006e9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006cf4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f002 fce2 	bl	80096c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32b0      	adds	r2, #176	@ 0xb0
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	32b0      	adds	r2, #176	@ 0xb0
 8006d1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	7c1b      	ldrb	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d138      	bne.n	8006d9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ea8 <USBD_CDC_Init+0x1e4>)
 8006d2e:	7819      	ldrb	r1, [r3, #0]
 8006d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d34:	2202      	movs	r2, #2
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f002 fb29 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d3c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ea8 <USBD_CDC_Init+0x1e4>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 020f 	and.w	r2, r3, #15
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	3324      	adds	r3, #36	@ 0x24
 8006d52:	2201      	movs	r2, #1
 8006d54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d56:	4b55      	ldr	r3, [pc, #340]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006d58:	7819      	ldrb	r1, [r3, #0]
 8006d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d5e:	2202      	movs	r2, #2
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f002 fb14 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d66:	4b51      	ldr	r3, [pc, #324]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f003 020f 	and.w	r2, r3, #15
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d7e:	2201      	movs	r2, #1
 8006d80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d82:	4b4b      	ldr	r3, [pc, #300]	@ (8006eb0 <USBD_CDC_Init+0x1ec>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	f003 020f 	and.w	r2, r3, #15
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	3326      	adds	r3, #38	@ 0x26
 8006d98:	2210      	movs	r2, #16
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	e035      	b.n	8006e0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d9e:	4b42      	ldr	r3, [pc, #264]	@ (8006ea8 <USBD_CDC_Init+0x1e4>)
 8006da0:	7819      	ldrb	r1, [r3, #0]
 8006da2:	2340      	movs	r3, #64	@ 0x40
 8006da4:	2202      	movs	r2, #2
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f002 faf1 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006dac:	4b3e      	ldr	r3, [pc, #248]	@ (8006ea8 <USBD_CDC_Init+0x1e4>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3324      	adds	r3, #36	@ 0x24
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dc6:	4b39      	ldr	r3, [pc, #228]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006dc8:	7819      	ldrb	r1, [r3, #0]
 8006dca:	2340      	movs	r3, #64	@ 0x40
 8006dcc:	2202      	movs	r2, #2
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f002 fadd 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dd4:	4b35      	ldr	r3, [pc, #212]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 020f 	and.w	r2, r3, #15
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006dec:	2201      	movs	r2, #1
 8006dee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006df0:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb0 <USBD_CDC_Init+0x1ec>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f003 020f 	and.w	r2, r3, #15
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	3326      	adds	r3, #38	@ 0x26
 8006e06:	2210      	movs	r2, #16
 8006e08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e0a:	4b29      	ldr	r3, [pc, #164]	@ (8006eb0 <USBD_CDC_Init+0x1ec>)
 8006e0c:	7819      	ldrb	r1, [r3, #0]
 8006e0e:	2308      	movs	r3, #8
 8006e10:	2203      	movs	r2, #3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f002 fabb 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e18:	4b25      	ldr	r3, [pc, #148]	@ (8006eb0 <USBD_CDC_Init+0x1ec>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 020f 	and.w	r2, r3, #15
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	3324      	adds	r3, #36	@ 0x24
 8006e2e:	2201      	movs	r2, #1
 8006e30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	33b0      	adds	r3, #176	@ 0xb0
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e018      	b.n	8006e9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7c1b      	ldrb	r3, [r3, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e74:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006e76:	7819      	ldrb	r1, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f002 fb72 	bl	800956c <USBD_LL_PrepareReceive>
 8006e88:	e008      	b.n	8006e9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e8a:	4b08      	ldr	r3, [pc, #32]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006e8c:	7819      	ldrb	r1, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e94:	2340      	movs	r3, #64	@ 0x40
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f002 fb68 	bl	800956c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	200000c3 	.word	0x200000c3
 8006eac:	200000c4 	.word	0x200000c4
 8006eb0:	200000c5 	.word	0x200000c5

08006eb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8006fac <USBD_CDC_DeInit+0xf8>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f002 fa87 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ecc:	4b37      	ldr	r3, [pc, #220]	@ (8006fac <USBD_CDC_DeInit+0xf8>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3324      	adds	r3, #36	@ 0x24
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ee6:	4b32      	ldr	r3, [pc, #200]	@ (8006fb0 <USBD_CDC_DeInit+0xfc>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f002 fa74 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8006fb0 <USBD_CDC_DeInit+0xfc>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	f003 020f 	and.w	r2, r3, #15
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f0e:	4b29      	ldr	r3, [pc, #164]	@ (8006fb4 <USBD_CDC_DeInit+0x100>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f002 fa60 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f1a:	4b26      	ldr	r3, [pc, #152]	@ (8006fb4 <USBD_CDC_DeInit+0x100>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 020f 	and.w	r2, r3, #15
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	3324      	adds	r3, #36	@ 0x24
 8006f30:	2200      	movs	r2, #0
 8006f32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f34:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb4 <USBD_CDC_DeInit+0x100>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	f003 020f 	and.w	r2, r3, #15
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	3326      	adds	r3, #38	@ 0x26
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	32b0      	adds	r2, #176	@ 0xb0
 8006f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d01f      	beq.n	8006fa0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	33b0      	adds	r3, #176	@ 0xb0
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	32b0      	adds	r2, #176	@ 0xb0
 8006f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f002 fb34 	bl	80095f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	32b0      	adds	r2, #176	@ 0xb0
 8006f92:	2100      	movs	r1, #0
 8006f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	200000c3 	.word	0x200000c3
 8006fb0:	200000c4 	.word	0x200000c4
 8006fb4:	200000c5 	.word	0x200000c5

08006fb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	32b0      	adds	r2, #176	@ 0xb0
 8006fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e0bf      	b.n	8007168 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d050      	beq.n	8007096 <USBD_CDC_Setup+0xde>
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	f040 80af 	bne.w	8007158 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88db      	ldrh	r3, [r3, #6]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d03a      	beq.n	8007078 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b25b      	sxtb	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	da1b      	bge.n	8007044 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	33b0      	adds	r3, #176	@ 0xb0
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007022:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	88d2      	ldrh	r2, [r2, #6]
 8007028:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	88db      	ldrh	r3, [r3, #6]
 800702e:	2b07      	cmp	r3, #7
 8007030:	bf28      	it	cs
 8007032:	2307      	movcs	r3, #7
 8007034:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	89fa      	ldrh	r2, [r7, #14]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fd87 	bl	8008b50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007042:	e090      	b.n	8007166 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	785a      	ldrb	r2, [r3, #1]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	88db      	ldrh	r3, [r3, #6]
 8007052:	2b3f      	cmp	r3, #63	@ 0x3f
 8007054:	d803      	bhi.n	800705e <USBD_CDC_Setup+0xa6>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	88db      	ldrh	r3, [r3, #6]
 800705a:	b2da      	uxtb	r2, r3
 800705c:	e000      	b.n	8007060 <USBD_CDC_Setup+0xa8>
 800705e:	2240      	movs	r2, #64	@ 0x40
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007066:	6939      	ldr	r1, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800706e:	461a      	mov	r2, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 fd99 	bl	8008ba8 <USBD_CtlPrepareRx>
      break;
 8007076:	e076      	b.n	8007166 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	33b0      	adds	r3, #176	@ 0xb0
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	7850      	ldrb	r0, [r2, #1]
 800708e:	2200      	movs	r2, #0
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	4798      	blx	r3
      break;
 8007094:	e067      	b.n	8007166 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2b0b      	cmp	r3, #11
 800709c:	d851      	bhi.n	8007142 <USBD_CDC_Setup+0x18a>
 800709e:	a201      	add	r2, pc, #4	@ (adr r2, 80070a4 <USBD_CDC_Setup+0xec>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070d5 	.word	0x080070d5
 80070a8:	08007151 	.word	0x08007151
 80070ac:	08007143 	.word	0x08007143
 80070b0:	08007143 	.word	0x08007143
 80070b4:	08007143 	.word	0x08007143
 80070b8:	08007143 	.word	0x08007143
 80070bc:	08007143 	.word	0x08007143
 80070c0:	08007143 	.word	0x08007143
 80070c4:	08007143 	.word	0x08007143
 80070c8:	08007143 	.word	0x08007143
 80070cc:	080070ff 	.word	0x080070ff
 80070d0:	08007129 	.word	0x08007129
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d107      	bne.n	80070f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070e0:	f107 030a 	add.w	r3, r7, #10
 80070e4:	2202      	movs	r2, #2
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fd31 	bl	8008b50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070ee:	e032      	b.n	8007156 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f001 fcbb 	bl	8008a6e <USBD_CtlError>
            ret = USBD_FAIL;
 80070f8:	2303      	movs	r3, #3
 80070fa:	75fb      	strb	r3, [r7, #23]
          break;
 80070fc:	e02b      	b.n	8007156 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d107      	bne.n	800711a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800710a:	f107 030d 	add.w	r3, r7, #13
 800710e:	2201      	movs	r2, #1
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fd1c 	bl	8008b50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007118:	e01d      	b.n	8007156 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 fca6 	bl	8008a6e <USBD_CtlError>
            ret = USBD_FAIL;
 8007122:	2303      	movs	r3, #3
 8007124:	75fb      	strb	r3, [r7, #23]
          break;
 8007126:	e016      	b.n	8007156 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b03      	cmp	r3, #3
 8007132:	d00f      	beq.n	8007154 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fc99 	bl	8008a6e <USBD_CtlError>
            ret = USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007140:	e008      	b.n	8007154 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 fc92 	bl	8008a6e <USBD_CtlError>
          ret = USBD_FAIL;
 800714a:	2303      	movs	r3, #3
 800714c:	75fb      	strb	r3, [r7, #23]
          break;
 800714e:	e002      	b.n	8007156 <USBD_CDC_Setup+0x19e>
          break;
 8007150:	bf00      	nop
 8007152:	e008      	b.n	8007166 <USBD_CDC_Setup+0x1ae>
          break;
 8007154:	bf00      	nop
      }
      break;
 8007156:	e006      	b.n	8007166 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fc87 	bl	8008a6e <USBD_CtlError>
      ret = USBD_FAIL;
 8007160:	2303      	movs	r3, #3
 8007162:	75fb      	strb	r3, [r7, #23]
      break;
 8007164:	bf00      	nop
  }

  return (uint8_t)ret;
 8007166:	7dfb      	ldrb	r3, [r7, #23]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007182:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	32b0      	adds	r2, #176	@ 0xb0
 800718e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007196:	2303      	movs	r3, #3
 8007198:	e065      	b.n	8007266 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	32b0      	adds	r2, #176	@ 0xb0
 80071a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	f003 020f 	and.w	r2, r3, #15
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	440b      	add	r3, r1
 80071bc:	3318      	adds	r3, #24
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d02f      	beq.n	8007224 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	f003 020f 	and.w	r2, r3, #15
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	440b      	add	r3, r1
 80071d6:	3318      	adds	r3, #24
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	f003 010f 	and.w	r1, r3, #15
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	460b      	mov	r3, r1
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	440b      	add	r3, r1
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4403      	add	r3, r0
 80071ec:	331c      	adds	r3, #28
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80071f4:	fb01 f303 	mul.w	r3, r1, r3
 80071f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d112      	bne.n	8007224 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80071fe:	78fb      	ldrb	r3, [r7, #3]
 8007200:	f003 020f 	and.w	r2, r3, #15
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	440b      	add	r3, r1
 8007210:	3318      	adds	r3, #24
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007216:	78f9      	ldrb	r1, [r7, #3]
 8007218:	2300      	movs	r3, #0
 800721a:	2200      	movs	r2, #0
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f002 f984 	bl	800952a <USBD_LL_Transmit>
 8007222:	e01f      	b.n	8007264 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	33b0      	adds	r3, #176	@ 0xb0
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d010      	beq.n	8007264 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	33b0      	adds	r3, #176	@ 0xb0
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	32b0      	adds	r2, #176	@ 0xb0
 8007284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007288:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	32b0      	adds	r2, #176	@ 0xb0
 8007294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	e01a      	b.n	80072d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f002 f982 	bl	80095ae <USBD_LL_GetRxDataSize>
 80072aa:	4602      	mov	r2, r0
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	33b0      	adds	r3, #176	@ 0xb0
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80072d0:	4611      	mov	r1, r2
 80072d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b084      	sub	sp, #16
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	32b0      	adds	r2, #176	@ 0xb0
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e024      	b.n	800734a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	33b0      	adds	r3, #176	@ 0xb0
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d019      	beq.n	8007348 <USBD_CDC_EP0_RxReady+0x6a>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800731a:	2bff      	cmp	r3, #255	@ 0xff
 800731c:	d014      	beq.n	8007348 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	33b0      	adds	r3, #176	@ 0xb0
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007336:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800733e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	22ff      	movs	r2, #255	@ 0xff
 8007344:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800735c:	2182      	movs	r1, #130	@ 0x82
 800735e:	4818      	ldr	r0, [pc, #96]	@ (80073c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007360:	f000 fd4f 	bl	8007e02 <USBD_GetEpDesc>
 8007364:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007366:	2101      	movs	r1, #1
 8007368:	4815      	ldr	r0, [pc, #84]	@ (80073c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800736a:	f000 fd4a 	bl	8007e02 <USBD_GetEpDesc>
 800736e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007370:	2181      	movs	r1, #129	@ 0x81
 8007372:	4813      	ldr	r0, [pc, #76]	@ (80073c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007374:	f000 fd45 	bl	8007e02 <USBD_GetEpDesc>
 8007378:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2210      	movs	r2, #16
 8007384:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d006      	beq.n	800739a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2200      	movs	r2, #0
 8007390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007394:	711a      	strb	r2, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d006      	beq.n	80073ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073a8:	711a      	strb	r2, [r3, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2243      	movs	r2, #67	@ 0x43
 80073b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073b4:	4b02      	ldr	r3, [pc, #8]	@ (80073c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000080 	.word	0x20000080

080073c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073cc:	2182      	movs	r1, #130	@ 0x82
 80073ce:	4818      	ldr	r0, [pc, #96]	@ (8007430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073d0:	f000 fd17 	bl	8007e02 <USBD_GetEpDesc>
 80073d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073d6:	2101      	movs	r1, #1
 80073d8:	4815      	ldr	r0, [pc, #84]	@ (8007430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073da:	f000 fd12 	bl	8007e02 <USBD_GetEpDesc>
 80073de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073e0:	2181      	movs	r1, #129	@ 0x81
 80073e2:	4813      	ldr	r0, [pc, #76]	@ (8007430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073e4:	f000 fd0d 	bl	8007e02 <USBD_GetEpDesc>
 80073e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2210      	movs	r2, #16
 80073f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d006      	beq.n	800740a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	2200      	movs	r2, #0
 8007400:	711a      	strb	r2, [r3, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f042 0202 	orr.w	r2, r2, #2
 8007408:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d006      	beq.n	800741e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	711a      	strb	r2, [r3, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f042 0202 	orr.w	r2, r2, #2
 800741c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2243      	movs	r2, #67	@ 0x43
 8007422:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007424:	4b02      	ldr	r3, [pc, #8]	@ (8007430 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000080 	.word	0x20000080

08007434 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800743c:	2182      	movs	r1, #130	@ 0x82
 800743e:	4818      	ldr	r0, [pc, #96]	@ (80074a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007440:	f000 fcdf 	bl	8007e02 <USBD_GetEpDesc>
 8007444:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007446:	2101      	movs	r1, #1
 8007448:	4815      	ldr	r0, [pc, #84]	@ (80074a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800744a:	f000 fcda 	bl	8007e02 <USBD_GetEpDesc>
 800744e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007450:	2181      	movs	r1, #129	@ 0x81
 8007452:	4813      	ldr	r0, [pc, #76]	@ (80074a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007454:	f000 fcd5 	bl	8007e02 <USBD_GetEpDesc>
 8007458:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2210      	movs	r2, #16
 8007464:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d006      	beq.n	800747a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2200      	movs	r2, #0
 8007470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007474:	711a      	strb	r2, [r3, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d006      	beq.n	800748e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007488:	711a      	strb	r2, [r3, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2243      	movs	r2, #67	@ 0x43
 8007492:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007494:	4b02      	ldr	r3, [pc, #8]	@ (80074a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20000080 	.word	0x20000080

080074a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	220a      	movs	r2, #10
 80074b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074b2:	4b03      	ldr	r3, [pc, #12]	@ (80074c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	2000003c 	.word	0x2000003c

080074c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e009      	b.n	80074ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	33b0      	adds	r3, #176	@ 0xb0
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	32b0      	adds	r2, #176	@ 0xb0
 800750e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007512:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800751a:	2303      	movs	r3, #3
 800751c:	e008      	b.n	8007530 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	32b0      	adds	r2, #176	@ 0xb0
 8007550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007554:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	e004      	b.n	800756a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
	...

08007578 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	32b0      	adds	r2, #176	@ 0xb0
 800758a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007590:	2301      	movs	r3, #1
 8007592:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800759a:	2303      	movs	r3, #3
 800759c:	e025      	b.n	80075ea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d11f      	bne.n	80075e8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80075b0:	4b10      	ldr	r3, [pc, #64]	@ (80075f4 <USBD_CDC_TransmitPacket+0x7c>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f003 020f 	and.w	r2, r3, #15
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4403      	add	r3, r0
 80075ca:	3318      	adds	r3, #24
 80075cc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80075ce:	4b09      	ldr	r3, [pc, #36]	@ (80075f4 <USBD_CDC_TransmitPacket+0x7c>)
 80075d0:	7819      	ldrb	r1, [r3, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 ffa3 	bl	800952a <USBD_LL_Transmit>

    ret = USBD_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	200000c3 	.word	0x200000c3

080075f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	32b0      	adds	r2, #176	@ 0xb0
 800760a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	32b0      	adds	r2, #176	@ 0xb0
 800761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007622:	2303      	movs	r3, #3
 8007624:	e018      	b.n	8007658 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7c1b      	ldrb	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800762e:	4b0c      	ldr	r3, [pc, #48]	@ (8007660 <USBD_CDC_ReceivePacket+0x68>)
 8007630:	7819      	ldrb	r1, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007638:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 ff95 	bl	800956c <USBD_LL_PrepareReceive>
 8007642:	e008      	b.n	8007656 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007644:	4b06      	ldr	r3, [pc, #24]	@ (8007660 <USBD_CDC_ReceivePacket+0x68>)
 8007646:	7819      	ldrb	r1, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800764e:	2340      	movs	r3, #64	@ 0x40
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 ff8b 	bl	800956c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	200000c4 	.word	0x200000c4

08007664 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	e01f      	b.n	80076bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	79fa      	ldrb	r2, [r7, #7]
 80076ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f001 fe05 	bl	80092c0 <USBD_LL_Init>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e025      	b.n	8007728 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32ae      	adds	r2, #174	@ 0xae
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00f      	beq.n	8007718 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	32ae      	adds	r2, #174	@ 0xae
 8007702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	f107 020e 	add.w	r2, r7, #14
 800770c:	4610      	mov	r0, r2
 800770e:	4798      	blx	r3
 8007710:	4602      	mov	r2, r0
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 fe0d 	bl	8009358 <USBD_LL_Start>
 800773e:	4603      	mov	r3, r0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007750:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d009      	beq.n	800778c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	78fa      	ldrb	r2, [r7, #3]
 8007782:	4611      	mov	r1, r2
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800778c:	7bfb      	ldrb	r3, [r7, #15]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	4611      	mov	r1, r2
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 f90c 	bl	80089fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80077f0:	461a      	mov	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	2b02      	cmp	r3, #2
 8007804:	d01a      	beq.n	800783c <USBD_LL_SetupStage+0x72>
 8007806:	2b02      	cmp	r3, #2
 8007808:	d822      	bhi.n	8007850 <USBD_LL_SetupStage+0x86>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <USBD_LL_SetupStage+0x4a>
 800780e:	2b01      	cmp	r3, #1
 8007810:	d00a      	beq.n	8007828 <USBD_LL_SetupStage+0x5e>
 8007812:	e01d      	b.n	8007850 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fb63 	bl	8007ee8 <USBD_StdDevReq>
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]
      break;
 8007826:	e020      	b.n	800786a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fbcb 	bl	8007fcc <USBD_StdItfReq>
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]
      break;
 800783a:	e016      	b.n	800786a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fc2d 	bl	80080a4 <USBD_StdEPReq>
 800784a:	4603      	mov	r3, r0
 800784c:	73fb      	strb	r3, [r7, #15]
      break;
 800784e:	e00c      	b.n	800786a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007856:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fdda 	bl	8009418 <USBD_LL_StallEP>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]
      break;
 8007868:	bf00      	nop
  }

  return ret;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	460b      	mov	r3, r1
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007886:	7afb      	ldrb	r3, [r7, #11]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d16e      	bne.n	800796a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800789a:	2b03      	cmp	r3, #3
 800789c:	f040 8098 	bne.w	80079d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d913      	bls.n	80078d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	1ad2      	subs	r2, r2, r3
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	4293      	cmp	r3, r2
 80078c4:	bf28      	it	cs
 80078c6:	4613      	movcs	r3, r2
 80078c8:	461a      	mov	r2, r3
 80078ca:	6879      	ldr	r1, [r7, #4]
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f001 f988 	bl	8008be2 <USBD_CtlContinueRx>
 80078d2:	e07d      	b.n	80079d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d014      	beq.n	800790c <USBD_LL_DataOutStage+0x98>
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d81d      	bhi.n	8007922 <USBD_LL_DataOutStage+0xae>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <USBD_LL_DataOutStage+0x7c>
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d003      	beq.n	80078f6 <USBD_LL_DataOutStage+0x82>
 80078ee:	e018      	b.n	8007922 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	75bb      	strb	r3, [r7, #22]
            break;
 80078f4:	e018      	b.n	8007928 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	4619      	mov	r1, r3
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 fa64 	bl	8007dce <USBD_CoreFindIF>
 8007906:	4603      	mov	r3, r0
 8007908:	75bb      	strb	r3, [r7, #22]
            break;
 800790a:	e00d      	b.n	8007928 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007912:	b2db      	uxtb	r3, r3
 8007914:	4619      	mov	r1, r3
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fa66 	bl	8007de8 <USBD_CoreFindEP>
 800791c:	4603      	mov	r3, r0
 800791e:	75bb      	strb	r3, [r7, #22]
            break;
 8007920:	e002      	b.n	8007928 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	75bb      	strb	r3, [r7, #22]
            break;
 8007926:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007928:	7dbb      	ldrb	r3, [r7, #22]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d119      	bne.n	8007962 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b03      	cmp	r3, #3
 8007938:	d113      	bne.n	8007962 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800793a:	7dba      	ldrb	r2, [r7, #22]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	32ae      	adds	r2, #174	@ 0xae
 8007940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800794a:	7dba      	ldrb	r2, [r7, #22]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007952:	7dba      	ldrb	r2, [r7, #22]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	32ae      	adds	r2, #174	@ 0xae
 8007958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f001 f94e 	bl	8008c04 <USBD_CtlSendStatus>
 8007968:	e032      	b.n	80079d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800796a:	7afb      	ldrb	r3, [r7, #11]
 800796c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007970:	b2db      	uxtb	r3, r3
 8007972:	4619      	mov	r1, r3
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 fa37 	bl	8007de8 <USBD_CoreFindEP>
 800797a:	4603      	mov	r3, r0
 800797c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800797e:	7dbb      	ldrb	r3, [r7, #22]
 8007980:	2bff      	cmp	r3, #255	@ 0xff
 8007982:	d025      	beq.n	80079d0 <USBD_LL_DataOutStage+0x15c>
 8007984:	7dbb      	ldrb	r3, [r7, #22]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d122      	bne.n	80079d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b03      	cmp	r3, #3
 8007994:	d117      	bne.n	80079c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007996:	7dba      	ldrb	r2, [r7, #22]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	32ae      	adds	r2, #174	@ 0xae
 800799c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00f      	beq.n	80079c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80079a6:	7dba      	ldrb	r2, [r7, #22]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80079ae:	7dba      	ldrb	r2, [r7, #22]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	32ae      	adds	r2, #174	@ 0xae
 80079b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	7afa      	ldrb	r2, [r7, #11]
 80079bc:	4611      	mov	r1, r2
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	4798      	blx	r3
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	e000      	b.n	80079d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	460b      	mov	r3, r1
 80079e4:	607a      	str	r2, [r7, #4]
 80079e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d16f      	bne.n	8007ace <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3314      	adds	r3, #20
 80079f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d15a      	bne.n	8007ab4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d914      	bls.n	8007a34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	689a      	ldr	r2, [r3, #8]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	1ad2      	subs	r2, r2, r3
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f001 f8b0 	bl	8008b86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a26:	2300      	movs	r3, #0
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f001 fd9d 	bl	800956c <USBD_LL_PrepareReceive>
 8007a32:	e03f      	b.n	8007ab4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d11c      	bne.n	8007a7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d316      	bcc.n	8007a7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d20f      	bcs.n	8007a7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f001 f891 	bl	8008b86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2100      	movs	r1, #0
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f001 fd7a 	bl	800956c <USBD_LL_PrepareReceive>
 8007a78:	e01c      	b.n	8007ab4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d10f      	bne.n	8007aa6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aa6:	2180      	movs	r1, #128	@ 0x80
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f001 fcb5 	bl	8009418 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f001 f8bb 	bl	8008c2a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d03a      	beq.n	8007b34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff fe42 	bl	8007748 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007acc:	e032      	b.n	8007b34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ace:	7afb      	ldrb	r3, [r7, #11]
 8007ad0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f985 	bl	8007de8 <USBD_CoreFindEP>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	2bff      	cmp	r3, #255	@ 0xff
 8007ae6:	d025      	beq.n	8007b34 <USBD_LL_DataInStage+0x15a>
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d122      	bne.n	8007b34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d11c      	bne.n	8007b34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007afa:	7dfa      	ldrb	r2, [r7, #23]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	32ae      	adds	r2, #174	@ 0xae
 8007b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d014      	beq.n	8007b34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b0a:	7dfa      	ldrb	r2, [r7, #23]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b12:	7dfa      	ldrb	r2, [r7, #23]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	32ae      	adds	r2, #174	@ 0xae
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	7afa      	ldrb	r2, [r7, #11]
 8007b20:	4611      	mov	r1, r2
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	4798      	blx	r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b2a:	7dbb      	ldrb	r3, [r7, #22]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b30:	7dbb      	ldrb	r3, [r7, #22]
 8007b32:	e000      	b.n	8007b36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d014      	beq.n	8007ba4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00e      	beq.n	8007ba4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6852      	ldr	r2, [r2, #4]
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	4611      	mov	r1, r2
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ba4:	2340      	movs	r3, #64	@ 0x40
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2100      	movs	r1, #0
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 fbef 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2240      	movs	r2, #64	@ 0x40
 8007bbc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bc0:	2340      	movs	r3, #64	@ 0x40
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2180      	movs	r1, #128	@ 0x80
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 fbe1 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2240      	movs	r2, #64	@ 0x40
 8007bd6:	621a      	str	r2, [r3, #32]

  return ret;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d006      	beq.n	8007c24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2204      	movs	r2, #4
 8007c28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d106      	bne.n	8007c5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d110      	bne.n	8007ca0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	32ae      	adds	r2, #174	@ 0xae
 8007cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e01c      	b.n	8007d06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d115      	bne.n	8007d04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	32ae      	adds	r2, #174	@ 0xae
 8007ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	32ae      	adds	r2, #174	@ 0xae
 8007cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	78fa      	ldrb	r2, [r7, #3]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	32ae      	adds	r2, #174	@ 0xae
 8007d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e01c      	b.n	8007d6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d115      	bne.n	8007d68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	32ae      	adds	r2, #174	@ 0xae
 8007d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32ae      	adds	r2, #174	@ 0xae
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d60:	78fa      	ldrb	r2, [r7, #3]
 8007d62:	4611      	mov	r1, r2
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00e      	beq.n	8007dc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6852      	ldr	r2, [r2, #4]
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	4611      	mov	r1, r2
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4798      	blx	r3
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007dda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007df4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b086      	sub	sp, #24
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	885b      	ldrh	r3, [r3, #2]
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	7812      	ldrb	r2, [r2, #0]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d91f      	bls.n	8007e68 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007e2e:	e013      	b.n	8007e58 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007e30:	f107 030a 	add.w	r3, r7, #10
 8007e34:	4619      	mov	r1, r3
 8007e36:	6978      	ldr	r0, [r7, #20]
 8007e38:	f000 f81b 	bl	8007e72 <USBD_GetNextDesc>
 8007e3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	785b      	ldrb	r3, [r3, #1]
 8007e42:	2b05      	cmp	r3, #5
 8007e44:	d108      	bne.n	8007e58 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	789b      	ldrb	r3, [r3, #2]
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d008      	beq.n	8007e66 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007e54:	2300      	movs	r3, #0
 8007e56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	885b      	ldrh	r3, [r3, #2]
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	897b      	ldrh	r3, [r7, #10]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d8e5      	bhi.n	8007e30 <USBD_GetEpDesc+0x2e>
 8007e64:	e000      	b.n	8007e68 <USBD_GetEpDesc+0x66>
          break;
 8007e66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007e68:	693b      	ldr	r3, [r7, #16]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	7812      	ldrb	r2, [r2, #0]
 8007e88:	4413      	add	r3, r2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4413      	add	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b087      	sub	sp, #28
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ec8:	8a3b      	ldrh	r3, [r7, #16]
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	b21a      	sxth	r2, r3
 8007ece:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	b21b      	sxth	r3, r3
 8007ed6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ed8:	89fb      	ldrh	r3, [r7, #14]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007efe:	2b40      	cmp	r3, #64	@ 0x40
 8007f00:	d005      	beq.n	8007f0e <USBD_StdDevReq+0x26>
 8007f02:	2b40      	cmp	r3, #64	@ 0x40
 8007f04:	d857      	bhi.n	8007fb6 <USBD_StdDevReq+0xce>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00f      	beq.n	8007f2a <USBD_StdDevReq+0x42>
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d153      	bne.n	8007fb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	32ae      	adds	r2, #174	@ 0xae
 8007f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	4798      	blx	r3
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]
      break;
 8007f28:	e04a      	b.n	8007fc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	785b      	ldrb	r3, [r3, #1]
 8007f2e:	2b09      	cmp	r3, #9
 8007f30:	d83b      	bhi.n	8007faa <USBD_StdDevReq+0xc2>
 8007f32:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <USBD_StdDevReq+0x50>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08007fa1 	.word	0x08007fa1
 8007f40:	08007fab 	.word	0x08007fab
 8007f44:	08007f97 	.word	0x08007f97
 8007f48:	08007fab 	.word	0x08007fab
 8007f4c:	08007f6b 	.word	0x08007f6b
 8007f50:	08007f61 	.word	0x08007f61
 8007f54:	08007fab 	.word	0x08007fab
 8007f58:	08007f83 	.word	0x08007f83
 8007f5c:	08007f75 	.word	0x08007f75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa3c 	bl	80083e0 <USBD_GetDescriptor>
          break;
 8007f68:	e024      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fba1 	bl	80086b4 <USBD_SetAddress>
          break;
 8007f72:	e01f      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fbe0 	bl	800873c <USBD_SetConfig>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73fb      	strb	r3, [r7, #15]
          break;
 8007f80:	e018      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fc83 	bl	8008890 <USBD_GetConfig>
          break;
 8007f8a:	e013      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fcb4 	bl	80088fc <USBD_GetStatus>
          break;
 8007f94:	e00e      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fce3 	bl	8008964 <USBD_SetFeature>
          break;
 8007f9e:	e009      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fd07 	bl	80089b6 <USBD_ClrFeature>
          break;
 8007fa8:	e004      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fd5e 	bl	8008a6e <USBD_CtlError>
          break;
 8007fb2:	bf00      	nop
      }
      break;
 8007fb4:	e004      	b.n	8007fc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fd58 	bl	8008a6e <USBD_CtlError>
      break;
 8007fbe:	bf00      	nop
  }

  return ret;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop

08007fcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fe2:	2b40      	cmp	r3, #64	@ 0x40
 8007fe4:	d005      	beq.n	8007ff2 <USBD_StdItfReq+0x26>
 8007fe6:	2b40      	cmp	r3, #64	@ 0x40
 8007fe8:	d852      	bhi.n	8008090 <USBD_StdItfReq+0xc4>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <USBD_StdItfReq+0x26>
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	d14e      	bne.n	8008090 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d840      	bhi.n	8008082 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	889b      	ldrh	r3, [r3, #4]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b01      	cmp	r3, #1
 8008008:	d836      	bhi.n	8008078 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	889b      	ldrh	r3, [r3, #4]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff fedb 	bl	8007dce <USBD_CoreFindIF>
 8008018:	4603      	mov	r3, r0
 800801a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	2bff      	cmp	r3, #255	@ 0xff
 8008020:	d01d      	beq.n	800805e <USBD_StdItfReq+0x92>
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d11a      	bne.n	800805e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008028:	7bba      	ldrb	r2, [r7, #14]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	32ae      	adds	r2, #174	@ 0xae
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00f      	beq.n	8008058 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008038:	7bba      	ldrb	r2, [r7, #14]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008040:	7bba      	ldrb	r2, [r7, #14]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	32ae      	adds	r2, #174	@ 0xae
 8008046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
 8008052:	4603      	mov	r3, r0
 8008054:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008056:	e004      	b.n	8008062 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008058:	2303      	movs	r3, #3
 800805a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800805c:	e001      	b.n	8008062 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800805e:	2303      	movs	r3, #3
 8008060:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	88db      	ldrh	r3, [r3, #6]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d110      	bne.n	800808c <USBD_StdItfReq+0xc0>
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10d      	bne.n	800808c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fdc7 	bl	8008c04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008076:	e009      	b.n	800808c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fcf7 	bl	8008a6e <USBD_CtlError>
          break;
 8008080:	e004      	b.n	800808c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fcf2 	bl	8008a6e <USBD_CtlError>
          break;
 800808a:	e000      	b.n	800808e <USBD_StdItfReq+0xc2>
          break;
 800808c:	bf00      	nop
      }
      break;
 800808e:	e004      	b.n	800809a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fceb 	bl	8008a6e <USBD_CtlError>
      break;
 8008098:	bf00      	nop
  }

  return ret;
 800809a:	7bfb      	ldrb	r3, [r7, #15]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	889b      	ldrh	r3, [r3, #4]
 80080b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080c0:	2b40      	cmp	r3, #64	@ 0x40
 80080c2:	d007      	beq.n	80080d4 <USBD_StdEPReq+0x30>
 80080c4:	2b40      	cmp	r3, #64	@ 0x40
 80080c6:	f200 817f 	bhi.w	80083c8 <USBD_StdEPReq+0x324>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d02a      	beq.n	8008124 <USBD_StdEPReq+0x80>
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	f040 817a 	bne.w	80083c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff fe85 	bl	8007de8 <USBD_CoreFindEP>
 80080de:	4603      	mov	r3, r0
 80080e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080e2:	7b7b      	ldrb	r3, [r7, #13]
 80080e4:	2bff      	cmp	r3, #255	@ 0xff
 80080e6:	f000 8174 	beq.w	80083d2 <USBD_StdEPReq+0x32e>
 80080ea:	7b7b      	ldrb	r3, [r7, #13]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f040 8170 	bne.w	80083d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80080f2:	7b7a      	ldrb	r2, [r7, #13]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80080fa:	7b7a      	ldrb	r2, [r7, #13]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	32ae      	adds	r2, #174	@ 0xae
 8008100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 8163 	beq.w	80083d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800810c:	7b7a      	ldrb	r2, [r7, #13]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	32ae      	adds	r2, #174	@ 0xae
 8008112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
 800811e:	4603      	mov	r3, r0
 8008120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008122:	e156      	b.n	80083d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	2b03      	cmp	r3, #3
 800812a:	d008      	beq.n	800813e <USBD_StdEPReq+0x9a>
 800812c:	2b03      	cmp	r3, #3
 800812e:	f300 8145 	bgt.w	80083bc <USBD_StdEPReq+0x318>
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 809b 	beq.w	800826e <USBD_StdEPReq+0x1ca>
 8008138:	2b01      	cmp	r3, #1
 800813a:	d03c      	beq.n	80081b6 <USBD_StdEPReq+0x112>
 800813c:	e13e      	b.n	80083bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d002      	beq.n	8008150 <USBD_StdEPReq+0xac>
 800814a:	2b03      	cmp	r3, #3
 800814c:	d016      	beq.n	800817c <USBD_StdEPReq+0xd8>
 800814e:	e02c      	b.n	80081aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00d      	beq.n	8008172 <USBD_StdEPReq+0xce>
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b80      	cmp	r3, #128	@ 0x80
 800815a:	d00a      	beq.n	8008172 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 f959 	bl	8009418 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008166:	2180      	movs	r1, #128	@ 0x80
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 f955 	bl	8009418 <USBD_LL_StallEP>
 800816e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008170:	e020      	b.n	80081b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fc7a 	bl	8008a6e <USBD_CtlError>
              break;
 800817a:	e01b      	b.n	80081b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	885b      	ldrh	r3, [r3, #2]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10e      	bne.n	80081a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <USBD_StdEPReq+0xfe>
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b80      	cmp	r3, #128	@ 0x80
 800818e:	d008      	beq.n	80081a2 <USBD_StdEPReq+0xfe>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	88db      	ldrh	r3, [r3, #6]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d104      	bne.n	80081a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 f93b 	bl	8009418 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fd2e 	bl	8008c04 <USBD_CtlSendStatus>

              break;
 80081a8:	e004      	b.n	80081b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fc5e 	bl	8008a6e <USBD_CtlError>
              break;
 80081b2:	bf00      	nop
          }
          break;
 80081b4:	e107      	b.n	80083c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d002      	beq.n	80081c8 <USBD_StdEPReq+0x124>
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d016      	beq.n	80081f4 <USBD_StdEPReq+0x150>
 80081c6:	e04b      	b.n	8008260 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <USBD_StdEPReq+0x146>
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	2b80      	cmp	r3, #128	@ 0x80
 80081d2:	d00a      	beq.n	80081ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f001 f91d 	bl	8009418 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081de:	2180      	movs	r1, #128	@ 0x80
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 f919 	bl	8009418 <USBD_LL_StallEP>
 80081e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081e8:	e040      	b.n	800826c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fc3e 	bl	8008a6e <USBD_CtlError>
              break;
 80081f2:	e03b      	b.n	800826c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	885b      	ldrh	r3, [r3, #2]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d136      	bne.n	800826a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008202:	2b00      	cmp	r3, #0
 8008204:	d004      	beq.n	8008210 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 f923 	bl	8009456 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fcf7 	bl	8008c04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008216:	7bbb      	ldrb	r3, [r7, #14]
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff fde4 	bl	8007de8 <USBD_CoreFindEP>
 8008220:	4603      	mov	r3, r0
 8008222:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008224:	7b7b      	ldrb	r3, [r7, #13]
 8008226:	2bff      	cmp	r3, #255	@ 0xff
 8008228:	d01f      	beq.n	800826a <USBD_StdEPReq+0x1c6>
 800822a:	7b7b      	ldrb	r3, [r7, #13]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d11c      	bne.n	800826a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008230:	7b7a      	ldrb	r2, [r7, #13]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008238:	7b7a      	ldrb	r2, [r7, #13]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	32ae      	adds	r2, #174	@ 0xae
 800823e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d010      	beq.n	800826a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008248:	7b7a      	ldrb	r2, [r7, #13]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	32ae      	adds	r2, #174	@ 0xae
 800824e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800825e:	e004      	b.n	800826a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fc03 	bl	8008a6e <USBD_CtlError>
              break;
 8008268:	e000      	b.n	800826c <USBD_StdEPReq+0x1c8>
              break;
 800826a:	bf00      	nop
          }
          break;
 800826c:	e0ab      	b.n	80083c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d002      	beq.n	8008280 <USBD_StdEPReq+0x1dc>
 800827a:	2b03      	cmp	r3, #3
 800827c:	d032      	beq.n	80082e4 <USBD_StdEPReq+0x240>
 800827e:	e097      	b.n	80083b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <USBD_StdEPReq+0x1f2>
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	2b80      	cmp	r3, #128	@ 0x80
 800828a:	d004      	beq.n	8008296 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fbed 	bl	8008a6e <USBD_CtlError>
                break;
 8008294:	e091      	b.n	80083ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800829a:	2b00      	cmp	r3, #0
 800829c:	da0b      	bge.n	80082b6 <USBD_StdEPReq+0x212>
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	3310      	adds	r3, #16
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	4413      	add	r3, r2
 80082b2:	3304      	adds	r3, #4
 80082b4:	e00b      	b.n	80082ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4413      	add	r3, r2
 80082cc:	3304      	adds	r3, #4
 80082ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2202      	movs	r2, #2
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fc37 	bl	8008b50 <USBD_CtlSendData>
              break;
 80082e2:	e06a      	b.n	80083ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	da11      	bge.n	8008310 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	f003 020f 	and.w	r2, r3, #15
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	3324      	adds	r3, #36	@ 0x24
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d117      	bne.n	8008336 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fbb0 	bl	8008a6e <USBD_CtlError>
                  break;
 800830e:	e054      	b.n	80083ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	f003 020f 	and.w	r2, r3, #15
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	4613      	mov	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	440b      	add	r3, r1
 8008322:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fb9d 	bl	8008a6e <USBD_CtlError>
                  break;
 8008334:	e041      	b.n	80083ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800833a:	2b00      	cmp	r3, #0
 800833c:	da0b      	bge.n	8008356 <USBD_StdEPReq+0x2b2>
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	3310      	adds	r3, #16
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	3304      	adds	r3, #4
 8008354:	e00b      	b.n	800836e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800835c:	4613      	mov	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	4413      	add	r3, r2
 800836c:	3304      	adds	r3, #4
 800836e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <USBD_StdEPReq+0x2d8>
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b80      	cmp	r3, #128	@ 0x80
 800837a:	d103      	bne.n	8008384 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	e00e      	b.n	80083a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 f883 	bl	8009494 <USBD_LL_IsStallEP>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	2201      	movs	r2, #1
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	e002      	b.n	80083a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2202      	movs	r2, #2
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fbd1 	bl	8008b50 <USBD_CtlSendData>
              break;
 80083ae:	e004      	b.n	80083ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fb5b 	bl	8008a6e <USBD_CtlError>
              break;
 80083b8:	bf00      	nop
          }
          break;
 80083ba:	e004      	b.n	80083c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fb55 	bl	8008a6e <USBD_CtlError>
          break;
 80083c4:	bf00      	nop
      }
      break;
 80083c6:	e005      	b.n	80083d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fb4f 	bl	8008a6e <USBD_CtlError>
      break;
 80083d0:	e000      	b.n	80083d4 <USBD_StdEPReq+0x330>
      break;
 80083d2:	bf00      	nop
  }

  return ret;
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	885b      	ldrh	r3, [r3, #2]
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	2b06      	cmp	r3, #6
 8008402:	f200 8128 	bhi.w	8008656 <USBD_GetDescriptor+0x276>
 8008406:	a201      	add	r2, pc, #4	@ (adr r2, 800840c <USBD_GetDescriptor+0x2c>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	08008429 	.word	0x08008429
 8008410:	08008441 	.word	0x08008441
 8008414:	08008481 	.word	0x08008481
 8008418:	08008657 	.word	0x08008657
 800841c:	08008657 	.word	0x08008657
 8008420:	080085f7 	.word	0x080085f7
 8008424:	08008623 	.word	0x08008623
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	7c12      	ldrb	r2, [r2, #16]
 8008434:	f107 0108 	add.w	r1, r7, #8
 8008438:	4610      	mov	r0, r2
 800843a:	4798      	blx	r3
 800843c:	60f8      	str	r0, [r7, #12]
      break;
 800843e:	e112      	b.n	8008666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	7c1b      	ldrb	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10d      	bne.n	8008464 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800844e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008450:	f107 0208 	add.w	r2, r7, #8
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3301      	adds	r3, #1
 800845e:	2202      	movs	r2, #2
 8008460:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008462:	e100      	b.n	8008666 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800846a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846c:	f107 0208 	add.w	r2, r7, #8
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	2202      	movs	r2, #2
 800847c:	701a      	strb	r2, [r3, #0]
      break;
 800847e:	e0f2      	b.n	8008666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	885b      	ldrh	r3, [r3, #2]
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b05      	cmp	r3, #5
 8008488:	f200 80ac 	bhi.w	80085e4 <USBD_GetDescriptor+0x204>
 800848c:	a201      	add	r2, pc, #4	@ (adr r2, 8008494 <USBD_GetDescriptor+0xb4>)
 800848e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008492:	bf00      	nop
 8008494:	080084ad 	.word	0x080084ad
 8008498:	080084e1 	.word	0x080084e1
 800849c:	08008515 	.word	0x08008515
 80084a0:	08008549 	.word	0x08008549
 80084a4:	0800857d 	.word	0x0800857d
 80084a8:	080085b1 	.word	0x080085b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00b      	beq.n	80084d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	7c12      	ldrb	r2, [r2, #16]
 80084c4:	f107 0108 	add.w	r1, r7, #8
 80084c8:	4610      	mov	r0, r2
 80084ca:	4798      	blx	r3
 80084cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ce:	e091      	b.n	80085f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 facb 	bl	8008a6e <USBD_CtlError>
            err++;
 80084d8:	7afb      	ldrb	r3, [r7, #11]
 80084da:	3301      	adds	r3, #1
 80084dc:	72fb      	strb	r3, [r7, #11]
          break;
 80084de:	e089      	b.n	80085f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00b      	beq.n	8008504 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	7c12      	ldrb	r2, [r2, #16]
 80084f8:	f107 0108 	add.w	r1, r7, #8
 80084fc:	4610      	mov	r0, r2
 80084fe:	4798      	blx	r3
 8008500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008502:	e077      	b.n	80085f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fab1 	bl	8008a6e <USBD_CtlError>
            err++;
 800850c:	7afb      	ldrb	r3, [r7, #11]
 800850e:	3301      	adds	r3, #1
 8008510:	72fb      	strb	r3, [r7, #11]
          break;
 8008512:	e06f      	b.n	80085f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	7c12      	ldrb	r2, [r2, #16]
 800852c:	f107 0108 	add.w	r1, r7, #8
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
 8008534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008536:	e05d      	b.n	80085f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fa97 	bl	8008a6e <USBD_CtlError>
            err++;
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	3301      	adds	r3, #1
 8008544:	72fb      	strb	r3, [r7, #11]
          break;
 8008546:	e055      	b.n	80085f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00b      	beq.n	800856c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	7c12      	ldrb	r2, [r2, #16]
 8008560:	f107 0108 	add.w	r1, r7, #8
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
 8008568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800856a:	e043      	b.n	80085f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa7d 	bl	8008a6e <USBD_CtlError>
            err++;
 8008574:	7afb      	ldrb	r3, [r7, #11]
 8008576:	3301      	adds	r3, #1
 8008578:	72fb      	strb	r3, [r7, #11]
          break;
 800857a:	e03b      	b.n	80085f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	7c12      	ldrb	r2, [r2, #16]
 8008594:	f107 0108 	add.w	r1, r7, #8
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800859e:	e029      	b.n	80085f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa63 	bl	8008a6e <USBD_CtlError>
            err++;
 80085a8:	7afb      	ldrb	r3, [r7, #11]
 80085aa:	3301      	adds	r3, #1
 80085ac:	72fb      	strb	r3, [r7, #11]
          break;
 80085ae:	e021      	b.n	80085f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	7c12      	ldrb	r2, [r2, #16]
 80085c8:	f107 0108 	add.w	r1, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085d2:	e00f      	b.n	80085f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa49 	bl	8008a6e <USBD_CtlError>
            err++;
 80085dc:	7afb      	ldrb	r3, [r7, #11]
 80085de:	3301      	adds	r3, #1
 80085e0:	72fb      	strb	r3, [r7, #11]
          break;
 80085e2:	e007      	b.n	80085f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fa41 	bl	8008a6e <USBD_CtlError>
          err++;
 80085ec:	7afb      	ldrb	r3, [r7, #11]
 80085ee:	3301      	adds	r3, #1
 80085f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80085f2:	bf00      	nop
      }
      break;
 80085f4:	e037      	b.n	8008666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	7c1b      	ldrb	r3, [r3, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d109      	bne.n	8008612 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008606:	f107 0208 	add.w	r2, r7, #8
 800860a:	4610      	mov	r0, r2
 800860c:	4798      	blx	r3
 800860e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008610:	e029      	b.n	8008666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fa2a 	bl	8008a6e <USBD_CtlError>
        err++;
 800861a:	7afb      	ldrb	r3, [r7, #11]
 800861c:	3301      	adds	r3, #1
 800861e:	72fb      	strb	r3, [r7, #11]
      break;
 8008620:	e021      	b.n	8008666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	7c1b      	ldrb	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10d      	bne.n	8008646 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008632:	f107 0208 	add.w	r2, r7, #8
 8008636:	4610      	mov	r0, r2
 8008638:	4798      	blx	r3
 800863a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3301      	adds	r3, #1
 8008640:	2207      	movs	r2, #7
 8008642:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008644:	e00f      	b.n	8008666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fa10 	bl	8008a6e <USBD_CtlError>
        err++;
 800864e:	7afb      	ldrb	r3, [r7, #11]
 8008650:	3301      	adds	r3, #1
 8008652:	72fb      	strb	r3, [r7, #11]
      break;
 8008654:	e007      	b.n	8008666 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fa08 	bl	8008a6e <USBD_CtlError>
      err++;
 800865e:	7afb      	ldrb	r3, [r7, #11]
 8008660:	3301      	adds	r3, #1
 8008662:	72fb      	strb	r3, [r7, #11]
      break;
 8008664:	bf00      	nop
  }

  if (err != 0U)
 8008666:	7afb      	ldrb	r3, [r7, #11]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d11e      	bne.n	80086aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	88db      	ldrh	r3, [r3, #6]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d016      	beq.n	80086a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008674:	893b      	ldrh	r3, [r7, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00e      	beq.n	8008698 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	88da      	ldrh	r2, [r3, #6]
 800867e:	893b      	ldrh	r3, [r7, #8]
 8008680:	4293      	cmp	r3, r2
 8008682:	bf28      	it	cs
 8008684:	4613      	movcs	r3, r2
 8008686:	b29b      	uxth	r3, r3
 8008688:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800868a:	893b      	ldrh	r3, [r7, #8]
 800868c:	461a      	mov	r2, r3
 800868e:	68f9      	ldr	r1, [r7, #12]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fa5d 	bl	8008b50 <USBD_CtlSendData>
 8008696:	e009      	b.n	80086ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f9e7 	bl	8008a6e <USBD_CtlError>
 80086a0:	e004      	b.n	80086ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 faae 	bl	8008c04 <USBD_CtlSendStatus>
 80086a8:	e000      	b.n	80086ac <USBD_GetDescriptor+0x2cc>
    return;
 80086aa:	bf00      	nop
  }
}
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop

080086b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	889b      	ldrh	r3, [r3, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d131      	bne.n	800872a <USBD_SetAddress+0x76>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	88db      	ldrh	r3, [r3, #6]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d12d      	bne.n	800872a <USBD_SetAddress+0x76>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	885b      	ldrh	r3, [r3, #2]
 80086d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80086d4:	d829      	bhi.n	800872a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	885b      	ldrh	r3, [r3, #2]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d104      	bne.n	80086f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f9bc 	bl	8008a6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f6:	e01d      	b.n	8008734 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	7bfa      	ldrb	r2, [r7, #15]
 80086fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fef1 	bl	80094ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fa7a 	bl	8008c04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d004      	beq.n	8008720 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2202      	movs	r2, #2
 800871a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871e:	e009      	b.n	8008734 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008728:	e004      	b.n	8008734 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f99e 	bl	8008a6e <USBD_CtlError>
  }
}
 8008732:	bf00      	nop
 8008734:	bf00      	nop
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	885b      	ldrh	r3, [r3, #2]
 800874e:	b2da      	uxtb	r2, r3
 8008750:	4b4e      	ldr	r3, [pc, #312]	@ (800888c <USBD_SetConfig+0x150>)
 8008752:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008754:	4b4d      	ldr	r3, [pc, #308]	@ (800888c <USBD_SetConfig+0x150>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d905      	bls.n	8008768 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f985 	bl	8008a6e <USBD_CtlError>
    return USBD_FAIL;
 8008764:	2303      	movs	r3, #3
 8008766:	e08c      	b.n	8008882 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b02      	cmp	r3, #2
 8008772:	d002      	beq.n	800877a <USBD_SetConfig+0x3e>
 8008774:	2b03      	cmp	r3, #3
 8008776:	d029      	beq.n	80087cc <USBD_SetConfig+0x90>
 8008778:	e075      	b.n	8008866 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800877a:	4b44      	ldr	r3, [pc, #272]	@ (800888c <USBD_SetConfig+0x150>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d020      	beq.n	80087c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008782:	4b42      	ldr	r3, [pc, #264]	@ (800888c <USBD_SetConfig+0x150>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800878c:	4b3f      	ldr	r3, [pc, #252]	@ (800888c <USBD_SetConfig+0x150>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fe ffe3 	bl	800775e <USBD_SetClassConfig>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d008      	beq.n	80087b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f962 	bl	8008a6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2202      	movs	r2, #2
 80087ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087b2:	e065      	b.n	8008880 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fa25 	bl	8008c04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2203      	movs	r2, #3
 80087be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80087c2:	e05d      	b.n	8008880 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fa1d 	bl	8008c04 <USBD_CtlSendStatus>
      break;
 80087ca:	e059      	b.n	8008880 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087cc:	4b2f      	ldr	r3, [pc, #188]	@ (800888c <USBD_SetConfig+0x150>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d112      	bne.n	80087fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80087dc:	4b2b      	ldr	r3, [pc, #172]	@ (800888c <USBD_SetConfig+0x150>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087e6:	4b29      	ldr	r3, [pc, #164]	@ (800888c <USBD_SetConfig+0x150>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7fe ffd2 	bl	8007796 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fa06 	bl	8008c04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087f8:	e042      	b.n	8008880 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80087fa:	4b24      	ldr	r3, [pc, #144]	@ (800888c <USBD_SetConfig+0x150>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d02a      	beq.n	800885e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7fe ffc0 	bl	8007796 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008816:	4b1d      	ldr	r3, [pc, #116]	@ (800888c <USBD_SetConfig+0x150>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008820:	4b1a      	ldr	r3, [pc, #104]	@ (800888c <USBD_SetConfig+0x150>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7fe ff99 	bl	800775e <USBD_SetClassConfig>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00f      	beq.n	8008856 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f918 	bl	8008a6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7fe ffa5 	bl	8007796 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008854:	e014      	b.n	8008880 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f9d4 	bl	8008c04 <USBD_CtlSendStatus>
      break;
 800885c:	e010      	b.n	8008880 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f9d0 	bl	8008c04 <USBD_CtlSendStatus>
      break;
 8008864:	e00c      	b.n	8008880 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f900 	bl	8008a6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800886e:	4b07      	ldr	r3, [pc, #28]	@ (800888c <USBD_SetConfig+0x150>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7fe ff8e 	bl	8007796 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800887a:	2303      	movs	r3, #3
 800887c:	73fb      	strb	r3, [r7, #15]
      break;
 800887e:	bf00      	nop
  }

  return ret;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20003334 	.word	0x20003334

08008890 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88db      	ldrh	r3, [r3, #6]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d004      	beq.n	80088ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f8e2 	bl	8008a6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088aa:	e023      	b.n	80088f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	dc02      	bgt.n	80088be <USBD_GetConfig+0x2e>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dc03      	bgt.n	80088c4 <USBD_GetConfig+0x34>
 80088bc:	e015      	b.n	80088ea <USBD_GetConfig+0x5a>
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d00b      	beq.n	80088da <USBD_GetConfig+0x4a>
 80088c2:	e012      	b.n	80088ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	3308      	adds	r3, #8
 80088ce:	2201      	movs	r2, #1
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f93c 	bl	8008b50 <USBD_CtlSendData>
        break;
 80088d8:	e00c      	b.n	80088f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3304      	adds	r3, #4
 80088de:	2201      	movs	r2, #1
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f934 	bl	8008b50 <USBD_CtlSendData>
        break;
 80088e8:	e004      	b.n	80088f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f8be 	bl	8008a6e <USBD_CtlError>
        break;
 80088f2:	bf00      	nop
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800890c:	b2db      	uxtb	r3, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	2b02      	cmp	r3, #2
 8008912:	d81e      	bhi.n	8008952 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	88db      	ldrh	r3, [r3, #6]
 8008918:	2b02      	cmp	r3, #2
 800891a:	d004      	beq.n	8008926 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f8a5 	bl	8008a6e <USBD_CtlError>
        break;
 8008924:	e01a      	b.n	800895c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008932:	2b00      	cmp	r3, #0
 8008934:	d005      	beq.n	8008942 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	f043 0202 	orr.w	r2, r3, #2
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	330c      	adds	r3, #12
 8008946:	2202      	movs	r2, #2
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f900 	bl	8008b50 <USBD_CtlSendData>
      break;
 8008950:	e004      	b.n	800895c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f88a 	bl	8008a6e <USBD_CtlError>
      break;
 800895a:	bf00      	nop
  }
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	885b      	ldrh	r3, [r3, #2]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d107      	bne.n	8008986 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f940 	bl	8008c04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008984:	e013      	b.n	80089ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	885b      	ldrh	r3, [r3, #2]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d10b      	bne.n	80089a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	889b      	ldrh	r3, [r3, #4]
 8008992:	0a1b      	lsrs	r3, r3, #8
 8008994:	b29b      	uxth	r3, r3
 8008996:	b2da      	uxtb	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f930 	bl	8008c04 <USBD_CtlSendStatus>
}
 80089a4:	e003      	b.n	80089ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f860 	bl	8008a6e <USBD_CtlError>
}
 80089ae:	bf00      	nop
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	3b01      	subs	r3, #1
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d80b      	bhi.n	80089e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	885b      	ldrh	r3, [r3, #2]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d10c      	bne.n	80089f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f910 	bl	8008c04 <USBD_CtlSendStatus>
      }
      break;
 80089e4:	e004      	b.n	80089f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f840 	bl	8008a6e <USBD_CtlError>
      break;
 80089ee:	e000      	b.n	80089f2 <USBD_ClrFeature+0x3c>
      break;
 80089f0:	bf00      	nop
  }
}
 80089f2:	bf00      	nop
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	781a      	ldrb	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3301      	adds	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	781a      	ldrb	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3301      	adds	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7ff fa40 	bl	8007eaa <SWAPBYTE>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3301      	adds	r3, #1
 8008a36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7ff fa33 	bl	8007eaa <SWAPBYTE>
 8008a44:	4603      	mov	r3, r0
 8008a46:	461a      	mov	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3301      	adds	r3, #1
 8008a56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff fa26 	bl	8007eaa <SWAPBYTE>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	461a      	mov	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	80da      	strh	r2, [r3, #6]
}
 8008a66:	bf00      	nop
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a78:	2180      	movs	r1, #128	@ 0x80
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fccc 	bl	8009418 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a80:	2100      	movs	r1, #0
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fcc8 	bl	8009418 <USBD_LL_StallEP>
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d036      	beq.n	8008b14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008aaa:	6938      	ldr	r0, [r7, #16]
 8008aac:	f000 f836 	bl	8008b1c <USBD_GetLen>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	7812      	ldrb	r2, [r2, #0]
 8008ac8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	3301      	adds	r3, #1
 8008ace:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
 8008adc:	3301      	adds	r3, #1
 8008ade:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ae0:	e013      	b.n	8008b0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	7812      	ldrb	r2, [r2, #0]
 8008aec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	3301      	adds	r3, #1
 8008af2:	613b      	str	r3, [r7, #16]
    idx++;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	3301      	adds	r3, #1
 8008af8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	4413      	add	r3, r2
 8008b00:	2200      	movs	r2, #0
 8008b02:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	3301      	adds	r3, #1
 8008b08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1e7      	bne.n	8008ae2 <USBD_GetString+0x52>
 8008b12:	e000      	b.n	8008b16 <USBD_GetString+0x86>
    return;
 8008b14:	bf00      	nop
  }
}
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b2c:	e005      	b.n	8008b3a <USBD_GetLen+0x1e>
  {
    len++;
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	3301      	adds	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f5      	bne.n	8008b2e <USBD_GetLen+0x12>
  }

  return len;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	2100      	movs	r1, #0
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 fcd7 	bl	800952a <USBD_LL_Transmit>

  return USBD_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	60f8      	str	r0, [r7, #12]
 8008b8e:	60b9      	str	r1, [r7, #8]
 8008b90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	2100      	movs	r1, #0
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fcc6 	bl	800952a <USBD_LL_Transmit>

  return USBD_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 fcca 	bl	800956c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fcb9 	bl	800956c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2204      	movs	r2, #4
 8008c10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c14:	2300      	movs	r3, #0
 8008c16:	2200      	movs	r2, #0
 8008c18:	2100      	movs	r1, #0
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fc85 	bl	800952a <USBD_LL_Transmit>

  return USBD_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2205      	movs	r2, #5
 8008c36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2100      	movs	r1, #0
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fc93 	bl	800956c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c54:	2200      	movs	r2, #0
 8008c56:	4912      	ldr	r1, [pc, #72]	@ (8008ca0 <MX_USB_DEVICE_Init+0x50>)
 8008c58:	4812      	ldr	r0, [pc, #72]	@ (8008ca4 <MX_USB_DEVICE_Init+0x54>)
 8008c5a:	f7fe fd03 	bl	8007664 <USBD_Init>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c64:	f7f8 f8aa 	bl	8000dbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c68:	490f      	ldr	r1, [pc, #60]	@ (8008ca8 <MX_USB_DEVICE_Init+0x58>)
 8008c6a:	480e      	ldr	r0, [pc, #56]	@ (8008ca4 <MX_USB_DEVICE_Init+0x54>)
 8008c6c:	f7fe fd2a 	bl	80076c4 <USBD_RegisterClass>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c76:	f7f8 f8a1 	bl	8000dbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c7a:	490c      	ldr	r1, [pc, #48]	@ (8008cac <MX_USB_DEVICE_Init+0x5c>)
 8008c7c:	4809      	ldr	r0, [pc, #36]	@ (8008ca4 <MX_USB_DEVICE_Init+0x54>)
 8008c7e:	f7fe fc21 	bl	80074c4 <USBD_CDC_RegisterInterface>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c88:	f7f8 f898 	bl	8000dbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c8c:	4805      	ldr	r0, [pc, #20]	@ (8008ca4 <MX_USB_DEVICE_Init+0x54>)
 8008c8e:	f7fe fd4f 	bl	8007730 <USBD_Start>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d001      	beq.n	8008c9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c98:	f7f8 f890 	bl	8000dbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c9c:	bf00      	nop
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	200000dc 	.word	0x200000dc
 8008ca4:	20003338 	.word	0x20003338
 8008ca8:	20000048 	.word	0x20000048
 8008cac:	200000c8 	.word	0x200000c8

08008cb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4905      	ldr	r1, [pc, #20]	@ (8008ccc <CDC_Init_FS+0x1c>)
 8008cb8:	4805      	ldr	r0, [pc, #20]	@ (8008cd0 <CDC_Init_FS+0x20>)
 8008cba:	f7fe fc1d 	bl	80074f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008cbe:	4905      	ldr	r1, [pc, #20]	@ (8008cd4 <CDC_Init_FS+0x24>)
 8008cc0:	4803      	ldr	r0, [pc, #12]	@ (8008cd0 <CDC_Init_FS+0x20>)
 8008cc2:	f7fe fc3b 	bl	800753c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008cc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	20003a14 	.word	0x20003a14
 8008cd0:	20003338 	.word	0x20003338
 8008cd4:	20003614 	.word	0x20003614

08008cd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008cdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	6039      	str	r1, [r7, #0]
 8008cf2:	71fb      	strb	r3, [r7, #7]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008cf8:	79fb      	ldrb	r3, [r7, #7]
 8008cfa:	2b23      	cmp	r3, #35	@ 0x23
 8008cfc:	d84a      	bhi.n	8008d94 <CDC_Control_FS+0xac>
 8008cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008d04 <CDC_Control_FS+0x1c>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d95 	.word	0x08008d95
 8008d08:	08008d95 	.word	0x08008d95
 8008d0c:	08008d95 	.word	0x08008d95
 8008d10:	08008d95 	.word	0x08008d95
 8008d14:	08008d95 	.word	0x08008d95
 8008d18:	08008d95 	.word	0x08008d95
 8008d1c:	08008d95 	.word	0x08008d95
 8008d20:	08008d95 	.word	0x08008d95
 8008d24:	08008d95 	.word	0x08008d95
 8008d28:	08008d95 	.word	0x08008d95
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008d95 	.word	0x08008d95
 8008d34:	08008d95 	.word	0x08008d95
 8008d38:	08008d95 	.word	0x08008d95
 8008d3c:	08008d95 	.word	0x08008d95
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008d95 	.word	0x08008d95
 8008d48:	08008d95 	.word	0x08008d95
 8008d4c:	08008d95 	.word	0x08008d95
 8008d50:	08008d95 	.word	0x08008d95
 8008d54:	08008d95 	.word	0x08008d95
 8008d58:	08008d95 	.word	0x08008d95
 8008d5c:	08008d95 	.word	0x08008d95
 8008d60:	08008d95 	.word	0x08008d95
 8008d64:	08008d95 	.word	0x08008d95
 8008d68:	08008d95 	.word	0x08008d95
 8008d6c:	08008d95 	.word	0x08008d95
 8008d70:	08008d95 	.word	0x08008d95
 8008d74:	08008d95 	.word	0x08008d95
 8008d78:	08008d95 	.word	0x08008d95
 8008d7c:	08008d95 	.word	0x08008d95
 8008d80:	08008d95 	.word	0x08008d95
 8008d84:	08008d95 	.word	0x08008d95
 8008d88:	08008d95 	.word	0x08008d95
 8008d8c:	08008d95 	.word	0x08008d95
 8008d90:	08008d95 	.word	0x08008d95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d94:	bf00      	nop
  }

  return (USBD_OK);
 8008d96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	4808      	ldr	r0, [pc, #32]	@ (8008dd4 <CDC_Receive_FS+0x30>)
 8008db2:	f7fe fbc3 	bl	800753c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008db6:	4807      	ldr	r0, [pc, #28]	@ (8008dd4 <CDC_Receive_FS+0x30>)
 8008db8:	f7fe fc1e 	bl	80075f8 <USBD_CDC_ReceivePacket>
  CDCReceiveCallback(Buf, *Len);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7f7 ff80 	bl	8000cc8 <CDCReceiveCallback>
  return (USBD_OK);
 8008dc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20003338 	.word	0x20003338

08008dd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008de8:	4b0d      	ldr	r3, [pc, #52]	@ (8008e20 <CDC_Transmit_FS+0x48>)
 8008dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008dee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e00b      	b.n	8008e16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008dfe:	887b      	ldrh	r3, [r7, #2]
 8008e00:	461a      	mov	r2, r3
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	4806      	ldr	r0, [pc, #24]	@ (8008e20 <CDC_Transmit_FS+0x48>)
 8008e06:	f7fe fb77 	bl	80074f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e0a:	4805      	ldr	r0, [pc, #20]	@ (8008e20 <CDC_Transmit_FS+0x48>)
 8008e0c:	f7fe fbb4 	bl	8007578 <USBD_CDC_TransmitPacket>
 8008e10:	4603      	mov	r3, r0
 8008e12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	20003338 	.word	0x20003338

08008e24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	371c      	adds	r7, #28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
	...

08008e48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	6039      	str	r1, [r7, #0]
 8008e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2212      	movs	r2, #18
 8008e58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e5a:	4b03      	ldr	r3, [pc, #12]	@ (8008e68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	200000f8 	.word	0x200000f8

08008e6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	6039      	str	r1, [r7, #0]
 8008e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2204      	movs	r2, #4
 8008e7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e7e:	4b03      	ldr	r3, [pc, #12]	@ (8008e8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	2000010c 	.word	0x2000010c

08008e90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	6039      	str	r1, [r7, #0]
 8008e9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e9c:	79fb      	ldrb	r3, [r7, #7]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d105      	bne.n	8008eae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	4907      	ldr	r1, [pc, #28]	@ (8008ec4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ea6:	4808      	ldr	r0, [pc, #32]	@ (8008ec8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ea8:	f7ff fdf2 	bl	8008a90 <USBD_GetString>
 8008eac:	e004      	b.n	8008eb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	4904      	ldr	r1, [pc, #16]	@ (8008ec4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008eb2:	4805      	ldr	r0, [pc, #20]	@ (8008ec8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008eb4:	f7ff fdec 	bl	8008a90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008eb8:	4b02      	ldr	r3, [pc, #8]	@ (8008ec4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20003e14 	.word	0x20003e14
 8008ec8:	0800a0c8 	.word	0x0800a0c8

08008ecc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	4904      	ldr	r1, [pc, #16]	@ (8008eec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008edc:	4804      	ldr	r0, [pc, #16]	@ (8008ef0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ede:	f7ff fdd7 	bl	8008a90 <USBD_GetString>
  return USBD_StrDesc;
 8008ee2:	4b02      	ldr	r3, [pc, #8]	@ (8008eec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	20003e14 	.word	0x20003e14
 8008ef0:	0800a0e0 	.word	0x0800a0e0

08008ef4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	6039      	str	r1, [r7, #0]
 8008efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	221a      	movs	r2, #26
 8008f04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f06:	f000 f843 	bl	8008f90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f0a:	4b02      	ldr	r3, [pc, #8]	@ (8008f14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000110 	.word	0x20000110

08008f18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	6039      	str	r1, [r7, #0]
 8008f22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f24:	79fb      	ldrb	r3, [r7, #7]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d105      	bne.n	8008f36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	4907      	ldr	r1, [pc, #28]	@ (8008f4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f2e:	4808      	ldr	r0, [pc, #32]	@ (8008f50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f30:	f7ff fdae 	bl	8008a90 <USBD_GetString>
 8008f34:	e004      	b.n	8008f40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	4904      	ldr	r1, [pc, #16]	@ (8008f4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f3a:	4805      	ldr	r0, [pc, #20]	@ (8008f50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f3c:	f7ff fda8 	bl	8008a90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f40:	4b02      	ldr	r3, [pc, #8]	@ (8008f4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20003e14 	.word	0x20003e14
 8008f50:	0800a0f4 	.word	0x0800a0f4

08008f54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	6039      	str	r1, [r7, #0]
 8008f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f60:	79fb      	ldrb	r3, [r7, #7]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d105      	bne.n	8008f72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	4907      	ldr	r1, [pc, #28]	@ (8008f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f6a:	4808      	ldr	r0, [pc, #32]	@ (8008f8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f6c:	f7ff fd90 	bl	8008a90 <USBD_GetString>
 8008f70:	e004      	b.n	8008f7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	4904      	ldr	r1, [pc, #16]	@ (8008f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f76:	4805      	ldr	r0, [pc, #20]	@ (8008f8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f78:	f7ff fd8a 	bl	8008a90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f7c:	4b02      	ldr	r3, [pc, #8]	@ (8008f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20003e14 	.word	0x20003e14
 8008f8c:	0800a100 	.word	0x0800a100

08008f90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d009      	beq.n	8008fb8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fa4:	2208      	movs	r2, #8
 8008fa6:	4906      	ldr	r1, [pc, #24]	@ (8008fc0 <Get_SerialNum+0x30>)
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 f80d 	bl	8008fc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fae:	2204      	movs	r2, #4
 8008fb0:	4904      	ldr	r1, [pc, #16]	@ (8008fc4 <Get_SerialNum+0x34>)
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f808 	bl	8008fc8 <IntToUnicode>
  }
}
 8008fb8:	bf00      	nop
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20000112 	.word	0x20000112
 8008fc4:	20000122 	.word	0x20000122

08008fc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fda:	2300      	movs	r3, #0
 8008fdc:	75fb      	strb	r3, [r7, #23]
 8008fde:	e027      	b.n	8009030 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	0f1b      	lsrs	r3, r3, #28
 8008fe4:	2b09      	cmp	r3, #9
 8008fe6:	d80b      	bhi.n	8009000 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	0f1b      	lsrs	r3, r3, #28
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	440b      	add	r3, r1
 8008ff8:	3230      	adds	r2, #48	@ 0x30
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	701a      	strb	r2, [r3, #0]
 8008ffe:	e00a      	b.n	8009016 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	0f1b      	lsrs	r3, r3, #28
 8009004:	b2da      	uxtb	r2, r3
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	4619      	mov	r1, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	440b      	add	r3, r1
 8009010:	3237      	adds	r2, #55	@ 0x37
 8009012:	b2d2      	uxtb	r2, r2
 8009014:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	3301      	adds	r3, #1
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	4413      	add	r3, r2
 8009026:	2200      	movs	r2, #0
 8009028:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	3301      	adds	r3, #1
 800902e:	75fb      	strb	r3, [r7, #23]
 8009030:	7dfa      	ldrb	r2, [r7, #23]
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	429a      	cmp	r2, r3
 8009036:	d3d3      	bcc.n	8008fe0 <IntToUnicode+0x18>
  }
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
	...

08009048 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08a      	sub	sp, #40	@ 0x28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009050:	f107 0314 	add.w	r3, r7, #20
 8009054:	2200      	movs	r2, #0
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	605a      	str	r2, [r3, #4]
 800905a:	609a      	str	r2, [r3, #8]
 800905c:	60da      	str	r2, [r3, #12]
 800905e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009068:	d13a      	bne.n	80090e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800906a:	2300      	movs	r3, #0
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	4b1e      	ldr	r3, [pc, #120]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 8009070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009072:	4a1d      	ldr	r2, [pc, #116]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 8009074:	f043 0301 	orr.w	r3, r3, #1
 8009078:	6313      	str	r3, [r2, #48]	@ 0x30
 800907a:	4b1b      	ldr	r3, [pc, #108]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	613b      	str	r3, [r7, #16]
 8009084:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009086:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800908a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800908c:	2302      	movs	r3, #2
 800908e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009090:	2300      	movs	r3, #0
 8009092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009094:	2303      	movs	r3, #3
 8009096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009098:	230a      	movs	r3, #10
 800909a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800909c:	f107 0314 	add.w	r3, r7, #20
 80090a0:	4619      	mov	r1, r3
 80090a2:	4812      	ldr	r0, [pc, #72]	@ (80090ec <HAL_PCD_MspInit+0xa4>)
 80090a4:	f7f9 f9da 	bl	800245c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80090a8:	4b0f      	ldr	r3, [pc, #60]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 80090aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ac:	4a0e      	ldr	r2, [pc, #56]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 80090ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b2:	6353      	str	r3, [r2, #52]	@ 0x34
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	4b0b      	ldr	r3, [pc, #44]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 80090ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090bc:	4a0a      	ldr	r2, [pc, #40]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 80090be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80090c4:	4b08      	ldr	r3, [pc, #32]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 80090c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090d0:	2200      	movs	r2, #0
 80090d2:	2100      	movs	r1, #0
 80090d4:	2043      	movs	r0, #67	@ 0x43
 80090d6:	f7f8 fe1a 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090da:	2043      	movs	r0, #67	@ 0x43
 80090dc:	f7f8 fe33 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090e0:	bf00      	nop
 80090e2:	3728      	adds	r7, #40	@ 0x28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	40023800 	.word	0x40023800
 80090ec:	40020000 	.word	0x40020000

080090f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f7fe fb5f 	bl	80077ca <USBD_LL_SetupStage>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	4613      	mov	r3, r2
 800912c:	00db      	lsls	r3, r3, #3
 800912e:	4413      	add	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	440b      	add	r3, r1
 8009134:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	4619      	mov	r1, r3
 800913e:	f7fe fb99 	bl	8007874 <USBD_LL_DataOutStage>
}
 8009142:	bf00      	nop
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	3320      	adds	r3, #32
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	78fb      	ldrb	r3, [r7, #3]
 8009170:	4619      	mov	r1, r3
 8009172:	f7fe fc32 	bl	80079da <USBD_LL_DataInStage>
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe fd6c 	bl	8007c6a <USBD_LL_SOF>
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091a2:	2301      	movs	r3, #1
 80091a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	79db      	ldrb	r3, [r3, #7]
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d001      	beq.n	80091b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091ae:	f7f7 fe05 	bl	8000dbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091b8:	7bfa      	ldrb	r2, [r7, #15]
 80091ba:	4611      	mov	r1, r2
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe fd10 	bl	8007be2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe fcb8 	bl	8007b3e <USBD_LL_Reset>
}
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fd0b 	bl	8007c02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	6812      	ldr	r2, [r2, #0]
 80091fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80091fe:	f043 0301 	orr.w	r3, r3, #1
 8009202:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	7adb      	ldrb	r3, [r3, #11]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d005      	beq.n	8009218 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800920c:	4b04      	ldr	r3, [pc, #16]	@ (8009220 <HAL_PCD_SuspendCallback+0x48>)
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	4a03      	ldr	r2, [pc, #12]	@ (8009220 <HAL_PCD_SuspendCallback+0x48>)
 8009212:	f043 0306 	orr.w	r3, r3, #6
 8009216:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	e000ed00 	.word	0xe000ed00

08009224 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fd01 	bl	8007c3a <USBD_LL_Resume>
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe fd59 	bl	8007d0e <USBD_LL_IsoOUTIncomplete>
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009276:	78fa      	ldrb	r2, [r7, #3]
 8009278:	4611      	mov	r1, r2
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fd15 	bl	8007caa <USBD_LL_IsoINIncomplete>
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fd6b 	bl	8007d72 <USBD_LL_DevConnected>
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe fd68 	bl	8007d88 <USBD_LL_DevDisconnected>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d13c      	bne.n	800934a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092d0:	4a20      	ldr	r2, [pc, #128]	@ (8009354 <USBD_LL_Init+0x94>)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a1e      	ldr	r2, [pc, #120]	@ (8009354 <USBD_LL_Init+0x94>)
 80092dc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009354 <USBD_LL_Init+0x94>)
 80092e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80092e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80092e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009354 <USBD_LL_Init+0x94>)
 80092ea:	2204      	movs	r2, #4
 80092ec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80092ee:	4b19      	ldr	r3, [pc, #100]	@ (8009354 <USBD_LL_Init+0x94>)
 80092f0:	2202      	movs	r2, #2
 80092f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092f4:	4b17      	ldr	r3, [pc, #92]	@ (8009354 <USBD_LL_Init+0x94>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092fa:	4b16      	ldr	r3, [pc, #88]	@ (8009354 <USBD_LL_Init+0x94>)
 80092fc:	2202      	movs	r2, #2
 80092fe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009300:	4b14      	ldr	r3, [pc, #80]	@ (8009354 <USBD_LL_Init+0x94>)
 8009302:	2200      	movs	r2, #0
 8009304:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009306:	4b13      	ldr	r3, [pc, #76]	@ (8009354 <USBD_LL_Init+0x94>)
 8009308:	2200      	movs	r2, #0
 800930a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800930c:	4b11      	ldr	r3, [pc, #68]	@ (8009354 <USBD_LL_Init+0x94>)
 800930e:	2200      	movs	r2, #0
 8009310:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009312:	4b10      	ldr	r3, [pc, #64]	@ (8009354 <USBD_LL_Init+0x94>)
 8009314:	2200      	movs	r2, #0
 8009316:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009318:	4b0e      	ldr	r3, [pc, #56]	@ (8009354 <USBD_LL_Init+0x94>)
 800931a:	2200      	movs	r2, #0
 800931c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800931e:	480d      	ldr	r0, [pc, #52]	@ (8009354 <USBD_LL_Init+0x94>)
 8009320:	f7f9 fa20 	bl	8002764 <HAL_PCD_Init>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800932a:	f7f7 fd47 	bl	8000dbc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800932e:	2180      	movs	r1, #128	@ 0x80
 8009330:	4808      	ldr	r0, [pc, #32]	@ (8009354 <USBD_LL_Init+0x94>)
 8009332:	f7fa fc4a 	bl	8003bca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009336:	2240      	movs	r2, #64	@ 0x40
 8009338:	2100      	movs	r1, #0
 800933a:	4806      	ldr	r0, [pc, #24]	@ (8009354 <USBD_LL_Init+0x94>)
 800933c:	f7fa fbfe 	bl	8003b3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009340:	2280      	movs	r2, #128	@ 0x80
 8009342:	2101      	movs	r1, #1
 8009344:	4803      	ldr	r0, [pc, #12]	@ (8009354 <USBD_LL_Init+0x94>)
 8009346:	f7fa fbf9 	bl	8003b3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20004014 	.word	0x20004014

08009358 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800936e:	4618      	mov	r0, r3
 8009370:	f7f9 fb07 	bl	8002982 <HAL_PCD_Start>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f942 	bl	8009604 <USBD_Get_USB_Status>
 8009380:	4603      	mov	r3, r0
 8009382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009384:	7bbb      	ldrb	r3, [r7, #14]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	4608      	mov	r0, r1
 8009398:	4611      	mov	r1, r2
 800939a:	461a      	mov	r2, r3
 800939c:	4603      	mov	r3, r0
 800939e:	70fb      	strb	r3, [r7, #3]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70bb      	strb	r3, [r7, #2]
 80093a4:	4613      	mov	r3, r2
 80093a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80093b6:	78bb      	ldrb	r3, [r7, #2]
 80093b8:	883a      	ldrh	r2, [r7, #0]
 80093ba:	78f9      	ldrb	r1, [r7, #3]
 80093bc:	f7f9 ffdb 	bl	8003376 <HAL_PCD_EP_Open>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f91c 	bl	8009604 <USBD_Get_USB_Status>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fa f824 	bl	8003446 <HAL_PCD_EP_Close>
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 f8fd 	bl	8009604 <USBD_Get_USB_Status>
 800940a:	4603      	mov	r3, r0
 800940c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009432:	78fa      	ldrb	r2, [r7, #3]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f7fa f8dc 	bl	80035f4 <HAL_PCD_EP_SetStall>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f8de 	bl	8009604 <USBD_Get_USB_Status>
 8009448:	4603      	mov	r3, r0
 800944a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800944c:	7bbb      	ldrb	r3, [r7, #14]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009470:	78fa      	ldrb	r2, [r7, #3]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7fa f920 	bl	80036ba <HAL_PCD_EP_ClrStall>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f8bf 	bl	8009604 <USBD_Get_USB_Status>
 8009486:	4603      	mov	r3, r0
 8009488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948a:	7bbb      	ldrb	r3, [r7, #14]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	da0b      	bge.n	80094c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094b6:	68f9      	ldr	r1, [r7, #12]
 80094b8:	4613      	mov	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	3316      	adds	r3, #22
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	e00b      	b.n	80094e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094ce:	68f9      	ldr	r1, [r7, #12]
 80094d0:	4613      	mov	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80094de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	4611      	mov	r1, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f7f9 ff0f 	bl	800332e <HAL_PCD_SetAddress>
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 f874 	bl	8009604 <USBD_Get_USB_Status>
 800951c:	4603      	mov	r3, r0
 800951e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009520:	7bbb      	ldrb	r3, [r7, #14]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b086      	sub	sp, #24
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	603b      	str	r3, [r7, #0]
 8009536:	460b      	mov	r3, r1
 8009538:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009548:	7af9      	ldrb	r1, [r7, #11]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	f7fa f817 	bl	8003580 <HAL_PCD_EP_Transmit>
 8009552:	4603      	mov	r3, r0
 8009554:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f853 	bl	8009604 <USBD_Get_USB_Status>
 800955e:	4603      	mov	r3, r0
 8009560:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009562:	7dbb      	ldrb	r3, [r7, #22]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	607a      	str	r2, [r7, #4]
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	460b      	mov	r3, r1
 800957a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800958a:	7af9      	ldrb	r1, [r7, #11]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	f7f9 ffa3 	bl	80034da <HAL_PCD_EP_Receive>
 8009594:	4603      	mov	r3, r0
 8009596:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f832 	bl	8009604 <USBD_Get_USB_Status>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b082      	sub	sp, #8
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095c0:	78fa      	ldrb	r2, [r7, #3]
 80095c2:	4611      	mov	r1, r2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7f9 ffc3 	bl	8003550 <HAL_PCD_EP_GetRxCount>
 80095ca:	4603      	mov	r3, r0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095dc:	4b03      	ldr	r3, [pc, #12]	@ (80095ec <USBD_static_malloc+0x18>)
}
 80095de:	4618      	mov	r0, r3
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	200044f8 	.word	0x200044f8

080095f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d817      	bhi.n	8009648 <USBD_Get_USB_Status+0x44>
 8009618:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <USBD_Get_USB_Status+0x1c>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009631 	.word	0x08009631
 8009624:	08009637 	.word	0x08009637
 8009628:	0800963d 	.word	0x0800963d
 800962c:	08009643 	.word	0x08009643
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
    break;
 8009634:	e00b      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009636:	2303      	movs	r3, #3
 8009638:	73fb      	strb	r3, [r7, #15]
    break;
 800963a:	e008      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800963c:	2301      	movs	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]
    break;
 8009640:	e005      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009642:	2303      	movs	r3, #3
 8009644:	73fb      	strb	r3, [r7, #15]
    break;
 8009646:	e002      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009648:	2303      	movs	r3, #3
 800964a:	73fb      	strb	r3, [r7, #15]
    break;
 800964c:	bf00      	nop
  }
  return usb_status;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <sniprintf>:
 800965c:	b40c      	push	{r2, r3}
 800965e:	b530      	push	{r4, r5, lr}
 8009660:	4b17      	ldr	r3, [pc, #92]	@ (80096c0 <sniprintf+0x64>)
 8009662:	1e0c      	subs	r4, r1, #0
 8009664:	681d      	ldr	r5, [r3, #0]
 8009666:	b09d      	sub	sp, #116	@ 0x74
 8009668:	da08      	bge.n	800967c <sniprintf+0x20>
 800966a:	238b      	movs	r3, #139	@ 0x8b
 800966c:	602b      	str	r3, [r5, #0]
 800966e:	f04f 30ff 	mov.w	r0, #4294967295
 8009672:	b01d      	add	sp, #116	@ 0x74
 8009674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009678:	b002      	add	sp, #8
 800967a:	4770      	bx	lr
 800967c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009680:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009684:	bf14      	ite	ne
 8009686:	f104 33ff 	addne.w	r3, r4, #4294967295
 800968a:	4623      	moveq	r3, r4
 800968c:	9304      	str	r3, [sp, #16]
 800968e:	9307      	str	r3, [sp, #28]
 8009690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009694:	9002      	str	r0, [sp, #8]
 8009696:	9006      	str	r0, [sp, #24]
 8009698:	f8ad 3016 	strh.w	r3, [sp, #22]
 800969c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800969e:	ab21      	add	r3, sp, #132	@ 0x84
 80096a0:	a902      	add	r1, sp, #8
 80096a2:	4628      	mov	r0, r5
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	f000 f9b5 	bl	8009a14 <_svfiprintf_r>
 80096aa:	1c43      	adds	r3, r0, #1
 80096ac:	bfbc      	itt	lt
 80096ae:	238b      	movlt	r3, #139	@ 0x8b
 80096b0:	602b      	strlt	r3, [r5, #0]
 80096b2:	2c00      	cmp	r4, #0
 80096b4:	d0dd      	beq.n	8009672 <sniprintf+0x16>
 80096b6:	9b02      	ldr	r3, [sp, #8]
 80096b8:	2200      	movs	r2, #0
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	e7d9      	b.n	8009672 <sniprintf+0x16>
 80096be:	bf00      	nop
 80096c0:	2000012c 	.word	0x2000012c

080096c4 <memset>:
 80096c4:	4402      	add	r2, r0
 80096c6:	4603      	mov	r3, r0
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d100      	bne.n	80096ce <memset+0xa>
 80096cc:	4770      	bx	lr
 80096ce:	f803 1b01 	strb.w	r1, [r3], #1
 80096d2:	e7f9      	b.n	80096c8 <memset+0x4>

080096d4 <strncmp>:
 80096d4:	b510      	push	{r4, lr}
 80096d6:	b16a      	cbz	r2, 80096f4 <strncmp+0x20>
 80096d8:	3901      	subs	r1, #1
 80096da:	1884      	adds	r4, r0, r2
 80096dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d103      	bne.n	80096f0 <strncmp+0x1c>
 80096e8:	42a0      	cmp	r0, r4
 80096ea:	d001      	beq.n	80096f0 <strncmp+0x1c>
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	d1f5      	bne.n	80096dc <strncmp+0x8>
 80096f0:	1ad0      	subs	r0, r2, r3
 80096f2:	bd10      	pop	{r4, pc}
 80096f4:	4610      	mov	r0, r2
 80096f6:	e7fc      	b.n	80096f2 <strncmp+0x1e>

080096f8 <__errno>:
 80096f8:	4b01      	ldr	r3, [pc, #4]	@ (8009700 <__errno+0x8>)
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	2000012c 	.word	0x2000012c

08009704 <__libc_init_array>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	4d0d      	ldr	r5, [pc, #52]	@ (800973c <__libc_init_array+0x38>)
 8009708:	4c0d      	ldr	r4, [pc, #52]	@ (8009740 <__libc_init_array+0x3c>)
 800970a:	1b64      	subs	r4, r4, r5
 800970c:	10a4      	asrs	r4, r4, #2
 800970e:	2600      	movs	r6, #0
 8009710:	42a6      	cmp	r6, r4
 8009712:	d109      	bne.n	8009728 <__libc_init_array+0x24>
 8009714:	4d0b      	ldr	r5, [pc, #44]	@ (8009744 <__libc_init_array+0x40>)
 8009716:	4c0c      	ldr	r4, [pc, #48]	@ (8009748 <__libc_init_array+0x44>)
 8009718:	f000 fc66 	bl	8009fe8 <_init>
 800971c:	1b64      	subs	r4, r4, r5
 800971e:	10a4      	asrs	r4, r4, #2
 8009720:	2600      	movs	r6, #0
 8009722:	42a6      	cmp	r6, r4
 8009724:	d105      	bne.n	8009732 <__libc_init_array+0x2e>
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	f855 3b04 	ldr.w	r3, [r5], #4
 800972c:	4798      	blx	r3
 800972e:	3601      	adds	r6, #1
 8009730:	e7ee      	b.n	8009710 <__libc_init_array+0xc>
 8009732:	f855 3b04 	ldr.w	r3, [r5], #4
 8009736:	4798      	blx	r3
 8009738:	3601      	adds	r6, #1
 800973a:	e7f2      	b.n	8009722 <__libc_init_array+0x1e>
 800973c:	0800a164 	.word	0x0800a164
 8009740:	0800a164 	.word	0x0800a164
 8009744:	0800a164 	.word	0x0800a164
 8009748:	0800a168 	.word	0x0800a168

0800974c <__retarget_lock_acquire_recursive>:
 800974c:	4770      	bx	lr

0800974e <__retarget_lock_release_recursive>:
 800974e:	4770      	bx	lr

08009750 <memcpy>:
 8009750:	440a      	add	r2, r1
 8009752:	4291      	cmp	r1, r2
 8009754:	f100 33ff 	add.w	r3, r0, #4294967295
 8009758:	d100      	bne.n	800975c <memcpy+0xc>
 800975a:	4770      	bx	lr
 800975c:	b510      	push	{r4, lr}
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	4291      	cmp	r1, r2
 8009768:	d1f9      	bne.n	800975e <memcpy+0xe>
 800976a:	bd10      	pop	{r4, pc}

0800976c <_free_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4605      	mov	r5, r0
 8009770:	2900      	cmp	r1, #0
 8009772:	d041      	beq.n	80097f8 <_free_r+0x8c>
 8009774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009778:	1f0c      	subs	r4, r1, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfb8      	it	lt
 800977e:	18e4      	addlt	r4, r4, r3
 8009780:	f000 f8e0 	bl	8009944 <__malloc_lock>
 8009784:	4a1d      	ldr	r2, [pc, #116]	@ (80097fc <_free_r+0x90>)
 8009786:	6813      	ldr	r3, [r2, #0]
 8009788:	b933      	cbnz	r3, 8009798 <_free_r+0x2c>
 800978a:	6063      	str	r3, [r4, #4]
 800978c:	6014      	str	r4, [r2, #0]
 800978e:	4628      	mov	r0, r5
 8009790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009794:	f000 b8dc 	b.w	8009950 <__malloc_unlock>
 8009798:	42a3      	cmp	r3, r4
 800979a:	d908      	bls.n	80097ae <_free_r+0x42>
 800979c:	6820      	ldr	r0, [r4, #0]
 800979e:	1821      	adds	r1, r4, r0
 80097a0:	428b      	cmp	r3, r1
 80097a2:	bf01      	itttt	eq
 80097a4:	6819      	ldreq	r1, [r3, #0]
 80097a6:	685b      	ldreq	r3, [r3, #4]
 80097a8:	1809      	addeq	r1, r1, r0
 80097aa:	6021      	streq	r1, [r4, #0]
 80097ac:	e7ed      	b.n	800978a <_free_r+0x1e>
 80097ae:	461a      	mov	r2, r3
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	b10b      	cbz	r3, 80097b8 <_free_r+0x4c>
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	d9fa      	bls.n	80097ae <_free_r+0x42>
 80097b8:	6811      	ldr	r1, [r2, #0]
 80097ba:	1850      	adds	r0, r2, r1
 80097bc:	42a0      	cmp	r0, r4
 80097be:	d10b      	bne.n	80097d8 <_free_r+0x6c>
 80097c0:	6820      	ldr	r0, [r4, #0]
 80097c2:	4401      	add	r1, r0
 80097c4:	1850      	adds	r0, r2, r1
 80097c6:	4283      	cmp	r3, r0
 80097c8:	6011      	str	r1, [r2, #0]
 80097ca:	d1e0      	bne.n	800978e <_free_r+0x22>
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	6053      	str	r3, [r2, #4]
 80097d2:	4408      	add	r0, r1
 80097d4:	6010      	str	r0, [r2, #0]
 80097d6:	e7da      	b.n	800978e <_free_r+0x22>
 80097d8:	d902      	bls.n	80097e0 <_free_r+0x74>
 80097da:	230c      	movs	r3, #12
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	e7d6      	b.n	800978e <_free_r+0x22>
 80097e0:	6820      	ldr	r0, [r4, #0]
 80097e2:	1821      	adds	r1, r4, r0
 80097e4:	428b      	cmp	r3, r1
 80097e6:	bf04      	itt	eq
 80097e8:	6819      	ldreq	r1, [r3, #0]
 80097ea:	685b      	ldreq	r3, [r3, #4]
 80097ec:	6063      	str	r3, [r4, #4]
 80097ee:	bf04      	itt	eq
 80097f0:	1809      	addeq	r1, r1, r0
 80097f2:	6021      	streq	r1, [r4, #0]
 80097f4:	6054      	str	r4, [r2, #4]
 80097f6:	e7ca      	b.n	800978e <_free_r+0x22>
 80097f8:	bd38      	pop	{r3, r4, r5, pc}
 80097fa:	bf00      	nop
 80097fc:	2000485c 	.word	0x2000485c

08009800 <sbrk_aligned>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	4e0f      	ldr	r6, [pc, #60]	@ (8009840 <sbrk_aligned+0x40>)
 8009804:	460c      	mov	r4, r1
 8009806:	6831      	ldr	r1, [r6, #0]
 8009808:	4605      	mov	r5, r0
 800980a:	b911      	cbnz	r1, 8009812 <sbrk_aligned+0x12>
 800980c:	f000 fba6 	bl	8009f5c <_sbrk_r>
 8009810:	6030      	str	r0, [r6, #0]
 8009812:	4621      	mov	r1, r4
 8009814:	4628      	mov	r0, r5
 8009816:	f000 fba1 	bl	8009f5c <_sbrk_r>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d103      	bne.n	8009826 <sbrk_aligned+0x26>
 800981e:	f04f 34ff 	mov.w	r4, #4294967295
 8009822:	4620      	mov	r0, r4
 8009824:	bd70      	pop	{r4, r5, r6, pc}
 8009826:	1cc4      	adds	r4, r0, #3
 8009828:	f024 0403 	bic.w	r4, r4, #3
 800982c:	42a0      	cmp	r0, r4
 800982e:	d0f8      	beq.n	8009822 <sbrk_aligned+0x22>
 8009830:	1a21      	subs	r1, r4, r0
 8009832:	4628      	mov	r0, r5
 8009834:	f000 fb92 	bl	8009f5c <_sbrk_r>
 8009838:	3001      	adds	r0, #1
 800983a:	d1f2      	bne.n	8009822 <sbrk_aligned+0x22>
 800983c:	e7ef      	b.n	800981e <sbrk_aligned+0x1e>
 800983e:	bf00      	nop
 8009840:	20004858 	.word	0x20004858

08009844 <_malloc_r>:
 8009844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	1ccd      	adds	r5, r1, #3
 800984a:	f025 0503 	bic.w	r5, r5, #3
 800984e:	3508      	adds	r5, #8
 8009850:	2d0c      	cmp	r5, #12
 8009852:	bf38      	it	cc
 8009854:	250c      	movcc	r5, #12
 8009856:	2d00      	cmp	r5, #0
 8009858:	4606      	mov	r6, r0
 800985a:	db01      	blt.n	8009860 <_malloc_r+0x1c>
 800985c:	42a9      	cmp	r1, r5
 800985e:	d904      	bls.n	800986a <_malloc_r+0x26>
 8009860:	230c      	movs	r3, #12
 8009862:	6033      	str	r3, [r6, #0]
 8009864:	2000      	movs	r0, #0
 8009866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800986a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009940 <_malloc_r+0xfc>
 800986e:	f000 f869 	bl	8009944 <__malloc_lock>
 8009872:	f8d8 3000 	ldr.w	r3, [r8]
 8009876:	461c      	mov	r4, r3
 8009878:	bb44      	cbnz	r4, 80098cc <_malloc_r+0x88>
 800987a:	4629      	mov	r1, r5
 800987c:	4630      	mov	r0, r6
 800987e:	f7ff ffbf 	bl	8009800 <sbrk_aligned>
 8009882:	1c43      	adds	r3, r0, #1
 8009884:	4604      	mov	r4, r0
 8009886:	d158      	bne.n	800993a <_malloc_r+0xf6>
 8009888:	f8d8 4000 	ldr.w	r4, [r8]
 800988c:	4627      	mov	r7, r4
 800988e:	2f00      	cmp	r7, #0
 8009890:	d143      	bne.n	800991a <_malloc_r+0xd6>
 8009892:	2c00      	cmp	r4, #0
 8009894:	d04b      	beq.n	800992e <_malloc_r+0xea>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	4639      	mov	r1, r7
 800989a:	4630      	mov	r0, r6
 800989c:	eb04 0903 	add.w	r9, r4, r3
 80098a0:	f000 fb5c 	bl	8009f5c <_sbrk_r>
 80098a4:	4581      	cmp	r9, r0
 80098a6:	d142      	bne.n	800992e <_malloc_r+0xea>
 80098a8:	6821      	ldr	r1, [r4, #0]
 80098aa:	1a6d      	subs	r5, r5, r1
 80098ac:	4629      	mov	r1, r5
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff ffa6 	bl	8009800 <sbrk_aligned>
 80098b4:	3001      	adds	r0, #1
 80098b6:	d03a      	beq.n	800992e <_malloc_r+0xea>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	442b      	add	r3, r5
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	f8d8 3000 	ldr.w	r3, [r8]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	bb62      	cbnz	r2, 8009920 <_malloc_r+0xdc>
 80098c6:	f8c8 7000 	str.w	r7, [r8]
 80098ca:	e00f      	b.n	80098ec <_malloc_r+0xa8>
 80098cc:	6822      	ldr	r2, [r4, #0]
 80098ce:	1b52      	subs	r2, r2, r5
 80098d0:	d420      	bmi.n	8009914 <_malloc_r+0xd0>
 80098d2:	2a0b      	cmp	r2, #11
 80098d4:	d917      	bls.n	8009906 <_malloc_r+0xc2>
 80098d6:	1961      	adds	r1, r4, r5
 80098d8:	42a3      	cmp	r3, r4
 80098da:	6025      	str	r5, [r4, #0]
 80098dc:	bf18      	it	ne
 80098de:	6059      	strne	r1, [r3, #4]
 80098e0:	6863      	ldr	r3, [r4, #4]
 80098e2:	bf08      	it	eq
 80098e4:	f8c8 1000 	streq.w	r1, [r8]
 80098e8:	5162      	str	r2, [r4, r5]
 80098ea:	604b      	str	r3, [r1, #4]
 80098ec:	4630      	mov	r0, r6
 80098ee:	f000 f82f 	bl	8009950 <__malloc_unlock>
 80098f2:	f104 000b 	add.w	r0, r4, #11
 80098f6:	1d23      	adds	r3, r4, #4
 80098f8:	f020 0007 	bic.w	r0, r0, #7
 80098fc:	1ac2      	subs	r2, r0, r3
 80098fe:	bf1c      	itt	ne
 8009900:	1a1b      	subne	r3, r3, r0
 8009902:	50a3      	strne	r3, [r4, r2]
 8009904:	e7af      	b.n	8009866 <_malloc_r+0x22>
 8009906:	6862      	ldr	r2, [r4, #4]
 8009908:	42a3      	cmp	r3, r4
 800990a:	bf0c      	ite	eq
 800990c:	f8c8 2000 	streq.w	r2, [r8]
 8009910:	605a      	strne	r2, [r3, #4]
 8009912:	e7eb      	b.n	80098ec <_malloc_r+0xa8>
 8009914:	4623      	mov	r3, r4
 8009916:	6864      	ldr	r4, [r4, #4]
 8009918:	e7ae      	b.n	8009878 <_malloc_r+0x34>
 800991a:	463c      	mov	r4, r7
 800991c:	687f      	ldr	r7, [r7, #4]
 800991e:	e7b6      	b.n	800988e <_malloc_r+0x4a>
 8009920:	461a      	mov	r2, r3
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	42a3      	cmp	r3, r4
 8009926:	d1fb      	bne.n	8009920 <_malloc_r+0xdc>
 8009928:	2300      	movs	r3, #0
 800992a:	6053      	str	r3, [r2, #4]
 800992c:	e7de      	b.n	80098ec <_malloc_r+0xa8>
 800992e:	230c      	movs	r3, #12
 8009930:	6033      	str	r3, [r6, #0]
 8009932:	4630      	mov	r0, r6
 8009934:	f000 f80c 	bl	8009950 <__malloc_unlock>
 8009938:	e794      	b.n	8009864 <_malloc_r+0x20>
 800993a:	6005      	str	r5, [r0, #0]
 800993c:	e7d6      	b.n	80098ec <_malloc_r+0xa8>
 800993e:	bf00      	nop
 8009940:	2000485c 	.word	0x2000485c

08009944 <__malloc_lock>:
 8009944:	4801      	ldr	r0, [pc, #4]	@ (800994c <__malloc_lock+0x8>)
 8009946:	f7ff bf01 	b.w	800974c <__retarget_lock_acquire_recursive>
 800994a:	bf00      	nop
 800994c:	20004854 	.word	0x20004854

08009950 <__malloc_unlock>:
 8009950:	4801      	ldr	r0, [pc, #4]	@ (8009958 <__malloc_unlock+0x8>)
 8009952:	f7ff befc 	b.w	800974e <__retarget_lock_release_recursive>
 8009956:	bf00      	nop
 8009958:	20004854 	.word	0x20004854

0800995c <__ssputs_r>:
 800995c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009960:	688e      	ldr	r6, [r1, #8]
 8009962:	461f      	mov	r7, r3
 8009964:	42be      	cmp	r6, r7
 8009966:	680b      	ldr	r3, [r1, #0]
 8009968:	4682      	mov	sl, r0
 800996a:	460c      	mov	r4, r1
 800996c:	4690      	mov	r8, r2
 800996e:	d82d      	bhi.n	80099cc <__ssputs_r+0x70>
 8009970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009974:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009978:	d026      	beq.n	80099c8 <__ssputs_r+0x6c>
 800997a:	6965      	ldr	r5, [r4, #20]
 800997c:	6909      	ldr	r1, [r1, #16]
 800997e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009982:	eba3 0901 	sub.w	r9, r3, r1
 8009986:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800998a:	1c7b      	adds	r3, r7, #1
 800998c:	444b      	add	r3, r9
 800998e:	106d      	asrs	r5, r5, #1
 8009990:	429d      	cmp	r5, r3
 8009992:	bf38      	it	cc
 8009994:	461d      	movcc	r5, r3
 8009996:	0553      	lsls	r3, r2, #21
 8009998:	d527      	bpl.n	80099ea <__ssputs_r+0x8e>
 800999a:	4629      	mov	r1, r5
 800999c:	f7ff ff52 	bl	8009844 <_malloc_r>
 80099a0:	4606      	mov	r6, r0
 80099a2:	b360      	cbz	r0, 80099fe <__ssputs_r+0xa2>
 80099a4:	6921      	ldr	r1, [r4, #16]
 80099a6:	464a      	mov	r2, r9
 80099a8:	f7ff fed2 	bl	8009750 <memcpy>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	6126      	str	r6, [r4, #16]
 80099ba:	6165      	str	r5, [r4, #20]
 80099bc:	444e      	add	r6, r9
 80099be:	eba5 0509 	sub.w	r5, r5, r9
 80099c2:	6026      	str	r6, [r4, #0]
 80099c4:	60a5      	str	r5, [r4, #8]
 80099c6:	463e      	mov	r6, r7
 80099c8:	42be      	cmp	r6, r7
 80099ca:	d900      	bls.n	80099ce <__ssputs_r+0x72>
 80099cc:	463e      	mov	r6, r7
 80099ce:	6820      	ldr	r0, [r4, #0]
 80099d0:	4632      	mov	r2, r6
 80099d2:	4641      	mov	r1, r8
 80099d4:	f000 faa8 	bl	8009f28 <memmove>
 80099d8:	68a3      	ldr	r3, [r4, #8]
 80099da:	1b9b      	subs	r3, r3, r6
 80099dc:	60a3      	str	r3, [r4, #8]
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	4433      	add	r3, r6
 80099e2:	6023      	str	r3, [r4, #0]
 80099e4:	2000      	movs	r0, #0
 80099e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ea:	462a      	mov	r2, r5
 80099ec:	f000 fac6 	bl	8009f7c <_realloc_r>
 80099f0:	4606      	mov	r6, r0
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d1e0      	bne.n	80099b8 <__ssputs_r+0x5c>
 80099f6:	6921      	ldr	r1, [r4, #16]
 80099f8:	4650      	mov	r0, sl
 80099fa:	f7ff feb7 	bl	800976c <_free_r>
 80099fe:	230c      	movs	r3, #12
 8009a00:	f8ca 3000 	str.w	r3, [sl]
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a0a:	81a3      	strh	r3, [r4, #12]
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	e7e9      	b.n	80099e6 <__ssputs_r+0x8a>
	...

08009a14 <_svfiprintf_r>:
 8009a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	4698      	mov	r8, r3
 8009a1a:	898b      	ldrh	r3, [r1, #12]
 8009a1c:	061b      	lsls	r3, r3, #24
 8009a1e:	b09d      	sub	sp, #116	@ 0x74
 8009a20:	4607      	mov	r7, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	4614      	mov	r4, r2
 8009a26:	d510      	bpl.n	8009a4a <_svfiprintf_r+0x36>
 8009a28:	690b      	ldr	r3, [r1, #16]
 8009a2a:	b973      	cbnz	r3, 8009a4a <_svfiprintf_r+0x36>
 8009a2c:	2140      	movs	r1, #64	@ 0x40
 8009a2e:	f7ff ff09 	bl	8009844 <_malloc_r>
 8009a32:	6028      	str	r0, [r5, #0]
 8009a34:	6128      	str	r0, [r5, #16]
 8009a36:	b930      	cbnz	r0, 8009a46 <_svfiprintf_r+0x32>
 8009a38:	230c      	movs	r3, #12
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	b01d      	add	sp, #116	@ 0x74
 8009a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a46:	2340      	movs	r3, #64	@ 0x40
 8009a48:	616b      	str	r3, [r5, #20]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a4e:	2320      	movs	r3, #32
 8009a50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a58:	2330      	movs	r3, #48	@ 0x30
 8009a5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009bf8 <_svfiprintf_r+0x1e4>
 8009a5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a62:	f04f 0901 	mov.w	r9, #1
 8009a66:	4623      	mov	r3, r4
 8009a68:	469a      	mov	sl, r3
 8009a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a6e:	b10a      	cbz	r2, 8009a74 <_svfiprintf_r+0x60>
 8009a70:	2a25      	cmp	r2, #37	@ 0x25
 8009a72:	d1f9      	bne.n	8009a68 <_svfiprintf_r+0x54>
 8009a74:	ebba 0b04 	subs.w	fp, sl, r4
 8009a78:	d00b      	beq.n	8009a92 <_svfiprintf_r+0x7e>
 8009a7a:	465b      	mov	r3, fp
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4638      	mov	r0, r7
 8009a82:	f7ff ff6b 	bl	800995c <__ssputs_r>
 8009a86:	3001      	adds	r0, #1
 8009a88:	f000 80a7 	beq.w	8009bda <_svfiprintf_r+0x1c6>
 8009a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a8e:	445a      	add	r2, fp
 8009a90:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a92:	f89a 3000 	ldrb.w	r3, [sl]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 809f 	beq.w	8009bda <_svfiprintf_r+0x1c6>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aa6:	f10a 0a01 	add.w	sl, sl, #1
 8009aaa:	9304      	str	r3, [sp, #16]
 8009aac:	9307      	str	r3, [sp, #28]
 8009aae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ab2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ab4:	4654      	mov	r4, sl
 8009ab6:	2205      	movs	r2, #5
 8009ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009abc:	484e      	ldr	r0, [pc, #312]	@ (8009bf8 <_svfiprintf_r+0x1e4>)
 8009abe:	f7f6 fb8f 	bl	80001e0 <memchr>
 8009ac2:	9a04      	ldr	r2, [sp, #16]
 8009ac4:	b9d8      	cbnz	r0, 8009afe <_svfiprintf_r+0xea>
 8009ac6:	06d0      	lsls	r0, r2, #27
 8009ac8:	bf44      	itt	mi
 8009aca:	2320      	movmi	r3, #32
 8009acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ad0:	0711      	lsls	r1, r2, #28
 8009ad2:	bf44      	itt	mi
 8009ad4:	232b      	movmi	r3, #43	@ 0x2b
 8009ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ada:	f89a 3000 	ldrb.w	r3, [sl]
 8009ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ae0:	d015      	beq.n	8009b0e <_svfiprintf_r+0xfa>
 8009ae2:	9a07      	ldr	r2, [sp, #28]
 8009ae4:	4654      	mov	r4, sl
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	f04f 0c0a 	mov.w	ip, #10
 8009aec:	4621      	mov	r1, r4
 8009aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009af2:	3b30      	subs	r3, #48	@ 0x30
 8009af4:	2b09      	cmp	r3, #9
 8009af6:	d94b      	bls.n	8009b90 <_svfiprintf_r+0x17c>
 8009af8:	b1b0      	cbz	r0, 8009b28 <_svfiprintf_r+0x114>
 8009afa:	9207      	str	r2, [sp, #28]
 8009afc:	e014      	b.n	8009b28 <_svfiprintf_r+0x114>
 8009afe:	eba0 0308 	sub.w	r3, r0, r8
 8009b02:	fa09 f303 	lsl.w	r3, r9, r3
 8009b06:	4313      	orrs	r3, r2
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	46a2      	mov	sl, r4
 8009b0c:	e7d2      	b.n	8009ab4 <_svfiprintf_r+0xa0>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	1d19      	adds	r1, r3, #4
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	9103      	str	r1, [sp, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfbb      	ittet	lt
 8009b1a:	425b      	neglt	r3, r3
 8009b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b20:	9307      	strge	r3, [sp, #28]
 8009b22:	9307      	strlt	r3, [sp, #28]
 8009b24:	bfb8      	it	lt
 8009b26:	9204      	strlt	r2, [sp, #16]
 8009b28:	7823      	ldrb	r3, [r4, #0]
 8009b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b2c:	d10a      	bne.n	8009b44 <_svfiprintf_r+0x130>
 8009b2e:	7863      	ldrb	r3, [r4, #1]
 8009b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b32:	d132      	bne.n	8009b9a <_svfiprintf_r+0x186>
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	1d1a      	adds	r2, r3, #4
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	9203      	str	r2, [sp, #12]
 8009b3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b40:	3402      	adds	r4, #2
 8009b42:	9305      	str	r3, [sp, #20]
 8009b44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c08 <_svfiprintf_r+0x1f4>
 8009b48:	7821      	ldrb	r1, [r4, #0]
 8009b4a:	2203      	movs	r2, #3
 8009b4c:	4650      	mov	r0, sl
 8009b4e:	f7f6 fb47 	bl	80001e0 <memchr>
 8009b52:	b138      	cbz	r0, 8009b64 <_svfiprintf_r+0x150>
 8009b54:	9b04      	ldr	r3, [sp, #16]
 8009b56:	eba0 000a 	sub.w	r0, r0, sl
 8009b5a:	2240      	movs	r2, #64	@ 0x40
 8009b5c:	4082      	lsls	r2, r0
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	3401      	adds	r4, #1
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b68:	4824      	ldr	r0, [pc, #144]	@ (8009bfc <_svfiprintf_r+0x1e8>)
 8009b6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b6e:	2206      	movs	r2, #6
 8009b70:	f7f6 fb36 	bl	80001e0 <memchr>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d036      	beq.n	8009be6 <_svfiprintf_r+0x1d2>
 8009b78:	4b21      	ldr	r3, [pc, #132]	@ (8009c00 <_svfiprintf_r+0x1ec>)
 8009b7a:	bb1b      	cbnz	r3, 8009bc4 <_svfiprintf_r+0x1b0>
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	3307      	adds	r3, #7
 8009b80:	f023 0307 	bic.w	r3, r3, #7
 8009b84:	3308      	adds	r3, #8
 8009b86:	9303      	str	r3, [sp, #12]
 8009b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b8a:	4433      	add	r3, r6
 8009b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b8e:	e76a      	b.n	8009a66 <_svfiprintf_r+0x52>
 8009b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b94:	460c      	mov	r4, r1
 8009b96:	2001      	movs	r0, #1
 8009b98:	e7a8      	b.n	8009aec <_svfiprintf_r+0xd8>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	3401      	adds	r4, #1
 8009b9e:	9305      	str	r3, [sp, #20]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	f04f 0c0a 	mov.w	ip, #10
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bac:	3a30      	subs	r2, #48	@ 0x30
 8009bae:	2a09      	cmp	r2, #9
 8009bb0:	d903      	bls.n	8009bba <_svfiprintf_r+0x1a6>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0c6      	beq.n	8009b44 <_svfiprintf_r+0x130>
 8009bb6:	9105      	str	r1, [sp, #20]
 8009bb8:	e7c4      	b.n	8009b44 <_svfiprintf_r+0x130>
 8009bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e7f0      	b.n	8009ba6 <_svfiprintf_r+0x192>
 8009bc4:	ab03      	add	r3, sp, #12
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	462a      	mov	r2, r5
 8009bca:	4b0e      	ldr	r3, [pc, #56]	@ (8009c04 <_svfiprintf_r+0x1f0>)
 8009bcc:	a904      	add	r1, sp, #16
 8009bce:	4638      	mov	r0, r7
 8009bd0:	f3af 8000 	nop.w
 8009bd4:	1c42      	adds	r2, r0, #1
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	d1d6      	bne.n	8009b88 <_svfiprintf_r+0x174>
 8009bda:	89ab      	ldrh	r3, [r5, #12]
 8009bdc:	065b      	lsls	r3, r3, #25
 8009bde:	f53f af2d 	bmi.w	8009a3c <_svfiprintf_r+0x28>
 8009be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009be4:	e72c      	b.n	8009a40 <_svfiprintf_r+0x2c>
 8009be6:	ab03      	add	r3, sp, #12
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	462a      	mov	r2, r5
 8009bec:	4b05      	ldr	r3, [pc, #20]	@ (8009c04 <_svfiprintf_r+0x1f0>)
 8009bee:	a904      	add	r1, sp, #16
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	f000 f879 	bl	8009ce8 <_printf_i>
 8009bf6:	e7ed      	b.n	8009bd4 <_svfiprintf_r+0x1c0>
 8009bf8:	0800a128 	.word	0x0800a128
 8009bfc:	0800a132 	.word	0x0800a132
 8009c00:	00000000 	.word	0x00000000
 8009c04:	0800995d 	.word	0x0800995d
 8009c08:	0800a12e 	.word	0x0800a12e

08009c0c <_printf_common>:
 8009c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	4616      	mov	r6, r2
 8009c12:	4698      	mov	r8, r3
 8009c14:	688a      	ldr	r2, [r1, #8]
 8009c16:	690b      	ldr	r3, [r1, #16]
 8009c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	bfb8      	it	lt
 8009c20:	4613      	movlt	r3, r2
 8009c22:	6033      	str	r3, [r6, #0]
 8009c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c28:	4607      	mov	r7, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	b10a      	cbz	r2, 8009c32 <_printf_common+0x26>
 8009c2e:	3301      	adds	r3, #1
 8009c30:	6033      	str	r3, [r6, #0]
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	0699      	lsls	r1, r3, #26
 8009c36:	bf42      	ittt	mi
 8009c38:	6833      	ldrmi	r3, [r6, #0]
 8009c3a:	3302      	addmi	r3, #2
 8009c3c:	6033      	strmi	r3, [r6, #0]
 8009c3e:	6825      	ldr	r5, [r4, #0]
 8009c40:	f015 0506 	ands.w	r5, r5, #6
 8009c44:	d106      	bne.n	8009c54 <_printf_common+0x48>
 8009c46:	f104 0a19 	add.w	sl, r4, #25
 8009c4a:	68e3      	ldr	r3, [r4, #12]
 8009c4c:	6832      	ldr	r2, [r6, #0]
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	42ab      	cmp	r3, r5
 8009c52:	dc26      	bgt.n	8009ca2 <_printf_common+0x96>
 8009c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c58:	6822      	ldr	r2, [r4, #0]
 8009c5a:	3b00      	subs	r3, #0
 8009c5c:	bf18      	it	ne
 8009c5e:	2301      	movne	r3, #1
 8009c60:	0692      	lsls	r2, r2, #26
 8009c62:	d42b      	bmi.n	8009cbc <_printf_common+0xb0>
 8009c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c68:	4641      	mov	r1, r8
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	47c8      	blx	r9
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d01e      	beq.n	8009cb0 <_printf_common+0xa4>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	6922      	ldr	r2, [r4, #16]
 8009c76:	f003 0306 	and.w	r3, r3, #6
 8009c7a:	2b04      	cmp	r3, #4
 8009c7c:	bf02      	ittt	eq
 8009c7e:	68e5      	ldreq	r5, [r4, #12]
 8009c80:	6833      	ldreq	r3, [r6, #0]
 8009c82:	1aed      	subeq	r5, r5, r3
 8009c84:	68a3      	ldr	r3, [r4, #8]
 8009c86:	bf0c      	ite	eq
 8009c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c8c:	2500      	movne	r5, #0
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	bfc4      	itt	gt
 8009c92:	1a9b      	subgt	r3, r3, r2
 8009c94:	18ed      	addgt	r5, r5, r3
 8009c96:	2600      	movs	r6, #0
 8009c98:	341a      	adds	r4, #26
 8009c9a:	42b5      	cmp	r5, r6
 8009c9c:	d11a      	bne.n	8009cd4 <_printf_common+0xc8>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	e008      	b.n	8009cb4 <_printf_common+0xa8>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4652      	mov	r2, sl
 8009ca6:	4641      	mov	r1, r8
 8009ca8:	4638      	mov	r0, r7
 8009caa:	47c8      	blx	r9
 8009cac:	3001      	adds	r0, #1
 8009cae:	d103      	bne.n	8009cb8 <_printf_common+0xac>
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb8:	3501      	adds	r5, #1
 8009cba:	e7c6      	b.n	8009c4a <_printf_common+0x3e>
 8009cbc:	18e1      	adds	r1, r4, r3
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	2030      	movs	r0, #48	@ 0x30
 8009cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cc6:	4422      	add	r2, r4
 8009cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009cd0:	3302      	adds	r3, #2
 8009cd2:	e7c7      	b.n	8009c64 <_printf_common+0x58>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	4641      	mov	r1, r8
 8009cda:	4638      	mov	r0, r7
 8009cdc:	47c8      	blx	r9
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d0e6      	beq.n	8009cb0 <_printf_common+0xa4>
 8009ce2:	3601      	adds	r6, #1
 8009ce4:	e7d9      	b.n	8009c9a <_printf_common+0x8e>
	...

08009ce8 <_printf_i>:
 8009ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cec:	7e0f      	ldrb	r7, [r1, #24]
 8009cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009cf0:	2f78      	cmp	r7, #120	@ 0x78
 8009cf2:	4691      	mov	r9, r2
 8009cf4:	4680      	mov	r8, r0
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	469a      	mov	sl, r3
 8009cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009cfe:	d807      	bhi.n	8009d10 <_printf_i+0x28>
 8009d00:	2f62      	cmp	r7, #98	@ 0x62
 8009d02:	d80a      	bhi.n	8009d1a <_printf_i+0x32>
 8009d04:	2f00      	cmp	r7, #0
 8009d06:	f000 80d2 	beq.w	8009eae <_printf_i+0x1c6>
 8009d0a:	2f58      	cmp	r7, #88	@ 0x58
 8009d0c:	f000 80b9 	beq.w	8009e82 <_printf_i+0x19a>
 8009d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d18:	e03a      	b.n	8009d90 <_printf_i+0xa8>
 8009d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d1e:	2b15      	cmp	r3, #21
 8009d20:	d8f6      	bhi.n	8009d10 <_printf_i+0x28>
 8009d22:	a101      	add	r1, pc, #4	@ (adr r1, 8009d28 <_printf_i+0x40>)
 8009d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d28:	08009d81 	.word	0x08009d81
 8009d2c:	08009d95 	.word	0x08009d95
 8009d30:	08009d11 	.word	0x08009d11
 8009d34:	08009d11 	.word	0x08009d11
 8009d38:	08009d11 	.word	0x08009d11
 8009d3c:	08009d11 	.word	0x08009d11
 8009d40:	08009d95 	.word	0x08009d95
 8009d44:	08009d11 	.word	0x08009d11
 8009d48:	08009d11 	.word	0x08009d11
 8009d4c:	08009d11 	.word	0x08009d11
 8009d50:	08009d11 	.word	0x08009d11
 8009d54:	08009e95 	.word	0x08009e95
 8009d58:	08009dbf 	.word	0x08009dbf
 8009d5c:	08009e4f 	.word	0x08009e4f
 8009d60:	08009d11 	.word	0x08009d11
 8009d64:	08009d11 	.word	0x08009d11
 8009d68:	08009eb7 	.word	0x08009eb7
 8009d6c:	08009d11 	.word	0x08009d11
 8009d70:	08009dbf 	.word	0x08009dbf
 8009d74:	08009d11 	.word	0x08009d11
 8009d78:	08009d11 	.word	0x08009d11
 8009d7c:	08009e57 	.word	0x08009e57
 8009d80:	6833      	ldr	r3, [r6, #0]
 8009d82:	1d1a      	adds	r2, r3, #4
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6032      	str	r2, [r6, #0]
 8009d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d90:	2301      	movs	r3, #1
 8009d92:	e09d      	b.n	8009ed0 <_printf_i+0x1e8>
 8009d94:	6833      	ldr	r3, [r6, #0]
 8009d96:	6820      	ldr	r0, [r4, #0]
 8009d98:	1d19      	adds	r1, r3, #4
 8009d9a:	6031      	str	r1, [r6, #0]
 8009d9c:	0606      	lsls	r6, r0, #24
 8009d9e:	d501      	bpl.n	8009da4 <_printf_i+0xbc>
 8009da0:	681d      	ldr	r5, [r3, #0]
 8009da2:	e003      	b.n	8009dac <_printf_i+0xc4>
 8009da4:	0645      	lsls	r5, r0, #25
 8009da6:	d5fb      	bpl.n	8009da0 <_printf_i+0xb8>
 8009da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dac:	2d00      	cmp	r5, #0
 8009dae:	da03      	bge.n	8009db8 <_printf_i+0xd0>
 8009db0:	232d      	movs	r3, #45	@ 0x2d
 8009db2:	426d      	negs	r5, r5
 8009db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009db8:	4859      	ldr	r0, [pc, #356]	@ (8009f20 <_printf_i+0x238>)
 8009dba:	230a      	movs	r3, #10
 8009dbc:	e011      	b.n	8009de2 <_printf_i+0xfa>
 8009dbe:	6821      	ldr	r1, [r4, #0]
 8009dc0:	6833      	ldr	r3, [r6, #0]
 8009dc2:	0608      	lsls	r0, r1, #24
 8009dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009dc8:	d402      	bmi.n	8009dd0 <_printf_i+0xe8>
 8009dca:	0649      	lsls	r1, r1, #25
 8009dcc:	bf48      	it	mi
 8009dce:	b2ad      	uxthmi	r5, r5
 8009dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009dd2:	4853      	ldr	r0, [pc, #332]	@ (8009f20 <_printf_i+0x238>)
 8009dd4:	6033      	str	r3, [r6, #0]
 8009dd6:	bf14      	ite	ne
 8009dd8:	230a      	movne	r3, #10
 8009dda:	2308      	moveq	r3, #8
 8009ddc:	2100      	movs	r1, #0
 8009dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009de2:	6866      	ldr	r6, [r4, #4]
 8009de4:	60a6      	str	r6, [r4, #8]
 8009de6:	2e00      	cmp	r6, #0
 8009de8:	bfa2      	ittt	ge
 8009dea:	6821      	ldrge	r1, [r4, #0]
 8009dec:	f021 0104 	bicge.w	r1, r1, #4
 8009df0:	6021      	strge	r1, [r4, #0]
 8009df2:	b90d      	cbnz	r5, 8009df8 <_printf_i+0x110>
 8009df4:	2e00      	cmp	r6, #0
 8009df6:	d04b      	beq.n	8009e90 <_printf_i+0x1a8>
 8009df8:	4616      	mov	r6, r2
 8009dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8009dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8009e02:	5dc7      	ldrb	r7, [r0, r7]
 8009e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e08:	462f      	mov	r7, r5
 8009e0a:	42bb      	cmp	r3, r7
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	d9f4      	bls.n	8009dfa <_printf_i+0x112>
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	d10b      	bne.n	8009e2c <_printf_i+0x144>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	07df      	lsls	r7, r3, #31
 8009e18:	d508      	bpl.n	8009e2c <_printf_i+0x144>
 8009e1a:	6923      	ldr	r3, [r4, #16]
 8009e1c:	6861      	ldr	r1, [r4, #4]
 8009e1e:	4299      	cmp	r1, r3
 8009e20:	bfde      	ittt	le
 8009e22:	2330      	movle	r3, #48	@ 0x30
 8009e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e2c:	1b92      	subs	r2, r2, r6
 8009e2e:	6122      	str	r2, [r4, #16]
 8009e30:	f8cd a000 	str.w	sl, [sp]
 8009e34:	464b      	mov	r3, r9
 8009e36:	aa03      	add	r2, sp, #12
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	f7ff fee6 	bl	8009c0c <_printf_common>
 8009e40:	3001      	adds	r0, #1
 8009e42:	d14a      	bne.n	8009eda <_printf_i+0x1f2>
 8009e44:	f04f 30ff 	mov.w	r0, #4294967295
 8009e48:	b004      	add	sp, #16
 8009e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	f043 0320 	orr.w	r3, r3, #32
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	4833      	ldr	r0, [pc, #204]	@ (8009f24 <_printf_i+0x23c>)
 8009e58:	2778      	movs	r7, #120	@ 0x78
 8009e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	6831      	ldr	r1, [r6, #0]
 8009e62:	061f      	lsls	r7, r3, #24
 8009e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e68:	d402      	bmi.n	8009e70 <_printf_i+0x188>
 8009e6a:	065f      	lsls	r7, r3, #25
 8009e6c:	bf48      	it	mi
 8009e6e:	b2ad      	uxthmi	r5, r5
 8009e70:	6031      	str	r1, [r6, #0]
 8009e72:	07d9      	lsls	r1, r3, #31
 8009e74:	bf44      	itt	mi
 8009e76:	f043 0320 	orrmi.w	r3, r3, #32
 8009e7a:	6023      	strmi	r3, [r4, #0]
 8009e7c:	b11d      	cbz	r5, 8009e86 <_printf_i+0x19e>
 8009e7e:	2310      	movs	r3, #16
 8009e80:	e7ac      	b.n	8009ddc <_printf_i+0xf4>
 8009e82:	4827      	ldr	r0, [pc, #156]	@ (8009f20 <_printf_i+0x238>)
 8009e84:	e7e9      	b.n	8009e5a <_printf_i+0x172>
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	f023 0320 	bic.w	r3, r3, #32
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	e7f6      	b.n	8009e7e <_printf_i+0x196>
 8009e90:	4616      	mov	r6, r2
 8009e92:	e7bd      	b.n	8009e10 <_printf_i+0x128>
 8009e94:	6833      	ldr	r3, [r6, #0]
 8009e96:	6825      	ldr	r5, [r4, #0]
 8009e98:	6961      	ldr	r1, [r4, #20]
 8009e9a:	1d18      	adds	r0, r3, #4
 8009e9c:	6030      	str	r0, [r6, #0]
 8009e9e:	062e      	lsls	r6, r5, #24
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	d501      	bpl.n	8009ea8 <_printf_i+0x1c0>
 8009ea4:	6019      	str	r1, [r3, #0]
 8009ea6:	e002      	b.n	8009eae <_printf_i+0x1c6>
 8009ea8:	0668      	lsls	r0, r5, #25
 8009eaa:	d5fb      	bpl.n	8009ea4 <_printf_i+0x1bc>
 8009eac:	8019      	strh	r1, [r3, #0]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6123      	str	r3, [r4, #16]
 8009eb2:	4616      	mov	r6, r2
 8009eb4:	e7bc      	b.n	8009e30 <_printf_i+0x148>
 8009eb6:	6833      	ldr	r3, [r6, #0]
 8009eb8:	1d1a      	adds	r2, r3, #4
 8009eba:	6032      	str	r2, [r6, #0]
 8009ebc:	681e      	ldr	r6, [r3, #0]
 8009ebe:	6862      	ldr	r2, [r4, #4]
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7f6 f98c 	bl	80001e0 <memchr>
 8009ec8:	b108      	cbz	r0, 8009ece <_printf_i+0x1e6>
 8009eca:	1b80      	subs	r0, r0, r6
 8009ecc:	6060      	str	r0, [r4, #4]
 8009ece:	6863      	ldr	r3, [r4, #4]
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ed8:	e7aa      	b.n	8009e30 <_printf_i+0x148>
 8009eda:	6923      	ldr	r3, [r4, #16]
 8009edc:	4632      	mov	r2, r6
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	47d0      	blx	sl
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d0ad      	beq.n	8009e44 <_printf_i+0x15c>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	079b      	lsls	r3, r3, #30
 8009eec:	d413      	bmi.n	8009f16 <_printf_i+0x22e>
 8009eee:	68e0      	ldr	r0, [r4, #12]
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	4298      	cmp	r0, r3
 8009ef4:	bfb8      	it	lt
 8009ef6:	4618      	movlt	r0, r3
 8009ef8:	e7a6      	b.n	8009e48 <_printf_i+0x160>
 8009efa:	2301      	movs	r3, #1
 8009efc:	4632      	mov	r2, r6
 8009efe:	4649      	mov	r1, r9
 8009f00:	4640      	mov	r0, r8
 8009f02:	47d0      	blx	sl
 8009f04:	3001      	adds	r0, #1
 8009f06:	d09d      	beq.n	8009e44 <_printf_i+0x15c>
 8009f08:	3501      	adds	r5, #1
 8009f0a:	68e3      	ldr	r3, [r4, #12]
 8009f0c:	9903      	ldr	r1, [sp, #12]
 8009f0e:	1a5b      	subs	r3, r3, r1
 8009f10:	42ab      	cmp	r3, r5
 8009f12:	dcf2      	bgt.n	8009efa <_printf_i+0x212>
 8009f14:	e7eb      	b.n	8009eee <_printf_i+0x206>
 8009f16:	2500      	movs	r5, #0
 8009f18:	f104 0619 	add.w	r6, r4, #25
 8009f1c:	e7f5      	b.n	8009f0a <_printf_i+0x222>
 8009f1e:	bf00      	nop
 8009f20:	0800a139 	.word	0x0800a139
 8009f24:	0800a14a 	.word	0x0800a14a

08009f28 <memmove>:
 8009f28:	4288      	cmp	r0, r1
 8009f2a:	b510      	push	{r4, lr}
 8009f2c:	eb01 0402 	add.w	r4, r1, r2
 8009f30:	d902      	bls.n	8009f38 <memmove+0x10>
 8009f32:	4284      	cmp	r4, r0
 8009f34:	4623      	mov	r3, r4
 8009f36:	d807      	bhi.n	8009f48 <memmove+0x20>
 8009f38:	1e43      	subs	r3, r0, #1
 8009f3a:	42a1      	cmp	r1, r4
 8009f3c:	d008      	beq.n	8009f50 <memmove+0x28>
 8009f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f46:	e7f8      	b.n	8009f3a <memmove+0x12>
 8009f48:	4402      	add	r2, r0
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	428a      	cmp	r2, r1
 8009f4e:	d100      	bne.n	8009f52 <memmove+0x2a>
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f5a:	e7f7      	b.n	8009f4c <memmove+0x24>

08009f5c <_sbrk_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d06      	ldr	r5, [pc, #24]	@ (8009f78 <_sbrk_r+0x1c>)
 8009f60:	2300      	movs	r3, #0
 8009f62:	4604      	mov	r4, r0
 8009f64:	4608      	mov	r0, r1
 8009f66:	602b      	str	r3, [r5, #0]
 8009f68:	f7f7 f906 	bl	8001178 <_sbrk>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_sbrk_r+0x1a>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_sbrk_r+0x1a>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	20004850 	.word	0x20004850

08009f7c <_realloc_r>:
 8009f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f80:	4680      	mov	r8, r0
 8009f82:	4615      	mov	r5, r2
 8009f84:	460c      	mov	r4, r1
 8009f86:	b921      	cbnz	r1, 8009f92 <_realloc_r+0x16>
 8009f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	f7ff bc59 	b.w	8009844 <_malloc_r>
 8009f92:	b92a      	cbnz	r2, 8009fa0 <_realloc_r+0x24>
 8009f94:	f7ff fbea 	bl	800976c <_free_r>
 8009f98:	2400      	movs	r4, #0
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa0:	f000 f81a 	bl	8009fd8 <_malloc_usable_size_r>
 8009fa4:	4285      	cmp	r5, r0
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	d802      	bhi.n	8009fb0 <_realloc_r+0x34>
 8009faa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009fae:	d8f4      	bhi.n	8009f9a <_realloc_r+0x1e>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	f7ff fc46 	bl	8009844 <_malloc_r>
 8009fb8:	4607      	mov	r7, r0
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d0ec      	beq.n	8009f98 <_realloc_r+0x1c>
 8009fbe:	42b5      	cmp	r5, r6
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	bf28      	it	cs
 8009fc6:	4632      	movcs	r2, r6
 8009fc8:	f7ff fbc2 	bl	8009750 <memcpy>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4640      	mov	r0, r8
 8009fd0:	f7ff fbcc 	bl	800976c <_free_r>
 8009fd4:	463c      	mov	r4, r7
 8009fd6:	e7e0      	b.n	8009f9a <_realloc_r+0x1e>

08009fd8 <_malloc_usable_size_r>:
 8009fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fdc:	1f18      	subs	r0, r3, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	bfbc      	itt	lt
 8009fe2:	580b      	ldrlt	r3, [r1, r0]
 8009fe4:	18c0      	addlt	r0, r0, r3
 8009fe6:	4770      	bx	lr

08009fe8 <_init>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	bf00      	nop
 8009fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fee:	bc08      	pop	{r3}
 8009ff0:	469e      	mov	lr, r3
 8009ff2:	4770      	bx	lr

08009ff4 <_fini>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	bf00      	nop
 8009ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffa:	bc08      	pop	{r3}
 8009ffc:	469e      	mov	lr, r3
 8009ffe:	4770      	bx	lr
