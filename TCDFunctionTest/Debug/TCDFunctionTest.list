
TCDFunctionTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800a178  0800a178  0000b178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2d4  0800a2d4  0000c17c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2d4  0800a2d4  0000b2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2dc  0800a2dc  0000c17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2dc  0800a2dc  0000b2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2e0  0800a2e0  0000b2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800a2e4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046e8  2000017c  0800a460  0000c17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004864  0800a460  0000c864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e50  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fd  00000000  00000000  00020ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00024700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e56  00000000  00000000  000259c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a35b  00000000  00000000  0002681e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bb8  00000000  00000000  00040b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b215  00000000  00000000  00058731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3946  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  000f398c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f8d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000017c 	.word	0x2000017c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a160 	.word	0x0800a160

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000180 	.word	0x20000180
 80001dc:	0800a160 	.word	0x0800a160

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe94 	bl	80012a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  InitializeHeaderFooter();
 8000578:	f000 fbe6 	bl	8000d48 <InitializeHeaderFooter>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f830 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fb0a 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000584:	f000 fae8 	bl	8000b58 <MX_DMA_Init>
  MX_TIM2_Init();
 8000588:	f000 f8e8 	bl	800075c <MX_TIM2_Init>
  MX_TIM3_Init();
 800058c:	f000 f96c 	bl	8000868 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000590:	f000 f9e0 	bl	8000954 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000594:	f000 fa50 	bl	8000a38 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000598:	f008 fc16 	bl	8008dc8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800059c:	f000 f88c 	bl	80006b8 <MX_ADC1_Init>
//  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
////  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
//  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH

  if (!start_command_received) {
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <main+0x60>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d107      	bne.n	80005ba <main+0x4a>
  CDC_Transmit_FS("Target Ready\r\n",14);
 80005aa:	210e      	movs	r1, #14
 80005ac:	4809      	ldr	r0, [pc, #36]	@ (80005d4 <main+0x64>)
 80005ae:	f008 fccf 	bl	8008f50 <CDC_Transmit_FS>
  HAL_Delay(1000);}
 80005b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b6:	f000 fee5 	bl	8001384 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  single_capture_flag = 1;
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <main+0x68>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 80005c0:	2104      	movs	r1, #4
 80005c2:	4806      	ldr	r0, [pc, #24]	@ (80005dc <main+0x6c>)
 80005c4:	f004 f92c 	bl	8004820 <HAL_TIM_PWM_Start_IT>

  while (1)
  {

	  SingleCapture();
 80005c8:	f000 fb0e 	bl	8000be8 <SingleCapture>
 80005cc:	e7fc      	b.n	80005c8 <main+0x58>
 80005ce:	bf00      	nop
 80005d0:	20003328 	.word	0x20003328
 80005d4:	0800a178 	.word	0x0800a178
 80005d8:	2000332c 	.word	0x2000332c
 80005dc:	20000240 	.word	0x20000240

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	@ 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f009 f924 	bl	800983c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	4a28      	ldr	r2, [pc, #160]	@ (80006b0 <SystemClock_Config+0xd0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <SystemClock_Config+0xd4>)
 800062e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000654:	2319      	movs	r3, #25
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000658:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800065c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065e:	2304      	movs	r3, #4
 8000660:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000662:	2307      	movs	r3, #7
 8000664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	4618      	mov	r0, r3
 800066c:	f003 faec 	bl	8003c48 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000676:	f000 fbc3 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fd4e 	bl	8004138 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a2:	f000 fbad 	bl	8000e00 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <MX_ADC1_Init+0x9c>)
 80006cc:	4a22      	ldr	r2, [pc, #136]	@ (8000758 <MX_ADC1_Init+0xa0>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d0:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <MX_ADC1_Init+0x9c>)
 80006d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_ADC1_Init+0x9c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_ADC1_Init+0x9c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_ADC1_Init+0x9c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_ADC1_Init+0x9c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_ADC1_Init+0x9c>)
 80006f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_ADC1_Init+0x9c>)
 80006fc:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000700:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_ADC1_Init+0x9c>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_ADC1_Init+0x9c>)
 800070a:	2201      	movs	r2, #1
 800070c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_ADC1_Init+0x9c>)
 8000710:	2201      	movs	r2, #1
 8000712:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_ADC1_Init+0x9c>)
 8000718:	2201      	movs	r2, #1
 800071a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071c:	480d      	ldr	r0, [pc, #52]	@ (8000754 <MX_ADC1_Init+0x9c>)
 800071e:	f000 fe55 	bl	80013cc <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000728:	f000 fb6a 	bl	8000e00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800072c:	2303      	movs	r3, #3
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_ADC1_Init+0x9c>)
 800073e:	f000 ff8d 	bl	800165c <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000748:	f000 fb5a 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000198 	.word	0x20000198
 8000758:	40012000 	.word	0x40012000

0800075c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08e      	sub	sp, #56	@ 0x38
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
 8000788:	615a      	str	r2, [r3, #20]
 800078a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800078c:	4b34      	ldr	r3, [pc, #208]	@ (8000860 <MX_TIM2_Init+0x104>)
 800078e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000794:	4b32      	ldr	r3, [pc, #200]	@ (8000860 <MX_TIM2_Init+0x104>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b31      	ldr	r3, [pc, #196]	@ (8000860 <MX_TIM2_Init+0x104>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 80007a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <MX_TIM2_Init+0x104>)
 80007a2:	4a30      	ldr	r2, [pc, #192]	@ (8000864 <MX_TIM2_Init+0x108>)
 80007a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000860 <MX_TIM2_Init+0x104>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000860 <MX_TIM2_Init+0x104>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b2:	482b      	ldr	r0, [pc, #172]	@ (8000860 <MX_TIM2_Init+0x104>)
 80007b4:	f003 fe78 	bl	80044a8 <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80007be:	f000 fb1f 	bl	8000e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4824      	ldr	r0, [pc, #144]	@ (8000860 <MX_TIM2_Init+0x104>)
 80007d0:	f004 fad6 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007da:	f000 fb11 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007de:	4820      	ldr	r0, [pc, #128]	@ (8000860 <MX_TIM2_Init+0x104>)
 80007e0:	f003 feb1 	bl	8004546 <HAL_TIM_PWM_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007ea:	f000 fb09 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80007ee:	2310      	movs	r3, #16
 80007f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80007f2:	2380      	movs	r3, #128	@ 0x80
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	4619      	mov	r1, r3
 80007fc:	4818      	ldr	r0, [pc, #96]	@ (8000860 <MX_TIM2_Init+0x104>)
 80007fe:	f004 ff59 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000808:	f000 fafa 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800080c:	2370      	movs	r3, #112	@ 0x70
 800080e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 8000810:	f242 2373 	movw	r3, #8819	@ 0x2273
 8000814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000816:	2302      	movs	r3, #2
 8000818:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	480e      	ldr	r0, [pc, #56]	@ (8000860 <MX_TIM2_Init+0x104>)
 8000826:	f004 f9e9 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000830:	f000 fae6 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000834:	2360      	movs	r3, #96	@ 0x60
 8000836:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2204      	movs	r2, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4807      	ldr	r0, [pc, #28]	@ (8000860 <MX_TIM2_Init+0x104>)
 8000844:	f004 f9da 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800084e:	f000 fad7 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000852:	4803      	ldr	r0, [pc, #12]	@ (8000860 <MX_TIM2_Init+0x104>)
 8000854:	f000 fbe0 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000858:	bf00      	nop
 800085a:	3738      	adds	r7, #56	@ 0x38
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000240 	.word	0x20000240
 8000864:	000802c7 	.word	0x000802c7

08000868 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08e      	sub	sp, #56	@ 0x38
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]
 8000896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000898:	4b2c      	ldr	r3, [pc, #176]	@ (800094c <MX_TIM3_Init+0xe4>)
 800089a:	4a2d      	ldr	r2, [pc, #180]	@ (8000950 <MX_TIM3_Init+0xe8>)
 800089c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800089e:	4b2b      	ldr	r3, [pc, #172]	@ (800094c <MX_TIM3_Init+0xe4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b29      	ldr	r3, [pc, #164]	@ (800094c <MX_TIM3_Init+0xe4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 80008aa:	4b28      	ldr	r3, [pc, #160]	@ (800094c <MX_TIM3_Init+0xe4>)
 80008ac:	22a7      	movs	r2, #167	@ 0xa7
 80008ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b26      	ldr	r3, [pc, #152]	@ (800094c <MX_TIM3_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b25      	ldr	r3, [pc, #148]	@ (800094c <MX_TIM3_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008bc:	4823      	ldr	r0, [pc, #140]	@ (800094c <MX_TIM3_Init+0xe4>)
 80008be:	f003 fdf3 	bl	80044a8 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80008c8:	f000 fa9a 	bl	8000e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d6:	4619      	mov	r1, r3
 80008d8:	481c      	ldr	r0, [pc, #112]	@ (800094c <MX_TIM3_Init+0xe4>)
 80008da:	f004 fa51 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80008e4:	f000 fa8c 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008e8:	4818      	ldr	r0, [pc, #96]	@ (800094c <MX_TIM3_Init+0xe4>)
 80008ea:	f003 fe2c 	bl	8004546 <HAL_TIM_PWM_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80008f4:	f000 fa84 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	4619      	mov	r1, r3
 8000906:	4811      	ldr	r0, [pc, #68]	@ (800094c <MX_TIM3_Init+0xe4>)
 8000908:	f004 fed4 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000912:	f000 fa75 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000916:	2360      	movs	r3, #96	@ 0x60
 8000918:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 800091a:	2353      	movs	r3, #83	@ 0x53
 800091c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	4807      	ldr	r0, [pc, #28]	@ (800094c <MX_TIM3_Init+0xe4>)
 800092e:	f004 f965 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000938:	f000 fa62 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800093c:	4803      	ldr	r0, [pc, #12]	@ (800094c <MX_TIM3_Init+0xe4>)
 800093e:	f000 fb6b 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000942:	bf00      	nop
 8000944:	3738      	adds	r7, #56	@ 0x38
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000288 	.word	0x20000288
 8000950:	40000400 	.word	0x40000400

08000954 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	@ 0x38
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000984:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 8000986:	4a2b      	ldr	r2, [pc, #172]	@ (8000a34 <MX_TIM4_Init+0xe0>)
 8000988:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800098a:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b27      	ldr	r3, [pc, #156]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 8000998:	22a7      	movs	r2, #167	@ 0xa7
 800099a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b24      	ldr	r3, [pc, #144]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009a8:	4821      	ldr	r0, [pc, #132]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 80009aa:	f003 fd7d 	bl	80044a8 <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80009b4:	f000 fa24 	bl	8000e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009c2:	4619      	mov	r1, r3
 80009c4:	481a      	ldr	r0, [pc, #104]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 80009c6:	f004 f9db 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80009d0:	f000 fa16 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009d4:	4816      	ldr	r0, [pc, #88]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 80009d6:	f003 fdb6 	bl	8004546 <HAL_TIM_PWM_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80009e0:	f000 fa0e 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4619      	mov	r1, r3
 80009f2:	480f      	ldr	r0, [pc, #60]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 80009f4:	f004 fe5e 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80009fe:	f000 f9ff 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a02:	2360      	movs	r3, #96	@ 0x60
 8000a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 8000a06:	2329      	movs	r3, #41	@ 0x29
 8000a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	220c      	movs	r2, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_TIM4_Init+0xdc>)
 8000a1a:	f004 f8ef 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000a24:	f000 f9ec 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3738      	adds	r7, #56	@ 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200002d0 	.word	0x200002d0
 8000a34:	40000800 	.word	0x40000800

08000a38 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b092      	sub	sp, #72	@ 0x48
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a78:	4b34      	ldr	r3, [pc, #208]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000a7a:	4a35      	ldr	r2, [pc, #212]	@ (8000b50 <MX_TIM5_Init+0x118>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000a7e:	4b33      	ldr	r3, [pc, #204]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b31      	ldr	r3, [pc, #196]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 8000a8a:	4b30      	ldr	r3, [pc, #192]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000a8c:	4a31      	ldr	r2, [pc, #196]	@ (8000b54 <MX_TIM5_Init+0x11c>)
 8000a8e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a90:	4b2e      	ldr	r3, [pc, #184]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b2d      	ldr	r3, [pc, #180]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a9c:	482b      	ldr	r0, [pc, #172]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000a9e:	f003 fd03 	bl	80044a8 <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000aa8:	f000 f9aa 	bl	8000e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ab2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4824      	ldr	r0, [pc, #144]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000aba:	f004 f961 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000ac4:	f000 f99c 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ac8:	4820      	ldr	r0, [pc, #128]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000aca:	f003 fd3c 	bl	8004546 <HAL_TIM_PWM_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000ad4:	f000 f994 	bl	8000e00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ad8:	2306      	movs	r3, #6
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4819      	ldr	r0, [pc, #100]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000ae8:	f004 fa11 	bl	8004f0e <HAL_TIM_SlaveConfigSynchro>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000af2:	f000 f985 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000afa:	2380      	movs	r3, #128	@ 0x80
 8000afc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000b06:	f004 fdd5 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000b10:	f000 f976 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b14:	2360      	movs	r3, #96	@ 0x60
 8000b16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000b18:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b26:	463b      	mov	r3, r7
 8000b28:	2208      	movs	r2, #8
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4807      	ldr	r0, [pc, #28]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000b2e:	f004 f865 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000b38:	f000 f962 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b3c:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <MX_TIM5_Init+0x114>)
 8000b3e:	f000 fa6b 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000b42:	bf00      	nop
 8000b44:	3748      	adds	r7, #72	@ 0x48
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000318 	.word	0x20000318
 8000b50:	40000c00 	.word	0x40000c00
 8000b54:	000802c7 	.word	0x000802c7

08000b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_DMA_Init+0x3c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <MX_DMA_Init+0x3c>)
 8000b68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_DMA_Init+0x3c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2038      	movs	r0, #56	@ 0x38
 8000b80:	f001 f8e7 	bl	8001d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b84:	2038      	movs	r0, #56	@ 0x38
 8000b86:	f001 f900 	bl	8001d8a <HAL_NVIC_EnableIRQ>

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <MX_GPIO_Init+0x4c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <MX_GPIO_Init+0x4c>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <MX_GPIO_Init+0x4c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <MX_GPIO_Init+0x4c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <MX_GPIO_Init+0x4c>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <MX_GPIO_Init+0x4c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <SingleCapture>:

/* USER CODE BEGIN 4 */
void SingleCapture(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	if(timer_flag == 1){
 8000bec:	4b2b      	ldr	r3, [pc, #172]	@ (8000c9c <SingleCapture+0xb4>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d108      	bne.n	8000c06 <SingleCapture+0x1e>
		count_signals++;
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca0 <SingleCapture+0xb8>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b28      	ldr	r3, [pc, #160]	@ (8000ca0 <SingleCapture+0xb8>)
 8000bfe:	701a      	strb	r2, [r3, #0]
		timer_flag = 0;
 8000c00:	4b26      	ldr	r3, [pc, #152]	@ (8000c9c <SingleCapture+0xb4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
	}
	if(single_capture_flag == 1){
 8000c06:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <SingleCapture+0xbc>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d124      	bne.n	8000c58 <SingleCapture+0x70>
	  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay for icg
 8000c0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ca8 <SingleCapture+0xc0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2242      	movs	r2, #66	@ 0x42
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_COUNTER(&htim5, 0); // sh
 8000c16:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <SingleCapture+0xc4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_COUNTER(&htim3, 0); // fm
 8000c1e:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <SingleCapture+0xc8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//icg
 8000c26:	2100      	movs	r1, #0
 8000c28:	481f      	ldr	r0, [pc, #124]	@ (8000ca8 <SingleCapture+0xc0>)
 8000c2a:	f003 fce5 	bl	80045f8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8000c2e:	2108      	movs	r1, #8
 8000c30:	481e      	ldr	r0, [pc, #120]	@ (8000cac <SingleCapture+0xc4>)
 8000c32:	f003 fce1 	bl	80045f8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8000c36:	2100      	movs	r1, #0
 8000c38:	481d      	ldr	r0, [pc, #116]	@ (8000cb0 <SingleCapture+0xc8>)
 8000c3a:	f003 fcdd 	bl	80045f8 <HAL_TIM_PWM_Start>
//	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 8000c3e:	210c      	movs	r1, #12
 8000c40:	481c      	ldr	r0, [pc, #112]	@ (8000cb4 <SingleCapture+0xcc>)
 8000c42:	f003 fcd9 	bl	80045f8 <HAL_TIM_PWM_Start>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000c46:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000c4a:	491b      	ldr	r1, [pc, #108]	@ (8000cb8 <SingleCapture+0xd0>)
 8000c4c:	481b      	ldr	r0, [pc, #108]	@ (8000cbc <SingleCapture+0xd4>)
 8000c4e:	f000 fc01 	bl	8001454 <HAL_ADC_Start_DMA>
	  single_capture_flag = 0;
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <SingleCapture+0xbc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	}

	  if(count_signals >= signals){
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <SingleCapture+0xb8>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <SingleCapture+0xd8>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d307      	bcc.n	8000c74 <SingleCapture+0x8c>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); //ICG
 8000c64:	2100      	movs	r1, #0
 8000c66:	4810      	ldr	r0, [pc, #64]	@ (8000ca8 <SingleCapture+0xc0>)
 8000c68:	f003 fd76 	bl	8004758 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); //SH
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	480f      	ldr	r0, [pc, #60]	@ (8000cac <SingleCapture+0xc4>)
 8000c70:	f003 fd72 	bl	8004758 <HAL_TIM_PWM_Stop>

	  }
	  if(count_signals >= (signals + 1)){
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <SingleCapture+0xd8>)
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <SingleCapture+0xb8>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d20a      	bcs.n	8000c96 <SingleCapture+0xae>
	  		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); //fM
 8000c80:	2100      	movs	r1, #0
 8000c82:	480b      	ldr	r0, [pc, #44]	@ (8000cb0 <SingleCapture+0xc8>)
 8000c84:	f003 fd68 	bl	8004758 <HAL_TIM_PWM_Stop>
	  		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //ADC
 8000c88:	210c      	movs	r1, #12
 8000c8a:	480a      	ldr	r0, [pc, #40]	@ (8000cb4 <SingleCapture+0xcc>)
 8000c8c:	f003 fd64 	bl	8004758 <HAL_TIM_PWM_Stop>
	  		  count_signals = 0;
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <SingleCapture+0xb8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
	  	  }




}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000332b 	.word	0x2000332b
 8000ca0:	20003329 	.word	0x20003329
 8000ca4:	2000332c 	.word	0x2000332c
 8000ca8:	20000240 	.word	0x20000240
 8000cac:	20000318 	.word	0x20000318
 8000cb0:	20000288 	.word	0x20000288
 8000cb4:	200002d0 	.word	0x200002d0
 8000cb8:	20000448 	.word	0x20000448
 8000cbc:	20000198 	.word	0x20000198
 8000cc0:	2000002c 	.word	0x2000002c

08000cc4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	adc_flag = 1;
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
//	HAL_ADC_Stop_DMA(&hadc1);
//	CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2000332a 	.word	0x2000332a

08000ce4 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cf4:	d102      	bne.n	8000cfc <HAL_TIM_PWM_PulseFinishedCallback+0x18>
			timer_flag = 1;
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
//			count_signals++;
			}
		}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	2000332b 	.word	0x2000332b

08000d0c <CDCReceiveCallback>:



//when the stm receives anything, it checks if it is the string start

void CDCReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
    // Ensure the buffer is null-terminated
    Buf[Len] = '\0';
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]

    // Check for the "start" command
    if (strncmp((char*)Buf, "start", 5) == 0) {
 8000d20:	2205      	movs	r2, #5
 8000d22:	4907      	ldr	r1, [pc, #28]	@ (8000d40 <CDCReceiveCallback+0x34>)
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f008 fd91 	bl	800984c <strncmp>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <CDCReceiveCallback+0x2a>
    	single_capture_flag = 1;
 8000d30:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <CDCReceiveCallback+0x38>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]


    }
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	0800a188 	.word	0x0800a188
 8000d44:	2000332c 	.word	0x2000332c

08000d48 <InitializeHeaderFooter>:
    // Configure the SH signal with the calculated period and pulse width
    Configure_SH_Signal(T_SH_ticks, SH_pulse_ticks);
}


void InitializeHeaderFooter(void) {
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b093      	sub	sp, #76	@ 0x4c
 8000d4c:	af0c      	add	r7, sp, #48	@ 0x30
    // Construct the header
    snprintf(header, HEADER_SIZE,
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc8 <InitializeHeaderFooter+0x80>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	4a1d      	ldr	r2, [pc, #116]	@ (8000dcc <InitializeHeaderFooter+0x84>)
 8000d56:	6812      	ldr	r2, [r2, #0]
 8000d58:	491d      	ldr	r1, [pc, #116]	@ (8000dd0 <InitializeHeaderFooter+0x88>)
 8000d5a:	6809      	ldr	r1, [r1, #0]
 8000d5c:	481d      	ldr	r0, [pc, #116]	@ (8000dd4 <InitializeHeaderFooter+0x8c>)
 8000d5e:	6800      	ldr	r0, [r0, #0]
 8000d60:	4c1d      	ldr	r4, [pc, #116]	@ (8000dd8 <InitializeHeaderFooter+0x90>)
 8000d62:	6824      	ldr	r4, [r4, #0]
 8000d64:	4d1c      	ldr	r5, [pc, #112]	@ (8000dd8 <InitializeHeaderFooter+0x90>)
 8000d66:	686d      	ldr	r5, [r5, #4]
 8000d68:	4e1b      	ldr	r6, [pc, #108]	@ (8000dd8 <InitializeHeaderFooter+0x90>)
 8000d6a:	68b6      	ldr	r6, [r6, #8]
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <InitializeHeaderFooter+0x90>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <InitializeHeaderFooter+0x94>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <InitializeHeaderFooter+0x98>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <InitializeHeaderFooter+0x9c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <InitializeHeaderFooter+0xa0>)
 8000d86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	9308      	str	r3, [sp, #32]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	9307      	str	r3, [sp, #28]
 8000d98:	9606      	str	r6, [sp, #24]
 8000d9a:	9505      	str	r5, [sp, #20]
 8000d9c:	9404      	str	r4, [sp, #16]
 8000d9e:	9003      	str	r0, [sp, #12]
 8000da0:	9102      	str	r1, [sp, #8]
 8000da2:	9201      	str	r2, [sp, #4]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <InitializeHeaderFooter+0xa4>)
 8000daa:	4a11      	ldr	r2, [pc, #68]	@ (8000df0 <InitializeHeaderFooter+0xa8>)
 8000dac:	21c8      	movs	r1, #200	@ 0xc8
 8000dae:	4811      	ldr	r0, [pc, #68]	@ (8000df4 <InitializeHeaderFooter+0xac>)
 8000db0:	f008 fd10 	bl	80097d4 <sniprintf>
        VersionNo, MajorVersion, FileFormatNo, CustomizationNo, CameraType,
        DataInfo[0], DataInfo[1], DataInfo[2], DataInfo[3],
        MeasureMode, SheetData, Profile, ScaleUnitChars);

    // Construct the footer (this example just uses a simple footer, customize as needed)
    snprintf(footer, FOOTER_SIZE, "\n");
 8000db4:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <InitializeHeaderFooter+0xb0>)
 8000db6:	2102      	movs	r1, #2
 8000db8:	4810      	ldr	r0, [pc, #64]	@ (8000dfc <InitializeHeaderFooter+0xb4>)
 8000dba:	f008 fd0b 	bl	80097d4 <sniprintf>
}
 8000dbe:	bf00      	nop
 8000dc0:	371c      	adds	r7, #28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	20000360 	.word	0x20000360
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	20000364 	.word	0x20000364
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	20000378 	.word	0x20000378
 8000de4:	20000014 	.word	0x20000014
 8000de8:	20000018 	.word	0x20000018
 8000dec:	20000000 	.word	0x20000000
 8000df0:	0800a190 	.word	0x0800a190
 8000df4:	2000037c 	.word	0x2000037c
 8000df8:	0800a23c 	.word	0x0800a23c
 8000dfc:	20000444 	.word	0x20000444

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <Error_Handler+0x8>

08000e0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a2e      	ldr	r2, [pc, #184]	@ (8000f34 <HAL_ADC_MspInit+0xd8>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d156      	bne.n	8000f2c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <HAL_ADC_MspInit+0xdc>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	4a2c      	ldr	r2, [pc, #176]	@ (8000f38 <HAL_ADC_MspInit+0xdc>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <HAL_ADC_MspInit+0xdc>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <HAL_ADC_MspInit+0xdc>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a25      	ldr	r2, [pc, #148]	@ (8000f38 <HAL_ADC_MspInit+0xdc>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <HAL_ADC_MspInit+0xdc>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481c      	ldr	r0, [pc, #112]	@ (8000f3c <HAL_ADC_MspInit+0xe0>)
 8000eca:	f001 fae9 	bl	80024a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f44 <HAL_ADC_MspInit+0xe8>)
 8000ed2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000ee8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000ef0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ef4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000efc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f10:	480b      	ldr	r0, [pc, #44]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000f12:	f000 ff55 	bl	8001dc0 <HAL_DMA_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000f1c:	f7ff ff70 	bl	8000e00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000f24:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f26:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <HAL_ADC_MspInit+0xe4>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	@ 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40012000 	.word	0x40012000
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	200001e0 	.word	0x200001e0
 8000f44:	40026410 	.word	0x40026410

08000f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f58:	d116      	bne.n	8000f88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	4a29      	ldr	r2, [pc, #164]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6a:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	201c      	movs	r0, #28
 8000f7c:	f000 fee9 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f80:	201c      	movs	r0, #28
 8000f82:	f000 ff02 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f86:	e03a      	b.n	8000ffe <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800100c <HAL_TIM_Base_MspInit+0xc4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10e      	bne.n	8000fb0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
}
 8000fae:	e026      	b.n	8000ffe <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a16      	ldr	r2, [pc, #88]	@ (8001010 <HAL_TIM_Base_MspInit+0xc8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10e      	bne.n	8000fd8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	4a11      	ldr	r2, [pc, #68]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
}
 8000fd6:	e012      	b.n	8000ffe <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <HAL_TIM_Base_MspInit+0xcc>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10d      	bne.n	8000ffe <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	4a07      	ldr	r2, [pc, #28]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff2:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40000400 	.word	0x40000400
 8001010:	40000800 	.word	0x40000800
 8001014:	40000c00 	.word	0x40000c00

08001018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	@ 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001038:	d11e      	bne.n	8001078 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b34      	ldr	r3, [pc, #208]	@ (8001110 <HAL_TIM_MspPostInit+0xf8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a33      	ldr	r2, [pc, #204]	@ (8001110 <HAL_TIM_MspPostInit+0xf8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b31      	ldr	r3, [pc, #196]	@ (8001110 <HAL_TIM_MspPostInit+0xf8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001056:	2301      	movs	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105e:	2302      	movs	r3, #2
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001066:	2301      	movs	r3, #1
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4828      	ldr	r0, [pc, #160]	@ (8001114 <HAL_TIM_MspPostInit+0xfc>)
 8001072:	f001 fa15 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001076:	e046      	b.n	8001106 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a26      	ldr	r2, [pc, #152]	@ (8001118 <HAL_TIM_MspPostInit+0x100>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d11e      	bne.n	80010c0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <HAL_TIM_MspPostInit+0xf8>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a21      	ldr	r2, [pc, #132]	@ (8001110 <HAL_TIM_MspPostInit+0xf8>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <HAL_TIM_MspPostInit+0xf8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800109e:	2340      	movs	r3, #64	@ 0x40
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ae:	2302      	movs	r3, #2
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4816      	ldr	r0, [pc, #88]	@ (8001114 <HAL_TIM_MspPostInit+0xfc>)
 80010ba:	f001 f9f1 	bl	80024a0 <HAL_GPIO_Init>
}
 80010be:	e022      	b.n	8001106 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a15      	ldr	r2, [pc, #84]	@ (800111c <HAL_TIM_MspPostInit+0x104>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d11d      	bne.n	8001106 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <HAL_TIM_MspPostInit+0xf8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <HAL_TIM_MspPostInit+0xf8>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <HAL_TIM_MspPostInit+0xf8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010e6:	2304      	movs	r3, #4
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010f6:	2302      	movs	r3, #2
 80010f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4804      	ldr	r0, [pc, #16]	@ (8001114 <HAL_TIM_MspPostInit+0xfc>)
 8001102:	f001 f9cd 	bl	80024a0 <HAL_GPIO_Init>
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	40000400 	.word	0x40000400
 800111c:	40000c00 	.word	0x40000c00

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <NMI_Handler+0x4>

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <MemManage_Handler+0x4>

08001138 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <UsageFault_Handler+0x4>

08001148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 f8e5 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <TIM2_IRQHandler+0x10>)
 8001186:	f003 fc49 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000240 	.word	0x20000240

08001194 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <DMA2_Stream0_IRQHandler+0x10>)
 800119a:	f000 ff17 	bl	8001fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200001e0 	.word	0x200001e0

080011a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <OTG_FS_IRQHandler+0x10>)
 80011ae:	f001 fc3f 	bl	8002a30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20004018 	.word	0x20004018

080011bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c4:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <_sbrk+0x5c>)
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <_sbrk+0x60>)
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <_sbrk+0x64>)
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <_sbrk+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d207      	bcs.n	80011fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ec:	f008 fb40 	bl	8009870 <__errno>
 80011f0:	4603      	mov	r3, r0
 80011f2:	220c      	movs	r2, #12
 80011f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e009      	b.n	8001210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <_sbrk+0x64>)
 800120c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20010000 	.word	0x20010000
 800121c:	00000400 	.word	0x00000400
 8001220:	20003330 	.word	0x20003330
 8001224:	20004868 	.word	0x20004868

08001228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001284 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001250:	f7ff ffea 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	@ (8001298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f008 faff 	bl	800987c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff f977 	bl	8000570 <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001290:	0800a2e4 	.word	0x0800a2e4
  ldr r2, =_sbss
 8001294:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001298:	20004864 	.word	0x20004864

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a4:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <HAL_Init+0x40>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <HAL_Init+0x40>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <HAL_Init+0x40>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 fd37 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	200f      	movs	r0, #15
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fd9a 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fd4f 	bl	8001da6 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 fd17 	bl	8001d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	@ (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000030 	.word	0x20000030
 800133c:	20000038 	.word	0x20000038
 8001340:	20000034 	.word	0x20000034

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000038 	.word	0x20000038
 8001368:	20003334 	.word	0x20003334

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20003334 	.word	0x20003334

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000038 	.word	0x20000038

080013cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e033      	b.n	800144a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fd36 	bl	8000e5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d118      	bne.n	800143c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001412:	f023 0302 	bic.w	r3, r3, #2
 8001416:	f043 0202 	orr.w	r2, r3, #2
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fa3e 	bl	80018a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f023 0303 	bic.w	r3, r3, #3
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	@ 0x40
 800143a:	e001      	b.n	8001440 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_ADC_Start_DMA+0x1e>
 800146e:	2302      	movs	r3, #2
 8001470:	e0ce      	b.n	8001610 <HAL_ADC_Start_DMA+0x1bc>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	d018      	beq.n	80014ba <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001498:	4b5f      	ldr	r3, [pc, #380]	@ (8001618 <HAL_ADC_Start_DMA+0x1c4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a5f      	ldr	r2, [pc, #380]	@ (800161c <HAL_ADC_Start_DMA+0x1c8>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9a      	lsrs	r2, r3, #18
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80014ac:	e002      	b.n	80014b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f9      	bne.n	80014ae <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014c8:	d107      	bne.n	80014da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014d8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	f040 8086 	bne.w	80015f6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001514:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001528:	d106      	bne.n	8001538 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	f023 0206 	bic.w	r2, r3, #6
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	645a      	str	r2, [r3, #68]	@ 0x44
 8001536:	e002      	b.n	800153e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001546:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <HAL_ADC_Start_DMA+0x1cc>)
 8001548:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154e:	4a35      	ldr	r2, [pc, #212]	@ (8001624 <HAL_ADC_Start_DMA+0x1d0>)
 8001550:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001556:	4a34      	ldr	r2, [pc, #208]	@ (8001628 <HAL_ADC_Start_DMA+0x1d4>)
 8001558:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155e:	4a33      	ldr	r2, [pc, #204]	@ (800162c <HAL_ADC_Start_DMA+0x1d8>)
 8001560:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800156a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800157a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800158a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	334c      	adds	r3, #76	@ 0x4c
 8001596:	4619      	mov	r1, r3
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f000 fcbe 	bl	8001f1c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d129      	bne.n	800160e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	e020      	b.n	800160e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <HAL_ADC_Start_DMA+0x1dc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d11b      	bne.n	800160e <HAL_ADC_Start_DMA+0x1ba>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d114      	bne.n	800160e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	e00b      	b.n	800160e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000030 	.word	0x20000030
 800161c:	431bde83 	.word	0x431bde83
 8001620:	40012300 	.word	0x40012300
 8001624:	08001a99 	.word	0x08001a99
 8001628:	08001b53 	.word	0x08001b53
 800162c:	08001b6f 	.word	0x08001b6f
 8001630:	40012000 	.word	0x40012000

08001634 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1c>
 8001674:	2302      	movs	r3, #2
 8001676:	e105      	b.n	8001884 <HAL_ADC_ConfigChannel+0x228>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b09      	cmp	r3, #9
 8001686:	d925      	bls.n	80016d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68d9      	ldr	r1, [r3, #12]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	3b1e      	subs	r3, #30
 800169e:	2207      	movs	r2, #7
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43da      	mvns	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	400a      	ands	r2, r1
 80016ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68d9      	ldr	r1, [r3, #12]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	4603      	mov	r3, r0
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4403      	add	r3, r0
 80016c6:	3b1e      	subs	r3, #30
 80016c8:	409a      	lsls	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	e022      	b.n	800171a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6919      	ldr	r1, [r3, #16]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	2207      	movs	r2, #7
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	400a      	ands	r2, r1
 80016f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6919      	ldr	r1, [r3, #16]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	4603      	mov	r3, r0
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4403      	add	r3, r0
 8001710:	409a      	lsls	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b06      	cmp	r3, #6
 8001720:	d824      	bhi.n	800176c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	3b05      	subs	r3, #5
 8001734:	221f      	movs	r2, #31
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	400a      	ands	r2, r1
 8001742:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3b05      	subs	r3, #5
 800175e:	fa00 f203 	lsl.w	r2, r0, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	635a      	str	r2, [r3, #52]	@ 0x34
 800176a:	e04c      	b.n	8001806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d824      	bhi.n	80017be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	3b23      	subs	r3, #35	@ 0x23
 8001786:	221f      	movs	r2, #31
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43da      	mvns	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	400a      	ands	r2, r1
 8001794:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3b23      	subs	r3, #35	@ 0x23
 80017b0:	fa00 f203 	lsl.w	r2, r0, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80017bc:	e023      	b.n	8001806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	3b41      	subs	r3, #65	@ 0x41
 80017d0:	221f      	movs	r2, #31
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	400a      	ands	r2, r1
 80017de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	3b41      	subs	r3, #65	@ 0x41
 80017fa:	fa00 f203 	lsl.w	r2, r0, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001806:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <HAL_ADC_ConfigChannel+0x234>)
 8001808:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a21      	ldr	r2, [pc, #132]	@ (8001894 <HAL_ADC_ConfigChannel+0x238>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d109      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1cc>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d105      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	@ (8001894 <HAL_ADC_ConfigChannel+0x238>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d123      	bne.n	800187a <HAL_ADC_ConfigChannel+0x21e>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b10      	cmp	r3, #16
 8001838:	d003      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x1e6>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b11      	cmp	r3, #17
 8001840:	d11b      	bne.n	800187a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b10      	cmp	r3, #16
 8001854:	d111      	bne.n	800187a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_ADC_ConfigChannel+0x23c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a10      	ldr	r2, [pc, #64]	@ (800189c <HAL_ADC_ConfigChannel+0x240>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	0c9a      	lsrs	r2, r3, #18
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800186c:	e002      	b.n	8001874 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3b01      	subs	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40012300 	.word	0x40012300
 8001894:	40012000 	.word	0x40012000
 8001898:	20000030 	.word	0x20000030
 800189c:	431bde83 	.word	0x431bde83

080018a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a8:	4b79      	ldr	r3, [pc, #484]	@ (8001a90 <ADC_Init+0x1f0>)
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	021a      	lsls	r2, r3, #8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6899      	ldr	r1, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	4a58      	ldr	r2, [pc, #352]	@ (8001a94 <ADC_Init+0x1f4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d022      	beq.n	800197e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001946:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6899      	ldr	r1, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6899      	ldr	r1, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	e00f      	b.n	800199e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800198c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800199c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0202 	bic.w	r2, r2, #2
 80019ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6899      	ldr	r1, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7e1b      	ldrb	r3, [r3, #24]
 80019b8:	005a      	lsls	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01b      	beq.n	8001a04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6859      	ldr	r1, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	3b01      	subs	r3, #1
 80019f8:	035a      	lsls	r2, r3, #13
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	e007      	b.n	8001a14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a12:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	051a      	lsls	r2, r3, #20
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6899      	ldr	r1, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a56:	025a      	lsls	r2, r3, #9
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6899      	ldr	r1, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	029a      	lsls	r2, r3, #10
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	609a      	str	r2, [r3, #8]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40012300 	.word	0x40012300
 8001a94:	0f000001 	.word	0x0f000001

08001a98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d13c      	bne.n	8001b2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d12b      	bne.n	8001b24 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d127      	bne.n	8001b24 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ada:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d006      	beq.n	8001af0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d119      	bne.n	8001b24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0220 	bic.w	r2, r2, #32
 8001afe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff f8cd 	bl	8000cc4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b2a:	e00e      	b.n	8001b4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f7ff fd85 	bl	8001648 <HAL_ADC_ErrorCallback>
}
 8001b3e:	e004      	b.n	8001b4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	4798      	blx	r3
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b5e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f7ff fd67 	bl	8001634 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2240      	movs	r2, #64	@ 0x40
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	f043 0204 	orr.w	r2, r3, #4
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7ff fd5a 	bl	8001648 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	@ (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	@ (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	@ 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	@ 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d08:	d301      	bcc.n	8001d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <SysTick_Config+0x40>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f7ff ff8e 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <SysTick_Config+0x40>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <SysTick_Config+0x40>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff29 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d64:	f7ff ff3e 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f7ff ff8e 	bl	8001c90 <NVIC_EncodePriority>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff5d 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff31 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffa2 	bl	8001cf8 <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff face 	bl	800136c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e099      	b.n	8001f10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfc:	e00f      	b.n	8001e1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dfe:	f7ff fab5 	bl	800136c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d908      	bls.n	8001e1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2203      	movs	r2, #3
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e078      	b.n	8001f10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e8      	bne.n	8001dfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4b38      	ldr	r3, [pc, #224]	@ (8001f18 <HAL_DMA_Init+0x158>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d107      	bne.n	8001e88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e80:	4313      	orrs	r3, r2
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f023 0307 	bic.w	r3, r3, #7
 8001e9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d117      	bne.n	8001ee2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fa6f 	bl	80023a8 <DMA_CheckFifoParam>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2240      	movs	r2, #64	@ 0x40
 8001ed4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e016      	b.n	8001f10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fa26 	bl	800233c <DMA_CalcBaseAndBitshift>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef8:	223f      	movs	r2, #63	@ 0x3f
 8001efa:	409a      	lsls	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	f010803f 	.word	0xf010803f

08001f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_DMA_Start_IT+0x26>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e040      	b.n	8001fc4 <HAL_DMA_Start_IT+0xa8>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d12f      	bne.n	8001fb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f9b8 	bl	80022e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f74:	223f      	movs	r2, #63	@ 0x3f
 8001f76:	409a      	lsls	r2, r3
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0216 	orr.w	r2, r2, #22
 8001f8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0208 	orr.w	r2, r2, #8
 8001fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e005      	b.n	8001fc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8002214 <HAL_DMA_IRQHandler+0x248>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a8e      	ldr	r2, [pc, #568]	@ (8002218 <HAL_DMA_IRQHandler+0x24c>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0a9b      	lsrs	r3, r3, #10
 8001fe4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01a      	beq.n	8002038 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0204 	bic.w	r2, r2, #4
 800201e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002024:	2208      	movs	r2, #8
 8002026:	409a      	lsls	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203c:	2201      	movs	r2, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d012      	beq.n	800206e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002066:	f043 0202 	orr.w	r2, r3, #2
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002072:	2204      	movs	r2, #4
 8002074:	409a      	lsls	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d012      	beq.n	80020a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00b      	beq.n	80020a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	2204      	movs	r2, #4
 8002092:	409a      	lsls	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209c:	f043 0204 	orr.w	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	2210      	movs	r2, #16
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d043      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03c      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	2210      	movs	r2, #16
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d018      	beq.n	800210e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d024      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
 80020fa:	e01f      	b.n	800213c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e016      	b.n	800213c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0208 	bic.w	r2, r2, #8
 800212a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002140:	2220      	movs	r2, #32
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 808f 	beq.w	800226c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8087 	beq.w	800226c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002162:	2220      	movs	r2, #32
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b05      	cmp	r3, #5
 8002174:	d136      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0216 	bic.w	r2, r2, #22
 8002184:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002194:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <HAL_DMA_IRQHandler+0x1da>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0208 	bic.w	r2, r2, #8
 80021b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ba:	223f      	movs	r2, #63	@ 0x3f
 80021bc:	409a      	lsls	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d07e      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
        }
        return;
 80021e2:	e079      	b.n	80022d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01d      	beq.n	800222e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10d      	bne.n	800221c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	2b00      	cmp	r3, #0
 8002206:	d031      	beq.n	800226c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
 8002210:	e02c      	b.n	800226c <HAL_DMA_IRQHandler+0x2a0>
 8002212:	bf00      	nop
 8002214:	20000030 	.word	0x20000030
 8002218:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d023      	beq.n	800226c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
 800222c:	e01e      	b.n	800226c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10f      	bne.n	800225c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0210 	bic.w	r2, r2, #16
 800224a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	2b00      	cmp	r3, #0
 8002272:	d032      	beq.n	80022da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d022      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2205      	movs	r2, #5
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	3301      	adds	r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d307      	bcc.n	80022b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f2      	bne.n	8002298 <HAL_DMA_IRQHandler+0x2cc>
 80022b2:	e000      	b.n	80022b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
 80022d6:	e000      	b.n	80022da <HAL_DMA_IRQHandler+0x30e>
        return;
 80022d8:	bf00      	nop
    }
  }
}
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b40      	cmp	r3, #64	@ 0x40
 800230c:	d108      	bne.n	8002320 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800231e:	e007      	b.n	8002330 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	60da      	str	r2, [r3, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3b10      	subs	r3, #16
 800234c:	4a14      	ldr	r2, [pc, #80]	@ (80023a0 <DMA_CalcBaseAndBitshift+0x64>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002356:	4a13      	ldr	r2, [pc, #76]	@ (80023a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d909      	bls.n	800237e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	1d1a      	adds	r2, r3, #4
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	659a      	str	r2, [r3, #88]	@ 0x58
 800237c:	e007      	b.n	800238e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	aaaaaaab 	.word	0xaaaaaaab
 80023a4:	0800a298 	.word	0x0800a298

080023a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11f      	bne.n	8002402 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d856      	bhi.n	8002476 <DMA_CheckFifoParam+0xce>
 80023c8:	a201      	add	r2, pc, #4	@ (adr r2, 80023d0 <DMA_CheckFifoParam+0x28>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	080023f3 	.word	0x080023f3
 80023d8:	080023e1 	.word	0x080023e1
 80023dc:	08002477 	.word	0x08002477
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d046      	beq.n	800247a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e043      	b.n	800247a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023fa:	d140      	bne.n	800247e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e03d      	b.n	800247e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800240a:	d121      	bne.n	8002450 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d837      	bhi.n	8002482 <DMA_CheckFifoParam+0xda>
 8002412:	a201      	add	r2, pc, #4	@ (adr r2, 8002418 <DMA_CheckFifoParam+0x70>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002429 	.word	0x08002429
 800241c:	0800242f 	.word	0x0800242f
 8002420:	08002429 	.word	0x08002429
 8002424:	08002441 	.word	0x08002441
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      break;
 800242c:	e030      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d025      	beq.n	8002486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243e:	e022      	b.n	8002486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002444:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002448:	d11f      	bne.n	800248a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800244e:	e01c      	b.n	800248a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d903      	bls.n	800245e <DMA_CheckFifoParam+0xb6>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d003      	beq.n	8002464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800245c:	e018      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      break;
 8002462:	e015      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      break;
 8002474:	e00b      	b.n	800248e <DMA_CheckFifoParam+0xe6>
      break;
 8002476:	bf00      	nop
 8002478:	e00a      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e008      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
 8002480:	e006      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e004      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002486:	bf00      	nop
 8002488:	e002      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;   
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
    }
  } 
  
  return status; 
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	@ 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e159      	b.n	8002770 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 8148 	bne.w	800276a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d005      	beq.n	80024f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d130      	bne.n	8002554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 0201 	and.w	r2, r3, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b03      	cmp	r3, #3
 800255e:	d017      	beq.n	8002590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d123      	bne.n	80025e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a2 	beq.w	800276a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b57      	ldr	r3, [pc, #348]	@ (8002788 <HAL_GPIO_Init+0x2e8>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	4a56      	ldr	r2, [pc, #344]	@ (8002788 <HAL_GPIO_Init+0x2e8>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002634:	6453      	str	r3, [r2, #68]	@ 0x44
 8002636:	4b54      	ldr	r3, [pc, #336]	@ (8002788 <HAL_GPIO_Init+0x2e8>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002642:	4a52      	ldr	r2, [pc, #328]	@ (800278c <HAL_GPIO_Init+0x2ec>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a49      	ldr	r2, [pc, #292]	@ (8002790 <HAL_GPIO_Init+0x2f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x202>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a48      	ldr	r2, [pc, #288]	@ (8002794 <HAL_GPIO_Init+0x2f4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x1fe>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a47      	ldr	r2, [pc, #284]	@ (8002798 <HAL_GPIO_Init+0x2f8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x1fa>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a46      	ldr	r2, [pc, #280]	@ (800279c <HAL_GPIO_Init+0x2fc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x1f6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a45      	ldr	r2, [pc, #276]	@ (80027a0 <HAL_GPIO_Init+0x300>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x1f2>
 800268e:	2304      	movs	r3, #4
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 8002692:	2307      	movs	r3, #7
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 80026a2:	2300      	movs	r3, #0
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b4:	4935      	ldr	r1, [pc, #212]	@ (800278c <HAL_GPIO_Init+0x2ec>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c2:	4b38      	ldr	r3, [pc, #224]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026e6:	4a2f      	ldr	r2, [pc, #188]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ec:	4b2d      	ldr	r3, [pc, #180]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002710:	4a24      	ldr	r2, [pc, #144]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002716:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273a:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002740:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002764:	4a0f      	ldr	r2, [pc, #60]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	f67f aea2 	bls.w	80024bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3724      	adds	r7, #36	@ 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40013800 	.word	0x40013800
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	40020800 	.word	0x40020800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40013c00 	.word	0x40013c00

080027a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e101      	b.n	80029be <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d106      	bne.n	80027da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f006 fcf3 	bl	80091c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e8:	d102      	bne.n	80027f0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 f8f6 	bl	80059e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	7c1a      	ldrb	r2, [r3, #16]
 8002802:	f88d 2000 	strb.w	r2, [sp]
 8002806:	3304      	adds	r3, #4
 8002808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800280a:	f002 ffd5 	bl	80057b8 <USB_CoreInit>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0ce      	b.n	80029be <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f003 f8ee 	bl	8005a08 <USB_SetCurrentMode>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0bf      	b.n	80029be <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
 8002842:	e04a      	b.n	80028da <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3315      	adds	r3, #21
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3314      	adds	r3, #20
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	b298      	uxth	r0, r3
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	332e      	adds	r3, #46	@ 0x2e
 8002880:	4602      	mov	r2, r0
 8002882:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3318      	adds	r3, #24
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	331c      	adds	r3, #28
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3320      	adds	r3, #32
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3324      	adds	r3, #36	@ 0x24
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	3301      	adds	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	791b      	ldrb	r3, [r3, #4]
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3af      	bcc.n	8002844 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	e044      	b.n	8002974 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	3301      	adds	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	791b      	ldrb	r3, [r3, #4]
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	429a      	cmp	r2, r3
 800297c:	d3b5      	bcc.n	80028ea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7c1a      	ldrb	r2, [r3, #16]
 8002986:	f88d 2000 	strb.w	r2, [sp]
 800298a:	3304      	adds	r3, #4
 800298c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800298e:	f003 f887 	bl	8005aa0 <USB_DevInit>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e00c      	b.n	80029be <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 f8cb 	bl	8006b52 <USB_DevDisconnect>

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_PCD_Start+0x1c>
 80029de:	2302      	movs	r3, #2
 80029e0:	e022      	b.n	8002a28 <HAL_PCD_Start+0x62>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d105      	bne.n	8002a0a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 ffd8 	bl	80059c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f004 f879 	bl	8006b10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b08d      	sub	sp, #52	@ 0x34
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 f937 	bl	8006cba <USB_GetMode>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 848c 	bne.w	800336c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 f89b 	bl	8006b94 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8482 	beq.w	800336a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 f888 	bl	8006b94 <USB_ReadInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d107      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f002 0202 	and.w	r2, r2, #2
 8002a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 f876 	bl	8006b94 <USB_ReadInterrupts>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d161      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0210 	bic.w	r2, r2, #16
 8002ac0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f003 020f 	and.w	r2, r3, #15
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	3304      	adds	r3, #4
 8002ae0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	0c5b      	lsrs	r3, r3, #17
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d124      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d035      	beq.n	8002b66 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6a38      	ldr	r0, [r7, #32]
 8002b0e:	f003 fead 	bl	800686c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b1e:	441a      	add	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b30:	441a      	add	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	615a      	str	r2, [r3, #20]
 8002b36:	e016      	b.n	8002b66 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	0c5b      	lsrs	r3, r3, #17
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	2b06      	cmp	r3, #6
 8002b42:	d110      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	6a38      	ldr	r0, [r7, #32]
 8002b50:	f003 fe8c 	bl	800686c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b60:	441a      	add	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699a      	ldr	r2, [r3, #24]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0210 	orr.w	r2, r2, #16
 8002b74:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f004 f80a 	bl	8006b94 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b86:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b8a:	f040 80a7 	bne.w	8002cdc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 f80f 	bl	8006bba <USB_ReadDevAllOutEpInterrupt>
 8002b9c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b9e:	e099      	b.n	8002cd4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 808e 	beq.w	8002cc8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f004 f833 	bl	8006c22 <USB_ReadDevOutEPInterrupt>
 8002bbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00c      	beq.n	8002be2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fea1 	bl	8003924 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00c      	beq.n	8002c06 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 ff77 	bl	8003af4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2310      	movs	r3, #16
 8002c20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d030      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b80      	cmp	r3, #128	@ 0x80
 8002c36:	d109      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c4a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	78db      	ldrb	r3, [r3, #3]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d108      	bne.n	8002c7c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	4619      	mov	r1, r3
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f006 fb9e 	bl	80093b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d009      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cc6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	3301      	adds	r3, #1
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f47f af62 	bne.w	8002ba0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 ff57 	bl	8006b94 <USB_ReadInterrupts>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cf0:	f040 80db 	bne.w	8002eaa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 ff78 	bl	8006bee <USB_ReadDevAllInEpInterrupt>
 8002cfe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002d04:	e0cd      	b.n	8002ea2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80c2 	beq.w	8002e96 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f003 ff9e 	bl	8006c5e <USB_ReadDevInEPInterrupt>
 8002d22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d057      	beq.n	8002dde <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	2201      	movs	r2, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69f9      	ldr	r1, [r7, #28]
 8002d4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d4e:	4013      	ands	r3, r2
 8002d50:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2301      	movs	r3, #1
 8002d62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	799b      	ldrb	r3, [r3, #6]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d132      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4403      	add	r3, r0
 8002d8c:	331c      	adds	r3, #28
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4419      	add	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4403      	add	r3, r0
 8002da0:	3320      	adds	r3, #32
 8002da2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d113      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x3a2>
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3324      	adds	r3, #36	@ 0x24
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d108      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2101      	movs	r1, #1
 8002dce:	f003 ffa5 	bl	8006d1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f006 fa72 	bl	80092c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002df4:	461a      	mov	r2, r3
 8002df6:	2308      	movs	r3, #8
 8002df8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e10:	461a      	mov	r2, r3
 8002e12:	2310      	movs	r3, #16
 8002e14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2340      	movs	r3, #64	@ 0x40
 8002e30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d023      	beq.n	8002e84 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e3e:	6a38      	ldr	r0, [r7, #32]
 8002e40:	f002 ff92 	bl	8005d68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	3310      	adds	r3, #16
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	3304      	adds	r3, #4
 8002e56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	78db      	ldrb	r3, [r3, #3]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d108      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2200      	movs	r2, #0
 8002e64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f006 fab5 	bl	80093dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2302      	movs	r3, #2
 8002e82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fcbb 	bl	800380c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	3301      	adds	r3, #1
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9e:	085b      	lsrs	r3, r3, #1
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f af2e 	bne.w	8002d06 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 fe70 	bl	8006b94 <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ebe:	d122      	bne.n	8002f06 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fea1 	bl	8003c30 <HAL_PCDEx_LPM_Callback>
 8002eee:	e002      	b.n	8002ef6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f006 fa53 	bl	800939c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 fe42 	bl	8006b94 <USB_ReadInterrupts>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f1a:	d112      	bne.n	8002f42 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d102      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f006 fa0f 	bl	8009350 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f40:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 fe24 	bl	8006b94 <USB_ReadInterrupts>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f56:	f040 80b7 	bne.w	80030c8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2110      	movs	r1, #16
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 fef7 	bl	8005d68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f7e:	e046      	b.n	800300e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fa4:	0151      	lsls	r1, r2, #5
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	440a      	add	r2, r1
 8002faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002fae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fc6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fd8:	0151      	lsls	r1, r2, #5
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	440a      	add	r2, r1
 8002fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fe2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fe6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ff8:	0151      	lsls	r1, r2, #5
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	440a      	add	r2, r1
 8002ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003002:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003006:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300a:	3301      	adds	r3, #1
 800300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	791b      	ldrb	r3, [r3, #4]
 8003012:	461a      	mov	r2, r3
 8003014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003016:	4293      	cmp	r3, r2
 8003018:	d3b2      	bcc.n	8002f80 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003028:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800302c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7bdb      	ldrb	r3, [r3, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800303c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003046:	f043 030b 	orr.w	r3, r3, #11
 800304a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800305c:	f043 030b 	orr.w	r3, r3, #11
 8003060:	6453      	str	r3, [r2, #68]	@ 0x44
 8003062:	e015      	b.n	8003090 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003072:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003076:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800307a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800308a:	f043 030b 	orr.w	r3, r3, #11
 800308e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800309e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80030a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030b2:	461a      	mov	r2, r3
 80030b4:	f003 fe32 	bl	8006d1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80030c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f003 fd61 	bl	8006b94 <USB_ReadInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030dc:	d123      	bne.n	8003126 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fdf7 	bl	8006cd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 feb4 	bl	8005e5a <USB_GetDevSpeed>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681c      	ldr	r4, [r3, #0]
 80030fe:	f001 f9c7 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 8003102:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003108:	461a      	mov	r2, r3
 800310a:	4620      	mov	r0, r4
 800310c:	f002 fbb8 	bl	8005880 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f006 f8fe 	bl	8009312 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003124:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f003 fd32 	bl	8006b94 <USB_ReadInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b08      	cmp	r3, #8
 8003138:	d10a      	bne.n	8003150 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f006 f8db 	bl	80092f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f002 0208 	and.w	r2, r2, #8
 800314e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f003 fd1d 	bl	8006b94 <USB_ReadInterrupts>
 800315a:	4603      	mov	r3, r0
 800315c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003160:	2b80      	cmp	r3, #128	@ 0x80
 8003162:	d123      	bne.n	80031ac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003170:	2301      	movs	r3, #1
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
 8003174:	e014      	b.n	80031a0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fb08 	bl	80037aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	3301      	adds	r3, #1
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	791b      	ldrb	r3, [r3, #4]
 80031a4:	461a      	mov	r2, r3
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d3e4      	bcc.n	8003176 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fcef 	bl	8006b94 <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031c0:	d13c      	bne.n	800323c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031c2:	2301      	movs	r3, #1
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c6:	e02b      	b.n	8003220 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3318      	adds	r3, #24
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d115      	bne.n	800321a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da12      	bge.n	800321a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	3317      	adds	r3, #23
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fac8 	bl	80037aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	3301      	adds	r3, #1
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	461a      	mov	r2, r3
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	4293      	cmp	r3, r2
 800322a:	d3cd      	bcc.n	80031c8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800323a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 fca7 	bl	8006b94 <USB_ReadInterrupts>
 8003246:	4603      	mov	r3, r0
 8003248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800324c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003250:	d156      	bne.n	8003300 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003252:	2301      	movs	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
 8003256:	e045      	b.n	80032e4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d12e      	bne.n	80032de <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003280:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003282:	2b00      	cmp	r3, #0
 8003284:	da2b      	bge.n	80032de <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003292:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003296:	429a      	cmp	r2, r3
 8003298:	d121      	bne.n	80032de <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032da:	6053      	str	r3, [r2, #4]
            break;
 80032dc:	e008      	b.n	80032f0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	3301      	adds	r3, #1
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	791b      	ldrb	r3, [r3, #4]
 80032e8:	461a      	mov	r2, r3
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d3b3      	bcc.n	8003258 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80032fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 fc45 	bl	8006b94 <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003314:	d10a      	bne.n	800332c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f006 f872 	bl	8009400 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800332a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f003 fc2f 	bl	8006b94 <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b04      	cmp	r3, #4
 800333e:	d115      	bne.n	800336c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f006 f862 	bl	800941c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	e000      	b.n	800336c <HAL_PCD_IRQHandler+0x93c>
      return;
 800336a:	bf00      	nop
    }
  }
}
 800336c:	3734      	adds	r7, #52	@ 0x34
 800336e:	46bd      	mov	sp, r7
 8003370:	bd90      	pop	{r4, r7, pc}

08003372 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_PCD_SetAddress+0x1a>
 8003388:	2302      	movs	r3, #2
 800338a:	e012      	b.n	80033b2 <HAL_PCD_SetAddress+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f003 fb8e 	bl	8006ac4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	4608      	mov	r0, r1
 80033c4:	4611      	mov	r1, r2
 80033c6:	461a      	mov	r2, r3
 80033c8:	4603      	mov	r3, r0
 80033ca:	70fb      	strb	r3, [r7, #3]
 80033cc:	460b      	mov	r3, r1
 80033ce:	803b      	strh	r3, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	da0f      	bge.n	8003400 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 020f 	and.w	r2, r3, #15
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	3310      	adds	r3, #16
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	3304      	adds	r3, #4
 80033f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	705a      	strb	r2, [r3, #1]
 80033fe:	e00f      	b.n	8003420 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 020f 	and.w	r2, r3, #15
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	3304      	adds	r3, #4
 8003418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	b2da      	uxtb	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800342c:	883a      	ldrh	r2, [r7, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	78ba      	ldrb	r2, [r7, #2]
 8003436:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800344a:	78bb      	ldrb	r3, [r7, #2]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d102      	bne.n	8003456 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_PCD_EP_Open+0xaa>
 8003460:	2302      	movs	r3, #2
 8003462:	e00e      	b.n	8003482 <HAL_PCD_EP_Open+0xc8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	4618      	mov	r0, r3
 8003474:	f002 fd16 	bl	8005ea4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003480:	7afb      	ldrb	r3, [r7, #11]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	da0f      	bge.n	80034be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	3310      	adds	r3, #16
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	705a      	strb	r2, [r3, #1]
 80034bc:	e00f      	b.n	80034de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 020f 	and.w	r2, r3, #15
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_PCD_EP_Close+0x6e>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e00e      	b.n	8003516 <HAL_PCD_EP_Close+0x8c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68f9      	ldr	r1, [r7, #12]
 8003506:	4618      	mov	r0, r3
 8003508:	f002 fd54 	bl	8005fb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	460b      	mov	r3, r1
 800352c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800352e:	7afb      	ldrb	r3, [r7, #11]
 8003530:	f003 020f 	and.w	r2, r3, #15
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	3304      	adds	r3, #4
 8003546:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2200      	movs	r2, #0
 8003558:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003560:	7afb      	ldrb	r3, [r7, #11]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	b2da      	uxtb	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	799b      	ldrb	r3, [r3, #6]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d102      	bne.n	800357a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	799b      	ldrb	r3, [r3, #6]
 8003582:	461a      	mov	r2, r3
 8003584:	6979      	ldr	r1, [r7, #20]
 8003586:	f002 fdf1 	bl	800616c <USB_EPStartXfer>

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	f003 020f 	and.w	r2, r3, #15
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	460b      	mov	r3, r1
 80035d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d4:	7afb      	ldrb	r3, [r7, #11]
 80035d6:	f003 020f 	and.w	r2, r3, #15
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	3310      	adds	r3, #16
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	3304      	adds	r3, #4
 80035ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2201      	movs	r2, #1
 8003602:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	b2da      	uxtb	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	799b      	ldrb	r3, [r3, #6]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d102      	bne.n	800361e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	799b      	ldrb	r3, [r3, #6]
 8003626:	461a      	mov	r2, r3
 8003628:	6979      	ldr	r1, [r7, #20]
 800362a:	f002 fd9f 	bl	800616c <USB_EPStartXfer>

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	7912      	ldrb	r2, [r2, #4]
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e04f      	b.n	80036f6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800365a:	2b00      	cmp	r3, #0
 800365c:	da0f      	bge.n	800367e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	f003 020f 	and.w	r2, r3, #15
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3310      	adds	r3, #16
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	705a      	strb	r2, [r3, #1]
 800367c:	e00d      	b.n	800369a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	3304      	adds	r3, #4
 8003692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_PCD_EP_SetStall+0x82>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e01d      	b.n	80036f6 <HAL_PCD_EP_SetStall+0xbe>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 f927 	bl	800691c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7999      	ldrb	r1, [r3, #6]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036e6:	461a      	mov	r2, r3
 80036e8:	f003 fb18 	bl	8006d1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	7912      	ldrb	r2, [r2, #4]
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e042      	b.n	80037a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800371c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003720:	2b00      	cmp	r3, #0
 8003722:	da0f      	bge.n	8003744 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	f003 020f 	and.w	r2, r3, #15
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	3310      	adds	r3, #16
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	3304      	adds	r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	705a      	strb	r2, [r3, #1]
 8003742:	e00f      	b.n	8003764 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	f003 020f 	and.w	r2, r3, #15
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	3304      	adds	r3, #4
 800375c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_PCD_EP_ClrStall+0x86>
 8003780:	2302      	movs	r3, #2
 8003782:	e00e      	b.n	80037a2 <HAL_PCD_EP_ClrStall+0xa4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68f9      	ldr	r1, [r7, #12]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 f930 	bl	80069f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	460b      	mov	r3, r1
 80037b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	da0c      	bge.n	80037d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	f003 020f 	and.w	r2, r3, #15
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	3310      	adds	r3, #16
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	3304      	adds	r3, #4
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e00c      	b.n	80037f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	3304      	adds	r3, #4
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 ff4f 	bl	800669c <USB_EPStopXfer>
 80037fe:	4603      	mov	r3, r0
 8003800:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003802:	7afb      	ldrb	r3, [r7, #11]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af02      	add	r7, sp, #8
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	3310      	adds	r3, #16
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	429a      	cmp	r2, r3
 800383e:	d901      	bls.n	8003844 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e06b      	b.n	800391c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	429a      	cmp	r2, r3
 8003858:	d902      	bls.n	8003860 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3303      	adds	r3, #3
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003868:	e02a      	b.n	80038c0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	429a      	cmp	r2, r3
 800387e:	d902      	bls.n	8003886 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3303      	adds	r3, #3
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	68d9      	ldr	r1, [r3, #12]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	4603      	mov	r3, r0
 80038a2:	6978      	ldr	r0, [r7, #20]
 80038a4:	f002 ffa4 	bl	80067f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	441a      	add	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	441a      	add	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d809      	bhi.n	80038ea <PCD_WriteEmptyTxFifo+0xde>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038de:	429a      	cmp	r2, r3
 80038e0:	d203      	bcs.n	80038ea <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1bf      	bne.n	800386a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d811      	bhi.n	800391a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	2201      	movs	r2, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800390a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	43db      	mvns	r3, r3
 8003910:	6939      	ldr	r1, [r7, #16]
 8003912:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003916:	4013      	ands	r3, r2
 8003918:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	333c      	adds	r3, #60	@ 0x3c
 800393c:	3304      	adds	r3, #4
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	799b      	ldrb	r3, [r3, #6]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d17b      	bne.n	8003a52 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d015      	beq.n	8003990 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	4a61      	ldr	r2, [pc, #388]	@ (8003aec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	f240 80b9 	bls.w	8003ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80b3 	beq.w	8003ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003986:	461a      	mov	r2, r3
 8003988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800398c:	6093      	str	r3, [r2, #8]
 800398e:	e0a7      	b.n	8003ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a6:	461a      	mov	r2, r3
 80039a8:	2320      	movs	r3, #32
 80039aa:	6093      	str	r3, [r2, #8]
 80039ac:	e098      	b.n	8003ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f040 8093 	bne.w	8003ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	4a4b      	ldr	r2, [pc, #300]	@ (8003aec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d90f      	bls.n	80039e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d8:	461a      	mov	r2, r3
 80039da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039de:	6093      	str	r3, [r2, #8]
 80039e0:	e07e      	b.n	8003ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	4413      	add	r3, r2
 80039f4:	3304      	adds	r3, #4
 80039f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	0159      	lsls	r1, r3, #5
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	440b      	add	r3, r1
 8003a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0e:	1ad2      	subs	r2, r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d114      	bne.n	8003a44 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2101      	movs	r1, #1
 8003a30:	f003 f974 	bl	8006d1c <USB_EP0_OutStart>
 8003a34:	e006      	b.n	8003a44 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	441a      	add	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f005 fc1e 	bl	800928c <HAL_PCD_DataOutStageCallback>
 8003a50:	e046      	b.n	8003ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4a26      	ldr	r2, [pc, #152]	@ (8003af0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d124      	bne.n	8003aa4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a70:	461a      	mov	r2, r3
 8003a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a76:	6093      	str	r3, [r2, #8]
 8003a78:	e032      	b.n	8003ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	2320      	movs	r3, #32
 8003a94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f005 fbf5 	bl	800928c <HAL_PCD_DataOutStageCallback>
 8003aa2:	e01d      	b.n	8003ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d114      	bne.n	8003ad4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d108      	bne.n	8003ad4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003acc:	461a      	mov	r2, r3
 8003ace:	2100      	movs	r1, #0
 8003ad0:	f003 f924 	bl	8006d1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	4619      	mov	r1, r3
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f005 fbd6 	bl	800928c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	4f54300a 	.word	0x4f54300a
 8003af0:	4f54310a 	.word	0x4f54310a

08003af4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	333c      	adds	r3, #60	@ 0x3c
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a15      	ldr	r2, [pc, #84]	@ (8003b7c <PCD_EP_OutSetupPacket_int+0x88>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d90e      	bls.n	8003b48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b40:	461a      	mov	r2, r3
 8003b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f005 fb8d 	bl	8009268 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <PCD_EP_OutSetupPacket_int+0x88>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d90c      	bls.n	8003b70 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	799b      	ldrb	r3, [r3, #6]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	f003 f8d6 	bl	8006d1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	4f54300a 	.word	0x4f54300a

08003b80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b9e:	883b      	ldrh	r3, [r7, #0]
 8003ba0:	0419      	lsls	r1, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bac:	e028      	b.n	8003c00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	73fb      	strb	r3, [r7, #15]
 8003bc0:	e00d      	b.n	8003bde <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	3340      	adds	r3, #64	@ 0x40
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
 8003bde:	7bfa      	ldrb	r2, [r7, #15]
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d3ec      	bcc.n	8003bc2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003be8:	883b      	ldrh	r3, [r7, #0]
 8003bea:	0418      	lsls	r0, r3, #16
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	4302      	orrs	r2, r0
 8003bf8:	3340      	adds	r3, #64	@ 0x40
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	887a      	ldrh	r2, [r7, #2]
 8003c20:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e267      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d075      	beq.n	8003d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c66:	4b88      	ldr	r3, [pc, #544]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d00c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c72:	4b85      	ldr	r3, [pc, #532]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d112      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7e:	4b82      	ldr	r3, [pc, #520]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d05b      	beq.n	8003d50 <HAL_RCC_OscConfig+0x108>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d157      	bne.n	8003d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e242      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cac:	d106      	bne.n	8003cbc <HAL_RCC_OscConfig+0x74>
 8003cae:	4b76      	ldr	r3, [pc, #472]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a75      	ldr	r2, [pc, #468]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e01d      	b.n	8003cf8 <HAL_RCC_OscConfig+0xb0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x98>
 8003cc6:	4b70      	ldr	r3, [pc, #448]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6f      	ldr	r2, [pc, #444]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6c      	ldr	r2, [pc, #432]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0xb0>
 8003ce0:	4b69      	ldr	r3, [pc, #420]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a68      	ldr	r2, [pc, #416]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b66      	ldr	r3, [pc, #408]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a65      	ldr	r2, [pc, #404]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fd fb34 	bl	800136c <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d08:	f7fd fb30 	bl	800136c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	@ 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e207      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0xc0>
 8003d26:	e014      	b.n	8003d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fd fb20 	bl	800136c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fd fb1c 	bl	800136c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	@ 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1f3      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	4b51      	ldr	r3, [pc, #324]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0xe8>
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d063      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6a:	4b47      	ldr	r3, [pc, #284]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d11c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d76:	4b44      	ldr	r3, [pc, #272]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d116      	bne.n	8003db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d82:	4b41      	ldr	r3, [pc, #260]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_RCC_OscConfig+0x152>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e1c7      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4937      	ldr	r1, [pc, #220]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	e03a      	b.n	8003e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d020      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db8:	4b34      	ldr	r3, [pc, #208]	@ (8003e8c <HAL_RCC_OscConfig+0x244>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fd fad5 	bl	800136c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc6:	f7fd fad1 	bl	800136c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1a8      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de4:	4b28      	ldr	r3, [pc, #160]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4925      	ldr	r1, [pc, #148]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]
 8003df8:	e015      	b.n	8003e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfa:	4b24      	ldr	r3, [pc, #144]	@ (8003e8c <HAL_RCC_OscConfig+0x244>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fd fab4 	bl	800136c <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e08:	f7fd fab0 	bl	800136c <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e187      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d036      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3a:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <HAL_RCC_OscConfig+0x248>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd fa94 	bl	800136c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e48:	f7fd fa90 	bl	800136c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e167      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x200>
 8003e66:	e01b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e68:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <HAL_RCC_OscConfig+0x248>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fa7d 	bl	800136c <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	e00e      	b.n	8003e94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e76:	f7fd fa79 	bl	800136c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d907      	bls.n	8003e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e150      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	42470000 	.word	0x42470000
 8003e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	4b88      	ldr	r3, [pc, #544]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ea      	bne.n	8003e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8097 	beq.w	8003fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb2:	4b81      	ldr	r3, [pc, #516]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	4a7c      	ldr	r2, [pc, #496]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ece:	4b7a      	ldr	r3, [pc, #488]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b77      	ldr	r3, [pc, #476]	@ (80040bc <HAL_RCC_OscConfig+0x474>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d118      	bne.n	8003f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eea:	4b74      	ldr	r3, [pc, #464]	@ (80040bc <HAL_RCC_OscConfig+0x474>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a73      	ldr	r2, [pc, #460]	@ (80040bc <HAL_RCC_OscConfig+0x474>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fd fa39 	bl	800136c <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fd fa35 	bl	800136c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e10c      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	4b6a      	ldr	r3, [pc, #424]	@ (80040bc <HAL_RCC_OscConfig+0x474>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x2ea>
 8003f24:	4b64      	ldr	r3, [pc, #400]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	4a63      	ldr	r2, [pc, #396]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f30:	e01c      	b.n	8003f6c <HAL_RCC_OscConfig+0x324>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x30c>
 8003f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3e:	4a5e      	ldr	r2, [pc, #376]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f46:	4b5c      	ldr	r3, [pc, #368]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f52:	e00b      	b.n	8003f6c <HAL_RCC_OscConfig+0x324>
 8003f54:	4b58      	ldr	r3, [pc, #352]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f58:	4a57      	ldr	r2, [pc, #348]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f60:	4b55      	ldr	r3, [pc, #340]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4a54      	ldr	r2, [pc, #336]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f023 0304 	bic.w	r3, r3, #4
 8003f6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d015      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fd f9fa 	bl	800136c <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7c:	f7fd f9f6 	bl	800136c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e0cb      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f92:	4b49      	ldr	r3, [pc, #292]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ee      	beq.n	8003f7c <HAL_RCC_OscConfig+0x334>
 8003f9e:	e014      	b.n	8003fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa0:	f7fd f9e4 	bl	800136c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fd f9e0 	bl	800136c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0b5      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1ee      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd0:	4b39      	ldr	r3, [pc, #228]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	4a38      	ldr	r2, [pc, #224]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80a1 	beq.w	8004128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fe6:	4b34      	ldr	r3, [pc, #208]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d05c      	beq.n	80040ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d141      	bne.n	800407e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffa:	4b31      	ldr	r3, [pc, #196]	@ (80040c0 <HAL_RCC_OscConfig+0x478>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fd f9b4 	bl	800136c <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004008:	f7fd f9b0 	bl	800136c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e087      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	4b27      	ldr	r3, [pc, #156]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	019b      	lsls	r3, r3, #6
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	3b01      	subs	r3, #1
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	491b      	ldr	r1, [pc, #108]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004050:	4b1b      	ldr	r3, [pc, #108]	@ (80040c0 <HAL_RCC_OscConfig+0x478>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004056:	f7fd f989 	bl	800136c <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405e:	f7fd f985 	bl	800136c <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e05c      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004070:	4b11      	ldr	r3, [pc, #68]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x416>
 800407c:	e054      	b.n	8004128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407e:	4b10      	ldr	r3, [pc, #64]	@ (80040c0 <HAL_RCC_OscConfig+0x478>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fd f972 	bl	800136c <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fd f96e 	bl	800136c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e045      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409e:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <HAL_RCC_OscConfig+0x470>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x444>
 80040aa:	e03d      	b.n	8004128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e038      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40007000 	.word	0x40007000
 80040c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004134 <HAL_RCC_OscConfig+0x4ec>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d028      	beq.n	8004124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d121      	bne.n	8004124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d11a      	bne.n	8004124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040f4:	4013      	ands	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d111      	bne.n	8004124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	3b01      	subs	r3, #1
 800410e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d107      	bne.n	8004124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800

08004138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0cc      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b68      	ldr	r3, [pc, #416]	@ (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d90c      	bls.n	8004174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b65      	ldr	r3, [pc, #404]	@ (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b63      	ldr	r3, [pc, #396]	@ (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0b8      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d020      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800418c:	4b59      	ldr	r3, [pc, #356]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a58      	ldr	r2, [pc, #352]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a4:	4b53      	ldr	r3, [pc, #332]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a52      	ldr	r2, [pc, #328]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b0:	4b50      	ldr	r3, [pc, #320]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	494d      	ldr	r1, [pc, #308]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d044      	beq.n	8004258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	4b47      	ldr	r3, [pc, #284]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d119      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e07f      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f6:	4b3f      	ldr	r3, [pc, #252]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e06f      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004206:	4b3b      	ldr	r3, [pc, #236]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e067      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004216:	4b37      	ldr	r3, [pc, #220]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f023 0203 	bic.w	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4934      	ldr	r1, [pc, #208]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	4313      	orrs	r3, r2
 8004226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004228:	f7fd f8a0 	bl	800136c <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	e00a      	b.n	8004246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004230:	f7fd f89c 	bl	800136c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e04f      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	4b2b      	ldr	r3, [pc, #172]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 020c 	and.w	r2, r3, #12
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	429a      	cmp	r2, r3
 8004256:	d1eb      	bne.n	8004230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004258:	4b25      	ldr	r3, [pc, #148]	@ (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d20c      	bcs.n	8004280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b22      	ldr	r3, [pc, #136]	@ (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b20      	ldr	r3, [pc, #128]	@ (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e032      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800428c:	4b19      	ldr	r3, [pc, #100]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4916      	ldr	r1, [pc, #88]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042aa:	4b12      	ldr	r3, [pc, #72]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	490e      	ldr	r1, [pc, #56]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042be:	f000 f821 	bl	8004304 <HAL_RCC_GetSysClockFreq>
 80042c2:	4602      	mov	r2, r0
 80042c4:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	490a      	ldr	r1, [pc, #40]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 80042d0:	5ccb      	ldrb	r3, [r1, r3]
 80042d2:	fa22 f303 	lsr.w	r3, r2, r3
 80042d6:	4a09      	ldr	r2, [pc, #36]	@ (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042da:	4b09      	ldr	r3, [pc, #36]	@ (8004300 <HAL_RCC_ClockConfig+0x1c8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fd f800 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40023c00 	.word	0x40023c00
 80042f4:	40023800 	.word	0x40023800
 80042f8:	0800a288 	.word	0x0800a288
 80042fc:	20000030 	.word	0x20000030
 8004300:	20000034 	.word	0x20000034

08004304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004308:	b090      	sub	sp, #64	@ 0x40
 800430a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004310:	2300      	movs	r3, #0
 8004312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004314:	2300      	movs	r3, #0
 8004316:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800431c:	4b59      	ldr	r3, [pc, #356]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x180>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b08      	cmp	r3, #8
 8004326:	d00d      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0x40>
 8004328:	2b08      	cmp	r3, #8
 800432a:	f200 80a1 	bhi.w	8004470 <HAL_RCC_GetSysClockFreq+0x16c>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x34>
 8004332:	2b04      	cmp	r3, #4
 8004334:	d003      	beq.n	800433e <HAL_RCC_GetSysClockFreq+0x3a>
 8004336:	e09b      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004338:	4b53      	ldr	r3, [pc, #332]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x184>)
 800433a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800433c:	e09b      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800433e:	4b53      	ldr	r3, [pc, #332]	@ (800448c <HAL_RCC_GetSysClockFreq+0x188>)
 8004340:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004342:	e098      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004344:	4b4f      	ldr	r3, [pc, #316]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x180>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800434c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800434e:	4b4d      	ldr	r3, [pc, #308]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x180>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d028      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435a:	4b4a      	ldr	r3, [pc, #296]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x180>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	099b      	lsrs	r3, r3, #6
 8004360:	2200      	movs	r2, #0
 8004362:	623b      	str	r3, [r7, #32]
 8004364:	627a      	str	r2, [r7, #36]	@ 0x24
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800436c:	2100      	movs	r1, #0
 800436e:	4b47      	ldr	r3, [pc, #284]	@ (800448c <HAL_RCC_GetSysClockFreq+0x188>)
 8004370:	fb03 f201 	mul.w	r2, r3, r1
 8004374:	2300      	movs	r3, #0
 8004376:	fb00 f303 	mul.w	r3, r0, r3
 800437a:	4413      	add	r3, r2
 800437c:	4a43      	ldr	r2, [pc, #268]	@ (800448c <HAL_RCC_GetSysClockFreq+0x188>)
 800437e:	fba0 1202 	umull	r1, r2, r0, r2
 8004382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004384:	460a      	mov	r2, r1
 8004386:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800438a:	4413      	add	r3, r2
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800438e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004390:	2200      	movs	r2, #0
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	61fa      	str	r2, [r7, #28]
 8004396:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800439a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800439e:	f7fb ff6f 	bl	8000280 <__aeabi_uldivmod>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4613      	mov	r3, r2
 80043a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043aa:	e053      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ac:	4b35      	ldr	r3, [pc, #212]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	099b      	lsrs	r3, r3, #6
 80043b2:	2200      	movs	r2, #0
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	617a      	str	r2, [r7, #20]
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043be:	f04f 0b00 	mov.w	fp, #0
 80043c2:	4652      	mov	r2, sl
 80043c4:	465b      	mov	r3, fp
 80043c6:	f04f 0000 	mov.w	r0, #0
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	0159      	lsls	r1, r3, #5
 80043d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d4:	0150      	lsls	r0, r2, #5
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	ebb2 080a 	subs.w	r8, r2, sl
 80043de:	eb63 090b 	sbc.w	r9, r3, fp
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043f6:	ebb2 0408 	subs.w	r4, r2, r8
 80043fa:	eb63 0509 	sbc.w	r5, r3, r9
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	00eb      	lsls	r3, r5, #3
 8004408:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440c:	00e2      	lsls	r2, r4, #3
 800440e:	4614      	mov	r4, r2
 8004410:	461d      	mov	r5, r3
 8004412:	eb14 030a 	adds.w	r3, r4, sl
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	eb45 030b 	adc.w	r3, r5, fp
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800442a:	4629      	mov	r1, r5
 800442c:	028b      	lsls	r3, r1, #10
 800442e:	4621      	mov	r1, r4
 8004430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004434:	4621      	mov	r1, r4
 8004436:	028a      	lsls	r2, r1, #10
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443e:	2200      	movs	r2, #0
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	60fa      	str	r2, [r7, #12]
 8004444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004448:	f7fb ff1a 	bl	8000280 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4613      	mov	r3, r2
 8004452:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004454:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x180>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	3301      	adds	r3, #1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004464:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800446e:	e002      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x184>)
 8004472:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004478:	4618      	mov	r0, r3
 800447a:	3740      	adds	r7, #64	@ 0x40
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	00f42400 	.word	0x00f42400
 800448c:	017d7840 	.word	0x017d7840

08004490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b03      	ldr	r3, [pc, #12]	@ (80044a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000030 	.word	0x20000030

080044a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e041      	b.n	800453e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fc fd3a 	bl	8000f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f000 fd7c 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e041      	b.n	80045dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f839 	bl	80045e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3304      	adds	r3, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f000 fd2d 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_TIM_PWM_Start+0x24>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	e022      	b.n	8004662 <HAL_TIM_PWM_Start+0x6a>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b04      	cmp	r3, #4
 8004620:	d109      	bne.n	8004636 <HAL_TIM_PWM_Start+0x3e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	e015      	b.n	8004662 <HAL_TIM_PWM_Start+0x6a>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d109      	bne.n	8004650 <HAL_TIM_PWM_Start+0x58>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e008      	b.n	8004662 <HAL_TIM_PWM_Start+0x6a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e068      	b.n	800473c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <HAL_TIM_PWM_Start+0x82>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004678:	e013      	b.n	80046a2 <HAL_TIM_PWM_Start+0xaa>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b04      	cmp	r3, #4
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Start+0x92>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004688:	e00b      	b.n	80046a2 <HAL_TIM_PWM_Start+0xaa>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d104      	bne.n	800469a <HAL_TIM_PWM_Start+0xa2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004698:	e003      	b.n	80046a2 <HAL_TIM_PWM_Start+0xaa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2201      	movs	r2, #1
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 ffdd 	bl	800566a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a23      	ldr	r2, [pc, #140]	@ (8004744 <HAL_TIM_PWM_Start+0x14c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d107      	bne.n	80046ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004744 <HAL_TIM_PWM_Start+0x14c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_TIM_PWM_Start+0x10e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046dc:	d013      	beq.n	8004706 <HAL_TIM_PWM_Start+0x10e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a19      	ldr	r2, [pc, #100]	@ (8004748 <HAL_TIM_PWM_Start+0x150>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIM_PWM_Start+0x10e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a17      	ldr	r2, [pc, #92]	@ (800474c <HAL_TIM_PWM_Start+0x154>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIM_PWM_Start+0x10e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a16      	ldr	r2, [pc, #88]	@ (8004750 <HAL_TIM_PWM_Start+0x158>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIM_PWM_Start+0x10e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a14      	ldr	r2, [pc, #80]	@ (8004754 <HAL_TIM_PWM_Start+0x15c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d111      	bne.n	800472a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d010      	beq.n	800473a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	e007      	b.n	800473a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40010000 	.word	0x40010000
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40014000 	.word	0x40014000

08004758 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 ff7d 	bl	800566a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a29      	ldr	r2, [pc, #164]	@ (800481c <HAL_TIM_PWM_Stop+0xc4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d117      	bne.n	80047aa <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6a1a      	ldr	r2, [r3, #32]
 8004780:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_TIM_PWM_Stop+0x52>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	f240 4344 	movw	r3, #1092	@ 0x444
 8004794:	4013      	ands	r3, r2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d107      	bne.n	80047aa <HAL_TIM_PWM_Stop+0x52>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6a1a      	ldr	r2, [r3, #32]
 80047b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <HAL_TIM_PWM_Stop+0x82>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a1a      	ldr	r2, [r3, #32]
 80047c0:	f240 4344 	movw	r3, #1092	@ 0x444
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <HAL_TIM_PWM_Stop+0x82>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <HAL_TIM_PWM_Stop+0x92>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047e8:	e013      	b.n	8004812 <HAL_TIM_PWM_Stop+0xba>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_PWM_Stop+0xa2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047f8:	e00b      	b.n	8004812 <HAL_TIM_PWM_Stop+0xba>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Stop+0xb2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004808:	e003      	b.n	8004812 <HAL_TIM_PWM_Stop+0xba>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40010000 	.word	0x40010000

08004820 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d109      	bne.n	8004848 <HAL_TIM_PWM_Start_IT+0x28>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	e022      	b.n	800488e <HAL_TIM_PWM_Start_IT+0x6e>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b04      	cmp	r3, #4
 800484c:	d109      	bne.n	8004862 <HAL_TIM_PWM_Start_IT+0x42>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b01      	cmp	r3, #1
 8004858:	bf14      	ite	ne
 800485a:	2301      	movne	r3, #1
 800485c:	2300      	moveq	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	e015      	b.n	800488e <HAL_TIM_PWM_Start_IT+0x6e>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d109      	bne.n	800487c <HAL_TIM_PWM_Start_IT+0x5c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	bf14      	ite	ne
 8004874:	2301      	movne	r3, #1
 8004876:	2300      	moveq	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	e008      	b.n	800488e <HAL_TIM_PWM_Start_IT+0x6e>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e0b3      	b.n	80049fe <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_PWM_Start_IT+0x86>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a4:	e013      	b.n	80048ce <HAL_TIM_PWM_Start_IT+0xae>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_PWM_Start_IT+0x96>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048b4:	e00b      	b.n	80048ce <HAL_TIM_PWM_Start_IT+0xae>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start_IT+0xa6>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048c4:	e003      	b.n	80048ce <HAL_TIM_PWM_Start_IT+0xae>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b0c      	cmp	r3, #12
 80048d2:	d841      	bhi.n	8004958 <HAL_TIM_PWM_Start_IT+0x138>
 80048d4:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <HAL_TIM_PWM_Start_IT+0xbc>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	08004911 	.word	0x08004911
 80048e0:	08004959 	.word	0x08004959
 80048e4:	08004959 	.word	0x08004959
 80048e8:	08004959 	.word	0x08004959
 80048ec:	08004923 	.word	0x08004923
 80048f0:	08004959 	.word	0x08004959
 80048f4:	08004959 	.word	0x08004959
 80048f8:	08004959 	.word	0x08004959
 80048fc:	08004935 	.word	0x08004935
 8004900:	08004959 	.word	0x08004959
 8004904:	08004959 	.word	0x08004959
 8004908:	08004959 	.word	0x08004959
 800490c:	08004947 	.word	0x08004947
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0202 	orr.w	r2, r2, #2
 800491e:	60da      	str	r2, [r3, #12]
      break;
 8004920:	e01d      	b.n	800495e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0204 	orr.w	r2, r2, #4
 8004930:	60da      	str	r2, [r3, #12]
      break;
 8004932:	e014      	b.n	800495e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0208 	orr.w	r2, r2, #8
 8004942:	60da      	str	r2, [r3, #12]
      break;
 8004944:	e00b      	b.n	800495e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0210 	orr.w	r2, r2, #16
 8004954:	60da      	str	r2, [r3, #12]
      break;
 8004956:	e002      	b.n	800495e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
      break;
 800495c:	bf00      	nop
  }

  if (status == HAL_OK)
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d14b      	bne.n	80049fc <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2201      	movs	r2, #1
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fe7c 	bl	800566a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a24      	ldr	r2, [pc, #144]	@ (8004a08 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d107      	bne.n	800498c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800498a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1d      	ldr	r2, [pc, #116]	@ (8004a08 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d018      	beq.n	80049c8 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499e:	d013      	beq.n	80049c8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a19      	ldr	r2, [pc, #100]	@ (8004a0c <HAL_TIM_PWM_Start_IT+0x1ec>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d009      	beq.n	80049c8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a16      	ldr	r2, [pc, #88]	@ (8004a14 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a15      	ldr	r2, [pc, #84]	@ (8004a18 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d111      	bne.n	80049ec <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d010      	beq.n	80049fc <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ea:	e007      	b.n	80049fc <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40014000 	.word	0x40014000

08004a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d020      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01b      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0202 	mvn.w	r2, #2
 8004a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 faa7 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa99 	bl	8004fa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fc f935 	bl	8000ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0204 	mvn.w	r2, #4
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa81 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa73 	bl	8004fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fc f90f 	bl	8000ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d020      	beq.n	8004b18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01b      	beq.n	8004b18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0208 	mvn.w	r2, #8
 8004ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2204      	movs	r2, #4
 8004aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa5b 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa4d 	bl	8004fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fc f8e9 	bl	8000ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d020      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01b      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0210 	mvn.w	r2, #16
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa35 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa27 	bl	8004fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fc f8c3 	bl	8000ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0201 	mvn.w	r2, #1
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa05 	bl	8004f92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fdfc 	bl	80057a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9ff 	bl	8004fce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0220 	mvn.w	r2, #32
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fdce 	bl	8005790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0ae      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	f200 809f 	bhi.w	8004d68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08004d69 	.word	0x08004d69
 8004c38:	08004d69 	.word	0x08004d69
 8004c3c:	08004d69 	.word	0x08004d69
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004d69 	.word	0x08004d69
 8004c48:	08004d69 	.word	0x08004d69
 8004c4c:	08004d69 	.word	0x08004d69
 8004c50:	08004ce7 	.word	0x08004ce7
 8004c54:	08004d69 	.word	0x08004d69
 8004c58:	08004d69 	.word	0x08004d69
 8004c5c:	08004d69 	.word	0x08004d69
 8004c60:	08004d27 	.word	0x08004d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fa46 	bl	80050fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0208 	orr.w	r2, r2, #8
 8004c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0204 	bic.w	r2, r2, #4
 8004c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6999      	ldr	r1, [r3, #24]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	619a      	str	r2, [r3, #24]
      break;
 8004ca2:	e064      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fa8c 	bl	80051c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	619a      	str	r2, [r3, #24]
      break;
 8004ce4:	e043      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fad7 	bl	80052a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0208 	orr.w	r2, r2, #8
 8004d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0204 	bic.w	r2, r2, #4
 8004d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	61da      	str	r2, [r3, #28]
      break;
 8004d24:	e023      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fb21 	bl	8005374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	021a      	lsls	r2, r3, #8
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	61da      	str	r2, [r3, #28]
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_ConfigClockSource+0x1c>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e0b4      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x186>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dd4:	d03e      	beq.n	8004e54 <HAL_TIM_ConfigClockSource+0xd4>
 8004dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dda:	f200 8087 	bhi.w	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de2:	f000 8086 	beq.w	8004ef2 <HAL_TIM_ConfigClockSource+0x172>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dea:	d87f      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b70      	cmp	r3, #112	@ 0x70
 8004dee:	d01a      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0xa6>
 8004df0:	2b70      	cmp	r3, #112	@ 0x70
 8004df2:	d87b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b60      	cmp	r3, #96	@ 0x60
 8004df6:	d050      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x11a>
 8004df8:	2b60      	cmp	r3, #96	@ 0x60
 8004dfa:	d877      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b50      	cmp	r3, #80	@ 0x50
 8004dfe:	d03c      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0xfa>
 8004e00:	2b50      	cmp	r3, #80	@ 0x50
 8004e02:	d873      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b40      	cmp	r3, #64	@ 0x40
 8004e06:	d058      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x13a>
 8004e08:	2b40      	cmp	r3, #64	@ 0x40
 8004e0a:	d86f      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b30      	cmp	r3, #48	@ 0x30
 8004e0e:	d064      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	2b30      	cmp	r3, #48	@ 0x30
 8004e12:	d86b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d060      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d867      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d05c      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d05a      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	e062      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e36:	f000 fbf8 	bl	800562a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	609a      	str	r2, [r3, #8]
      break;
 8004e52:	e04f      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e64:	f000 fbe1 	bl	800562a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e76:	609a      	str	r2, [r3, #8]
      break;
 8004e78:	e03c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 fb55 	bl	8005536 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2150      	movs	r1, #80	@ 0x50
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fbae 	bl	80055f4 <TIM_ITRx_SetConfig>
      break;
 8004e98:	e02c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 fb74 	bl	8005594 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2160      	movs	r1, #96	@ 0x60
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fb9e 	bl	80055f4 <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e01c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f000 fb35 	bl	8005536 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2140      	movs	r1, #64	@ 0x40
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fb8e 	bl	80055f4 <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e00c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f000 fb85 	bl	80055f4 <TIM_ITRx_SetConfig>
      break;
 8004eea:	e003      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e031      	b.n	8004f8a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004f36:	6839      	ldr	r1, [r7, #0]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fa6b 	bl	8005414 <TIM_SlaveTimer_SetConfig>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d009      	beq.n	8004f58 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e018      	b.n	8004f8a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f66:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f76:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3a      	ldr	r2, [pc, #232]	@ (80050e0 <TIM_Base_SetConfig+0xfc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00f      	beq.n	800501c <TIM_Base_SetConfig+0x38>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005002:	d00b      	beq.n	800501c <TIM_Base_SetConfig+0x38>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a37      	ldr	r2, [pc, #220]	@ (80050e4 <TIM_Base_SetConfig+0x100>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d007      	beq.n	800501c <TIM_Base_SetConfig+0x38>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a36      	ldr	r2, [pc, #216]	@ (80050e8 <TIM_Base_SetConfig+0x104>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_Base_SetConfig+0x38>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a35      	ldr	r2, [pc, #212]	@ (80050ec <TIM_Base_SetConfig+0x108>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d108      	bne.n	800502e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2b      	ldr	r2, [pc, #172]	@ (80050e0 <TIM_Base_SetConfig+0xfc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01b      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503c:	d017      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a28      	ldr	r2, [pc, #160]	@ (80050e4 <TIM_Base_SetConfig+0x100>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a27      	ldr	r2, [pc, #156]	@ (80050e8 <TIM_Base_SetConfig+0x104>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00f      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a26      	ldr	r2, [pc, #152]	@ (80050ec <TIM_Base_SetConfig+0x108>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a25      	ldr	r2, [pc, #148]	@ (80050f0 <TIM_Base_SetConfig+0x10c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a24      	ldr	r2, [pc, #144]	@ (80050f4 <TIM_Base_SetConfig+0x110>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a23      	ldr	r2, [pc, #140]	@ (80050f8 <TIM_Base_SetConfig+0x114>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d108      	bne.n	8005080 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a0e      	ldr	r2, [pc, #56]	@ (80050e0 <TIM_Base_SetConfig+0xfc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d103      	bne.n	80050b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d105      	bne.n	80050d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f023 0201 	bic.w	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	611a      	str	r2, [r3, #16]
  }
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f023 0201 	bic.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0302 	bic.w	r3, r3, #2
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1c      	ldr	r2, [pc, #112]	@ (80051c4 <TIM_OC1_SetConfig+0xc8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d10c      	bne.n	8005172 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0308 	bic.w	r3, r3, #8
 800515e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 0304 	bic.w	r3, r3, #4
 8005170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a13      	ldr	r2, [pc, #76]	@ (80051c4 <TIM_OC1_SetConfig+0xc8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d111      	bne.n	800519e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40010000 	.word	0x40010000

080051c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f023 0210 	bic.w	r2, r3, #16
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f023 0320 	bic.w	r3, r3, #32
 8005212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1e      	ldr	r2, [pc, #120]	@ (800529c <TIM_OC2_SetConfig+0xd4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d10d      	bne.n	8005244 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800522e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005242:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a15      	ldr	r2, [pc, #84]	@ (800529c <TIM_OC2_SetConfig+0xd4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d113      	bne.n	8005274 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010000 	.word	0x40010000

080052a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005370 <TIM_OC3_SetConfig+0xd0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10d      	bne.n	800531a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a14      	ldr	r2, [pc, #80]	@ (8005370 <TIM_OC3_SetConfig+0xd0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d113      	bne.n	800534a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	40010000 	.word	0x40010000

08005374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a10      	ldr	r2, [pc, #64]	@ (8005410 <TIM_OC4_SetConfig+0x9c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d109      	bne.n	80053e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	019b      	lsls	r3, r3, #6
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000

08005414 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005430:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f023 0307 	bic.w	r3, r3, #7
 8005442:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b70      	cmp	r3, #112	@ 0x70
 800545c:	d01a      	beq.n	8005494 <TIM_SlaveTimer_SetConfig+0x80>
 800545e:	2b70      	cmp	r3, #112	@ 0x70
 8005460:	d860      	bhi.n	8005524 <TIM_SlaveTimer_SetConfig+0x110>
 8005462:	2b60      	cmp	r3, #96	@ 0x60
 8005464:	d054      	beq.n	8005510 <TIM_SlaveTimer_SetConfig+0xfc>
 8005466:	2b60      	cmp	r3, #96	@ 0x60
 8005468:	d85c      	bhi.n	8005524 <TIM_SlaveTimer_SetConfig+0x110>
 800546a:	2b50      	cmp	r3, #80	@ 0x50
 800546c:	d046      	beq.n	80054fc <TIM_SlaveTimer_SetConfig+0xe8>
 800546e:	2b50      	cmp	r3, #80	@ 0x50
 8005470:	d858      	bhi.n	8005524 <TIM_SlaveTimer_SetConfig+0x110>
 8005472:	2b40      	cmp	r3, #64	@ 0x40
 8005474:	d019      	beq.n	80054aa <TIM_SlaveTimer_SetConfig+0x96>
 8005476:	2b40      	cmp	r3, #64	@ 0x40
 8005478:	d854      	bhi.n	8005524 <TIM_SlaveTimer_SetConfig+0x110>
 800547a:	2b30      	cmp	r3, #48	@ 0x30
 800547c:	d055      	beq.n	800552a <TIM_SlaveTimer_SetConfig+0x116>
 800547e:	2b30      	cmp	r3, #48	@ 0x30
 8005480:	d850      	bhi.n	8005524 <TIM_SlaveTimer_SetConfig+0x110>
 8005482:	2b20      	cmp	r3, #32
 8005484:	d051      	beq.n	800552a <TIM_SlaveTimer_SetConfig+0x116>
 8005486:	2b20      	cmp	r3, #32
 8005488:	d84c      	bhi.n	8005524 <TIM_SlaveTimer_SetConfig+0x110>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d04d      	beq.n	800552a <TIM_SlaveTimer_SetConfig+0x116>
 800548e:	2b10      	cmp	r3, #16
 8005490:	d04b      	beq.n	800552a <TIM_SlaveTimer_SetConfig+0x116>
 8005492:	e047      	b.n	8005524 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80054a4:	f000 f8c1 	bl	800562a <TIM_ETR_SetConfig>
      break;
 80054a8:	e040      	b.n	800552c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d101      	bne.n	80054b6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e03b      	b.n	800552e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a1a      	ldr	r2, [r3, #32]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054dc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	621a      	str	r2, [r3, #32]
      break;
 80054fa:	e017      	b.n	800552c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005508:	461a      	mov	r2, r3
 800550a:	f000 f814 	bl	8005536 <TIM_TI1_ConfigInputStage>
      break;
 800550e:	e00d      	b.n	800552c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800551c:	461a      	mov	r2, r3
 800551e:	f000 f839 	bl	8005594 <TIM_TI2_ConfigInputStage>
      break;
 8005522:	e003      	b.n	800552c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	75fb      	strb	r3, [r7, #23]
      break;
 8005528:	e000      	b.n	800552c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800552a:	bf00      	nop
  }

  return status;
 800552c:	7dfb      	ldrb	r3, [r7, #23]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005536:	b480      	push	{r7}
 8005538:	b087      	sub	sp, #28
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f023 0201 	bic.w	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005560:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 030a 	bic.w	r3, r3, #10
 8005572:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f023 0210 	bic.w	r2, r3, #16
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	031b      	lsls	r3, r3, #12
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	621a      	str	r2, [r3, #32]
}
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	f043 0307 	orr.w	r3, r3, #7
 8005616:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	609a      	str	r2, [r3, #8]
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800562a:	b480      	push	{r7}
 800562c:	b087      	sub	sp, #28
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
 8005636:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005644:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	021a      	lsls	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	431a      	orrs	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4313      	orrs	r3, r2
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	609a      	str	r2, [r3, #8]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800566a:	b480      	push	{r7}
 800566c:	b087      	sub	sp, #28
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	2201      	movs	r2, #1
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	43db      	mvns	r3, r3
 800568c:	401a      	ands	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1a      	ldr	r2, [r3, #32]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	431a      	orrs	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	621a      	str	r2, [r3, #32]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e050      	b.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1c      	ldr	r2, [pc, #112]	@ (800577c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005718:	d013      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a18      	ldr	r2, [pc, #96]	@ (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a16      	ldr	r2, [pc, #88]	@ (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a15      	ldr	r2, [pc, #84]	@ (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a13      	ldr	r2, [pc, #76]	@ (800578c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d10c      	bne.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	4313      	orrs	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40010000 	.word	0x40010000
 8005780:	40000400 	.word	0x40000400
 8005784:	40000800 	.word	0x40000800
 8005788:	40000c00 	.word	0x40000c00
 800578c:	40014000 	.word	0x40014000

08005790 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b8:	b084      	sub	sp, #16
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	f107 001c 	add.w	r0, r7, #28
 80057c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d123      	bne.n	800581a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80057e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d105      	bne.n	800580e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 fae2 	bl	8006dd8 <USB_CoreReset>
 8005814:	4603      	mov	r3, r0
 8005816:	73fb      	strb	r3, [r7, #15]
 8005818:	e01b      	b.n	8005852 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fad6 	bl	8006dd8 <USB_CoreReset>
 800582c:	4603      	mov	r3, r0
 800582e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005830:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	639a      	str	r2, [r3, #56]	@ 0x38
 8005844:	e005      	b.n	8005852 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005852:	7fbb      	ldrb	r3, [r7, #30]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d10b      	bne.n	8005870 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f043 0206 	orr.w	r2, r3, #6
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f043 0220 	orr.w	r2, r3, #32
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800587c:	b004      	add	sp, #16
 800587e:	4770      	bx	lr

08005880 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d165      	bne.n	8005960 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4a41      	ldr	r2, [pc, #260]	@ (800599c <USB_SetTurnaroundTime+0x11c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d906      	bls.n	80058aa <USB_SetTurnaroundTime+0x2a>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4a40      	ldr	r2, [pc, #256]	@ (80059a0 <USB_SetTurnaroundTime+0x120>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d202      	bcs.n	80058aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058a4:	230f      	movs	r3, #15
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e062      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4a3c      	ldr	r2, [pc, #240]	@ (80059a0 <USB_SetTurnaroundTime+0x120>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d306      	bcc.n	80058c0 <USB_SetTurnaroundTime+0x40>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4a3b      	ldr	r2, [pc, #236]	@ (80059a4 <USB_SetTurnaroundTime+0x124>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d202      	bcs.n	80058c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058ba:	230e      	movs	r3, #14
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e057      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4a38      	ldr	r2, [pc, #224]	@ (80059a4 <USB_SetTurnaroundTime+0x124>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d306      	bcc.n	80058d6 <USB_SetTurnaroundTime+0x56>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4a37      	ldr	r2, [pc, #220]	@ (80059a8 <USB_SetTurnaroundTime+0x128>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d202      	bcs.n	80058d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058d0:	230d      	movs	r3, #13
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e04c      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4a33      	ldr	r2, [pc, #204]	@ (80059a8 <USB_SetTurnaroundTime+0x128>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d306      	bcc.n	80058ec <USB_SetTurnaroundTime+0x6c>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4a32      	ldr	r2, [pc, #200]	@ (80059ac <USB_SetTurnaroundTime+0x12c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d802      	bhi.n	80058ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80058e6:	230c      	movs	r3, #12
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e041      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4a2f      	ldr	r2, [pc, #188]	@ (80059ac <USB_SetTurnaroundTime+0x12c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d906      	bls.n	8005902 <USB_SetTurnaroundTime+0x82>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4a2e      	ldr	r2, [pc, #184]	@ (80059b0 <USB_SetTurnaroundTime+0x130>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d802      	bhi.n	8005902 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80058fc:	230b      	movs	r3, #11
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e036      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4a2a      	ldr	r2, [pc, #168]	@ (80059b0 <USB_SetTurnaroundTime+0x130>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d906      	bls.n	8005918 <USB_SetTurnaroundTime+0x98>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4a29      	ldr	r2, [pc, #164]	@ (80059b4 <USB_SetTurnaroundTime+0x134>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d802      	bhi.n	8005918 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005912:	230a      	movs	r3, #10
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e02b      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4a26      	ldr	r2, [pc, #152]	@ (80059b4 <USB_SetTurnaroundTime+0x134>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d906      	bls.n	800592e <USB_SetTurnaroundTime+0xae>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4a25      	ldr	r2, [pc, #148]	@ (80059b8 <USB_SetTurnaroundTime+0x138>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d202      	bcs.n	800592e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005928:	2309      	movs	r3, #9
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e020      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4a21      	ldr	r2, [pc, #132]	@ (80059b8 <USB_SetTurnaroundTime+0x138>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d306      	bcc.n	8005944 <USB_SetTurnaroundTime+0xc4>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4a20      	ldr	r2, [pc, #128]	@ (80059bc <USB_SetTurnaroundTime+0x13c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d802      	bhi.n	8005944 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800593e:	2308      	movs	r3, #8
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e015      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4a1d      	ldr	r2, [pc, #116]	@ (80059bc <USB_SetTurnaroundTime+0x13c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d906      	bls.n	800595a <USB_SetTurnaroundTime+0xda>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4a1c      	ldr	r2, [pc, #112]	@ (80059c0 <USB_SetTurnaroundTime+0x140>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d202      	bcs.n	800595a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005954:	2307      	movs	r3, #7
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	e00a      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800595a:	2306      	movs	r3, #6
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e007      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005966:	2309      	movs	r3, #9
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e001      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800596c:	2309      	movs	r3, #9
 800596e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	029b      	lsls	r3, r3, #10
 8005984:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005988:	431a      	orrs	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	00d8acbf 	.word	0x00d8acbf
 80059a0:	00e4e1c0 	.word	0x00e4e1c0
 80059a4:	00f42400 	.word	0x00f42400
 80059a8:	01067380 	.word	0x01067380
 80059ac:	011a499f 	.word	0x011a499f
 80059b0:	01312cff 	.word	0x01312cff
 80059b4:	014ca43f 	.word	0x014ca43f
 80059b8:	016e3600 	.word	0x016e3600
 80059bc:	01a6ab1f 	.word	0x01a6ab1f
 80059c0:	01e84800 	.word	0x01e84800

080059c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f043 0201 	orr.w	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f023 0201 	bic.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d115      	bne.n	8005a56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a36:	200a      	movs	r0, #10
 8005a38:	f7fb fca4 	bl	8001384 <HAL_Delay>
      ms += 10U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	330a      	adds	r3, #10
 8005a40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 f939 	bl	8006cba <USB_GetMode>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d01e      	beq.n	8005a8c <USB_SetCurrentMode+0x84>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a52:	d9f0      	bls.n	8005a36 <USB_SetCurrentMode+0x2e>
 8005a54:	e01a      	b.n	8005a8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d115      	bne.n	8005a88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a68:	200a      	movs	r0, #10
 8005a6a:	f7fb fc8b 	bl	8001384 <HAL_Delay>
      ms += 10U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	330a      	adds	r3, #10
 8005a72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 f920 	bl	8006cba <USB_GetMode>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <USB_SetCurrentMode+0x84>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a84:	d9f0      	bls.n	8005a68 <USB_SetCurrentMode+0x60>
 8005a86:	e001      	b.n	8005a8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e005      	b.n	8005a98 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a90:	d101      	bne.n	8005a96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	e009      	b.n	8005ad4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3340      	adds	r3, #64	@ 0x40
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b0e      	cmp	r3, #14
 8005ad8:	d9f2      	bls.n	8005ac0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ada:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11c      	bne.n	8005b1c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005af0:	f043 0302 	orr.w	r3, r3, #2
 8005af4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b06:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b12:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b1a:	e00b      	b.n	8005b34 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b20:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10d      	bne.n	8005b64 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b50:	2100      	movs	r1, #0
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f968 	bl	8005e28 <USB_SetDevSpeed>
 8005b58:	e008      	b.n	8005b6c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f963 	bl	8005e28 <USB_SetDevSpeed>
 8005b62:	e003      	b.n	8005b6c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b64:	2103      	movs	r1, #3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f95e 	bl	8005e28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b6c:	2110      	movs	r1, #16
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f8fa 	bl	8005d68 <USB_FlushTxFifo>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f924 	bl	8005dcc <USB_FlushRxFifo>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b94:	461a      	mov	r2, r3
 8005b96:	2300      	movs	r3, #0
 8005b98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bac:	461a      	mov	r2, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	e043      	b.n	8005c40 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bce:	d118      	bne.n	8005c02 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be2:	461a      	mov	r2, r3
 8005be4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e013      	b.n	8005c14 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	e008      	b.n	8005c14 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c20:	461a      	mov	r2, r3
 8005c22:	2300      	movs	r3, #0
 8005c24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c32:	461a      	mov	r2, r3
 8005c34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c44:	461a      	mov	r2, r3
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d3b5      	bcc.n	8005bb8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	e043      	b.n	8005cda <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c68:	d118      	bne.n	8005c9c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	e013      	b.n	8005cae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c92:	461a      	mov	r2, r3
 8005c94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	e008      	b.n	8005cae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2300      	movs	r3, #0
 8005cac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cba:	461a      	mov	r2, r3
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cde:	461a      	mov	r2, r3
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d3b5      	bcc.n	8005c52 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cf8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d105      	bne.n	8005d1c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f043 0210 	orr.w	r2, r3, #16
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699a      	ldr	r2, [r3, #24]
 8005d20:	4b10      	ldr	r3, [pc, #64]	@ (8005d64 <USB_DevInit+0x2c4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f043 0208 	orr.w	r2, r3, #8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d107      	bne.n	8005d54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d4c:	f043 0304 	orr.w	r3, r3, #4
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d60:	b004      	add	sp, #16
 8005d62:	4770      	bx	lr
 8005d64:	803c3800 	.word	0x803c3800

08005d68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d82:	d901      	bls.n	8005d88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e01b      	b.n	8005dc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	daf2      	bge.n	8005d76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	019b      	lsls	r3, r3, #6
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dac:	d901      	bls.n	8005db2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e006      	b.n	8005dc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d0f0      	beq.n	8005da0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005de4:	d901      	bls.n	8005dea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e018      	b.n	8005e1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	daf2      	bge.n	8005dd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e08:	d901      	bls.n	8005e0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e006      	b.n	8005e1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	2b10      	cmp	r3, #16
 8005e18:	d0f0      	beq.n	8005dfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0306 	and.w	r3, r3, #6
 8005e72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]
 8005e7e:	e00a      	b.n	8005e96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d002      	beq.n	8005e8c <USB_GetDevSpeed+0x32>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b06      	cmp	r3, #6
 8005e8a:	d102      	bne.n	8005e92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	75fb      	strb	r3, [r7, #23]
 8005e90:	e001      	b.n	8005e96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e92:	230f      	movs	r3, #15
 8005e94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d13a      	bne.n	8005f36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	68f9      	ldr	r1, [r7, #12]
 8005eda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d155      	bne.n	8005fa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	791b      	ldrb	r3, [r3, #4]
 8005f12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	059b      	lsls	r3, r3, #22
 8005f1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	e036      	b.n	8005fa4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3c:	69da      	ldr	r2, [r3, #28]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	2101      	movs	r1, #1
 8005f48:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4c:	041b      	lsls	r3, r3, #16
 8005f4e:	68f9      	ldr	r1, [r7, #12]
 8005f50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f54:	4313      	orrs	r3, r2
 8005f56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d11a      	bne.n	8005fa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	791b      	ldrb	r3, [r3, #4]
 8005f88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fa2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
	...

08005fb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d161      	bne.n	8006094 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fe6:	d11f      	bne.n	8006028 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006002:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006006:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	440a      	add	r2, r1
 800601e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006022:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	2101      	movs	r1, #1
 800603a:	fa01 f303 	lsl.w	r3, r1, r3
 800603e:	b29b      	uxth	r3, r3
 8006040:	43db      	mvns	r3, r3
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006048:	4013      	ands	r3, r2
 800604a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	b29b      	uxth	r3, r3
 8006064:	43db      	mvns	r3, r3
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800606c:	4013      	ands	r3, r2
 800606e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	0159      	lsls	r1, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	440b      	add	r3, r1
 8006086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608a:	4619      	mov	r1, r3
 800608c:	4b35      	ldr	r3, [pc, #212]	@ (8006164 <USB_DeactivateEndpoint+0x1b0>)
 800608e:	4013      	ands	r3, r2
 8006090:	600b      	str	r3, [r1, #0]
 8006092:	e060      	b.n	8006156 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060aa:	d11f      	bne.n	80060ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	2101      	movs	r1, #1
 80060fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	43db      	mvns	r3, r3
 8006106:	68f9      	ldr	r1, [r7, #12]
 8006108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800610c:	4013      	ands	r3, r2
 800610e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	2101      	movs	r1, #1
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	43db      	mvns	r3, r3
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006130:	4013      	ands	r3, r2
 8006132:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	0159      	lsls	r1, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	440b      	add	r3, r1
 800614a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800614e:	4619      	mov	r1, r3
 8006150:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <USB_DeactivateEndpoint+0x1b4>)
 8006152:	4013      	ands	r3, r2
 8006154:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	ec337800 	.word	0xec337800
 8006168:	eff37800 	.word	0xeff37800

0800616c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	@ 0x28
 8006170:	af02      	add	r7, sp, #8
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	2b01      	cmp	r3, #1
 800618a:	f040 817a 	bne.w	8006482 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d132      	bne.n	80061fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061b0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061b4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f4:	0cdb      	lsrs	r3, r3, #19
 80061f6:	04db      	lsls	r3, r3, #19
 80061f8:	6113      	str	r3, [r2, #16]
 80061fa:	e092      	b.n	8006322 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006216:	0cdb      	lsrs	r3, r3, #19
 8006218:	04db      	lsls	r3, r3, #19
 800621a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006236:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800623a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800623e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d11a      	bne.n	800627c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	d903      	bls.n	800625a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006274:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006278:	6113      	str	r3, [r2, #16]
 800627a:	e01b      	b.n	80062b4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006288:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	6919      	ldr	r1, [r3, #16]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	440b      	add	r3, r1
 8006294:	1e59      	subs	r1, r3, #1
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	fbb1 f3f3 	udiv	r3, r1, r3
 800629e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062a0:	4ba2      	ldr	r3, [pc, #648]	@ (800652c <USB_EPStartXfer+0x3c0>)
 80062a2:	400b      	ands	r3, r1
 80062a4:	69b9      	ldr	r1, [r7, #24]
 80062a6:	0148      	lsls	r0, r1, #5
 80062a8:	69f9      	ldr	r1, [r7, #28]
 80062aa:	4401      	add	r1, r0
 80062ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80062b0:	4313      	orrs	r3, r2
 80062b2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ca:	69b9      	ldr	r1, [r7, #24]
 80062cc:	0148      	lsls	r0, r1, #5
 80062ce:	69f9      	ldr	r1, [r7, #28]
 80062d0:	4401      	add	r1, r0
 80062d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80062d6:	4313      	orrs	r3, r2
 80062d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	791b      	ldrb	r3, [r3, #4]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d11f      	bne.n	8006322 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006300:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	0151      	lsls	r1, r2, #5
 8006314:	69fa      	ldr	r2, [r7, #28]
 8006316:	440a      	add	r2, r1
 8006318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800631c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006320:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d14b      	bne.n	80063c0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633c:	461a      	mov	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	791b      	ldrb	r3, [r3, #4]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d128      	bne.n	800639e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d110      	bne.n	800637e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	440a      	add	r2, r1
 8006372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006376:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	e00f      	b.n	800639e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800639c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	e165      	b.n	800668c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	791b      	ldrb	r3, [r3, #4]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d015      	beq.n	8006414 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 814d 	beq.w	800668c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	2101      	movs	r1, #1
 8006404:	fa01 f303 	lsl.w	r3, r1, r3
 8006408:	69f9      	ldr	r1, [r7, #28]
 800640a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800640e:	4313      	orrs	r3, r2
 8006410:	634b      	str	r3, [r1, #52]	@ 0x34
 8006412:	e13b      	b.n	800668c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006420:	2b00      	cmp	r3, #0
 8006422:	d110      	bne.n	8006446 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	440a      	add	r2, r1
 800643a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800643e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	e00f      	b.n	8006466 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006464:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	68d9      	ldr	r1, [r3, #12]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	b298      	uxth	r0, r3
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	4603      	mov	r3, r0
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 f9b8 	bl	80067f0 <USB_WritePacket>
 8006480:	e104      	b.n	800668c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	440a      	add	r2, r1
 8006498:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800649c:	0cdb      	lsrs	r3, r3, #19
 800649e:	04db      	lsls	r3, r3, #19
 80064a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064bc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80064c0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80064c4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d131      	bne.n	8006530 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064fa:	69b9      	ldr	r1, [r7, #24]
 80064fc:	0148      	lsls	r0, r1, #5
 80064fe:	69f9      	ldr	r1, [r7, #28]
 8006500:	4401      	add	r1, r0
 8006502:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006506:	4313      	orrs	r3, r2
 8006508:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006524:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006528:	6113      	str	r3, [r2, #16]
 800652a:	e061      	b.n	80065f0 <USB_EPStartXfer+0x484>
 800652c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d123      	bne.n	8006580 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800654e:	69b9      	ldr	r1, [r7, #24]
 8006550:	0148      	lsls	r0, r1, #5
 8006552:	69f9      	ldr	r1, [r7, #28]
 8006554:	4401      	add	r1, r0
 8006556:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800655a:	4313      	orrs	r3, r2
 800655c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006578:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800657c:	6113      	str	r3, [r2, #16]
 800657e:	e037      	b.n	80065f0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4413      	add	r3, r2
 800658a:	1e5a      	subs	r2, r3, #1
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	8afa      	ldrh	r2, [r7, #22]
 800659c:	fb03 f202 	mul.w	r2, r3, r2
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	8afb      	ldrh	r3, [r7, #22]
 80065b4:	04d9      	lsls	r1, r3, #19
 80065b6:	4b38      	ldr	r3, [pc, #224]	@ (8006698 <USB_EPStartXfer+0x52c>)
 80065b8:	400b      	ands	r3, r1
 80065ba:	69b9      	ldr	r1, [r7, #24]
 80065bc:	0148      	lsls	r0, r1, #5
 80065be:	69f9      	ldr	r1, [r7, #28]
 80065c0:	4401      	add	r1, r0
 80065c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065c6:	4313      	orrs	r3, r2
 80065c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065e0:	69b9      	ldr	r1, [r7, #24]
 80065e2:	0148      	lsls	r0, r1, #5
 80065e4:	69f9      	ldr	r1, [r7, #28]
 80065e6:	4401      	add	r1, r0
 80065e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065ec:	4313      	orrs	r3, r2
 80065ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d10d      	bne.n	8006612 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	68d9      	ldr	r1, [r3, #12]
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660e:	460a      	mov	r2, r1
 8006610:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	791b      	ldrb	r3, [r3, #4]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d128      	bne.n	800666c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006626:	2b00      	cmp	r3, #0
 8006628:	d110      	bne.n	800664c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	440a      	add	r2, r1
 8006640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006644:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e00f      	b.n	800666c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	440a      	add	r2, r1
 8006662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800666a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006686:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800668a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	1ff80000 	.word	0x1ff80000

0800669c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d14a      	bne.n	8006750 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d2:	f040 8086 	bne.w	80067e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006718:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800671c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f242 7210 	movw	r2, #10000	@ 0x2710
 800672a:	4293      	cmp	r3, r2
 800672c:	d902      	bls.n	8006734 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	75fb      	strb	r3, [r7, #23]
          break;
 8006732:	e056      	b.n	80067e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800674c:	d0e7      	beq.n	800671e <USB_EPStopXfer+0x82>
 800674e:	e048      	b.n	80067e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006768:	d13b      	bne.n	80067e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	440a      	add	r2, r1
 8006784:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006788:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800678c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3301      	adds	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067be:	4293      	cmp	r3, r2
 80067c0:	d902      	bls.n	80067c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]
          break;
 80067c6:	e00c      	b.n	80067e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067e0:	d0e7      	beq.n	80067b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b089      	sub	sp, #36	@ 0x24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4611      	mov	r1, r2
 80067fc:	461a      	mov	r2, r3
 80067fe:	460b      	mov	r3, r1
 8006800:	71fb      	strb	r3, [r7, #7]
 8006802:	4613      	mov	r3, r2
 8006804:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800680e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006812:	2b00      	cmp	r3, #0
 8006814:	d123      	bne.n	800685e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006816:	88bb      	ldrh	r3, [r7, #4]
 8006818:	3303      	adds	r3, #3
 800681a:	089b      	lsrs	r3, r3, #2
 800681c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800681e:	2300      	movs	r3, #0
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e018      	b.n	8006856 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	031a      	lsls	r2, r3, #12
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	4413      	add	r3, r2
 800682c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006830:	461a      	mov	r2, r3
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	3301      	adds	r3, #1
 800683c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	3301      	adds	r3, #1
 8006842:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	3301      	adds	r3, #1
 8006848:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	3301      	adds	r3, #1
 800684e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	3301      	adds	r3, #1
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	429a      	cmp	r2, r3
 800685c:	d3e2      	bcc.n	8006824 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3724      	adds	r7, #36	@ 0x24
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800686c:	b480      	push	{r7}
 800686e:	b08b      	sub	sp, #44	@ 0x2c
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006882:	88fb      	ldrh	r3, [r7, #6]
 8006884:	089b      	lsrs	r3, r3, #2
 8006886:	b29b      	uxth	r3, r3
 8006888:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	f003 0303 	and.w	r3, r3, #3
 8006890:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006892:	2300      	movs	r3, #0
 8006894:	623b      	str	r3, [r7, #32]
 8006896:	e014      	b.n	80068c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	3301      	adds	r3, #1
 80068a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	3301      	adds	r3, #1
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	3301      	adds	r3, #1
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	3301      	adds	r3, #1
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	3301      	adds	r3, #1
 80068c0:	623b      	str	r3, [r7, #32]
 80068c2:	6a3a      	ldr	r2, [r7, #32]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d3e6      	bcc.n	8006898 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068ca:	8bfb      	ldrh	r3, [r7, #30]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01e      	beq.n	800690e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068da:	461a      	mov	r2, r3
 80068dc:	f107 0310 	add.w	r3, r7, #16
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	701a      	strb	r2, [r3, #0]
      i++;
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	3301      	adds	r3, #1
 80068fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	3301      	adds	r3, #1
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006902:	8bfb      	ldrh	r3, [r7, #30]
 8006904:	3b01      	subs	r3, #1
 8006906:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006908:	8bfb      	ldrh	r3, [r7, #30]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1ea      	bne.n	80068e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006910:	4618      	mov	r0, r3
 8006912:	372c      	adds	r7, #44	@ 0x2c
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d12c      	bne.n	8006992 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	db12      	blt.n	8006970 <USB_EPSetStall+0x54>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00f      	beq.n	8006970 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800696a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800696e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800698a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	e02b      	b.n	80069ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	db12      	blt.n	80069ca <USB_EPSetStall+0xae>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00f      	beq.n	80069ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	0151      	lsls	r1, r2, #5
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	440a      	add	r2, r1
 80069e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d128      	bne.n	8006a66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	791b      	ldrb	r3, [r3, #4]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d003      	beq.n	8006a44 <USB_EPClearStall+0x4c>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	791b      	ldrb	r3, [r3, #4]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d138      	bne.n	8006ab6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	e027      	b.n	8006ab6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d003      	beq.n	8006a96 <USB_EPClearStall+0x9e>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	791b      	ldrb	r3, [r3, #4]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d10f      	bne.n	8006ab6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ae2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006ae6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006af8:	68f9      	ldr	r1, [r7, #12]
 8006afa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006afe:	4313      	orrs	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b3e:	f023 0302 	bic.w	r3, r3, #2
 8006b42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b6c:	f023 0303 	bic.w	r3, r3, #3
 8006b70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bac:	68fb      	ldr	r3, [r7, #12]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b085      	sub	sp, #20
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	0c1b      	lsrs	r3, r3, #16
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	b29b      	uxth	r3, r3
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c50:	68bb      	ldr	r3, [r7, #8]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8e:	01db      	lsls	r3, r3, #7
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cac:	68bb      	ldr	r3, [r7, #8]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cf0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006cf4:	f023 0307 	bic.w	r3, r3, #7
 8006cf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	460b      	mov	r3, r1
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	333c      	adds	r3, #60	@ 0x3c
 8006d32:	3304      	adds	r3, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	4a26      	ldr	r2, [pc, #152]	@ (8006dd4 <USB_EP0_OutStart+0xb8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d90a      	bls.n	8006d56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d50:	d101      	bne.n	8006d56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e037      	b.n	8006dc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d84:	f043 0318 	orr.w	r3, r3, #24
 8006d88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d98:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006d9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d10f      	bne.n	8006dc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dbe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006dc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	4f54300a 	.word	0x4f54300a

08006dd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006df0:	d901      	bls.n	8006df6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e01b      	b.n	8006e2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	daf2      	bge.n	8006de4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f043 0201 	orr.w	r2, r3, #1
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e1a:	d901      	bls.n	8006e20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e006      	b.n	8006e2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d0f0      	beq.n	8006e0e <USB_CoreReset+0x36>

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
	...

08006e3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e48:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e4c:	f002 fc7e 	bl	800974c <USBD_static_malloc>
 8006e50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	32b0      	adds	r2, #176	@ 0xb0
 8006e62:	2100      	movs	r1, #0
 8006e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e0d4      	b.n	8007016 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e6c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006e70:	2100      	movs	r1, #0
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f002 fce2 	bl	800983c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	32b0      	adds	r2, #176	@ 0xb0
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	32b0      	adds	r2, #176	@ 0xb0
 8006e92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	7c1b      	ldrb	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d138      	bne.n	8006f16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ea4:	4b5e      	ldr	r3, [pc, #376]	@ (8007020 <USBD_CDC_Init+0x1e4>)
 8006ea6:	7819      	ldrb	r1, [r3, #0]
 8006ea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006eac:	2202      	movs	r2, #2
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f002 fb29 	bl	8009506 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8007020 <USBD_CDC_Init+0x1e4>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3324      	adds	r3, #36	@ 0x24
 8006eca:	2201      	movs	r2, #1
 8006ecc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ece:	4b55      	ldr	r3, [pc, #340]	@ (8007024 <USBD_CDC_Init+0x1e8>)
 8006ed0:	7819      	ldrb	r1, [r3, #0]
 8006ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f002 fb14 	bl	8009506 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ede:	4b51      	ldr	r3, [pc, #324]	@ (8007024 <USBD_CDC_Init+0x1e8>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	f003 020f 	and.w	r2, r3, #15
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006efa:	4b4b      	ldr	r3, [pc, #300]	@ (8007028 <USBD_CDC_Init+0x1ec>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	f003 020f 	and.w	r2, r3, #15
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	3326      	adds	r3, #38	@ 0x26
 8006f10:	2210      	movs	r2, #16
 8006f12:	801a      	strh	r2, [r3, #0]
 8006f14:	e035      	b.n	8006f82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f16:	4b42      	ldr	r3, [pc, #264]	@ (8007020 <USBD_CDC_Init+0x1e4>)
 8006f18:	7819      	ldrb	r1, [r3, #0]
 8006f1a:	2340      	movs	r3, #64	@ 0x40
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f002 faf1 	bl	8009506 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f24:	4b3e      	ldr	r3, [pc, #248]	@ (8007020 <USBD_CDC_Init+0x1e4>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	f003 020f 	and.w	r2, r3, #15
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	3324      	adds	r3, #36	@ 0x24
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f3e:	4b39      	ldr	r3, [pc, #228]	@ (8007024 <USBD_CDC_Init+0x1e8>)
 8006f40:	7819      	ldrb	r1, [r3, #0]
 8006f42:	2340      	movs	r3, #64	@ 0x40
 8006f44:	2202      	movs	r2, #2
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f002 fadd 	bl	8009506 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f4c:	4b35      	ldr	r3, [pc, #212]	@ (8007024 <USBD_CDC_Init+0x1e8>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	f003 020f 	and.w	r2, r3, #15
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f64:	2201      	movs	r2, #1
 8006f66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f68:	4b2f      	ldr	r3, [pc, #188]	@ (8007028 <USBD_CDC_Init+0x1ec>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 020f 	and.w	r2, r3, #15
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	3326      	adds	r3, #38	@ 0x26
 8006f7e:	2210      	movs	r2, #16
 8006f80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f82:	4b29      	ldr	r3, [pc, #164]	@ (8007028 <USBD_CDC_Init+0x1ec>)
 8006f84:	7819      	ldrb	r1, [r3, #0]
 8006f86:	2308      	movs	r3, #8
 8006f88:	2203      	movs	r2, #3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f002 fabb 	bl	8009506 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f90:	4b25      	ldr	r3, [pc, #148]	@ (8007028 <USBD_CDC_Init+0x1ec>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	f003 020f 	and.w	r2, r3, #15
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	3324      	adds	r3, #36	@ 0x24
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	33b0      	adds	r3, #176	@ 0xb0
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e018      	b.n	8007016 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	7c1b      	ldrb	r3, [r3, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10a      	bne.n	8007002 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fec:	4b0d      	ldr	r3, [pc, #52]	@ (8007024 <USBD_CDC_Init+0x1e8>)
 8006fee:	7819      	ldrb	r1, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ff6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f002 fb72 	bl	80096e4 <USBD_LL_PrepareReceive>
 8007000:	e008      	b.n	8007014 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007002:	4b08      	ldr	r3, [pc, #32]	@ (8007024 <USBD_CDC_Init+0x1e8>)
 8007004:	7819      	ldrb	r1, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800700c:	2340      	movs	r3, #64	@ 0x40
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f002 fb68 	bl	80096e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200000c3 	.word	0x200000c3
 8007024:	200000c4 	.word	0x200000c4
 8007028:	200000c5 	.word	0x200000c5

0800702c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007038:	4b3a      	ldr	r3, [pc, #232]	@ (8007124 <USBD_CDC_DeInit+0xf8>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f002 fa87 	bl	8009552 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007044:	4b37      	ldr	r3, [pc, #220]	@ (8007124 <USBD_CDC_DeInit+0xf8>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f003 020f 	and.w	r2, r3, #15
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	3324      	adds	r3, #36	@ 0x24
 800705a:	2200      	movs	r2, #0
 800705c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800705e:	4b32      	ldr	r3, [pc, #200]	@ (8007128 <USBD_CDC_DeInit+0xfc>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f002 fa74 	bl	8009552 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800706a:	4b2f      	ldr	r3, [pc, #188]	@ (8007128 <USBD_CDC_DeInit+0xfc>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	f003 020f 	and.w	r2, r3, #15
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007082:	2200      	movs	r2, #0
 8007084:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007086:	4b29      	ldr	r3, [pc, #164]	@ (800712c <USBD_CDC_DeInit+0x100>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f002 fa60 	bl	8009552 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007092:	4b26      	ldr	r3, [pc, #152]	@ (800712c <USBD_CDC_DeInit+0x100>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	f003 020f 	and.w	r2, r3, #15
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	3324      	adds	r3, #36	@ 0x24
 80070a8:	2200      	movs	r2, #0
 80070aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070ac:	4b1f      	ldr	r3, [pc, #124]	@ (800712c <USBD_CDC_DeInit+0x100>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	3326      	adds	r3, #38	@ 0x26
 80070c2:	2200      	movs	r2, #0
 80070c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	32b0      	adds	r2, #176	@ 0xb0
 80070d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01f      	beq.n	8007118 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	33b0      	adds	r3, #176	@ 0xb0
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32b0      	adds	r2, #176	@ 0xb0
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f002 fb34 	bl	8009768 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	32b0      	adds	r2, #176	@ 0xb0
 800710a:	2100      	movs	r1, #0
 800710c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	200000c3 	.word	0x200000c3
 8007128:	200000c4 	.word	0x200000c4
 800712c:	200000c5 	.word	0x200000c5

08007130 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	32b0      	adds	r2, #176	@ 0xb0
 8007144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007148:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	e0bf      	b.n	80072e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007168:	2b00      	cmp	r3, #0
 800716a:	d050      	beq.n	800720e <USBD_CDC_Setup+0xde>
 800716c:	2b20      	cmp	r3, #32
 800716e:	f040 80af 	bne.w	80072d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	88db      	ldrh	r3, [r3, #6]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d03a      	beq.n	80071f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b25b      	sxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	da1b      	bge.n	80071bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	33b0      	adds	r3, #176	@ 0xb0
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800719a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	88d2      	ldrh	r2, [r2, #6]
 80071a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	88db      	ldrh	r3, [r3, #6]
 80071a6:	2b07      	cmp	r3, #7
 80071a8:	bf28      	it	cs
 80071aa:	2307      	movcs	r3, #7
 80071ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	89fa      	ldrh	r2, [r7, #14]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fd87 	bl	8008cc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80071ba:	e090      	b.n	80072de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	785a      	ldrb	r2, [r3, #1]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	88db      	ldrh	r3, [r3, #6]
 80071ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80071cc:	d803      	bhi.n	80071d6 <USBD_CDC_Setup+0xa6>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	88db      	ldrh	r3, [r3, #6]
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	e000      	b.n	80071d8 <USBD_CDC_Setup+0xa8>
 80071d6:	2240      	movs	r2, #64	@ 0x40
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071de:	6939      	ldr	r1, [r7, #16]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80071e6:	461a      	mov	r2, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fd99 	bl	8008d20 <USBD_CtlPrepareRx>
      break;
 80071ee:	e076      	b.n	80072de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	33b0      	adds	r3, #176	@ 0xb0
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	7850      	ldrb	r0, [r2, #1]
 8007206:	2200      	movs	r2, #0
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	4798      	blx	r3
      break;
 800720c:	e067      	b.n	80072de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	785b      	ldrb	r3, [r3, #1]
 8007212:	2b0b      	cmp	r3, #11
 8007214:	d851      	bhi.n	80072ba <USBD_CDC_Setup+0x18a>
 8007216:	a201      	add	r2, pc, #4	@ (adr r2, 800721c <USBD_CDC_Setup+0xec>)
 8007218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721c:	0800724d 	.word	0x0800724d
 8007220:	080072c9 	.word	0x080072c9
 8007224:	080072bb 	.word	0x080072bb
 8007228:	080072bb 	.word	0x080072bb
 800722c:	080072bb 	.word	0x080072bb
 8007230:	080072bb 	.word	0x080072bb
 8007234:	080072bb 	.word	0x080072bb
 8007238:	080072bb 	.word	0x080072bb
 800723c:	080072bb 	.word	0x080072bb
 8007240:	080072bb 	.word	0x080072bb
 8007244:	08007277 	.word	0x08007277
 8007248:	080072a1 	.word	0x080072a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b03      	cmp	r3, #3
 8007256:	d107      	bne.n	8007268 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007258:	f107 030a 	add.w	r3, r7, #10
 800725c:	2202      	movs	r2, #2
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 fd31 	bl	8008cc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007266:	e032      	b.n	80072ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fcbb 	bl	8008be6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007270:	2303      	movs	r3, #3
 8007272:	75fb      	strb	r3, [r7, #23]
          break;
 8007274:	e02b      	b.n	80072ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b03      	cmp	r3, #3
 8007280:	d107      	bne.n	8007292 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007282:	f107 030d 	add.w	r3, r7, #13
 8007286:	2201      	movs	r2, #1
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fd1c 	bl	8008cc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007290:	e01d      	b.n	80072ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 fca6 	bl	8008be6 <USBD_CtlError>
            ret = USBD_FAIL;
 800729a:	2303      	movs	r3, #3
 800729c:	75fb      	strb	r3, [r7, #23]
          break;
 800729e:	e016      	b.n	80072ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d00f      	beq.n	80072cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f001 fc99 	bl	8008be6 <USBD_CtlError>
            ret = USBD_FAIL;
 80072b4:	2303      	movs	r3, #3
 80072b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072b8:	e008      	b.n	80072cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 fc92 	bl	8008be6 <USBD_CtlError>
          ret = USBD_FAIL;
 80072c2:	2303      	movs	r3, #3
 80072c4:	75fb      	strb	r3, [r7, #23]
          break;
 80072c6:	e002      	b.n	80072ce <USBD_CDC_Setup+0x19e>
          break;
 80072c8:	bf00      	nop
 80072ca:	e008      	b.n	80072de <USBD_CDC_Setup+0x1ae>
          break;
 80072cc:	bf00      	nop
      }
      break;
 80072ce:	e006      	b.n	80072de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fc87 	bl	8008be6 <USBD_CtlError>
      ret = USBD_FAIL;
 80072d8:	2303      	movs	r3, #3
 80072da:	75fb      	strb	r3, [r7, #23]
      break;
 80072dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32b0      	adds	r2, #176	@ 0xb0
 8007306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800730e:	2303      	movs	r3, #3
 8007310:	e065      	b.n	80073de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	32b0      	adds	r2, #176	@ 0xb0
 800731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007320:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	f003 020f 	and.w	r2, r3, #15
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	440b      	add	r3, r1
 8007334:	3318      	adds	r3, #24
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d02f      	beq.n	800739c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	f003 020f 	and.w	r2, r3, #15
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	3318      	adds	r3, #24
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	f003 010f 	and.w	r1, r3, #15
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	460b      	mov	r3, r1
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	440b      	add	r3, r1
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4403      	add	r3, r0
 8007364:	331c      	adds	r3, #28
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	fbb2 f1f3 	udiv	r1, r2, r3
 800736c:	fb01 f303 	mul.w	r3, r1, r3
 8007370:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007372:	2b00      	cmp	r3, #0
 8007374:	d112      	bne.n	800739c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	f003 020f 	and.w	r2, r3, #15
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	440b      	add	r3, r1
 8007388:	3318      	adds	r3, #24
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800738e:	78f9      	ldrb	r1, [r7, #3]
 8007390:	2300      	movs	r3, #0
 8007392:	2200      	movs	r2, #0
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f002 f984 	bl	80096a2 <USBD_LL_Transmit>
 800739a:	e01f      	b.n	80073dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	33b0      	adds	r3, #176	@ 0xb0
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d010      	beq.n	80073dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	33b0      	adds	r3, #176	@ 0xb0
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	32b0      	adds	r2, #176	@ 0xb0
 80073fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007400:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	32b0      	adds	r2, #176	@ 0xb0
 800740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007414:	2303      	movs	r3, #3
 8007416:	e01a      	b.n	800744e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f002 f982 	bl	8009726 <USBD_LL_GetRxDataSize>
 8007422:	4602      	mov	r2, r0
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	33b0      	adds	r3, #176	@ 0xb0
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007448:	4611      	mov	r1, r2
 800744a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	32b0      	adds	r2, #176	@ 0xb0
 8007468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007474:	2303      	movs	r3, #3
 8007476:	e024      	b.n	80074c2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	33b0      	adds	r3, #176	@ 0xb0
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d019      	beq.n	80074c0 <USBD_CDC_EP0_RxReady+0x6a>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007492:	2bff      	cmp	r3, #255	@ 0xff
 8007494:	d014      	beq.n	80074c0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	33b0      	adds	r3, #176	@ 0xb0
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80074ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	22ff      	movs	r2, #255	@ 0xff
 80074bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074d4:	2182      	movs	r1, #130	@ 0x82
 80074d6:	4818      	ldr	r0, [pc, #96]	@ (8007538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074d8:	f000 fd4f 	bl	8007f7a <USBD_GetEpDesc>
 80074dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074de:	2101      	movs	r1, #1
 80074e0:	4815      	ldr	r0, [pc, #84]	@ (8007538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074e2:	f000 fd4a 	bl	8007f7a <USBD_GetEpDesc>
 80074e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074e8:	2181      	movs	r1, #129	@ 0x81
 80074ea:	4813      	ldr	r0, [pc, #76]	@ (8007538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074ec:	f000 fd45 	bl	8007f7a <USBD_GetEpDesc>
 80074f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2210      	movs	r2, #16
 80074fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d006      	beq.n	8007512 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2200      	movs	r2, #0
 8007508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800750c:	711a      	strb	r2, [r3, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d006      	beq.n	8007526 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007520:	711a      	strb	r2, [r3, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2243      	movs	r2, #67	@ 0x43
 800752a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800752c:	4b02      	ldr	r3, [pc, #8]	@ (8007538 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000080 	.word	0x20000080

0800753c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007544:	2182      	movs	r1, #130	@ 0x82
 8007546:	4818      	ldr	r0, [pc, #96]	@ (80075a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007548:	f000 fd17 	bl	8007f7a <USBD_GetEpDesc>
 800754c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800754e:	2101      	movs	r1, #1
 8007550:	4815      	ldr	r0, [pc, #84]	@ (80075a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007552:	f000 fd12 	bl	8007f7a <USBD_GetEpDesc>
 8007556:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007558:	2181      	movs	r1, #129	@ 0x81
 800755a:	4813      	ldr	r0, [pc, #76]	@ (80075a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800755c:	f000 fd0d 	bl	8007f7a <USBD_GetEpDesc>
 8007560:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2210      	movs	r2, #16
 800756c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d006      	beq.n	8007582 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2200      	movs	r2, #0
 8007578:	711a      	strb	r2, [r3, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f042 0202 	orr.w	r2, r2, #2
 8007580:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d006      	beq.n	8007596 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	711a      	strb	r2, [r3, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f042 0202 	orr.w	r2, r2, #2
 8007594:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2243      	movs	r2, #67	@ 0x43
 800759a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800759c:	4b02      	ldr	r3, [pc, #8]	@ (80075a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000080 	.word	0x20000080

080075ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075b4:	2182      	movs	r1, #130	@ 0x82
 80075b6:	4818      	ldr	r0, [pc, #96]	@ (8007618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075b8:	f000 fcdf 	bl	8007f7a <USBD_GetEpDesc>
 80075bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075be:	2101      	movs	r1, #1
 80075c0:	4815      	ldr	r0, [pc, #84]	@ (8007618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075c2:	f000 fcda 	bl	8007f7a <USBD_GetEpDesc>
 80075c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075c8:	2181      	movs	r1, #129	@ 0x81
 80075ca:	4813      	ldr	r0, [pc, #76]	@ (8007618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075cc:	f000 fcd5 	bl	8007f7a <USBD_GetEpDesc>
 80075d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2210      	movs	r2, #16
 80075dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d006      	beq.n	80075f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075ec:	711a      	strb	r2, [r3, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d006      	beq.n	8007606 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007600:	711a      	strb	r2, [r3, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2243      	movs	r2, #67	@ 0x43
 800760a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800760c:	4b02      	ldr	r3, [pc, #8]	@ (8007618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000080 	.word	0x20000080

0800761c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	220a      	movs	r2, #10
 8007628:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800762a:	4b03      	ldr	r3, [pc, #12]	@ (8007638 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	2000003c 	.word	0x2000003c

0800763c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800764c:	2303      	movs	r3, #3
 800764e:	e009      	b.n	8007664 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	33b0      	adds	r3, #176	@ 0xb0
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	32b0      	adds	r2, #176	@ 0xb0
 8007686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007692:	2303      	movs	r3, #3
 8007694:	e008      	b.n	80076a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	32b0      	adds	r2, #176	@ 0xb0
 80076c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e004      	b.n	80076e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
	...

080076f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	32b0      	adds	r2, #176	@ 0xb0
 8007702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007706:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007708:	2301      	movs	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007712:	2303      	movs	r3, #3
 8007714:	e025      	b.n	8007762 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11f      	bne.n	8007760 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2201      	movs	r2, #1
 8007724:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007728:	4b10      	ldr	r3, [pc, #64]	@ (800776c <USBD_CDC_TransmitPacket+0x7c>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 020f 	and.w	r2, r3, #15
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4613      	mov	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4403      	add	r3, r0
 8007742:	3318      	adds	r3, #24
 8007744:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007746:	4b09      	ldr	r3, [pc, #36]	@ (800776c <USBD_CDC_TransmitPacket+0x7c>)
 8007748:	7819      	ldrb	r1, [r3, #0]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 ffa3 	bl	80096a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	200000c3 	.word	0x200000c3

08007770 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	32b0      	adds	r2, #176	@ 0xb0
 8007782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007786:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	32b0      	adds	r2, #176	@ 0xb0
 8007792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800779a:	2303      	movs	r3, #3
 800779c:	e018      	b.n	80077d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	7c1b      	ldrb	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10a      	bne.n	80077bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077a6:	4b0c      	ldr	r3, [pc, #48]	@ (80077d8 <USBD_CDC_ReceivePacket+0x68>)
 80077a8:	7819      	ldrb	r1, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f001 ff95 	bl	80096e4 <USBD_LL_PrepareReceive>
 80077ba:	e008      	b.n	80077ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077bc:	4b06      	ldr	r3, [pc, #24]	@ (80077d8 <USBD_CDC_ReceivePacket+0x68>)
 80077be:	7819      	ldrb	r1, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077c6:	2340      	movs	r3, #64	@ 0x40
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 ff8b 	bl	80096e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200000c4 	.word	0x200000c4

080077dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e01f      	b.n	8007834 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	79fa      	ldrb	r2, [r7, #7]
 8007826:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f001 fe05 	bl	8009438 <USBD_LL_Init>
 800782e:	4603      	mov	r3, r0
 8007830:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	e025      	b.n	80078a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	32ae      	adds	r2, #174	@ 0xae
 8007866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00f      	beq.n	8007890 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	32ae      	adds	r2, #174	@ 0xae
 800787a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	f107 020e 	add.w	r2, r7, #14
 8007884:	4610      	mov	r0, r2
 8007886:	4798      	blx	r3
 8007888:	4602      	mov	r2, r0
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 fe0d 	bl	80094d0 <USBD_LL_Start>
 80078b6:	4603      	mov	r3, r0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d009      	beq.n	8007904 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	78fa      	ldrb	r2, [r7, #3]
 80078fa:	4611      	mov	r1, r2
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	4798      	blx	r3
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	78fa      	ldrb	r2, [r7, #3]
 8007928:	4611      	mov	r1, r2
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4798      	blx	r3
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007934:	2303      	movs	r3, #3
 8007936:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f001 f90c 	bl	8008b72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007968:	461a      	mov	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	2b02      	cmp	r3, #2
 800797c:	d01a      	beq.n	80079b4 <USBD_LL_SetupStage+0x72>
 800797e:	2b02      	cmp	r3, #2
 8007980:	d822      	bhi.n	80079c8 <USBD_LL_SetupStage+0x86>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d002      	beq.n	800798c <USBD_LL_SetupStage+0x4a>
 8007986:	2b01      	cmp	r3, #1
 8007988:	d00a      	beq.n	80079a0 <USBD_LL_SetupStage+0x5e>
 800798a:	e01d      	b.n	80079c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fb63 	bl	8008060 <USBD_StdDevReq>
 800799a:	4603      	mov	r3, r0
 800799c:	73fb      	strb	r3, [r7, #15]
      break;
 800799e:	e020      	b.n	80079e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fbcb 	bl	8008144 <USBD_StdItfReq>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]
      break;
 80079b2:	e016      	b.n	80079e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fc2d 	bl	800821c <USBD_StdEPReq>
 80079c2:	4603      	mov	r3, r0
 80079c4:	73fb      	strb	r3, [r7, #15]
      break;
 80079c6:	e00c      	b.n	80079e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 fdda 	bl	8009590 <USBD_LL_StallEP>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]
      break;
 80079e0:	bf00      	nop
  }

  return ret;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	460b      	mov	r3, r1
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80079fe:	7afb      	ldrb	r3, [r7, #11]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d16e      	bne.n	8007ae2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	f040 8098 	bne.w	8007b48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d913      	bls.n	8007a4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	1ad2      	subs	r2, r2, r3
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	bf28      	it	cs
 8007a3e:	4613      	movcs	r3, r2
 8007a40:	461a      	mov	r2, r3
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f001 f988 	bl	8008d5a <USBD_CtlContinueRx>
 8007a4a:	e07d      	b.n	8007b48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a52:	f003 031f 	and.w	r3, r3, #31
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d014      	beq.n	8007a84 <USBD_LL_DataOutStage+0x98>
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d81d      	bhi.n	8007a9a <USBD_LL_DataOutStage+0xae>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <USBD_LL_DataOutStage+0x7c>
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d003      	beq.n	8007a6e <USBD_LL_DataOutStage+0x82>
 8007a66:	e018      	b.n	8007a9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	75bb      	strb	r3, [r7, #22]
            break;
 8007a6c:	e018      	b.n	8007aa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	4619      	mov	r1, r3
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fa64 	bl	8007f46 <USBD_CoreFindIF>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75bb      	strb	r3, [r7, #22]
            break;
 8007a82:	e00d      	b.n	8007aa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fa66 	bl	8007f60 <USBD_CoreFindEP>
 8007a94:	4603      	mov	r3, r0
 8007a96:	75bb      	strb	r3, [r7, #22]
            break;
 8007a98:	e002      	b.n	8007aa0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75bb      	strb	r3, [r7, #22]
            break;
 8007a9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007aa0:	7dbb      	ldrb	r3, [r7, #22]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d119      	bne.n	8007ada <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d113      	bne.n	8007ada <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007ab2:	7dba      	ldrb	r2, [r7, #22]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	32ae      	adds	r2, #174	@ 0xae
 8007ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00b      	beq.n	8007ada <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007ac2:	7dba      	ldrb	r2, [r7, #22]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007aca:	7dba      	ldrb	r2, [r7, #22]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	32ae      	adds	r2, #174	@ 0xae
 8007ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f001 f94e 	bl	8008d7c <USBD_CtlSendStatus>
 8007ae0:	e032      	b.n	8007b48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007ae2:	7afb      	ldrb	r3, [r7, #11]
 8007ae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	4619      	mov	r1, r3
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 fa37 	bl	8007f60 <USBD_CoreFindEP>
 8007af2:	4603      	mov	r3, r0
 8007af4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007af6:	7dbb      	ldrb	r3, [r7, #22]
 8007af8:	2bff      	cmp	r3, #255	@ 0xff
 8007afa:	d025      	beq.n	8007b48 <USBD_LL_DataOutStage+0x15c>
 8007afc:	7dbb      	ldrb	r3, [r7, #22]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d122      	bne.n	8007b48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d117      	bne.n	8007b3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b0e:	7dba      	ldrb	r2, [r7, #22]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	32ae      	adds	r2, #174	@ 0xae
 8007b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00f      	beq.n	8007b3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b1e:	7dba      	ldrb	r2, [r7, #22]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b26:	7dba      	ldrb	r2, [r7, #22]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	32ae      	adds	r2, #174	@ 0xae
 8007b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	7afa      	ldrb	r2, [r7, #11]
 8007b34:	4611      	mov	r1, r2
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	4798      	blx	r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	e000      	b.n	8007b4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b086      	sub	sp, #24
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	607a      	str	r2, [r7, #4]
 8007b5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d16f      	bne.n	8007c46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3314      	adds	r3, #20
 8007b6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d15a      	bne.n	8007c2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d914      	bls.n	8007bac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	1ad2      	subs	r2, r2, r3
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	461a      	mov	r2, r3
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f001 f8b0 	bl	8008cfe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f001 fd9d 	bl	80096e4 <USBD_LL_PrepareReceive>
 8007baa:	e03f      	b.n	8007c2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d11c      	bne.n	8007bf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d316      	bcc.n	8007bf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d20f      	bcs.n	8007bf2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f001 f891 	bl	8008cfe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007be4:	2300      	movs	r3, #0
 8007be6:	2200      	movs	r2, #0
 8007be8:	2100      	movs	r1, #0
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f001 fd7a 	bl	80096e4 <USBD_LL_PrepareReceive>
 8007bf0:	e01c      	b.n	8007c2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d10f      	bne.n	8007c1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c1e:	2180      	movs	r1, #128	@ 0x80
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f001 fcb5 	bl	8009590 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f001 f8bb 	bl	8008da2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d03a      	beq.n	8007cac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7ff fe42 	bl	80078c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007c44:	e032      	b.n	8007cac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	4619      	mov	r1, r3
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f985 	bl	8007f60 <USBD_CoreFindEP>
 8007c56:	4603      	mov	r3, r0
 8007c58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	2bff      	cmp	r3, #255	@ 0xff
 8007c5e:	d025      	beq.n	8007cac <USBD_LL_DataInStage+0x15a>
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d122      	bne.n	8007cac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d11c      	bne.n	8007cac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c72:	7dfa      	ldrb	r2, [r7, #23]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	32ae      	adds	r2, #174	@ 0xae
 8007c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d014      	beq.n	8007cac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c82:	7dfa      	ldrb	r2, [r7, #23]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c8a:	7dfa      	ldrb	r2, [r7, #23]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	32ae      	adds	r2, #174	@ 0xae
 8007c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	7afa      	ldrb	r2, [r7, #11]
 8007c98:	4611      	mov	r1, r2
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	4798      	blx	r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007ca2:	7dbb      	ldrb	r3, [r7, #22]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007ca8:	7dbb      	ldrb	r3, [r7, #22]
 8007caa:	e000      	b.n	8007cae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d014      	beq.n	8007d1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00e      	beq.n	8007d1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6852      	ldr	r2, [r2, #4]
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	4798      	blx	r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d1c:	2340      	movs	r3, #64	@ 0x40
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2100      	movs	r1, #0
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fbef 	bl	8009506 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2240      	movs	r2, #64	@ 0x40
 8007d34:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d38:	2340      	movs	r3, #64	@ 0x40
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2180      	movs	r1, #128	@ 0x80
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f001 fbe1 	bl	8009506 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2240      	movs	r2, #64	@ 0x40
 8007d4e:	621a      	str	r2, [r3, #32]

  return ret;
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	460b      	mov	r3, r1
 8007d64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d006      	beq.n	8007d9c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2204      	movs	r2, #4
 8007da0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d106      	bne.n	8007dd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b082      	sub	sp, #8
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d110      	bne.n	8007e18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00b      	beq.n	8007e18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	32ae      	adds	r2, #174	@ 0xae
 8007e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e01c      	b.n	8007e7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d115      	bne.n	8007e7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	32ae      	adds	r2, #174	@ 0xae
 8007e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32ae      	adds	r2, #174	@ 0xae
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	78fa      	ldrb	r2, [r7, #3]
 8007e76:	4611      	mov	r1, r2
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	32ae      	adds	r2, #174	@ 0xae
 8007e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e01c      	b.n	8007ee2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d115      	bne.n	8007ee0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	32ae      	adds	r2, #174	@ 0xae
 8007ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	32ae      	adds	r2, #174	@ 0xae
 8007ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	78fa      	ldrb	r2, [r7, #3]
 8007eda:	4611      	mov	r1, r2
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00e      	beq.n	8007f3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6852      	ldr	r2, [r2, #4]
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b086      	sub	sp, #24
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	885b      	ldrh	r3, [r3, #2]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	7812      	ldrb	r2, [r2, #0]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d91f      	bls.n	8007fe0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007fa6:	e013      	b.n	8007fd0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007fa8:	f107 030a 	add.w	r3, r7, #10
 8007fac:	4619      	mov	r1, r3
 8007fae:	6978      	ldr	r0, [r7, #20]
 8007fb0:	f000 f81b 	bl	8007fea <USBD_GetNextDesc>
 8007fb4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	2b05      	cmp	r3, #5
 8007fbc:	d108      	bne.n	8007fd0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	789b      	ldrb	r3, [r3, #2]
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d008      	beq.n	8007fde <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	885b      	ldrh	r3, [r3, #2]
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	897b      	ldrh	r3, [r7, #10]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d8e5      	bhi.n	8007fa8 <USBD_GetEpDesc+0x2e>
 8007fdc:	e000      	b.n	8007fe0 <USBD_GetEpDesc+0x66>
          break;
 8007fde:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007fe0:	693b      	ldr	r3, [r7, #16]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	7812      	ldrb	r2, [r2, #0]
 8008000:	4413      	add	r3, r2
 8008002:	b29a      	uxth	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	461a      	mov	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4413      	add	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008014:	68fb      	ldr	r3, [r7, #12]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008022:	b480      	push	{r7}
 8008024:	b087      	sub	sp, #28
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	3301      	adds	r3, #1
 8008038:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008040:	8a3b      	ldrh	r3, [r7, #16]
 8008042:	021b      	lsls	r3, r3, #8
 8008044:	b21a      	sxth	r2, r3
 8008046:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800804a:	4313      	orrs	r3, r2
 800804c:	b21b      	sxth	r3, r3
 800804e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008050:	89fb      	ldrh	r3, [r7, #14]
}
 8008052:	4618      	mov	r0, r3
 8008054:	371c      	adds	r7, #28
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
	...

08008060 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008076:	2b40      	cmp	r3, #64	@ 0x40
 8008078:	d005      	beq.n	8008086 <USBD_StdDevReq+0x26>
 800807a:	2b40      	cmp	r3, #64	@ 0x40
 800807c:	d857      	bhi.n	800812e <USBD_StdDevReq+0xce>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <USBD_StdDevReq+0x42>
 8008082:	2b20      	cmp	r3, #32
 8008084:	d153      	bne.n	800812e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	32ae      	adds	r2, #174	@ 0xae
 8008090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	4798      	blx	r3
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e04a      	b.n	8008138 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	2b09      	cmp	r3, #9
 80080a8:	d83b      	bhi.n	8008122 <USBD_StdDevReq+0xc2>
 80080aa:	a201      	add	r2, pc, #4	@ (adr r2, 80080b0 <USBD_StdDevReq+0x50>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	08008105 	.word	0x08008105
 80080b4:	08008119 	.word	0x08008119
 80080b8:	08008123 	.word	0x08008123
 80080bc:	0800810f 	.word	0x0800810f
 80080c0:	08008123 	.word	0x08008123
 80080c4:	080080e3 	.word	0x080080e3
 80080c8:	080080d9 	.word	0x080080d9
 80080cc:	08008123 	.word	0x08008123
 80080d0:	080080fb 	.word	0x080080fb
 80080d4:	080080ed 	.word	0x080080ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fa3c 	bl	8008558 <USBD_GetDescriptor>
          break;
 80080e0:	e024      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fba1 	bl	800882c <USBD_SetAddress>
          break;
 80080ea:	e01f      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fbe0 	bl	80088b4 <USBD_SetConfig>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]
          break;
 80080f8:	e018      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fc83 	bl	8008a08 <USBD_GetConfig>
          break;
 8008102:	e013      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fcb4 	bl	8008a74 <USBD_GetStatus>
          break;
 800810c:	e00e      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fce3 	bl	8008adc <USBD_SetFeature>
          break;
 8008116:	e009      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fd07 	bl	8008b2e <USBD_ClrFeature>
          break;
 8008120:	e004      	b.n	800812c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fd5e 	bl	8008be6 <USBD_CtlError>
          break;
 800812a:	bf00      	nop
      }
      break;
 800812c:	e004      	b.n	8008138 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fd58 	bl	8008be6 <USBD_CtlError>
      break;
 8008136:	bf00      	nop
  }

  return ret;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop

08008144 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800815a:	2b40      	cmp	r3, #64	@ 0x40
 800815c:	d005      	beq.n	800816a <USBD_StdItfReq+0x26>
 800815e:	2b40      	cmp	r3, #64	@ 0x40
 8008160:	d852      	bhi.n	8008208 <USBD_StdItfReq+0xc4>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <USBD_StdItfReq+0x26>
 8008166:	2b20      	cmp	r3, #32
 8008168:	d14e      	bne.n	8008208 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008170:	b2db      	uxtb	r3, r3
 8008172:	3b01      	subs	r3, #1
 8008174:	2b02      	cmp	r3, #2
 8008176:	d840      	bhi.n	80081fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	889b      	ldrh	r3, [r3, #4]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b01      	cmp	r3, #1
 8008180:	d836      	bhi.n	80081f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	889b      	ldrh	r3, [r3, #4]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff fedb 	bl	8007f46 <USBD_CoreFindIF>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	2bff      	cmp	r3, #255	@ 0xff
 8008198:	d01d      	beq.n	80081d6 <USBD_StdItfReq+0x92>
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d11a      	bne.n	80081d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80081a0:	7bba      	ldrb	r2, [r7, #14]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	32ae      	adds	r2, #174	@ 0xae
 80081a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00f      	beq.n	80081d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80081b0:	7bba      	ldrb	r2, [r7, #14]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081b8:	7bba      	ldrb	r2, [r7, #14]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	32ae      	adds	r2, #174	@ 0xae
 80081be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	4798      	blx	r3
 80081ca:	4603      	mov	r3, r0
 80081cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081ce:	e004      	b.n	80081da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80081d0:	2303      	movs	r3, #3
 80081d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081d4:	e001      	b.n	80081da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80081d6:	2303      	movs	r3, #3
 80081d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	88db      	ldrh	r3, [r3, #6]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d110      	bne.n	8008204 <USBD_StdItfReq+0xc0>
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10d      	bne.n	8008204 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fdc7 	bl	8008d7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081ee:	e009      	b.n	8008204 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fcf7 	bl	8008be6 <USBD_CtlError>
          break;
 80081f8:	e004      	b.n	8008204 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fcf2 	bl	8008be6 <USBD_CtlError>
          break;
 8008202:	e000      	b.n	8008206 <USBD_StdItfReq+0xc2>
          break;
 8008204:	bf00      	nop
      }
      break;
 8008206:	e004      	b.n	8008212 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fceb 	bl	8008be6 <USBD_CtlError>
      break;
 8008210:	bf00      	nop
  }

  return ret;
 8008212:	7bfb      	ldrb	r3, [r7, #15]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	889b      	ldrh	r3, [r3, #4]
 800822e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008238:	2b40      	cmp	r3, #64	@ 0x40
 800823a:	d007      	beq.n	800824c <USBD_StdEPReq+0x30>
 800823c:	2b40      	cmp	r3, #64	@ 0x40
 800823e:	f200 817f 	bhi.w	8008540 <USBD_StdEPReq+0x324>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d02a      	beq.n	800829c <USBD_StdEPReq+0x80>
 8008246:	2b20      	cmp	r3, #32
 8008248:	f040 817a 	bne.w	8008540 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff fe85 	bl	8007f60 <USBD_CoreFindEP>
 8008256:	4603      	mov	r3, r0
 8008258:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800825a:	7b7b      	ldrb	r3, [r7, #13]
 800825c:	2bff      	cmp	r3, #255	@ 0xff
 800825e:	f000 8174 	beq.w	800854a <USBD_StdEPReq+0x32e>
 8008262:	7b7b      	ldrb	r3, [r7, #13]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f040 8170 	bne.w	800854a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800826a:	7b7a      	ldrb	r2, [r7, #13]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008272:	7b7a      	ldrb	r2, [r7, #13]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	32ae      	adds	r2, #174	@ 0xae
 8008278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 8163 	beq.w	800854a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008284:	7b7a      	ldrb	r2, [r7, #13]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	32ae      	adds	r2, #174	@ 0xae
 800828a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	4798      	blx	r3
 8008296:	4603      	mov	r3, r0
 8008298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800829a:	e156      	b.n	800854a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d008      	beq.n	80082b6 <USBD_StdEPReq+0x9a>
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	f300 8145 	bgt.w	8008534 <USBD_StdEPReq+0x318>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 809b 	beq.w	80083e6 <USBD_StdEPReq+0x1ca>
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d03c      	beq.n	800832e <USBD_StdEPReq+0x112>
 80082b4:	e13e      	b.n	8008534 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d002      	beq.n	80082c8 <USBD_StdEPReq+0xac>
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d016      	beq.n	80082f4 <USBD_StdEPReq+0xd8>
 80082c6:	e02c      	b.n	8008322 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00d      	beq.n	80082ea <USBD_StdEPReq+0xce>
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b80      	cmp	r3, #128	@ 0x80
 80082d2:	d00a      	beq.n	80082ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f959 	bl	8009590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082de:	2180      	movs	r1, #128	@ 0x80
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 f955 	bl	8009590 <USBD_LL_StallEP>
 80082e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082e8:	e020      	b.n	800832c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fc7a 	bl	8008be6 <USBD_CtlError>
              break;
 80082f2:	e01b      	b.n	800832c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	885b      	ldrh	r3, [r3, #2]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10e      	bne.n	800831a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <USBD_StdEPReq+0xfe>
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b80      	cmp	r3, #128	@ 0x80
 8008306:	d008      	beq.n	800831a <USBD_StdEPReq+0xfe>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	88db      	ldrh	r3, [r3, #6]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 f93b 	bl	8009590 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fd2e 	bl	8008d7c <USBD_CtlSendStatus>

              break;
 8008320:	e004      	b.n	800832c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fc5e 	bl	8008be6 <USBD_CtlError>
              break;
 800832a:	bf00      	nop
          }
          break;
 800832c:	e107      	b.n	800853e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b02      	cmp	r3, #2
 8008338:	d002      	beq.n	8008340 <USBD_StdEPReq+0x124>
 800833a:	2b03      	cmp	r3, #3
 800833c:	d016      	beq.n	800836c <USBD_StdEPReq+0x150>
 800833e:	e04b      	b.n	80083d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00d      	beq.n	8008362 <USBD_StdEPReq+0x146>
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b80      	cmp	r3, #128	@ 0x80
 800834a:	d00a      	beq.n	8008362 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 f91d 	bl	8009590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008356:	2180      	movs	r1, #128	@ 0x80
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 f919 	bl	8009590 <USBD_LL_StallEP>
 800835e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008360:	e040      	b.n	80083e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fc3e 	bl	8008be6 <USBD_CtlError>
              break;
 800836a:	e03b      	b.n	80083e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	885b      	ldrh	r3, [r3, #2]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d136      	bne.n	80083e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800837a:	2b00      	cmp	r3, #0
 800837c:	d004      	beq.n	8008388 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 f923 	bl	80095ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fcf7 	bl	8008d7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fde4 	bl	8007f60 <USBD_CoreFindEP>
 8008398:	4603      	mov	r3, r0
 800839a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800839c:	7b7b      	ldrb	r3, [r7, #13]
 800839e:	2bff      	cmp	r3, #255	@ 0xff
 80083a0:	d01f      	beq.n	80083e2 <USBD_StdEPReq+0x1c6>
 80083a2:	7b7b      	ldrb	r3, [r7, #13]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d11c      	bne.n	80083e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80083a8:	7b7a      	ldrb	r2, [r7, #13]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80083b0:	7b7a      	ldrb	r2, [r7, #13]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	32ae      	adds	r2, #174	@ 0xae
 80083b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d010      	beq.n	80083e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083c0:	7b7a      	ldrb	r2, [r7, #13]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	32ae      	adds	r2, #174	@ 0xae
 80083c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80083d6:	e004      	b.n	80083e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fc03 	bl	8008be6 <USBD_CtlError>
              break;
 80083e0:	e000      	b.n	80083e4 <USBD_StdEPReq+0x1c8>
              break;
 80083e2:	bf00      	nop
          }
          break;
 80083e4:	e0ab      	b.n	800853e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d002      	beq.n	80083f8 <USBD_StdEPReq+0x1dc>
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d032      	beq.n	800845c <USBD_StdEPReq+0x240>
 80083f6:	e097      	b.n	8008528 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <USBD_StdEPReq+0x1f2>
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b80      	cmp	r3, #128	@ 0x80
 8008402:	d004      	beq.n	800840e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fbed 	bl	8008be6 <USBD_CtlError>
                break;
 800840c:	e091      	b.n	8008532 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800840e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008412:	2b00      	cmp	r3, #0
 8008414:	da0b      	bge.n	800842e <USBD_StdEPReq+0x212>
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	3310      	adds	r3, #16
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	3304      	adds	r3, #4
 800842c:	e00b      	b.n	8008446 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	4413      	add	r3, r2
 8008444:	3304      	adds	r3, #4
 8008446:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2202      	movs	r2, #2
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fc37 	bl	8008cc8 <USBD_CtlSendData>
              break;
 800845a:	e06a      	b.n	8008532 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800845c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008460:	2b00      	cmp	r3, #0
 8008462:	da11      	bge.n	8008488 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	f003 020f 	and.w	r2, r3, #15
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	3324      	adds	r3, #36	@ 0x24
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d117      	bne.n	80084ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fbb0 	bl	8008be6 <USBD_CtlError>
                  break;
 8008486:	e054      	b.n	8008532 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	f003 020f 	and.w	r2, r3, #15
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fb9d 	bl	8008be6 <USBD_CtlError>
                  break;
 80084ac:	e041      	b.n	8008532 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da0b      	bge.n	80084ce <USBD_StdEPReq+0x2b2>
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	3310      	adds	r3, #16
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	4413      	add	r3, r2
 80084ca:	3304      	adds	r3, #4
 80084cc:	e00b      	b.n	80084e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	3304      	adds	r3, #4
 80084e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <USBD_StdEPReq+0x2d8>
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b80      	cmp	r3, #128	@ 0x80
 80084f2:	d103      	bne.n	80084fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e00e      	b.n	800851a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 f883 	bl	800960c <USBD_LL_IsStallEP>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2201      	movs	r2, #1
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	e002      	b.n	800851a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2202      	movs	r2, #2
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fbd1 	bl	8008cc8 <USBD_CtlSendData>
              break;
 8008526:	e004      	b.n	8008532 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fb5b 	bl	8008be6 <USBD_CtlError>
              break;
 8008530:	bf00      	nop
          }
          break;
 8008532:	e004      	b.n	800853e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fb55 	bl	8008be6 <USBD_CtlError>
          break;
 800853c:	bf00      	nop
      }
      break;
 800853e:	e005      	b.n	800854c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fb4f 	bl	8008be6 <USBD_CtlError>
      break;
 8008548:	e000      	b.n	800854c <USBD_StdEPReq+0x330>
      break;
 800854a:	bf00      	nop
  }

  return ret;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	0a1b      	lsrs	r3, r3, #8
 8008574:	b29b      	uxth	r3, r3
 8008576:	3b01      	subs	r3, #1
 8008578:	2b06      	cmp	r3, #6
 800857a:	f200 8128 	bhi.w	80087ce <USBD_GetDescriptor+0x276>
 800857e:	a201      	add	r2, pc, #4	@ (adr r2, 8008584 <USBD_GetDescriptor+0x2c>)
 8008580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008584:	080085a1 	.word	0x080085a1
 8008588:	080085b9 	.word	0x080085b9
 800858c:	080085f9 	.word	0x080085f9
 8008590:	080087cf 	.word	0x080087cf
 8008594:	080087cf 	.word	0x080087cf
 8008598:	0800876f 	.word	0x0800876f
 800859c:	0800879b 	.word	0x0800879b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	7c12      	ldrb	r2, [r2, #16]
 80085ac:	f107 0108 	add.w	r1, r7, #8
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	60f8      	str	r0, [r7, #12]
      break;
 80085b6:	e112      	b.n	80087de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7c1b      	ldrb	r3, [r3, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10d      	bne.n	80085dc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c8:	f107 0208 	add.w	r2, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3301      	adds	r3, #1
 80085d6:	2202      	movs	r2, #2
 80085d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085da:	e100      	b.n	80087de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e4:	f107 0208 	add.w	r2, r7, #8
 80085e8:	4610      	mov	r0, r2
 80085ea:	4798      	blx	r3
 80085ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3301      	adds	r3, #1
 80085f2:	2202      	movs	r2, #2
 80085f4:	701a      	strb	r2, [r3, #0]
      break;
 80085f6:	e0f2      	b.n	80087de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b05      	cmp	r3, #5
 8008600:	f200 80ac 	bhi.w	800875c <USBD_GetDescriptor+0x204>
 8008604:	a201      	add	r2, pc, #4	@ (adr r2, 800860c <USBD_GetDescriptor+0xb4>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	08008625 	.word	0x08008625
 8008610:	08008659 	.word	0x08008659
 8008614:	0800868d 	.word	0x0800868d
 8008618:	080086c1 	.word	0x080086c1
 800861c:	080086f5 	.word	0x080086f5
 8008620:	08008729 	.word	0x08008729
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	7c12      	ldrb	r2, [r2, #16]
 800863c:	f107 0108 	add.w	r1, r7, #8
 8008640:	4610      	mov	r0, r2
 8008642:	4798      	blx	r3
 8008644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008646:	e091      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 facb 	bl	8008be6 <USBD_CtlError>
            err++;
 8008650:	7afb      	ldrb	r3, [r7, #11]
 8008652:	3301      	adds	r3, #1
 8008654:	72fb      	strb	r3, [r7, #11]
          break;
 8008656:	e089      	b.n	800876c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	7c12      	ldrb	r2, [r2, #16]
 8008670:	f107 0108 	add.w	r1, r7, #8
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867a:	e077      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fab1 	bl	8008be6 <USBD_CtlError>
            err++;
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	3301      	adds	r3, #1
 8008688:	72fb      	strb	r3, [r7, #11]
          break;
 800868a:	e06f      	b.n	800876c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ae:	e05d      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa97 	bl	8008be6 <USBD_CtlError>
            err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
          break;
 80086be:	e055      	b.n	800876c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e2:	e043      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa7d 	bl	8008be6 <USBD_CtlError>
            err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
          break;
 80086f2:	e03b      	b.n	800876c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008716:	e029      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa63 	bl	8008be6 <USBD_CtlError>
            err++;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	3301      	adds	r3, #1
 8008724:	72fb      	strb	r3, [r7, #11]
          break;
 8008726:	e021      	b.n	800876c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7c12      	ldrb	r2, [r2, #16]
 8008740:	f107 0108 	add.w	r1, r7, #8
 8008744:	4610      	mov	r0, r2
 8008746:	4798      	blx	r3
 8008748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800874a:	e00f      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fa49 	bl	8008be6 <USBD_CtlError>
            err++;
 8008754:	7afb      	ldrb	r3, [r7, #11]
 8008756:	3301      	adds	r3, #1
 8008758:	72fb      	strb	r3, [r7, #11]
          break;
 800875a:	e007      	b.n	800876c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa41 	bl	8008be6 <USBD_CtlError>
          err++;
 8008764:	7afb      	ldrb	r3, [r7, #11]
 8008766:	3301      	adds	r3, #1
 8008768:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800876a:	bf00      	nop
      }
      break;
 800876c:	e037      	b.n	80087de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	7c1b      	ldrb	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d109      	bne.n	800878a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800877c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800877e:	f107 0208 	add.w	r2, r7, #8
 8008782:	4610      	mov	r0, r2
 8008784:	4798      	blx	r3
 8008786:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008788:	e029      	b.n	80087de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa2a 	bl	8008be6 <USBD_CtlError>
        err++;
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	3301      	adds	r3, #1
 8008796:	72fb      	strb	r3, [r7, #11]
      break;
 8008798:	e021      	b.n	80087de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	7c1b      	ldrb	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10d      	bne.n	80087be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087aa:	f107 0208 	add.w	r2, r7, #8
 80087ae:	4610      	mov	r0, r2
 80087b0:	4798      	blx	r3
 80087b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	2207      	movs	r2, #7
 80087ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087bc:	e00f      	b.n	80087de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fa10 	bl	8008be6 <USBD_CtlError>
        err++;
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	3301      	adds	r3, #1
 80087ca:	72fb      	strb	r3, [r7, #11]
      break;
 80087cc:	e007      	b.n	80087de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fa08 	bl	8008be6 <USBD_CtlError>
      err++;
 80087d6:	7afb      	ldrb	r3, [r7, #11]
 80087d8:	3301      	adds	r3, #1
 80087da:	72fb      	strb	r3, [r7, #11]
      break;
 80087dc:	bf00      	nop
  }

  if (err != 0U)
 80087de:	7afb      	ldrb	r3, [r7, #11]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d11e      	bne.n	8008822 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	88db      	ldrh	r3, [r3, #6]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d016      	beq.n	800881a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80087ec:	893b      	ldrh	r3, [r7, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00e      	beq.n	8008810 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	88da      	ldrh	r2, [r3, #6]
 80087f6:	893b      	ldrh	r3, [r7, #8]
 80087f8:	4293      	cmp	r3, r2
 80087fa:	bf28      	it	cs
 80087fc:	4613      	movcs	r3, r2
 80087fe:	b29b      	uxth	r3, r3
 8008800:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008802:	893b      	ldrh	r3, [r7, #8]
 8008804:	461a      	mov	r2, r3
 8008806:	68f9      	ldr	r1, [r7, #12]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fa5d 	bl	8008cc8 <USBD_CtlSendData>
 800880e:	e009      	b.n	8008824 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9e7 	bl	8008be6 <USBD_CtlError>
 8008818:	e004      	b.n	8008824 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 faae 	bl	8008d7c <USBD_CtlSendStatus>
 8008820:	e000      	b.n	8008824 <USBD_GetDescriptor+0x2cc>
    return;
 8008822:	bf00      	nop
  }
}
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop

0800882c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	889b      	ldrh	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d131      	bne.n	80088a2 <USBD_SetAddress+0x76>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	88db      	ldrh	r3, [r3, #6]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d12d      	bne.n	80088a2 <USBD_SetAddress+0x76>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	2b7f      	cmp	r3, #127	@ 0x7f
 800884c:	d829      	bhi.n	80088a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	885b      	ldrh	r3, [r3, #2]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b03      	cmp	r3, #3
 8008864:	d104      	bne.n	8008870 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f9bc 	bl	8008be6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886e:	e01d      	b.n	80088ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	7bfa      	ldrb	r2, [r7, #15]
 8008874:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fef1 	bl	8009664 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa7a 	bl	8008d7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d004      	beq.n	8008898 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2202      	movs	r2, #2
 8008892:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008896:	e009      	b.n	80088ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a0:	e004      	b.n	80088ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f99e 	bl	8008be6 <USBD_CtlError>
  }
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	4b4e      	ldr	r3, [pc, #312]	@ (8008a04 <USBD_SetConfig+0x150>)
 80088ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088cc:	4b4d      	ldr	r3, [pc, #308]	@ (8008a04 <USBD_SetConfig+0x150>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d905      	bls.n	80088e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f985 	bl	8008be6 <USBD_CtlError>
    return USBD_FAIL;
 80088dc:	2303      	movs	r3, #3
 80088de:	e08c      	b.n	80089fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d002      	beq.n	80088f2 <USBD_SetConfig+0x3e>
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d029      	beq.n	8008944 <USBD_SetConfig+0x90>
 80088f0:	e075      	b.n	80089de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088f2:	4b44      	ldr	r3, [pc, #272]	@ (8008a04 <USBD_SetConfig+0x150>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d020      	beq.n	800893c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80088fa:	4b42      	ldr	r3, [pc, #264]	@ (8008a04 <USBD_SetConfig+0x150>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008904:	4b3f      	ldr	r3, [pc, #252]	@ (8008a04 <USBD_SetConfig+0x150>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fe ffe3 	bl	80078d6 <USBD_SetClassConfig>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d008      	beq.n	800892c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f962 	bl	8008be6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2202      	movs	r2, #2
 8008926:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800892a:	e065      	b.n	80089f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fa25 	bl	8008d7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2203      	movs	r2, #3
 8008936:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800893a:	e05d      	b.n	80089f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fa1d 	bl	8008d7c <USBD_CtlSendStatus>
      break;
 8008942:	e059      	b.n	80089f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008944:	4b2f      	ldr	r3, [pc, #188]	@ (8008a04 <USBD_SetConfig+0x150>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d112      	bne.n	8008972 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008954:	4b2b      	ldr	r3, [pc, #172]	@ (8008a04 <USBD_SetConfig+0x150>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	461a      	mov	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800895e:	4b29      	ldr	r3, [pc, #164]	@ (8008a04 <USBD_SetConfig+0x150>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7fe ffd2 	bl	800790e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa06 	bl	8008d7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008970:	e042      	b.n	80089f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008972:	4b24      	ldr	r3, [pc, #144]	@ (8008a04 <USBD_SetConfig+0x150>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	429a      	cmp	r2, r3
 800897e:	d02a      	beq.n	80089d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7fe ffc0 	bl	800790e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800898e:	4b1d      	ldr	r3, [pc, #116]	@ (8008a04 <USBD_SetConfig+0x150>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008998:	4b1a      	ldr	r3, [pc, #104]	@ (8008a04 <USBD_SetConfig+0x150>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7fe ff99 	bl	80078d6 <USBD_SetClassConfig>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00f      	beq.n	80089ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f918 	bl	8008be6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7fe ffa5 	bl	800790e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80089cc:	e014      	b.n	80089f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9d4 	bl	8008d7c <USBD_CtlSendStatus>
      break;
 80089d4:	e010      	b.n	80089f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f9d0 	bl	8008d7c <USBD_CtlSendStatus>
      break;
 80089dc:	e00c      	b.n	80089f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f900 	bl	8008be6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089e6:	4b07      	ldr	r3, [pc, #28]	@ (8008a04 <USBD_SetConfig+0x150>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7fe ff8e 	bl	800790e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089f2:	2303      	movs	r3, #3
 80089f4:	73fb      	strb	r3, [r7, #15]
      break;
 80089f6:	bf00      	nop
  }

  return ret;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20003338 	.word	0x20003338

08008a08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	88db      	ldrh	r3, [r3, #6]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d004      	beq.n	8008a24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f8e2 	bl	8008be6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a22:	e023      	b.n	8008a6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	dc02      	bgt.n	8008a36 <USBD_GetConfig+0x2e>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc03      	bgt.n	8008a3c <USBD_GetConfig+0x34>
 8008a34:	e015      	b.n	8008a62 <USBD_GetConfig+0x5a>
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d00b      	beq.n	8008a52 <USBD_GetConfig+0x4a>
 8008a3a:	e012      	b.n	8008a62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3308      	adds	r3, #8
 8008a46:	2201      	movs	r2, #1
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f93c 	bl	8008cc8 <USBD_CtlSendData>
        break;
 8008a50:	e00c      	b.n	8008a6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3304      	adds	r3, #4
 8008a56:	2201      	movs	r2, #1
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f934 	bl	8008cc8 <USBD_CtlSendData>
        break;
 8008a60:	e004      	b.n	8008a6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f8be 	bl	8008be6 <USBD_CtlError>
        break;
 8008a6a:	bf00      	nop
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	3b01      	subs	r3, #1
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d81e      	bhi.n	8008aca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	88db      	ldrh	r3, [r3, #6]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d004      	beq.n	8008a9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f8a5 	bl	8008be6 <USBD_CtlError>
        break;
 8008a9c:	e01a      	b.n	8008ad4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d005      	beq.n	8008aba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f043 0202 	orr.w	r2, r3, #2
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	330c      	adds	r3, #12
 8008abe:	2202      	movs	r2, #2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f900 	bl	8008cc8 <USBD_CtlSendData>
      break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f88a 	bl	8008be6 <USBD_CtlError>
      break;
 8008ad2:	bf00      	nop
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	885b      	ldrh	r3, [r3, #2]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d107      	bne.n	8008afe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f940 	bl	8008d7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008afc:	e013      	b.n	8008b26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	885b      	ldrh	r3, [r3, #2]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d10b      	bne.n	8008b1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	889b      	ldrh	r3, [r3, #4]
 8008b0a:	0a1b      	lsrs	r3, r3, #8
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f930 	bl	8008d7c <USBD_CtlSendStatus>
}
 8008b1c:	e003      	b.n	8008b26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f860 	bl	8008be6 <USBD_CtlError>
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	3b01      	subs	r3, #1
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d80b      	bhi.n	8008b5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d10c      	bne.n	8008b68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f910 	bl	8008d7c <USBD_CtlSendStatus>
      }
      break;
 8008b5c:	e004      	b.n	8008b68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f840 	bl	8008be6 <USBD_CtlError>
      break;
 8008b66:	e000      	b.n	8008b6a <USBD_ClrFeature+0x3c>
      break;
 8008b68:	bf00      	nop
  }
}
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	781a      	ldrb	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7ff fa40 	bl	8008022 <SWAPBYTE>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3301      	adds	r3, #1
 8008bae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f7ff fa33 	bl	8008022 <SWAPBYTE>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff fa26 	bl	8008022 <SWAPBYTE>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	80da      	strh	r2, [r3, #6]
}
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bf0:	2180      	movs	r1, #128	@ 0x80
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fccc 	bl	8009590 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fcc8 	bl	8009590 <USBD_LL_StallEP>
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d036      	beq.n	8008c8c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c22:	6938      	ldr	r0, [r7, #16]
 8008c24:	f000 f836 	bl	8008c94 <USBD_GetLen>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	3301      	adds	r3, #1
 8008c46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	2203      	movs	r2, #3
 8008c50:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	3301      	adds	r3, #1
 8008c56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c58:	e013      	b.n	8008c82 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	4413      	add	r3, r2
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]
    idx++;
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	4413      	add	r3, r2
 8008c78:	2200      	movs	r2, #0
 8008c7a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e7      	bne.n	8008c5a <USBD_GetString+0x52>
 8008c8a:	e000      	b.n	8008c8e <USBD_GetString+0x86>
    return;
 8008c8c:	bf00      	nop
  }
}
 8008c8e:	3718      	adds	r7, #24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ca4:	e005      	b.n	8008cb2 <USBD_GetLen+0x1e>
  {
    len++;
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1f5      	bne.n	8008ca6 <USBD_GetLen+0x12>
  }

  return len;
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	2100      	movs	r1, #0
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 fcd7 	bl	80096a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	2100      	movs	r1, #0
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fcc6 	bl	80096a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2203      	movs	r2, #3
 8008d30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	2100      	movs	r1, #0
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 fcca 	bl	80096e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 fcb9 	bl	80096e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2204      	movs	r2, #4
 8008d88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2100      	movs	r1, #0
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fc85 	bl	80096a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2205      	movs	r2, #5
 8008dae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008db2:	2300      	movs	r3, #0
 8008db4:	2200      	movs	r2, #0
 8008db6:	2100      	movs	r1, #0
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fc93 	bl	80096e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	4912      	ldr	r1, [pc, #72]	@ (8008e18 <MX_USB_DEVICE_Init+0x50>)
 8008dd0:	4812      	ldr	r0, [pc, #72]	@ (8008e1c <MX_USB_DEVICE_Init+0x54>)
 8008dd2:	f7fe fd03 	bl	80077dc <USBD_Init>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ddc:	f7f8 f810 	bl	8000e00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008de0:	490f      	ldr	r1, [pc, #60]	@ (8008e20 <MX_USB_DEVICE_Init+0x58>)
 8008de2:	480e      	ldr	r0, [pc, #56]	@ (8008e1c <MX_USB_DEVICE_Init+0x54>)
 8008de4:	f7fe fd2a 	bl	800783c <USBD_RegisterClass>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008dee:	f7f8 f807 	bl	8000e00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008df2:	490c      	ldr	r1, [pc, #48]	@ (8008e24 <MX_USB_DEVICE_Init+0x5c>)
 8008df4:	4809      	ldr	r0, [pc, #36]	@ (8008e1c <MX_USB_DEVICE_Init+0x54>)
 8008df6:	f7fe fc21 	bl	800763c <USBD_CDC_RegisterInterface>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e00:	f7f7 fffe 	bl	8000e00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e04:	4805      	ldr	r0, [pc, #20]	@ (8008e1c <MX_USB_DEVICE_Init+0x54>)
 8008e06:	f7fe fd4f 	bl	80078a8 <USBD_Start>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e10:	f7f7 fff6 	bl	8000e00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e14:	bf00      	nop
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	200000dc 	.word	0x200000dc
 8008e1c:	2000333c 	.word	0x2000333c
 8008e20:	20000048 	.word	0x20000048
 8008e24:	200000c8 	.word	0x200000c8

08008e28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4905      	ldr	r1, [pc, #20]	@ (8008e44 <CDC_Init_FS+0x1c>)
 8008e30:	4805      	ldr	r0, [pc, #20]	@ (8008e48 <CDC_Init_FS+0x20>)
 8008e32:	f7fe fc1d 	bl	8007670 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e36:	4905      	ldr	r1, [pc, #20]	@ (8008e4c <CDC_Init_FS+0x24>)
 8008e38:	4803      	ldr	r0, [pc, #12]	@ (8008e48 <CDC_Init_FS+0x20>)
 8008e3a:	f7fe fc3b 	bl	80076b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20003a18 	.word	0x20003a18
 8008e48:	2000333c 	.word	0x2000333c
 8008e4c:	20003618 	.word	0x20003618

08008e50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e50:	b480      	push	{r7}
 8008e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	6039      	str	r1, [r7, #0]
 8008e6a:	71fb      	strb	r3, [r7, #7]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b23      	cmp	r3, #35	@ 0x23
 8008e74:	d84a      	bhi.n	8008f0c <CDC_Control_FS+0xac>
 8008e76:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <CDC_Control_FS+0x1c>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008f0d 	.word	0x08008f0d
 8008e80:	08008f0d 	.word	0x08008f0d
 8008e84:	08008f0d 	.word	0x08008f0d
 8008e88:	08008f0d 	.word	0x08008f0d
 8008e8c:	08008f0d 	.word	0x08008f0d
 8008e90:	08008f0d 	.word	0x08008f0d
 8008e94:	08008f0d 	.word	0x08008f0d
 8008e98:	08008f0d 	.word	0x08008f0d
 8008e9c:	08008f0d 	.word	0x08008f0d
 8008ea0:	08008f0d 	.word	0x08008f0d
 8008ea4:	08008f0d 	.word	0x08008f0d
 8008ea8:	08008f0d 	.word	0x08008f0d
 8008eac:	08008f0d 	.word	0x08008f0d
 8008eb0:	08008f0d 	.word	0x08008f0d
 8008eb4:	08008f0d 	.word	0x08008f0d
 8008eb8:	08008f0d 	.word	0x08008f0d
 8008ebc:	08008f0d 	.word	0x08008f0d
 8008ec0:	08008f0d 	.word	0x08008f0d
 8008ec4:	08008f0d 	.word	0x08008f0d
 8008ec8:	08008f0d 	.word	0x08008f0d
 8008ecc:	08008f0d 	.word	0x08008f0d
 8008ed0:	08008f0d 	.word	0x08008f0d
 8008ed4:	08008f0d 	.word	0x08008f0d
 8008ed8:	08008f0d 	.word	0x08008f0d
 8008edc:	08008f0d 	.word	0x08008f0d
 8008ee0:	08008f0d 	.word	0x08008f0d
 8008ee4:	08008f0d 	.word	0x08008f0d
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08008f0d 	.word	0x08008f0d
 8008ef0:	08008f0d 	.word	0x08008f0d
 8008ef4:	08008f0d 	.word	0x08008f0d
 8008ef8:	08008f0d 	.word	0x08008f0d
 8008efc:	08008f0d 	.word	0x08008f0d
 8008f00:	08008f0d 	.word	0x08008f0d
 8008f04:	08008f0d 	.word	0x08008f0d
 8008f08:	08008f0d 	.word	0x08008f0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f0c:	bf00      	nop
  }

  return (USBD_OK);
 8008f0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4808      	ldr	r0, [pc, #32]	@ (8008f4c <CDC_Receive_FS+0x30>)
 8008f2a:	f7fe fbc3 	bl	80076b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f2e:	4807      	ldr	r0, [pc, #28]	@ (8008f4c <CDC_Receive_FS+0x30>)
 8008f30:	f7fe fc1e 	bl	8007770 <USBD_CDC_ReceivePacket>
  CDCReceiveCallback(Buf, *Len);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7f7 fee6 	bl	8000d0c <CDCReceiveCallback>
  return (USBD_OK);
 8008f40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	2000333c 	.word	0x2000333c

08008f50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f60:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <CDC_Transmit_FS+0x48>)
 8008f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e00b      	b.n	8008f8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f76:	887b      	ldrh	r3, [r7, #2]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	4806      	ldr	r0, [pc, #24]	@ (8008f98 <CDC_Transmit_FS+0x48>)
 8008f7e:	f7fe fb77 	bl	8007670 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f82:	4805      	ldr	r0, [pc, #20]	@ (8008f98 <CDC_Transmit_FS+0x48>)
 8008f84:	f7fe fbb4 	bl	80076f0 <USBD_CDC_TransmitPacket>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	2000333c 	.word	0x2000333c

08008f9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	6039      	str	r1, [r7, #0]
 8008fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2212      	movs	r2, #18
 8008fd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fd2:	4b03      	ldr	r3, [pc, #12]	@ (8008fe0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	200000f8 	.word	0x200000f8

08008fe4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	6039      	str	r1, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2204      	movs	r2, #4
 8008ff4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	@ (8009004 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	2000010c 	.word	0x2000010c

08009008 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	6039      	str	r1, [r7, #0]
 8009012:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d105      	bne.n	8009026 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	4907      	ldr	r1, [pc, #28]	@ (800903c <USBD_FS_ProductStrDescriptor+0x34>)
 800901e:	4808      	ldr	r0, [pc, #32]	@ (8009040 <USBD_FS_ProductStrDescriptor+0x38>)
 8009020:	f7ff fdf2 	bl	8008c08 <USBD_GetString>
 8009024:	e004      	b.n	8009030 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	4904      	ldr	r1, [pc, #16]	@ (800903c <USBD_FS_ProductStrDescriptor+0x34>)
 800902a:	4805      	ldr	r0, [pc, #20]	@ (8009040 <USBD_FS_ProductStrDescriptor+0x38>)
 800902c:	f7ff fdec 	bl	8008c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009030:	4b02      	ldr	r3, [pc, #8]	@ (800903c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20003e18 	.word	0x20003e18
 8009040:	0800a240 	.word	0x0800a240

08009044 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	6039      	str	r1, [r7, #0]
 800904e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	4904      	ldr	r1, [pc, #16]	@ (8009064 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009054:	4804      	ldr	r0, [pc, #16]	@ (8009068 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009056:	f7ff fdd7 	bl	8008c08 <USBD_GetString>
  return USBD_StrDesc;
 800905a:	4b02      	ldr	r3, [pc, #8]	@ (8009064 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20003e18 	.word	0x20003e18
 8009068:	0800a258 	.word	0x0800a258

0800906c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	221a      	movs	r2, #26
 800907c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800907e:	f000 f843 	bl	8009108 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009082:	4b02      	ldr	r3, [pc, #8]	@ (800908c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	20000110 	.word	0x20000110

08009090 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d105      	bne.n	80090ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	4907      	ldr	r1, [pc, #28]	@ (80090c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090a6:	4808      	ldr	r0, [pc, #32]	@ (80090c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090a8:	f7ff fdae 	bl	8008c08 <USBD_GetString>
 80090ac:	e004      	b.n	80090b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	4904      	ldr	r1, [pc, #16]	@ (80090c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090b2:	4805      	ldr	r0, [pc, #20]	@ (80090c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090b4:	f7ff fda8 	bl	8008c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090b8:	4b02      	ldr	r3, [pc, #8]	@ (80090c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20003e18 	.word	0x20003e18
 80090c8:	0800a26c 	.word	0x0800a26c

080090cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d105      	bne.n	80090ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4907      	ldr	r1, [pc, #28]	@ (8009100 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090e2:	4808      	ldr	r0, [pc, #32]	@ (8009104 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090e4:	f7ff fd90 	bl	8008c08 <USBD_GetString>
 80090e8:	e004      	b.n	80090f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	4904      	ldr	r1, [pc, #16]	@ (8009100 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ee:	4805      	ldr	r0, [pc, #20]	@ (8009104 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090f0:	f7ff fd8a 	bl	8008c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090f4:	4b02      	ldr	r3, [pc, #8]	@ (8009100 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20003e18 	.word	0x20003e18
 8009104:	0800a278 	.word	0x0800a278

08009108 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4413      	add	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d009      	beq.n	8009130 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800911c:	2208      	movs	r2, #8
 800911e:	4906      	ldr	r1, [pc, #24]	@ (8009138 <Get_SerialNum+0x30>)
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 f80d 	bl	8009140 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009126:	2204      	movs	r2, #4
 8009128:	4904      	ldr	r1, [pc, #16]	@ (800913c <Get_SerialNum+0x34>)
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f808 	bl	8009140 <IntToUnicode>
  }
}
 8009130:	bf00      	nop
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	20000112 	.word	0x20000112
 800913c:	20000122 	.word	0x20000122

08009140 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	4613      	mov	r3, r2
 800914c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009152:	2300      	movs	r3, #0
 8009154:	75fb      	strb	r3, [r7, #23]
 8009156:	e027      	b.n	80091a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	0f1b      	lsrs	r3, r3, #28
 800915c:	2b09      	cmp	r3, #9
 800915e:	d80b      	bhi.n	8009178 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	0f1b      	lsrs	r3, r3, #28
 8009164:	b2da      	uxtb	r2, r3
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	005b      	lsls	r3, r3, #1
 800916a:	4619      	mov	r1, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	440b      	add	r3, r1
 8009170:	3230      	adds	r2, #48	@ 0x30
 8009172:	b2d2      	uxtb	r2, r2
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	e00a      	b.n	800918e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	0f1b      	lsrs	r3, r3, #28
 800917c:	b2da      	uxtb	r2, r3
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	4619      	mov	r1, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	440b      	add	r3, r1
 8009188:	3237      	adds	r2, #55	@ 0x37
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009194:	7dfb      	ldrb	r3, [r7, #23]
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	3301      	adds	r3, #1
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	4413      	add	r3, r2
 800919e:	2200      	movs	r2, #0
 80091a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	3301      	adds	r3, #1
 80091a6:	75fb      	strb	r3, [r7, #23]
 80091a8:	7dfa      	ldrb	r2, [r7, #23]
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d3d3      	bcc.n	8009158 <IntToUnicode+0x18>
  }
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	371c      	adds	r7, #28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
	...

080091c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08a      	sub	sp, #40	@ 0x28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091c8:	f107 0314 	add.w	r3, r7, #20
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	605a      	str	r2, [r3, #4]
 80091d2:	609a      	str	r2, [r3, #8]
 80091d4:	60da      	str	r2, [r3, #12]
 80091d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091e0:	d13a      	bne.n	8009258 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091e2:	2300      	movs	r3, #0
 80091e4:	613b      	str	r3, [r7, #16]
 80091e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009260 <HAL_PCD_MspInit+0xa0>)
 80091e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ea:	4a1d      	ldr	r2, [pc, #116]	@ (8009260 <HAL_PCD_MspInit+0xa0>)
 80091ec:	f043 0301 	orr.w	r3, r3, #1
 80091f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80091f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009260 <HAL_PCD_MspInit+0xa0>)
 80091f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	613b      	str	r3, [r7, #16]
 80091fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80091fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009204:	2302      	movs	r3, #2
 8009206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009208:	2300      	movs	r3, #0
 800920a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800920c:	2303      	movs	r3, #3
 800920e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009210:	230a      	movs	r3, #10
 8009212:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009214:	f107 0314 	add.w	r3, r7, #20
 8009218:	4619      	mov	r1, r3
 800921a:	4812      	ldr	r0, [pc, #72]	@ (8009264 <HAL_PCD_MspInit+0xa4>)
 800921c:	f7f9 f940 	bl	80024a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009220:	4b0f      	ldr	r3, [pc, #60]	@ (8009260 <HAL_PCD_MspInit+0xa0>)
 8009222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009224:	4a0e      	ldr	r2, [pc, #56]	@ (8009260 <HAL_PCD_MspInit+0xa0>)
 8009226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800922a:	6353      	str	r3, [r2, #52]	@ 0x34
 800922c:	2300      	movs	r3, #0
 800922e:	60fb      	str	r3, [r7, #12]
 8009230:	4b0b      	ldr	r3, [pc, #44]	@ (8009260 <HAL_PCD_MspInit+0xa0>)
 8009232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009234:	4a0a      	ldr	r2, [pc, #40]	@ (8009260 <HAL_PCD_MspInit+0xa0>)
 8009236:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800923a:	6453      	str	r3, [r2, #68]	@ 0x44
 800923c:	4b08      	ldr	r3, [pc, #32]	@ (8009260 <HAL_PCD_MspInit+0xa0>)
 800923e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009248:	2200      	movs	r2, #0
 800924a:	2100      	movs	r1, #0
 800924c:	2043      	movs	r0, #67	@ 0x43
 800924e:	f7f8 fd80 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009252:	2043      	movs	r0, #67	@ 0x43
 8009254:	f7f8 fd99 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009258:	bf00      	nop
 800925a:	3728      	adds	r7, #40	@ 0x28
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	40023800 	.word	0x40023800
 8009264:	40020000 	.word	0x40020000

08009268 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800927c:	4619      	mov	r1, r3
 800927e:	4610      	mov	r0, r2
 8009280:	f7fe fb5f 	bl	8007942 <USBD_LL_SetupStage>
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800929e:	78fa      	ldrb	r2, [r7, #3]
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	4613      	mov	r3, r2
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	4413      	add	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	440b      	add	r3, r1
 80092ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	78fb      	ldrb	r3, [r7, #3]
 80092b4:	4619      	mov	r1, r3
 80092b6:	f7fe fb99 	bl	80079ec <USBD_LL_DataOutStage>
}
 80092ba:	bf00      	nop
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	460b      	mov	r3, r1
 80092cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80092d4:	78fa      	ldrb	r2, [r7, #3]
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4613      	mov	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	3320      	adds	r3, #32
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	78fb      	ldrb	r3, [r7, #3]
 80092e8:	4619      	mov	r1, r3
 80092ea:	f7fe fc32 	bl	8007b52 <USBD_LL_DataInStage>
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009304:	4618      	mov	r0, r3
 8009306:	f7fe fd6c 	bl	8007de2 <USBD_LL_SOF>
}
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800931a:	2301      	movs	r3, #1
 800931c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	79db      	ldrb	r3, [r3, #7]
 8009322:	2b02      	cmp	r3, #2
 8009324:	d001      	beq.n	800932a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009326:	f7f7 fd6b 	bl	8000e00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009330:	7bfa      	ldrb	r2, [r7, #15]
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fd10 	bl	8007d5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe fcb8 	bl	8007cb6 <USBD_LL_Reset>
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe fd0b 	bl	8007d7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	6812      	ldr	r2, [r2, #0]
 8009372:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009376:	f043 0301 	orr.w	r3, r3, #1
 800937a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	7adb      	ldrb	r3, [r3, #11]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d005      	beq.n	8009390 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009384:	4b04      	ldr	r3, [pc, #16]	@ (8009398 <HAL_PCD_SuspendCallback+0x48>)
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	4a03      	ldr	r2, [pc, #12]	@ (8009398 <HAL_PCD_SuspendCallback+0x48>)
 800938a:	f043 0306 	orr.w	r3, r3, #6
 800938e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	e000ed00 	.word	0xe000ed00

0800939c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fd01 	bl	8007db2 <USBD_LL_Resume>
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093ca:	78fa      	ldrb	r2, [r7, #3]
 80093cc:	4611      	mov	r1, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fd59 	bl	8007e86 <USBD_LL_IsoOUTIncomplete>
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093ee:	78fa      	ldrb	r2, [r7, #3]
 80093f0:	4611      	mov	r1, r2
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fd15 	bl	8007e22 <USBD_LL_IsoINIncomplete>
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe fd6b 	bl	8007eea <USBD_LL_DevConnected>
}
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fd68 	bl	8007f00 <USBD_LL_DevDisconnected>
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d13c      	bne.n	80094c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009448:	4a20      	ldr	r2, [pc, #128]	@ (80094cc <USBD_LL_Init+0x94>)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a1e      	ldr	r2, [pc, #120]	@ (80094cc <USBD_LL_Init+0x94>)
 8009454:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009458:	4b1c      	ldr	r3, [pc, #112]	@ (80094cc <USBD_LL_Init+0x94>)
 800945a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800945e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009460:	4b1a      	ldr	r3, [pc, #104]	@ (80094cc <USBD_LL_Init+0x94>)
 8009462:	2204      	movs	r2, #4
 8009464:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009466:	4b19      	ldr	r3, [pc, #100]	@ (80094cc <USBD_LL_Init+0x94>)
 8009468:	2202      	movs	r2, #2
 800946a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800946c:	4b17      	ldr	r3, [pc, #92]	@ (80094cc <USBD_LL_Init+0x94>)
 800946e:	2200      	movs	r2, #0
 8009470:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009472:	4b16      	ldr	r3, [pc, #88]	@ (80094cc <USBD_LL_Init+0x94>)
 8009474:	2202      	movs	r2, #2
 8009476:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009478:	4b14      	ldr	r3, [pc, #80]	@ (80094cc <USBD_LL_Init+0x94>)
 800947a:	2200      	movs	r2, #0
 800947c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800947e:	4b13      	ldr	r3, [pc, #76]	@ (80094cc <USBD_LL_Init+0x94>)
 8009480:	2200      	movs	r2, #0
 8009482:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009484:	4b11      	ldr	r3, [pc, #68]	@ (80094cc <USBD_LL_Init+0x94>)
 8009486:	2200      	movs	r2, #0
 8009488:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800948a:	4b10      	ldr	r3, [pc, #64]	@ (80094cc <USBD_LL_Init+0x94>)
 800948c:	2200      	movs	r2, #0
 800948e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009490:	4b0e      	ldr	r3, [pc, #56]	@ (80094cc <USBD_LL_Init+0x94>)
 8009492:	2200      	movs	r2, #0
 8009494:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009496:	480d      	ldr	r0, [pc, #52]	@ (80094cc <USBD_LL_Init+0x94>)
 8009498:	f7f9 f986 	bl	80027a8 <HAL_PCD_Init>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094a2:	f7f7 fcad 	bl	8000e00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094a6:	2180      	movs	r1, #128	@ 0x80
 80094a8:	4808      	ldr	r0, [pc, #32]	@ (80094cc <USBD_LL_Init+0x94>)
 80094aa:	f7fa fbb0 	bl	8003c0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094ae:	2240      	movs	r2, #64	@ 0x40
 80094b0:	2100      	movs	r1, #0
 80094b2:	4806      	ldr	r0, [pc, #24]	@ (80094cc <USBD_LL_Init+0x94>)
 80094b4:	f7fa fb64 	bl	8003b80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094b8:	2280      	movs	r2, #128	@ 0x80
 80094ba:	2101      	movs	r1, #1
 80094bc:	4803      	ldr	r0, [pc, #12]	@ (80094cc <USBD_LL_Init+0x94>)
 80094be:	f7fa fb5f 	bl	8003b80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20004018 	.word	0x20004018

080094d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f9 fa6d 	bl	80029c6 <HAL_PCD_Start>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f942 	bl	800977c <USBD_Get_USB_Status>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	4608      	mov	r0, r1
 8009510:	4611      	mov	r1, r2
 8009512:	461a      	mov	r2, r3
 8009514:	4603      	mov	r3, r0
 8009516:	70fb      	strb	r3, [r7, #3]
 8009518:	460b      	mov	r3, r1
 800951a:	70bb      	strb	r3, [r7, #2]
 800951c:	4613      	mov	r3, r2
 800951e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800952e:	78bb      	ldrb	r3, [r7, #2]
 8009530:	883a      	ldrh	r2, [r7, #0]
 8009532:	78f9      	ldrb	r1, [r7, #3]
 8009534:	f7f9 ff41 	bl	80033ba <HAL_PCD_EP_Open>
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f91c 	bl	800977c <USBD_Get_USB_Status>
 8009544:	4603      	mov	r3, r0
 8009546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009548:	7bbb      	ldrb	r3, [r7, #14]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	4611      	mov	r1, r2
 8009570:	4618      	mov	r0, r3
 8009572:	f7f9 ff8a 	bl	800348a <HAL_PCD_EP_Close>
 8009576:	4603      	mov	r3, r0
 8009578:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 f8fd 	bl	800977c <USBD_Get_USB_Status>
 8009582:	4603      	mov	r3, r0
 8009584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009586:	7bbb      	ldrb	r3, [r7, #14]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	4611      	mov	r1, r2
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fa f842 	bl	8003638 <HAL_PCD_EP_SetStall>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f8de 	bl	800977c <USBD_Get_USB_Status>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095e8:	78fa      	ldrb	r2, [r7, #3]
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fa f886 	bl	80036fe <HAL_PCD_EP_ClrStall>
 80095f2:	4603      	mov	r3, r0
 80095f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 f8bf 	bl	800977c <USBD_Get_USB_Status>
 80095fe:	4603      	mov	r3, r0
 8009600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009602:	7bbb      	ldrb	r3, [r7, #14]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800961e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009624:	2b00      	cmp	r3, #0
 8009626:	da0b      	bge.n	8009640 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	4613      	mov	r3, r2
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	440b      	add	r3, r1
 800963a:	3316      	adds	r3, #22
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	e00b      	b.n	8009658 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009646:	68f9      	ldr	r1, [r7, #12]
 8009648:	4613      	mov	r3, r2
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	440b      	add	r3, r1
 8009652:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009656:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800967e:	78fa      	ldrb	r2, [r7, #3]
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f7f9 fe75 	bl	8003372 <HAL_PCD_SetAddress>
 8009688:	4603      	mov	r3, r0
 800968a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	4618      	mov	r0, r3
 8009690:	f000 f874 	bl	800977c <USBD_Get_USB_Status>
 8009694:	4603      	mov	r3, r0
 8009696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009698:	7bbb      	ldrb	r3, [r7, #14]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b086      	sub	sp, #24
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	603b      	str	r3, [r7, #0]
 80096ae:	460b      	mov	r3, r1
 80096b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096c0:	7af9      	ldrb	r1, [r7, #11]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	f7f9 ff7d 	bl	80035c4 <HAL_PCD_EP_Transmit>
 80096ca:	4603      	mov	r3, r0
 80096cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f853 	bl	800977c <USBD_Get_USB_Status>
 80096d6:	4603      	mov	r3, r0
 80096d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096da:	7dbb      	ldrb	r3, [r7, #22]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	607a      	str	r2, [r7, #4]
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	460b      	mov	r3, r1
 80096f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009702:	7af9      	ldrb	r1, [r7, #11]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	f7f9 ff09 	bl	800351e <HAL_PCD_EP_Receive>
 800970c:	4603      	mov	r3, r0
 800970e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f832 	bl	800977c <USBD_Get_USB_Status>
 8009718:	4603      	mov	r3, r0
 800971a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800971c:	7dbb      	ldrb	r3, [r7, #22]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009738:	78fa      	ldrb	r2, [r7, #3]
 800973a:	4611      	mov	r1, r2
 800973c:	4618      	mov	r0, r3
 800973e:	f7f9 ff29 	bl	8003594 <HAL_PCD_EP_GetRxCount>
 8009742:	4603      	mov	r3, r0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009754:	4b03      	ldr	r3, [pc, #12]	@ (8009764 <USBD_static_malloc+0x18>)
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	200044fc 	.word	0x200044fc

08009768 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]

}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	2b03      	cmp	r3, #3
 800978e:	d817      	bhi.n	80097c0 <USBD_Get_USB_Status+0x44>
 8009790:	a201      	add	r2, pc, #4	@ (adr r2, 8009798 <USBD_Get_USB_Status+0x1c>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097a9 	.word	0x080097a9
 800979c:	080097af 	.word	0x080097af
 80097a0:	080097b5 	.word	0x080097b5
 80097a4:	080097bb 	.word	0x080097bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
    break;
 80097ac:	e00b      	b.n	80097c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097ae:	2303      	movs	r3, #3
 80097b0:	73fb      	strb	r3, [r7, #15]
    break;
 80097b2:	e008      	b.n	80097c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
    break;
 80097b8:	e005      	b.n	80097c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097ba:	2303      	movs	r3, #3
 80097bc:	73fb      	strb	r3, [r7, #15]
    break;
 80097be:	e002      	b.n	80097c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097c0:	2303      	movs	r3, #3
 80097c2:	73fb      	strb	r3, [r7, #15]
    break;
 80097c4:	bf00      	nop
  }
  return usb_status;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <sniprintf>:
 80097d4:	b40c      	push	{r2, r3}
 80097d6:	b530      	push	{r4, r5, lr}
 80097d8:	4b17      	ldr	r3, [pc, #92]	@ (8009838 <sniprintf+0x64>)
 80097da:	1e0c      	subs	r4, r1, #0
 80097dc:	681d      	ldr	r5, [r3, #0]
 80097de:	b09d      	sub	sp, #116	@ 0x74
 80097e0:	da08      	bge.n	80097f4 <sniprintf+0x20>
 80097e2:	238b      	movs	r3, #139	@ 0x8b
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ea:	b01d      	add	sp, #116	@ 0x74
 80097ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097f0:	b002      	add	sp, #8
 80097f2:	4770      	bx	lr
 80097f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80097f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80097fc:	bf14      	ite	ne
 80097fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009802:	4623      	moveq	r3, r4
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	9307      	str	r3, [sp, #28]
 8009808:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800980c:	9002      	str	r0, [sp, #8]
 800980e:	9006      	str	r0, [sp, #24]
 8009810:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009814:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009816:	ab21      	add	r3, sp, #132	@ 0x84
 8009818:	a902      	add	r1, sp, #8
 800981a:	4628      	mov	r0, r5
 800981c:	9301      	str	r3, [sp, #4]
 800981e:	f000 f9b5 	bl	8009b8c <_svfiprintf_r>
 8009822:	1c43      	adds	r3, r0, #1
 8009824:	bfbc      	itt	lt
 8009826:	238b      	movlt	r3, #139	@ 0x8b
 8009828:	602b      	strlt	r3, [r5, #0]
 800982a:	2c00      	cmp	r4, #0
 800982c:	d0dd      	beq.n	80097ea <sniprintf+0x16>
 800982e:	9b02      	ldr	r3, [sp, #8]
 8009830:	2200      	movs	r2, #0
 8009832:	701a      	strb	r2, [r3, #0]
 8009834:	e7d9      	b.n	80097ea <sniprintf+0x16>
 8009836:	bf00      	nop
 8009838:	2000012c 	.word	0x2000012c

0800983c <memset>:
 800983c:	4402      	add	r2, r0
 800983e:	4603      	mov	r3, r0
 8009840:	4293      	cmp	r3, r2
 8009842:	d100      	bne.n	8009846 <memset+0xa>
 8009844:	4770      	bx	lr
 8009846:	f803 1b01 	strb.w	r1, [r3], #1
 800984a:	e7f9      	b.n	8009840 <memset+0x4>

0800984c <strncmp>:
 800984c:	b510      	push	{r4, lr}
 800984e:	b16a      	cbz	r2, 800986c <strncmp+0x20>
 8009850:	3901      	subs	r1, #1
 8009852:	1884      	adds	r4, r0, r2
 8009854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009858:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800985c:	429a      	cmp	r2, r3
 800985e:	d103      	bne.n	8009868 <strncmp+0x1c>
 8009860:	42a0      	cmp	r0, r4
 8009862:	d001      	beq.n	8009868 <strncmp+0x1c>
 8009864:	2a00      	cmp	r2, #0
 8009866:	d1f5      	bne.n	8009854 <strncmp+0x8>
 8009868:	1ad0      	subs	r0, r2, r3
 800986a:	bd10      	pop	{r4, pc}
 800986c:	4610      	mov	r0, r2
 800986e:	e7fc      	b.n	800986a <strncmp+0x1e>

08009870 <__errno>:
 8009870:	4b01      	ldr	r3, [pc, #4]	@ (8009878 <__errno+0x8>)
 8009872:	6818      	ldr	r0, [r3, #0]
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	2000012c 	.word	0x2000012c

0800987c <__libc_init_array>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	4d0d      	ldr	r5, [pc, #52]	@ (80098b4 <__libc_init_array+0x38>)
 8009880:	4c0d      	ldr	r4, [pc, #52]	@ (80098b8 <__libc_init_array+0x3c>)
 8009882:	1b64      	subs	r4, r4, r5
 8009884:	10a4      	asrs	r4, r4, #2
 8009886:	2600      	movs	r6, #0
 8009888:	42a6      	cmp	r6, r4
 800988a:	d109      	bne.n	80098a0 <__libc_init_array+0x24>
 800988c:	4d0b      	ldr	r5, [pc, #44]	@ (80098bc <__libc_init_array+0x40>)
 800988e:	4c0c      	ldr	r4, [pc, #48]	@ (80098c0 <__libc_init_array+0x44>)
 8009890:	f000 fc66 	bl	800a160 <_init>
 8009894:	1b64      	subs	r4, r4, r5
 8009896:	10a4      	asrs	r4, r4, #2
 8009898:	2600      	movs	r6, #0
 800989a:	42a6      	cmp	r6, r4
 800989c:	d105      	bne.n	80098aa <__libc_init_array+0x2e>
 800989e:	bd70      	pop	{r4, r5, r6, pc}
 80098a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a4:	4798      	blx	r3
 80098a6:	3601      	adds	r6, #1
 80098a8:	e7ee      	b.n	8009888 <__libc_init_array+0xc>
 80098aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ae:	4798      	blx	r3
 80098b0:	3601      	adds	r6, #1
 80098b2:	e7f2      	b.n	800989a <__libc_init_array+0x1e>
 80098b4:	0800a2dc 	.word	0x0800a2dc
 80098b8:	0800a2dc 	.word	0x0800a2dc
 80098bc:	0800a2dc 	.word	0x0800a2dc
 80098c0:	0800a2e0 	.word	0x0800a2e0

080098c4 <__retarget_lock_acquire_recursive>:
 80098c4:	4770      	bx	lr

080098c6 <__retarget_lock_release_recursive>:
 80098c6:	4770      	bx	lr

080098c8 <memcpy>:
 80098c8:	440a      	add	r2, r1
 80098ca:	4291      	cmp	r1, r2
 80098cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098d0:	d100      	bne.n	80098d4 <memcpy+0xc>
 80098d2:	4770      	bx	lr
 80098d4:	b510      	push	{r4, lr}
 80098d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098de:	4291      	cmp	r1, r2
 80098e0:	d1f9      	bne.n	80098d6 <memcpy+0xe>
 80098e2:	bd10      	pop	{r4, pc}

080098e4 <_free_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4605      	mov	r5, r0
 80098e8:	2900      	cmp	r1, #0
 80098ea:	d041      	beq.n	8009970 <_free_r+0x8c>
 80098ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f0:	1f0c      	subs	r4, r1, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	bfb8      	it	lt
 80098f6:	18e4      	addlt	r4, r4, r3
 80098f8:	f000 f8e0 	bl	8009abc <__malloc_lock>
 80098fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009974 <_free_r+0x90>)
 80098fe:	6813      	ldr	r3, [r2, #0]
 8009900:	b933      	cbnz	r3, 8009910 <_free_r+0x2c>
 8009902:	6063      	str	r3, [r4, #4]
 8009904:	6014      	str	r4, [r2, #0]
 8009906:	4628      	mov	r0, r5
 8009908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800990c:	f000 b8dc 	b.w	8009ac8 <__malloc_unlock>
 8009910:	42a3      	cmp	r3, r4
 8009912:	d908      	bls.n	8009926 <_free_r+0x42>
 8009914:	6820      	ldr	r0, [r4, #0]
 8009916:	1821      	adds	r1, r4, r0
 8009918:	428b      	cmp	r3, r1
 800991a:	bf01      	itttt	eq
 800991c:	6819      	ldreq	r1, [r3, #0]
 800991e:	685b      	ldreq	r3, [r3, #4]
 8009920:	1809      	addeq	r1, r1, r0
 8009922:	6021      	streq	r1, [r4, #0]
 8009924:	e7ed      	b.n	8009902 <_free_r+0x1e>
 8009926:	461a      	mov	r2, r3
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	b10b      	cbz	r3, 8009930 <_free_r+0x4c>
 800992c:	42a3      	cmp	r3, r4
 800992e:	d9fa      	bls.n	8009926 <_free_r+0x42>
 8009930:	6811      	ldr	r1, [r2, #0]
 8009932:	1850      	adds	r0, r2, r1
 8009934:	42a0      	cmp	r0, r4
 8009936:	d10b      	bne.n	8009950 <_free_r+0x6c>
 8009938:	6820      	ldr	r0, [r4, #0]
 800993a:	4401      	add	r1, r0
 800993c:	1850      	adds	r0, r2, r1
 800993e:	4283      	cmp	r3, r0
 8009940:	6011      	str	r1, [r2, #0]
 8009942:	d1e0      	bne.n	8009906 <_free_r+0x22>
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	6053      	str	r3, [r2, #4]
 800994a:	4408      	add	r0, r1
 800994c:	6010      	str	r0, [r2, #0]
 800994e:	e7da      	b.n	8009906 <_free_r+0x22>
 8009950:	d902      	bls.n	8009958 <_free_r+0x74>
 8009952:	230c      	movs	r3, #12
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	e7d6      	b.n	8009906 <_free_r+0x22>
 8009958:	6820      	ldr	r0, [r4, #0]
 800995a:	1821      	adds	r1, r4, r0
 800995c:	428b      	cmp	r3, r1
 800995e:	bf04      	itt	eq
 8009960:	6819      	ldreq	r1, [r3, #0]
 8009962:	685b      	ldreq	r3, [r3, #4]
 8009964:	6063      	str	r3, [r4, #4]
 8009966:	bf04      	itt	eq
 8009968:	1809      	addeq	r1, r1, r0
 800996a:	6021      	streq	r1, [r4, #0]
 800996c:	6054      	str	r4, [r2, #4]
 800996e:	e7ca      	b.n	8009906 <_free_r+0x22>
 8009970:	bd38      	pop	{r3, r4, r5, pc}
 8009972:	bf00      	nop
 8009974:	20004860 	.word	0x20004860

08009978 <sbrk_aligned>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	4e0f      	ldr	r6, [pc, #60]	@ (80099b8 <sbrk_aligned+0x40>)
 800997c:	460c      	mov	r4, r1
 800997e:	6831      	ldr	r1, [r6, #0]
 8009980:	4605      	mov	r5, r0
 8009982:	b911      	cbnz	r1, 800998a <sbrk_aligned+0x12>
 8009984:	f000 fba6 	bl	800a0d4 <_sbrk_r>
 8009988:	6030      	str	r0, [r6, #0]
 800998a:	4621      	mov	r1, r4
 800998c:	4628      	mov	r0, r5
 800998e:	f000 fba1 	bl	800a0d4 <_sbrk_r>
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	d103      	bne.n	800999e <sbrk_aligned+0x26>
 8009996:	f04f 34ff 	mov.w	r4, #4294967295
 800999a:	4620      	mov	r0, r4
 800999c:	bd70      	pop	{r4, r5, r6, pc}
 800999e:	1cc4      	adds	r4, r0, #3
 80099a0:	f024 0403 	bic.w	r4, r4, #3
 80099a4:	42a0      	cmp	r0, r4
 80099a6:	d0f8      	beq.n	800999a <sbrk_aligned+0x22>
 80099a8:	1a21      	subs	r1, r4, r0
 80099aa:	4628      	mov	r0, r5
 80099ac:	f000 fb92 	bl	800a0d4 <_sbrk_r>
 80099b0:	3001      	adds	r0, #1
 80099b2:	d1f2      	bne.n	800999a <sbrk_aligned+0x22>
 80099b4:	e7ef      	b.n	8009996 <sbrk_aligned+0x1e>
 80099b6:	bf00      	nop
 80099b8:	2000485c 	.word	0x2000485c

080099bc <_malloc_r>:
 80099bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c0:	1ccd      	adds	r5, r1, #3
 80099c2:	f025 0503 	bic.w	r5, r5, #3
 80099c6:	3508      	adds	r5, #8
 80099c8:	2d0c      	cmp	r5, #12
 80099ca:	bf38      	it	cc
 80099cc:	250c      	movcc	r5, #12
 80099ce:	2d00      	cmp	r5, #0
 80099d0:	4606      	mov	r6, r0
 80099d2:	db01      	blt.n	80099d8 <_malloc_r+0x1c>
 80099d4:	42a9      	cmp	r1, r5
 80099d6:	d904      	bls.n	80099e2 <_malloc_r+0x26>
 80099d8:	230c      	movs	r3, #12
 80099da:	6033      	str	r3, [r6, #0]
 80099dc:	2000      	movs	r0, #0
 80099de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ab8 <_malloc_r+0xfc>
 80099e6:	f000 f869 	bl	8009abc <__malloc_lock>
 80099ea:	f8d8 3000 	ldr.w	r3, [r8]
 80099ee:	461c      	mov	r4, r3
 80099f0:	bb44      	cbnz	r4, 8009a44 <_malloc_r+0x88>
 80099f2:	4629      	mov	r1, r5
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7ff ffbf 	bl	8009978 <sbrk_aligned>
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	4604      	mov	r4, r0
 80099fe:	d158      	bne.n	8009ab2 <_malloc_r+0xf6>
 8009a00:	f8d8 4000 	ldr.w	r4, [r8]
 8009a04:	4627      	mov	r7, r4
 8009a06:	2f00      	cmp	r7, #0
 8009a08:	d143      	bne.n	8009a92 <_malloc_r+0xd6>
 8009a0a:	2c00      	cmp	r4, #0
 8009a0c:	d04b      	beq.n	8009aa6 <_malloc_r+0xea>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	4639      	mov	r1, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	eb04 0903 	add.w	r9, r4, r3
 8009a18:	f000 fb5c 	bl	800a0d4 <_sbrk_r>
 8009a1c:	4581      	cmp	r9, r0
 8009a1e:	d142      	bne.n	8009aa6 <_malloc_r+0xea>
 8009a20:	6821      	ldr	r1, [r4, #0]
 8009a22:	1a6d      	subs	r5, r5, r1
 8009a24:	4629      	mov	r1, r5
 8009a26:	4630      	mov	r0, r6
 8009a28:	f7ff ffa6 	bl	8009978 <sbrk_aligned>
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	d03a      	beq.n	8009aa6 <_malloc_r+0xea>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	442b      	add	r3, r5
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	f8d8 3000 	ldr.w	r3, [r8]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	bb62      	cbnz	r2, 8009a98 <_malloc_r+0xdc>
 8009a3e:	f8c8 7000 	str.w	r7, [r8]
 8009a42:	e00f      	b.n	8009a64 <_malloc_r+0xa8>
 8009a44:	6822      	ldr	r2, [r4, #0]
 8009a46:	1b52      	subs	r2, r2, r5
 8009a48:	d420      	bmi.n	8009a8c <_malloc_r+0xd0>
 8009a4a:	2a0b      	cmp	r2, #11
 8009a4c:	d917      	bls.n	8009a7e <_malloc_r+0xc2>
 8009a4e:	1961      	adds	r1, r4, r5
 8009a50:	42a3      	cmp	r3, r4
 8009a52:	6025      	str	r5, [r4, #0]
 8009a54:	bf18      	it	ne
 8009a56:	6059      	strne	r1, [r3, #4]
 8009a58:	6863      	ldr	r3, [r4, #4]
 8009a5a:	bf08      	it	eq
 8009a5c:	f8c8 1000 	streq.w	r1, [r8]
 8009a60:	5162      	str	r2, [r4, r5]
 8009a62:	604b      	str	r3, [r1, #4]
 8009a64:	4630      	mov	r0, r6
 8009a66:	f000 f82f 	bl	8009ac8 <__malloc_unlock>
 8009a6a:	f104 000b 	add.w	r0, r4, #11
 8009a6e:	1d23      	adds	r3, r4, #4
 8009a70:	f020 0007 	bic.w	r0, r0, #7
 8009a74:	1ac2      	subs	r2, r0, r3
 8009a76:	bf1c      	itt	ne
 8009a78:	1a1b      	subne	r3, r3, r0
 8009a7a:	50a3      	strne	r3, [r4, r2]
 8009a7c:	e7af      	b.n	80099de <_malloc_r+0x22>
 8009a7e:	6862      	ldr	r2, [r4, #4]
 8009a80:	42a3      	cmp	r3, r4
 8009a82:	bf0c      	ite	eq
 8009a84:	f8c8 2000 	streq.w	r2, [r8]
 8009a88:	605a      	strne	r2, [r3, #4]
 8009a8a:	e7eb      	b.n	8009a64 <_malloc_r+0xa8>
 8009a8c:	4623      	mov	r3, r4
 8009a8e:	6864      	ldr	r4, [r4, #4]
 8009a90:	e7ae      	b.n	80099f0 <_malloc_r+0x34>
 8009a92:	463c      	mov	r4, r7
 8009a94:	687f      	ldr	r7, [r7, #4]
 8009a96:	e7b6      	b.n	8009a06 <_malloc_r+0x4a>
 8009a98:	461a      	mov	r2, r3
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	d1fb      	bne.n	8009a98 <_malloc_r+0xdc>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	6053      	str	r3, [r2, #4]
 8009aa4:	e7de      	b.n	8009a64 <_malloc_r+0xa8>
 8009aa6:	230c      	movs	r3, #12
 8009aa8:	6033      	str	r3, [r6, #0]
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f000 f80c 	bl	8009ac8 <__malloc_unlock>
 8009ab0:	e794      	b.n	80099dc <_malloc_r+0x20>
 8009ab2:	6005      	str	r5, [r0, #0]
 8009ab4:	e7d6      	b.n	8009a64 <_malloc_r+0xa8>
 8009ab6:	bf00      	nop
 8009ab8:	20004860 	.word	0x20004860

08009abc <__malloc_lock>:
 8009abc:	4801      	ldr	r0, [pc, #4]	@ (8009ac4 <__malloc_lock+0x8>)
 8009abe:	f7ff bf01 	b.w	80098c4 <__retarget_lock_acquire_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	20004858 	.word	0x20004858

08009ac8 <__malloc_unlock>:
 8009ac8:	4801      	ldr	r0, [pc, #4]	@ (8009ad0 <__malloc_unlock+0x8>)
 8009aca:	f7ff befc 	b.w	80098c6 <__retarget_lock_release_recursive>
 8009ace:	bf00      	nop
 8009ad0:	20004858 	.word	0x20004858

08009ad4 <__ssputs_r>:
 8009ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad8:	688e      	ldr	r6, [r1, #8]
 8009ada:	461f      	mov	r7, r3
 8009adc:	42be      	cmp	r6, r7
 8009ade:	680b      	ldr	r3, [r1, #0]
 8009ae0:	4682      	mov	sl, r0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	4690      	mov	r8, r2
 8009ae6:	d82d      	bhi.n	8009b44 <__ssputs_r+0x70>
 8009ae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009aec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009af0:	d026      	beq.n	8009b40 <__ssputs_r+0x6c>
 8009af2:	6965      	ldr	r5, [r4, #20]
 8009af4:	6909      	ldr	r1, [r1, #16]
 8009af6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009afa:	eba3 0901 	sub.w	r9, r3, r1
 8009afe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b02:	1c7b      	adds	r3, r7, #1
 8009b04:	444b      	add	r3, r9
 8009b06:	106d      	asrs	r5, r5, #1
 8009b08:	429d      	cmp	r5, r3
 8009b0a:	bf38      	it	cc
 8009b0c:	461d      	movcc	r5, r3
 8009b0e:	0553      	lsls	r3, r2, #21
 8009b10:	d527      	bpl.n	8009b62 <__ssputs_r+0x8e>
 8009b12:	4629      	mov	r1, r5
 8009b14:	f7ff ff52 	bl	80099bc <_malloc_r>
 8009b18:	4606      	mov	r6, r0
 8009b1a:	b360      	cbz	r0, 8009b76 <__ssputs_r+0xa2>
 8009b1c:	6921      	ldr	r1, [r4, #16]
 8009b1e:	464a      	mov	r2, r9
 8009b20:	f7ff fed2 	bl	80098c8 <memcpy>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	6126      	str	r6, [r4, #16]
 8009b32:	6165      	str	r5, [r4, #20]
 8009b34:	444e      	add	r6, r9
 8009b36:	eba5 0509 	sub.w	r5, r5, r9
 8009b3a:	6026      	str	r6, [r4, #0]
 8009b3c:	60a5      	str	r5, [r4, #8]
 8009b3e:	463e      	mov	r6, r7
 8009b40:	42be      	cmp	r6, r7
 8009b42:	d900      	bls.n	8009b46 <__ssputs_r+0x72>
 8009b44:	463e      	mov	r6, r7
 8009b46:	6820      	ldr	r0, [r4, #0]
 8009b48:	4632      	mov	r2, r6
 8009b4a:	4641      	mov	r1, r8
 8009b4c:	f000 faa8 	bl	800a0a0 <memmove>
 8009b50:	68a3      	ldr	r3, [r4, #8]
 8009b52:	1b9b      	subs	r3, r3, r6
 8009b54:	60a3      	str	r3, [r4, #8]
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	4433      	add	r3, r6
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b62:	462a      	mov	r2, r5
 8009b64:	f000 fac6 	bl	800a0f4 <_realloc_r>
 8009b68:	4606      	mov	r6, r0
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d1e0      	bne.n	8009b30 <__ssputs_r+0x5c>
 8009b6e:	6921      	ldr	r1, [r4, #16]
 8009b70:	4650      	mov	r0, sl
 8009b72:	f7ff feb7 	bl	80098e4 <_free_r>
 8009b76:	230c      	movs	r3, #12
 8009b78:	f8ca 3000 	str.w	r3, [sl]
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b82:	81a3      	strh	r3, [r4, #12]
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	e7e9      	b.n	8009b5e <__ssputs_r+0x8a>
	...

08009b8c <_svfiprintf_r>:
 8009b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	4698      	mov	r8, r3
 8009b92:	898b      	ldrh	r3, [r1, #12]
 8009b94:	061b      	lsls	r3, r3, #24
 8009b96:	b09d      	sub	sp, #116	@ 0x74
 8009b98:	4607      	mov	r7, r0
 8009b9a:	460d      	mov	r5, r1
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	d510      	bpl.n	8009bc2 <_svfiprintf_r+0x36>
 8009ba0:	690b      	ldr	r3, [r1, #16]
 8009ba2:	b973      	cbnz	r3, 8009bc2 <_svfiprintf_r+0x36>
 8009ba4:	2140      	movs	r1, #64	@ 0x40
 8009ba6:	f7ff ff09 	bl	80099bc <_malloc_r>
 8009baa:	6028      	str	r0, [r5, #0]
 8009bac:	6128      	str	r0, [r5, #16]
 8009bae:	b930      	cbnz	r0, 8009bbe <_svfiprintf_r+0x32>
 8009bb0:	230c      	movs	r3, #12
 8009bb2:	603b      	str	r3, [r7, #0]
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb8:	b01d      	add	sp, #116	@ 0x74
 8009bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbe:	2340      	movs	r3, #64	@ 0x40
 8009bc0:	616b      	str	r3, [r5, #20]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc6:	2320      	movs	r3, #32
 8009bc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bd0:	2330      	movs	r3, #48	@ 0x30
 8009bd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d70 <_svfiprintf_r+0x1e4>
 8009bd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bda:	f04f 0901 	mov.w	r9, #1
 8009bde:	4623      	mov	r3, r4
 8009be0:	469a      	mov	sl, r3
 8009be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009be6:	b10a      	cbz	r2, 8009bec <_svfiprintf_r+0x60>
 8009be8:	2a25      	cmp	r2, #37	@ 0x25
 8009bea:	d1f9      	bne.n	8009be0 <_svfiprintf_r+0x54>
 8009bec:	ebba 0b04 	subs.w	fp, sl, r4
 8009bf0:	d00b      	beq.n	8009c0a <_svfiprintf_r+0x7e>
 8009bf2:	465b      	mov	r3, fp
 8009bf4:	4622      	mov	r2, r4
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	f7ff ff6b 	bl	8009ad4 <__ssputs_r>
 8009bfe:	3001      	adds	r0, #1
 8009c00:	f000 80a7 	beq.w	8009d52 <_svfiprintf_r+0x1c6>
 8009c04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c06:	445a      	add	r2, fp
 8009c08:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 809f 	beq.w	8009d52 <_svfiprintf_r+0x1c6>
 8009c14:	2300      	movs	r3, #0
 8009c16:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c1e:	f10a 0a01 	add.w	sl, sl, #1
 8009c22:	9304      	str	r3, [sp, #16]
 8009c24:	9307      	str	r3, [sp, #28]
 8009c26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c2c:	4654      	mov	r4, sl
 8009c2e:	2205      	movs	r2, #5
 8009c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c34:	484e      	ldr	r0, [pc, #312]	@ (8009d70 <_svfiprintf_r+0x1e4>)
 8009c36:	f7f6 fad3 	bl	80001e0 <memchr>
 8009c3a:	9a04      	ldr	r2, [sp, #16]
 8009c3c:	b9d8      	cbnz	r0, 8009c76 <_svfiprintf_r+0xea>
 8009c3e:	06d0      	lsls	r0, r2, #27
 8009c40:	bf44      	itt	mi
 8009c42:	2320      	movmi	r3, #32
 8009c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c48:	0711      	lsls	r1, r2, #28
 8009c4a:	bf44      	itt	mi
 8009c4c:	232b      	movmi	r3, #43	@ 0x2b
 8009c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c52:	f89a 3000 	ldrb.w	r3, [sl]
 8009c56:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c58:	d015      	beq.n	8009c86 <_svfiprintf_r+0xfa>
 8009c5a:	9a07      	ldr	r2, [sp, #28]
 8009c5c:	4654      	mov	r4, sl
 8009c5e:	2000      	movs	r0, #0
 8009c60:	f04f 0c0a 	mov.w	ip, #10
 8009c64:	4621      	mov	r1, r4
 8009c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c6a:	3b30      	subs	r3, #48	@ 0x30
 8009c6c:	2b09      	cmp	r3, #9
 8009c6e:	d94b      	bls.n	8009d08 <_svfiprintf_r+0x17c>
 8009c70:	b1b0      	cbz	r0, 8009ca0 <_svfiprintf_r+0x114>
 8009c72:	9207      	str	r2, [sp, #28]
 8009c74:	e014      	b.n	8009ca0 <_svfiprintf_r+0x114>
 8009c76:	eba0 0308 	sub.w	r3, r0, r8
 8009c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	9304      	str	r3, [sp, #16]
 8009c82:	46a2      	mov	sl, r4
 8009c84:	e7d2      	b.n	8009c2c <_svfiprintf_r+0xa0>
 8009c86:	9b03      	ldr	r3, [sp, #12]
 8009c88:	1d19      	adds	r1, r3, #4
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	9103      	str	r1, [sp, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bfbb      	ittet	lt
 8009c92:	425b      	neglt	r3, r3
 8009c94:	f042 0202 	orrlt.w	r2, r2, #2
 8009c98:	9307      	strge	r3, [sp, #28]
 8009c9a:	9307      	strlt	r3, [sp, #28]
 8009c9c:	bfb8      	it	lt
 8009c9e:	9204      	strlt	r2, [sp, #16]
 8009ca0:	7823      	ldrb	r3, [r4, #0]
 8009ca2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ca4:	d10a      	bne.n	8009cbc <_svfiprintf_r+0x130>
 8009ca6:	7863      	ldrb	r3, [r4, #1]
 8009ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009caa:	d132      	bne.n	8009d12 <_svfiprintf_r+0x186>
 8009cac:	9b03      	ldr	r3, [sp, #12]
 8009cae:	1d1a      	adds	r2, r3, #4
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	9203      	str	r2, [sp, #12]
 8009cb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cb8:	3402      	adds	r4, #2
 8009cba:	9305      	str	r3, [sp, #20]
 8009cbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d80 <_svfiprintf_r+0x1f4>
 8009cc0:	7821      	ldrb	r1, [r4, #0]
 8009cc2:	2203      	movs	r2, #3
 8009cc4:	4650      	mov	r0, sl
 8009cc6:	f7f6 fa8b 	bl	80001e0 <memchr>
 8009cca:	b138      	cbz	r0, 8009cdc <_svfiprintf_r+0x150>
 8009ccc:	9b04      	ldr	r3, [sp, #16]
 8009cce:	eba0 000a 	sub.w	r0, r0, sl
 8009cd2:	2240      	movs	r2, #64	@ 0x40
 8009cd4:	4082      	lsls	r2, r0
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	3401      	adds	r4, #1
 8009cda:	9304      	str	r3, [sp, #16]
 8009cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce0:	4824      	ldr	r0, [pc, #144]	@ (8009d74 <_svfiprintf_r+0x1e8>)
 8009ce2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ce6:	2206      	movs	r2, #6
 8009ce8:	f7f6 fa7a 	bl	80001e0 <memchr>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d036      	beq.n	8009d5e <_svfiprintf_r+0x1d2>
 8009cf0:	4b21      	ldr	r3, [pc, #132]	@ (8009d78 <_svfiprintf_r+0x1ec>)
 8009cf2:	bb1b      	cbnz	r3, 8009d3c <_svfiprintf_r+0x1b0>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	3307      	adds	r3, #7
 8009cf8:	f023 0307 	bic.w	r3, r3, #7
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	9303      	str	r3, [sp, #12]
 8009d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d02:	4433      	add	r3, r6
 8009d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d06:	e76a      	b.n	8009bde <_svfiprintf_r+0x52>
 8009d08:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d0c:	460c      	mov	r4, r1
 8009d0e:	2001      	movs	r0, #1
 8009d10:	e7a8      	b.n	8009c64 <_svfiprintf_r+0xd8>
 8009d12:	2300      	movs	r3, #0
 8009d14:	3401      	adds	r4, #1
 8009d16:	9305      	str	r3, [sp, #20]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	f04f 0c0a 	mov.w	ip, #10
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d24:	3a30      	subs	r2, #48	@ 0x30
 8009d26:	2a09      	cmp	r2, #9
 8009d28:	d903      	bls.n	8009d32 <_svfiprintf_r+0x1a6>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0c6      	beq.n	8009cbc <_svfiprintf_r+0x130>
 8009d2e:	9105      	str	r1, [sp, #20]
 8009d30:	e7c4      	b.n	8009cbc <_svfiprintf_r+0x130>
 8009d32:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d36:	4604      	mov	r4, r0
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e7f0      	b.n	8009d1e <_svfiprintf_r+0x192>
 8009d3c:	ab03      	add	r3, sp, #12
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	462a      	mov	r2, r5
 8009d42:	4b0e      	ldr	r3, [pc, #56]	@ (8009d7c <_svfiprintf_r+0x1f0>)
 8009d44:	a904      	add	r1, sp, #16
 8009d46:	4638      	mov	r0, r7
 8009d48:	f3af 8000 	nop.w
 8009d4c:	1c42      	adds	r2, r0, #1
 8009d4e:	4606      	mov	r6, r0
 8009d50:	d1d6      	bne.n	8009d00 <_svfiprintf_r+0x174>
 8009d52:	89ab      	ldrh	r3, [r5, #12]
 8009d54:	065b      	lsls	r3, r3, #25
 8009d56:	f53f af2d 	bmi.w	8009bb4 <_svfiprintf_r+0x28>
 8009d5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d5c:	e72c      	b.n	8009bb8 <_svfiprintf_r+0x2c>
 8009d5e:	ab03      	add	r3, sp, #12
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	462a      	mov	r2, r5
 8009d64:	4b05      	ldr	r3, [pc, #20]	@ (8009d7c <_svfiprintf_r+0x1f0>)
 8009d66:	a904      	add	r1, sp, #16
 8009d68:	4638      	mov	r0, r7
 8009d6a:	f000 f879 	bl	8009e60 <_printf_i>
 8009d6e:	e7ed      	b.n	8009d4c <_svfiprintf_r+0x1c0>
 8009d70:	0800a2a0 	.word	0x0800a2a0
 8009d74:	0800a2aa 	.word	0x0800a2aa
 8009d78:	00000000 	.word	0x00000000
 8009d7c:	08009ad5 	.word	0x08009ad5
 8009d80:	0800a2a6 	.word	0x0800a2a6

08009d84 <_printf_common>:
 8009d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d88:	4616      	mov	r6, r2
 8009d8a:	4698      	mov	r8, r3
 8009d8c:	688a      	ldr	r2, [r1, #8]
 8009d8e:	690b      	ldr	r3, [r1, #16]
 8009d90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d94:	4293      	cmp	r3, r2
 8009d96:	bfb8      	it	lt
 8009d98:	4613      	movlt	r3, r2
 8009d9a:	6033      	str	r3, [r6, #0]
 8009d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009da0:	4607      	mov	r7, r0
 8009da2:	460c      	mov	r4, r1
 8009da4:	b10a      	cbz	r2, 8009daa <_printf_common+0x26>
 8009da6:	3301      	adds	r3, #1
 8009da8:	6033      	str	r3, [r6, #0]
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	0699      	lsls	r1, r3, #26
 8009dae:	bf42      	ittt	mi
 8009db0:	6833      	ldrmi	r3, [r6, #0]
 8009db2:	3302      	addmi	r3, #2
 8009db4:	6033      	strmi	r3, [r6, #0]
 8009db6:	6825      	ldr	r5, [r4, #0]
 8009db8:	f015 0506 	ands.w	r5, r5, #6
 8009dbc:	d106      	bne.n	8009dcc <_printf_common+0x48>
 8009dbe:	f104 0a19 	add.w	sl, r4, #25
 8009dc2:	68e3      	ldr	r3, [r4, #12]
 8009dc4:	6832      	ldr	r2, [r6, #0]
 8009dc6:	1a9b      	subs	r3, r3, r2
 8009dc8:	42ab      	cmp	r3, r5
 8009dca:	dc26      	bgt.n	8009e1a <_printf_common+0x96>
 8009dcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dd0:	6822      	ldr	r2, [r4, #0]
 8009dd2:	3b00      	subs	r3, #0
 8009dd4:	bf18      	it	ne
 8009dd6:	2301      	movne	r3, #1
 8009dd8:	0692      	lsls	r2, r2, #26
 8009dda:	d42b      	bmi.n	8009e34 <_printf_common+0xb0>
 8009ddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009de0:	4641      	mov	r1, r8
 8009de2:	4638      	mov	r0, r7
 8009de4:	47c8      	blx	r9
 8009de6:	3001      	adds	r0, #1
 8009de8:	d01e      	beq.n	8009e28 <_printf_common+0xa4>
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	6922      	ldr	r2, [r4, #16]
 8009dee:	f003 0306 	and.w	r3, r3, #6
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	bf02      	ittt	eq
 8009df6:	68e5      	ldreq	r5, [r4, #12]
 8009df8:	6833      	ldreq	r3, [r6, #0]
 8009dfa:	1aed      	subeq	r5, r5, r3
 8009dfc:	68a3      	ldr	r3, [r4, #8]
 8009dfe:	bf0c      	ite	eq
 8009e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e04:	2500      	movne	r5, #0
 8009e06:	4293      	cmp	r3, r2
 8009e08:	bfc4      	itt	gt
 8009e0a:	1a9b      	subgt	r3, r3, r2
 8009e0c:	18ed      	addgt	r5, r5, r3
 8009e0e:	2600      	movs	r6, #0
 8009e10:	341a      	adds	r4, #26
 8009e12:	42b5      	cmp	r5, r6
 8009e14:	d11a      	bne.n	8009e4c <_printf_common+0xc8>
 8009e16:	2000      	movs	r0, #0
 8009e18:	e008      	b.n	8009e2c <_printf_common+0xa8>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	4652      	mov	r2, sl
 8009e1e:	4641      	mov	r1, r8
 8009e20:	4638      	mov	r0, r7
 8009e22:	47c8      	blx	r9
 8009e24:	3001      	adds	r0, #1
 8009e26:	d103      	bne.n	8009e30 <_printf_common+0xac>
 8009e28:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e30:	3501      	adds	r5, #1
 8009e32:	e7c6      	b.n	8009dc2 <_printf_common+0x3e>
 8009e34:	18e1      	adds	r1, r4, r3
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	2030      	movs	r0, #48	@ 0x30
 8009e3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e3e:	4422      	add	r2, r4
 8009e40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e48:	3302      	adds	r3, #2
 8009e4a:	e7c7      	b.n	8009ddc <_printf_common+0x58>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	4622      	mov	r2, r4
 8009e50:	4641      	mov	r1, r8
 8009e52:	4638      	mov	r0, r7
 8009e54:	47c8      	blx	r9
 8009e56:	3001      	adds	r0, #1
 8009e58:	d0e6      	beq.n	8009e28 <_printf_common+0xa4>
 8009e5a:	3601      	adds	r6, #1
 8009e5c:	e7d9      	b.n	8009e12 <_printf_common+0x8e>
	...

08009e60 <_printf_i>:
 8009e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e64:	7e0f      	ldrb	r7, [r1, #24]
 8009e66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e68:	2f78      	cmp	r7, #120	@ 0x78
 8009e6a:	4691      	mov	r9, r2
 8009e6c:	4680      	mov	r8, r0
 8009e6e:	460c      	mov	r4, r1
 8009e70:	469a      	mov	sl, r3
 8009e72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e76:	d807      	bhi.n	8009e88 <_printf_i+0x28>
 8009e78:	2f62      	cmp	r7, #98	@ 0x62
 8009e7a:	d80a      	bhi.n	8009e92 <_printf_i+0x32>
 8009e7c:	2f00      	cmp	r7, #0
 8009e7e:	f000 80d2 	beq.w	800a026 <_printf_i+0x1c6>
 8009e82:	2f58      	cmp	r7, #88	@ 0x58
 8009e84:	f000 80b9 	beq.w	8009ffa <_printf_i+0x19a>
 8009e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e90:	e03a      	b.n	8009f08 <_printf_i+0xa8>
 8009e92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e96:	2b15      	cmp	r3, #21
 8009e98:	d8f6      	bhi.n	8009e88 <_printf_i+0x28>
 8009e9a:	a101      	add	r1, pc, #4	@ (adr r1, 8009ea0 <_printf_i+0x40>)
 8009e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ea0:	08009ef9 	.word	0x08009ef9
 8009ea4:	08009f0d 	.word	0x08009f0d
 8009ea8:	08009e89 	.word	0x08009e89
 8009eac:	08009e89 	.word	0x08009e89
 8009eb0:	08009e89 	.word	0x08009e89
 8009eb4:	08009e89 	.word	0x08009e89
 8009eb8:	08009f0d 	.word	0x08009f0d
 8009ebc:	08009e89 	.word	0x08009e89
 8009ec0:	08009e89 	.word	0x08009e89
 8009ec4:	08009e89 	.word	0x08009e89
 8009ec8:	08009e89 	.word	0x08009e89
 8009ecc:	0800a00d 	.word	0x0800a00d
 8009ed0:	08009f37 	.word	0x08009f37
 8009ed4:	08009fc7 	.word	0x08009fc7
 8009ed8:	08009e89 	.word	0x08009e89
 8009edc:	08009e89 	.word	0x08009e89
 8009ee0:	0800a02f 	.word	0x0800a02f
 8009ee4:	08009e89 	.word	0x08009e89
 8009ee8:	08009f37 	.word	0x08009f37
 8009eec:	08009e89 	.word	0x08009e89
 8009ef0:	08009e89 	.word	0x08009e89
 8009ef4:	08009fcf 	.word	0x08009fcf
 8009ef8:	6833      	ldr	r3, [r6, #0]
 8009efa:	1d1a      	adds	r2, r3, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6032      	str	r2, [r6, #0]
 8009f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e09d      	b.n	800a048 <_printf_i+0x1e8>
 8009f0c:	6833      	ldr	r3, [r6, #0]
 8009f0e:	6820      	ldr	r0, [r4, #0]
 8009f10:	1d19      	adds	r1, r3, #4
 8009f12:	6031      	str	r1, [r6, #0]
 8009f14:	0606      	lsls	r6, r0, #24
 8009f16:	d501      	bpl.n	8009f1c <_printf_i+0xbc>
 8009f18:	681d      	ldr	r5, [r3, #0]
 8009f1a:	e003      	b.n	8009f24 <_printf_i+0xc4>
 8009f1c:	0645      	lsls	r5, r0, #25
 8009f1e:	d5fb      	bpl.n	8009f18 <_printf_i+0xb8>
 8009f20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f24:	2d00      	cmp	r5, #0
 8009f26:	da03      	bge.n	8009f30 <_printf_i+0xd0>
 8009f28:	232d      	movs	r3, #45	@ 0x2d
 8009f2a:	426d      	negs	r5, r5
 8009f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f30:	4859      	ldr	r0, [pc, #356]	@ (800a098 <_printf_i+0x238>)
 8009f32:	230a      	movs	r3, #10
 8009f34:	e011      	b.n	8009f5a <_printf_i+0xfa>
 8009f36:	6821      	ldr	r1, [r4, #0]
 8009f38:	6833      	ldr	r3, [r6, #0]
 8009f3a:	0608      	lsls	r0, r1, #24
 8009f3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f40:	d402      	bmi.n	8009f48 <_printf_i+0xe8>
 8009f42:	0649      	lsls	r1, r1, #25
 8009f44:	bf48      	it	mi
 8009f46:	b2ad      	uxthmi	r5, r5
 8009f48:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f4a:	4853      	ldr	r0, [pc, #332]	@ (800a098 <_printf_i+0x238>)
 8009f4c:	6033      	str	r3, [r6, #0]
 8009f4e:	bf14      	ite	ne
 8009f50:	230a      	movne	r3, #10
 8009f52:	2308      	moveq	r3, #8
 8009f54:	2100      	movs	r1, #0
 8009f56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f5a:	6866      	ldr	r6, [r4, #4]
 8009f5c:	60a6      	str	r6, [r4, #8]
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	bfa2      	ittt	ge
 8009f62:	6821      	ldrge	r1, [r4, #0]
 8009f64:	f021 0104 	bicge.w	r1, r1, #4
 8009f68:	6021      	strge	r1, [r4, #0]
 8009f6a:	b90d      	cbnz	r5, 8009f70 <_printf_i+0x110>
 8009f6c:	2e00      	cmp	r6, #0
 8009f6e:	d04b      	beq.n	800a008 <_printf_i+0x1a8>
 8009f70:	4616      	mov	r6, r2
 8009f72:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f76:	fb03 5711 	mls	r7, r3, r1, r5
 8009f7a:	5dc7      	ldrb	r7, [r0, r7]
 8009f7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f80:	462f      	mov	r7, r5
 8009f82:	42bb      	cmp	r3, r7
 8009f84:	460d      	mov	r5, r1
 8009f86:	d9f4      	bls.n	8009f72 <_printf_i+0x112>
 8009f88:	2b08      	cmp	r3, #8
 8009f8a:	d10b      	bne.n	8009fa4 <_printf_i+0x144>
 8009f8c:	6823      	ldr	r3, [r4, #0]
 8009f8e:	07df      	lsls	r7, r3, #31
 8009f90:	d508      	bpl.n	8009fa4 <_printf_i+0x144>
 8009f92:	6923      	ldr	r3, [r4, #16]
 8009f94:	6861      	ldr	r1, [r4, #4]
 8009f96:	4299      	cmp	r1, r3
 8009f98:	bfde      	ittt	le
 8009f9a:	2330      	movle	r3, #48	@ 0x30
 8009f9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fa4:	1b92      	subs	r2, r2, r6
 8009fa6:	6122      	str	r2, [r4, #16]
 8009fa8:	f8cd a000 	str.w	sl, [sp]
 8009fac:	464b      	mov	r3, r9
 8009fae:	aa03      	add	r2, sp, #12
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	f7ff fee6 	bl	8009d84 <_printf_common>
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d14a      	bne.n	800a052 <_printf_i+0x1f2>
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	b004      	add	sp, #16
 8009fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	f043 0320 	orr.w	r3, r3, #32
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	4833      	ldr	r0, [pc, #204]	@ (800a09c <_printf_i+0x23c>)
 8009fd0:	2778      	movs	r7, #120	@ 0x78
 8009fd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	6831      	ldr	r1, [r6, #0]
 8009fda:	061f      	lsls	r7, r3, #24
 8009fdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fe0:	d402      	bmi.n	8009fe8 <_printf_i+0x188>
 8009fe2:	065f      	lsls	r7, r3, #25
 8009fe4:	bf48      	it	mi
 8009fe6:	b2ad      	uxthmi	r5, r5
 8009fe8:	6031      	str	r1, [r6, #0]
 8009fea:	07d9      	lsls	r1, r3, #31
 8009fec:	bf44      	itt	mi
 8009fee:	f043 0320 	orrmi.w	r3, r3, #32
 8009ff2:	6023      	strmi	r3, [r4, #0]
 8009ff4:	b11d      	cbz	r5, 8009ffe <_printf_i+0x19e>
 8009ff6:	2310      	movs	r3, #16
 8009ff8:	e7ac      	b.n	8009f54 <_printf_i+0xf4>
 8009ffa:	4827      	ldr	r0, [pc, #156]	@ (800a098 <_printf_i+0x238>)
 8009ffc:	e7e9      	b.n	8009fd2 <_printf_i+0x172>
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	f023 0320 	bic.w	r3, r3, #32
 800a004:	6023      	str	r3, [r4, #0]
 800a006:	e7f6      	b.n	8009ff6 <_printf_i+0x196>
 800a008:	4616      	mov	r6, r2
 800a00a:	e7bd      	b.n	8009f88 <_printf_i+0x128>
 800a00c:	6833      	ldr	r3, [r6, #0]
 800a00e:	6825      	ldr	r5, [r4, #0]
 800a010:	6961      	ldr	r1, [r4, #20]
 800a012:	1d18      	adds	r0, r3, #4
 800a014:	6030      	str	r0, [r6, #0]
 800a016:	062e      	lsls	r6, r5, #24
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	d501      	bpl.n	800a020 <_printf_i+0x1c0>
 800a01c:	6019      	str	r1, [r3, #0]
 800a01e:	e002      	b.n	800a026 <_printf_i+0x1c6>
 800a020:	0668      	lsls	r0, r5, #25
 800a022:	d5fb      	bpl.n	800a01c <_printf_i+0x1bc>
 800a024:	8019      	strh	r1, [r3, #0]
 800a026:	2300      	movs	r3, #0
 800a028:	6123      	str	r3, [r4, #16]
 800a02a:	4616      	mov	r6, r2
 800a02c:	e7bc      	b.n	8009fa8 <_printf_i+0x148>
 800a02e:	6833      	ldr	r3, [r6, #0]
 800a030:	1d1a      	adds	r2, r3, #4
 800a032:	6032      	str	r2, [r6, #0]
 800a034:	681e      	ldr	r6, [r3, #0]
 800a036:	6862      	ldr	r2, [r4, #4]
 800a038:	2100      	movs	r1, #0
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7f6 f8d0 	bl	80001e0 <memchr>
 800a040:	b108      	cbz	r0, 800a046 <_printf_i+0x1e6>
 800a042:	1b80      	subs	r0, r0, r6
 800a044:	6060      	str	r0, [r4, #4]
 800a046:	6863      	ldr	r3, [r4, #4]
 800a048:	6123      	str	r3, [r4, #16]
 800a04a:	2300      	movs	r3, #0
 800a04c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a050:	e7aa      	b.n	8009fa8 <_printf_i+0x148>
 800a052:	6923      	ldr	r3, [r4, #16]
 800a054:	4632      	mov	r2, r6
 800a056:	4649      	mov	r1, r9
 800a058:	4640      	mov	r0, r8
 800a05a:	47d0      	blx	sl
 800a05c:	3001      	adds	r0, #1
 800a05e:	d0ad      	beq.n	8009fbc <_printf_i+0x15c>
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	079b      	lsls	r3, r3, #30
 800a064:	d413      	bmi.n	800a08e <_printf_i+0x22e>
 800a066:	68e0      	ldr	r0, [r4, #12]
 800a068:	9b03      	ldr	r3, [sp, #12]
 800a06a:	4298      	cmp	r0, r3
 800a06c:	bfb8      	it	lt
 800a06e:	4618      	movlt	r0, r3
 800a070:	e7a6      	b.n	8009fc0 <_printf_i+0x160>
 800a072:	2301      	movs	r3, #1
 800a074:	4632      	mov	r2, r6
 800a076:	4649      	mov	r1, r9
 800a078:	4640      	mov	r0, r8
 800a07a:	47d0      	blx	sl
 800a07c:	3001      	adds	r0, #1
 800a07e:	d09d      	beq.n	8009fbc <_printf_i+0x15c>
 800a080:	3501      	adds	r5, #1
 800a082:	68e3      	ldr	r3, [r4, #12]
 800a084:	9903      	ldr	r1, [sp, #12]
 800a086:	1a5b      	subs	r3, r3, r1
 800a088:	42ab      	cmp	r3, r5
 800a08a:	dcf2      	bgt.n	800a072 <_printf_i+0x212>
 800a08c:	e7eb      	b.n	800a066 <_printf_i+0x206>
 800a08e:	2500      	movs	r5, #0
 800a090:	f104 0619 	add.w	r6, r4, #25
 800a094:	e7f5      	b.n	800a082 <_printf_i+0x222>
 800a096:	bf00      	nop
 800a098:	0800a2b1 	.word	0x0800a2b1
 800a09c:	0800a2c2 	.word	0x0800a2c2

0800a0a0 <memmove>:
 800a0a0:	4288      	cmp	r0, r1
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	eb01 0402 	add.w	r4, r1, r2
 800a0a8:	d902      	bls.n	800a0b0 <memmove+0x10>
 800a0aa:	4284      	cmp	r4, r0
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	d807      	bhi.n	800a0c0 <memmove+0x20>
 800a0b0:	1e43      	subs	r3, r0, #1
 800a0b2:	42a1      	cmp	r1, r4
 800a0b4:	d008      	beq.n	800a0c8 <memmove+0x28>
 800a0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0be:	e7f8      	b.n	800a0b2 <memmove+0x12>
 800a0c0:	4402      	add	r2, r0
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	428a      	cmp	r2, r1
 800a0c6:	d100      	bne.n	800a0ca <memmove+0x2a>
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0d2:	e7f7      	b.n	800a0c4 <memmove+0x24>

0800a0d4 <_sbrk_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d06      	ldr	r5, [pc, #24]	@ (800a0f0 <_sbrk_r+0x1c>)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4604      	mov	r4, r0
 800a0dc:	4608      	mov	r0, r1
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	f7f7 f86c 	bl	80011bc <_sbrk>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_sbrk_r+0x1a>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_sbrk_r+0x1a>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20004854 	.word	0x20004854

0800a0f4 <_realloc_r>:
 800a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f8:	4680      	mov	r8, r0
 800a0fa:	4615      	mov	r5, r2
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	b921      	cbnz	r1, 800a10a <_realloc_r+0x16>
 800a100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a104:	4611      	mov	r1, r2
 800a106:	f7ff bc59 	b.w	80099bc <_malloc_r>
 800a10a:	b92a      	cbnz	r2, 800a118 <_realloc_r+0x24>
 800a10c:	f7ff fbea 	bl	80098e4 <_free_r>
 800a110:	2400      	movs	r4, #0
 800a112:	4620      	mov	r0, r4
 800a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a118:	f000 f81a 	bl	800a150 <_malloc_usable_size_r>
 800a11c:	4285      	cmp	r5, r0
 800a11e:	4606      	mov	r6, r0
 800a120:	d802      	bhi.n	800a128 <_realloc_r+0x34>
 800a122:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a126:	d8f4      	bhi.n	800a112 <_realloc_r+0x1e>
 800a128:	4629      	mov	r1, r5
 800a12a:	4640      	mov	r0, r8
 800a12c:	f7ff fc46 	bl	80099bc <_malloc_r>
 800a130:	4607      	mov	r7, r0
 800a132:	2800      	cmp	r0, #0
 800a134:	d0ec      	beq.n	800a110 <_realloc_r+0x1c>
 800a136:	42b5      	cmp	r5, r6
 800a138:	462a      	mov	r2, r5
 800a13a:	4621      	mov	r1, r4
 800a13c:	bf28      	it	cs
 800a13e:	4632      	movcs	r2, r6
 800a140:	f7ff fbc2 	bl	80098c8 <memcpy>
 800a144:	4621      	mov	r1, r4
 800a146:	4640      	mov	r0, r8
 800a148:	f7ff fbcc 	bl	80098e4 <_free_r>
 800a14c:	463c      	mov	r4, r7
 800a14e:	e7e0      	b.n	800a112 <_realloc_r+0x1e>

0800a150 <_malloc_usable_size_r>:
 800a150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a154:	1f18      	subs	r0, r3, #4
 800a156:	2b00      	cmp	r3, #0
 800a158:	bfbc      	itt	lt
 800a15a:	580b      	ldrlt	r3, [r1, r0]
 800a15c:	18c0      	addlt	r0, r0, r3
 800a15e:	4770      	bx	lr

0800a160 <_init>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	bf00      	nop
 800a164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a166:	bc08      	pop	{r3}
 800a168:	469e      	mov	lr, r3
 800a16a:	4770      	bx	lr

0800a16c <_fini>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	bf00      	nop
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr
