
TCDFunctionTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800a240  0800a240  0000b240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a39c  0800a39c  0000c17c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a39c  0800a39c  0000b39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3a4  0800a3a4  0000c17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3a4  0800a3a4  0000b3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3a8  0800a3a8  0000b3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800a3ac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000075c4  2000017c  0800a528  0000c17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007740  0800a528  0000c740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e7b  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d3  00000000  00000000  00021027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00024700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4a  00000000  00000000  000259b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a361  00000000  00000000  00026802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b7c  00000000  00000000  00040b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b203  00000000  00000000  000586df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f38e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000534c  00000000  00000000  000f3928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f8c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000017c 	.word	0x2000017c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a228 	.word	0x0800a228

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000180 	.word	0x20000180
 80001dc:	0800a228 	.word	0x0800a228

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe9a 	bl	80012ac <HAL_Init>

  /* USER CODE BEGIN Init */
  InitializeHeaderFooter();
 8000578:	f000 fbec 	bl	8000d54 <InitializeHeaderFooter>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f824 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 faf0 	bl	8000b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000584:	f000 face 	bl	8000b24 <MX_DMA_Init>
  MX_TIM2_Init();
 8000588:	f000 f8dc 	bl	8000744 <MX_TIM2_Init>
  MX_TIM3_Init();
 800058c:	f000 f952 	bl	8000834 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000590:	f000 f9c6 	bl	8000920 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000594:	f000 fa36 	bl	8000a04 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000598:	f008 fc7a 	bl	8008e90 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800059c:	f000 f880 	bl	80006a0 <MX_ADC1_Init>
//  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
////  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
//  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH

  if (!start_command_received) {
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <main+0x50>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d108      	bne.n	80005bc <main+0x4c>
  CDC_Transmit_FS((uint8_t*)"Target Ready\r\n",14);
 80005aa:	210e      	movs	r1, #14
 80005ac:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <main+0x54>)
 80005ae:	f008 fd33 	bl	8009018 <CDC_Transmit_FS>
  HAL_Delay(1000);}
 80005b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b6:	f000 feeb 	bl	8001390 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x4c>
 80005c0:	20006208 	.word	0x20006208
 80005c4:	0800a240 	.word	0x0800a240

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	@ 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f009 f994 	bl	8009904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <SystemClock_Config+0xd0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a28      	ldr	r2, [pc, #160]	@ (8000698 <SystemClock_Config+0xd0>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b23      	ldr	r3, [pc, #140]	@ (800069c <SystemClock_Config+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <SystemClock_Config+0xd4>)
 8000616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800063c:	2319      	movs	r3, #25
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000646:	2304      	movs	r3, #4
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fbc8 	bl	8003de8 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065e:	f000 fbd5 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fe2a 	bl	80042d8 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800068a:	f000 fbbf 	bl	8000e0c <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	@ 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b2:	4b22      	ldr	r3, [pc, #136]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006b4:	4a22      	ldr	r2, [pc, #136]	@ (8000740 <MX_ADC1_Init+0xa0>)
 80006b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b8:	4b20      	ldr	r3, [pc, #128]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006da:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006e4:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 80006e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_ADC1_Init+0x9c>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	@ (800073c <MX_ADC1_Init+0x9c>)
 8000706:	f000 fe67 	bl	80013d8 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000710:	f000 fb7c 	bl	8000e0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000714:	2303      	movs	r3, #3
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_ADC1_Init+0x9c>)
 8000726:	f000 fff9 	bl	800171c <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000730:	f000 fb6c 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000198 	.word	0x20000198
 8000740:	40012000 	.word	0x40012000

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	@ 0x38
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]
 8000772:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000774:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_TIM2_Init+0xe8>)
 8000776:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800077a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800077c:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <MX_TIM2_Init+0xe8>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_TIM2_Init+0xe8>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <MX_TIM2_Init+0xe8>)
 800078a:	4a29      	ldr	r2, [pc, #164]	@ (8000830 <MX_TIM2_Init+0xec>)
 800078c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078e:	4b27      	ldr	r3, [pc, #156]	@ (800082c <MX_TIM2_Init+0xe8>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <MX_TIM2_Init+0xe8>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800079a:	4824      	ldr	r0, [pc, #144]	@ (800082c <MX_TIM2_Init+0xe8>)
 800079c:	f003 ff54 	bl	8004648 <HAL_TIM_Base_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80007a6:	f000 fb31 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b4:	4619      	mov	r1, r3
 80007b6:	481d      	ldr	r0, [pc, #116]	@ (800082c <MX_TIM2_Init+0xe8>)
 80007b8:	f004 fb46 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007c2:	f000 fb23 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007c6:	4819      	ldr	r0, [pc, #100]	@ (800082c <MX_TIM2_Init+0xe8>)
 80007c8:	f004 f81f 	bl	800480a <HAL_TIM_PWM_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007d2:	f000 fb1b 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80007d6:	2310      	movs	r3, #16
 80007d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80007da:	2380      	movs	r3, #128	@ 0x80
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4619      	mov	r1, r3
 80007e4:	4811      	ldr	r0, [pc, #68]	@ (800082c <MX_TIM2_Init+0xe8>)
 80007e6:	f004 ffc9 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007f0:	f000 fb0c 	bl	8000e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f4:	2360      	movs	r3, #96	@ 0x60
 80007f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 80007f8:	f242 2373 	movw	r3, #8819	@ 0x2273
 80007fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	@ (800082c <MX_TIM2_Init+0xe8>)
 800080e:	f004 fa59 	bl	8004cc4 <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000818:	f000 faf8 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800081c:	4803      	ldr	r0, [pc, #12]	@ (800082c <MX_TIM2_Init+0xe8>)
 800081e:	f000 fc01 	bl	8001024 <HAL_TIM_MspPostInit>

}
 8000822:	bf00      	nop
 8000824:	3738      	adds	r7, #56	@ 0x38
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000240 	.word	0x20000240
 8000830:	000802c7 	.word	0x000802c7

08000834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	@ 0x38
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000864:	4b2c      	ldr	r3, [pc, #176]	@ (8000918 <MX_TIM3_Init+0xe4>)
 8000866:	4a2d      	ldr	r2, [pc, #180]	@ (800091c <MX_TIM3_Init+0xe8>)
 8000868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800086a:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <MX_TIM3_Init+0xe4>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b29      	ldr	r3, [pc, #164]	@ (8000918 <MX_TIM3_Init+0xe4>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 8000876:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_TIM3_Init+0xe4>)
 8000878:	22a7      	movs	r2, #167	@ 0xa7
 800087a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <MX_TIM3_Init+0xe4>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <MX_TIM3_Init+0xe4>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000888:	4823      	ldr	r0, [pc, #140]	@ (8000918 <MX_TIM3_Init+0xe4>)
 800088a:	f003 fedd 	bl	8004648 <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000894:	f000 faba 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800089e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a2:	4619      	mov	r1, r3
 80008a4:	481c      	ldr	r0, [pc, #112]	@ (8000918 <MX_TIM3_Init+0xe4>)
 80008a6:	f004 facf 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80008b0:	f000 faac 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008b4:	4818      	ldr	r0, [pc, #96]	@ (8000918 <MX_TIM3_Init+0xe4>)
 80008b6:	f003 ffa8 	bl	800480a <HAL_TIM_PWM_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80008c0:	f000 faa4 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4619      	mov	r1, r3
 80008d2:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_TIM3_Init+0xe4>)
 80008d4:	f004 ff52 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80008de:	f000 fa95 	bl	8000e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e2:	2360      	movs	r3, #96	@ 0x60
 80008e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 80008e6:	2353      	movs	r3, #83	@ 0x53
 80008e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <MX_TIM3_Init+0xe4>)
 80008fa:	f004 f9e3 	bl	8004cc4 <HAL_TIM_PWM_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000904:	f000 fa82 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <MX_TIM3_Init+0xe4>)
 800090a:	f000 fb8b 	bl	8001024 <HAL_TIM_MspPostInit>

}
 800090e:	bf00      	nop
 8000910:	3738      	adds	r7, #56	@ 0x38
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000288 	.word	0x20000288
 800091c:	40000400 	.word	0x40000400

08000920 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	@ 0x38
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000950:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000952:	4a2b      	ldr	r2, [pc, #172]	@ (8000a00 <MX_TIM4_Init+0xe0>)
 8000954:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000956:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <MX_TIM4_Init+0xdc>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 8000962:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000964:	22a7      	movs	r2, #167	@ 0xa7
 8000966:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b24      	ldr	r3, [pc, #144]	@ (80009fc <MX_TIM4_Init+0xdc>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000974:	4821      	ldr	r0, [pc, #132]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000976:	f003 fe67 	bl	8004648 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000980:	f000 fa44 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800098a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800098e:	4619      	mov	r1, r3
 8000990:	481a      	ldr	r0, [pc, #104]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000992:	f004 fa59 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800099c:	f000 fa36 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009a0:	4816      	ldr	r0, [pc, #88]	@ (80009fc <MX_TIM4_Init+0xdc>)
 80009a2:	f003 ff32 	bl	800480a <HAL_TIM_PWM_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80009ac:	f000 fa2e 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4619      	mov	r1, r3
 80009be:	480f      	ldr	r0, [pc, #60]	@ (80009fc <MX_TIM4_Init+0xdc>)
 80009c0:	f004 fedc 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80009ca:	f000 fa1f 	bl	8000e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ce:	2360      	movs	r3, #96	@ 0x60
 80009d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 80009d2:	2329      	movs	r3, #41	@ 0x29
 80009d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	220c      	movs	r2, #12
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_TIM4_Init+0xdc>)
 80009e6:	f004 f96d 	bl	8004cc4 <HAL_TIM_PWM_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80009f0:	f000 fa0c 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3738      	adds	r7, #56	@ 0x38
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200002d0 	.word	0x200002d0
 8000a00:	40000800 	.word	0x40000800

08000a04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b092      	sub	sp, #72	@ 0x48
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a44:	4b34      	ldr	r3, [pc, #208]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a46:	4a35      	ldr	r2, [pc, #212]	@ (8000b1c <MX_TIM5_Init+0x118>)
 8000a48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000a4a:	4b33      	ldr	r3, [pc, #204]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 8000a56:	4b30      	ldr	r3, [pc, #192]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a58:	4a31      	ldr	r2, [pc, #196]	@ (8000b20 <MX_TIM5_Init+0x11c>)
 8000a5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a68:	482b      	ldr	r0, [pc, #172]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a6a:	f003 fded 	bl	8004648 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000a74:	f000 f9ca 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a82:	4619      	mov	r1, r3
 8000a84:	4824      	ldr	r0, [pc, #144]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a86:	f004 f9df 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a90:	f000 f9bc 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a94:	4820      	ldr	r0, [pc, #128]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a96:	f003 feb8 	bl	800480a <HAL_TIM_PWM_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000aa0:	f000 f9b4 	bl	8000e0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4819      	ldr	r0, [pc, #100]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000ab4:	f004 fa8f 	bl	8004fd6 <HAL_TIM_SlaveConfigSynchro>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000abe:	f000 f9a5 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ac6:	2380      	movs	r3, #128	@ 0x80
 8000ac8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4811      	ldr	r0, [pc, #68]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000ad2:	f004 fe53 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000adc:	f000 f996 	bl	8000e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae0:	2360      	movs	r3, #96	@ 0x60
 8000ae2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000ae4:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000aea:	2302      	movs	r3, #2
 8000aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	2208      	movs	r2, #8
 8000af6:	4619      	mov	r1, r3
 8000af8:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000afa:	f004 f8e3 	bl	8004cc4 <HAL_TIM_PWM_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000b04:	f000 f982 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b08:	4803      	ldr	r0, [pc, #12]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000b0a:	f000 fa8b 	bl	8001024 <HAL_TIM_MspPostInit>

}
 8000b0e:	bf00      	nop
 8000b10:	3748      	adds	r7, #72	@ 0x48
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000318 	.word	0x20000318
 8000b1c:	40000c00 	.word	0x40000c00
 8000b20:	000802c7 	.word	0x000802c7

08000b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_DMA_Init+0x3c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <MX_DMA_Init+0x3c>)
 8000b34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_DMA_Init+0x3c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2038      	movs	r0, #56	@ 0x38
 8000b4c:	f001 f961 	bl	8001e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b50:	2038      	movs	r0, #56	@ 0x38
 8000b52:	f001 f97a 	bl	8001e4a <HAL_NVIC_EnableIRQ>

}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	switch(bufferFlag){
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_ADC_ConvCpltCallback+0x64>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d002      	beq.n	8000bca <HAL_ADC_ConvCpltCallback+0x16>
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d011      	beq.n	8000bec <HAL_ADC_ConvCpltCallback+0x38>
		HAL_ADC_Stop_DMA(&hadc1);
		memcpy((void*)CCDPixelSendBuffer, (void*)CCDPixelBuffer2, CCD_PIXEL_BUFFER_SIZE);
		CDC_Transmit_FS((uint8_t*) CCDPixelSendBuffer, CCD_PIXEL_BUFFER_SIZE);
		bufferFlag = 1;}

}
 8000bc8:	e021      	b.n	8000c0e <HAL_ADC_ConvCpltCallback+0x5a>
		HAL_ADC_Stop_DMA(&hadc1);
 8000bca:	4814      	ldr	r0, [pc, #80]	@ (8000c1c <HAL_ADC_ConvCpltCallback+0x68>)
 8000bcc:	f000 fd38 	bl	8001640 <HAL_ADC_Stop_DMA>
		memcpy((void*)CCDPixelSendBuffer, (void*)CCDPixelBuffer1, CCD_PIXEL_BUFFER_SIZE);
 8000bd0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000bd4:	4912      	ldr	r1, [pc, #72]	@ (8000c20 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000bd6:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <HAL_ADC_ConvCpltCallback+0x70>)
 8000bd8:	f008 feda 	bl	8009990 <memcpy>
		CDC_Transmit_FS((uint8_t*) CCDPixelSendBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000bdc:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8000be0:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <HAL_ADC_ConvCpltCallback+0x70>)
 8000be2:	f008 fa19 	bl	8009018 <CDC_Transmit_FS>
		bufferFlag = 2;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_ADC_ConvCpltCallback+0x64>)
 8000be8:	2202      	movs	r2, #2
 8000bea:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 8000bec:	480b      	ldr	r0, [pc, #44]	@ (8000c1c <HAL_ADC_ConvCpltCallback+0x68>)
 8000bee:	f000 fd27 	bl	8001640 <HAL_ADC_Stop_DMA>
		memcpy((void*)CCDPixelSendBuffer, (void*)CCDPixelBuffer2, CCD_PIXEL_BUFFER_SIZE);
 8000bf2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000bf6:	490c      	ldr	r1, [pc, #48]	@ (8000c28 <HAL_ADC_ConvCpltCallback+0x74>)
 8000bf8:	480a      	ldr	r0, [pc, #40]	@ (8000c24 <HAL_ADC_ConvCpltCallback+0x70>)
 8000bfa:	f008 fec9 	bl	8009990 <memcpy>
		CDC_Transmit_FS((uint8_t*) CCDPixelSendBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000bfe:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8000c02:	4808      	ldr	r0, [pc, #32]	@ (8000c24 <HAL_ADC_ConvCpltCallback+0x70>)
 8000c04:	f008 fa08 	bl	8009018 <CDC_Transmit_FS>
		bufferFlag = 1;}
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_ADC_ConvCpltCallback+0x64>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20006209 	.word	0x20006209
 8000c1c:	20000198 	.word	0x20000198
 8000c20:	20000448 	.word	0x20000448
 8000c24:	200042c8 	.word	0x200042c8
 8000c28:	20002388 	.word	0x20002388

08000c2c <HAL_TIM_PeriodElapsedCallback>:

uint8_t signals = 2;
uint8_t count = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
//		if (htim->Instance == TIM2) {
			count++;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c3e:	701a      	strb	r2, [r3, #0]
			if(count >= signals){
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d312      	bcc.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0x46>
				  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); //ICG
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c50:	f003 fee4 	bl	8004a1c <HAL_TIM_PWM_Stop>
				  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); //fM
 8000c54:	2100      	movs	r1, #0
 8000c56:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000c58:	f003 fee0 	bl	8004a1c <HAL_TIM_PWM_Stop>
				  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //ADC
 8000c5c:	210c      	movs	r1, #12
 8000c5e:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c60:	f003 fedc 	bl	8004a1c <HAL_TIM_PWM_Stop>
				  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); //SH
 8000c64:	2108      	movs	r1, #8
 8000c66:	480a      	ldr	r0, [pc, #40]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c68:	f003 fed8 	bl	8004a1c <HAL_TIM_PWM_Stop>
				  count = 0;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
			}
//		}
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000620a 	.word	0x2000620a
 8000c80:	2000002c 	.word	0x2000002c
 8000c84:	20000240 	.word	0x20000240
 8000c88:	20000288 	.word	0x20000288
 8000c8c:	200002d0 	.word	0x200002d0
 8000c90:	20000318 	.word	0x20000318

08000c94 <CDCReceiveCallback>:



//when the stm receives anything, it checks if it is the string start

void CDCReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
    // Ensure the buffer is null-terminated
    Buf[Len] = '\0';
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]

    // Check for the "start" command
    if ((strncmp((char*)Buf, "start", 5) == 0)) {
 8000ca8:	2205      	movs	r2, #5
 8000caa:	4921      	ldr	r1, [pc, #132]	@ (8000d30 <CDCReceiveCallback+0x9c>)
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f008 fe31 	bl	8009914 <strncmp>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d136      	bne.n	8000d26 <CDCReceiveCallback+0x92>
    	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <CDCReceiveCallback+0xa0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <CDCReceiveCallback+0xa4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    	  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <CDCReceiveCallback+0xa8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_TIM_Base_Stop_IT(&htim2);
 8000cd0:	481a      	ldr	r0, [pc, #104]	@ (8000d3c <CDCReceiveCallback+0xa8>)
 8000cd2:	f003 fd6b 	bl	80047ac <HAL_TIM_Base_Stop_IT>
    	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4816      	ldr	r0, [pc, #88]	@ (8000d34 <CDCReceiveCallback+0xa0>)
 8000cda:	f003 fdef 	bl	80048bc <HAL_TIM_PWM_Start>
    	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4815      	ldr	r0, [pc, #84]	@ (8000d38 <CDCReceiveCallback+0xa4>)
 8000ce2:	f003 fdeb 	bl	80048bc <HAL_TIM_PWM_Start>
    	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 8000ce6:	210c      	movs	r1, #12
 8000ce8:	4815      	ldr	r0, [pc, #84]	@ (8000d40 <CDCReceiveCallback+0xac>)
 8000cea:	f003 fde7 	bl	80048bc <HAL_TIM_PWM_Start>
    	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4812      	ldr	r0, [pc, #72]	@ (8000d3c <CDCReceiveCallback+0xa8>)
 8000cf2:	f003 fde3 	bl	80048bc <HAL_TIM_PWM_Start>
    	  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <CDCReceiveCallback+0xa8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2242      	movs	r2, #66	@ 0x42
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    	  HAL_TIM_Base_Start_IT(&htim2);
 8000cfe:	480f      	ldr	r0, [pc, #60]	@ (8000d3c <CDCReceiveCallback+0xa8>)
 8000d00:	f003 fcf2 	bl	80046e8 <HAL_TIM_Base_Start_IT>
    	  if(bufferFlag == 1){
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <CDCReceiveCallback+0xb0>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d106      	bne.n	8000d1a <CDCReceiveCallback+0x86>
    	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer1, CCD_PIXEL_BUFFER_SIZE);}
 8000d0c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000d10:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <CDCReceiveCallback+0xb4>)
 8000d12:	480e      	ldr	r0, [pc, #56]	@ (8000d4c <CDCReceiveCallback+0xb8>)
 8000d14:	f000 fba4 	bl	8001460 <HAL_ADC_Start_DMA>
//            else if (strcmp(command, "IT") == 0) {
//                CalculateAndSetIntegrationTime(param);
//            }
//        }
    }
}
 8000d18:	e005      	b.n	8000d26 <CDCReceiveCallback+0x92>
    		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer2, CCD_PIXEL_BUFFER_SIZE);}
 8000d1a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000d1e:	490c      	ldr	r1, [pc, #48]	@ (8000d50 <CDCReceiveCallback+0xbc>)
 8000d20:	480a      	ldr	r0, [pc, #40]	@ (8000d4c <CDCReceiveCallback+0xb8>)
 8000d22:	f000 fb9d 	bl	8001460 <HAL_ADC_Start_DMA>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	0800a250 	.word	0x0800a250
 8000d34:	20000318 	.word	0x20000318
 8000d38:	20000288 	.word	0x20000288
 8000d3c:	20000240 	.word	0x20000240
 8000d40:	200002d0 	.word	0x200002d0
 8000d44:	20006209 	.word	0x20006209
 8000d48:	20000448 	.word	0x20000448
 8000d4c:	20000198 	.word	0x20000198
 8000d50:	20002388 	.word	0x20002388

08000d54 <InitializeHeaderFooter>:
    // Configure the SH signal with the calculated period and pulse width
    Configure_SH_Signal(T_SH_ticks, SH_pulse_ticks);
}


void InitializeHeaderFooter(void) {
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	b093      	sub	sp, #76	@ 0x4c
 8000d58:	af0c      	add	r7, sp, #48	@ 0x30
    // Construct the header
    snprintf(header, HEADER_SIZE,
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <InitializeHeaderFooter+0x80>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd8 <InitializeHeaderFooter+0x84>)
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	491d      	ldr	r1, [pc, #116]	@ (8000ddc <InitializeHeaderFooter+0x88>)
 8000d66:	6809      	ldr	r1, [r1, #0]
 8000d68:	481d      	ldr	r0, [pc, #116]	@ (8000de0 <InitializeHeaderFooter+0x8c>)
 8000d6a:	6800      	ldr	r0, [r0, #0]
 8000d6c:	4c1d      	ldr	r4, [pc, #116]	@ (8000de4 <InitializeHeaderFooter+0x90>)
 8000d6e:	6824      	ldr	r4, [r4, #0]
 8000d70:	4d1c      	ldr	r5, [pc, #112]	@ (8000de4 <InitializeHeaderFooter+0x90>)
 8000d72:	686d      	ldr	r5, [r5, #4]
 8000d74:	4e1b      	ldr	r6, [pc, #108]	@ (8000de4 <InitializeHeaderFooter+0x90>)
 8000d76:	68b6      	ldr	r6, [r6, #8]
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <InitializeHeaderFooter+0x90>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <InitializeHeaderFooter+0x94>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <InitializeHeaderFooter+0x98>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <InitializeHeaderFooter+0x9c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <InitializeHeaderFooter+0xa0>)
 8000d92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	9308      	str	r3, [sp, #32]
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	9307      	str	r3, [sp, #28]
 8000da4:	9606      	str	r6, [sp, #24]
 8000da6:	9505      	str	r5, [sp, #20]
 8000da8:	9404      	str	r4, [sp, #16]
 8000daa:	9003      	str	r0, [sp, #12]
 8000dac:	9102      	str	r1, [sp, #8]
 8000dae:	9201      	str	r2, [sp, #4]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <InitializeHeaderFooter+0xa4>)
 8000db6:	4a11      	ldr	r2, [pc, #68]	@ (8000dfc <InitializeHeaderFooter+0xa8>)
 8000db8:	21c8      	movs	r1, #200	@ 0xc8
 8000dba:	4811      	ldr	r0, [pc, #68]	@ (8000e00 <InitializeHeaderFooter+0xac>)
 8000dbc:	f008 fd6e 	bl	800989c <sniprintf>
        VersionNo, MajorVersion, FileFormatNo, CustomizationNo, CameraType,
        DataInfo[0], DataInfo[1], DataInfo[2], DataInfo[3],
        MeasureMode, SheetData, Profile, ScaleUnitChars);

    // Construct the footer (this example just uses a simple footer, customize as needed)
    snprintf(footer, FOOTER_SIZE, "\n");
 8000dc0:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <InitializeHeaderFooter+0xb0>)
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	4810      	ldr	r0, [pc, #64]	@ (8000e08 <InitializeHeaderFooter+0xb4>)
 8000dc6:	f008 fd69 	bl	800989c <sniprintf>
}
 8000dca:	bf00      	nop
 8000dcc:	371c      	adds	r7, #28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	20000360 	.word	0x20000360
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	20000364 	.word	0x20000364
 8000de8:	20000010 	.word	0x20000010
 8000dec:	20000378 	.word	0x20000378
 8000df0:	20000014 	.word	0x20000014
 8000df4:	20000018 	.word	0x20000018
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	0800a258 	.word	0x0800a258
 8000e00:	2000037c 	.word	0x2000037c
 8000e04:	0800a304 	.word	0x0800a304
 8000e08:	20000444 	.word	0x20000444

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <Error_Handler+0x8>

08000e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	4a0f      	ldr	r2, [pc, #60]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	4a08      	ldr	r2, [pc, #32]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a2e      	ldr	r2, [pc, #184]	@ (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d156      	bne.n	8000f38 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <HAL_ADC_MspInit+0xdc>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	4a2c      	ldr	r2, [pc, #176]	@ (8000f44 <HAL_ADC_MspInit+0xdc>)
 8000e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <HAL_ADC_MspInit+0xdc>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <HAL_ADC_MspInit+0xdc>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a25      	ldr	r2, [pc, #148]	@ (8000f44 <HAL_ADC_MspInit+0xdc>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <HAL_ADC_MspInit+0xdc>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481c      	ldr	r0, [pc, #112]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000ed6:	f001 fbb3 	bl	8002640 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000edc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <HAL_ADC_MspInit+0xe8>)
 8000ede:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eec:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000ef4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000efc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f02:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000f04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f1c:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000f1e:	f000 ffaf 	bl	8001e80 <HAL_DMA_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000f28:	f7ff ff70 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a07      	ldr	r2, [pc, #28]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000f30:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f32:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	@ 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40012000 	.word	0x40012000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	200001e0 	.word	0x200001e0
 8000f50:	40026410 	.word	0x40026410

08000f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f64:	d116      	bne.n	8000f94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	4a29      	ldr	r2, [pc, #164]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f76:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	201c      	movs	r0, #28
 8000f88:	f000 ff43 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f8c:	201c      	movs	r0, #28
 8000f8e:	f000 ff5c 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f92:	e03a      	b.n	800100a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a1f      	ldr	r2, [pc, #124]	@ (8001018 <HAL_TIM_Base_MspInit+0xc4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10e      	bne.n	8000fbc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
}
 8000fba:	e026      	b.n	800100a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a16      	ldr	r2, [pc, #88]	@ (800101c <HAL_TIM_Base_MspInit+0xc8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	4a11      	ldr	r2, [pc, #68]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
}
 8000fe2:	e012      	b.n	800100a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8001020 <HAL_TIM_Base_MspInit+0xcc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10d      	bne.n	800100a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffe:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <HAL_TIM_Base_MspInit+0xc0>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40000400 	.word	0x40000400
 800101c:	40000800 	.word	0x40000800
 8001020:	40000c00 	.word	0x40000c00

08001024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001044:	d11e      	bne.n	8001084 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b34      	ldr	r3, [pc, #208]	@ (800111c <HAL_TIM_MspPostInit+0xf8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a33      	ldr	r2, [pc, #204]	@ (800111c <HAL_TIM_MspPostInit+0xf8>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b31      	ldr	r3, [pc, #196]	@ (800111c <HAL_TIM_MspPostInit+0xf8>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001062:	2301      	movs	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001072:	2301      	movs	r3, #1
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4828      	ldr	r0, [pc, #160]	@ (8001120 <HAL_TIM_MspPostInit+0xfc>)
 800107e:	f001 fadf 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001082:	e046      	b.n	8001112 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a26      	ldr	r2, [pc, #152]	@ (8001124 <HAL_TIM_MspPostInit+0x100>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d11e      	bne.n	80010cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <HAL_TIM_MspPostInit+0xf8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a21      	ldr	r2, [pc, #132]	@ (800111c <HAL_TIM_MspPostInit+0xf8>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <HAL_TIM_MspPostInit+0xf8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010aa:	2340      	movs	r3, #64	@ 0x40
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ba:	2302      	movs	r3, #2
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4816      	ldr	r0, [pc, #88]	@ (8001120 <HAL_TIM_MspPostInit+0xfc>)
 80010c6:	f001 fabb 	bl	8002640 <HAL_GPIO_Init>
}
 80010ca:	e022      	b.n	8001112 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a15      	ldr	r2, [pc, #84]	@ (8001128 <HAL_TIM_MspPostInit+0x104>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d11d      	bne.n	8001112 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <HAL_TIM_MspPostInit+0xf8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a0f      	ldr	r2, [pc, #60]	@ (800111c <HAL_TIM_MspPostInit+0xf8>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HAL_TIM_MspPostInit+0xf8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010f2:	2304      	movs	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001102:	2302      	movs	r3, #2
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <HAL_TIM_MspPostInit+0xfc>)
 800110e:	f001 fa97 	bl	8002640 <HAL_GPIO_Init>
}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	@ 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000
 8001124:	40000400 	.word	0x40000400
 8001128:	40000c00 	.word	0x40000c00

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <NMI_Handler+0x4>

08001134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <MemManage_Handler+0x4>

08001144 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <UsageFault_Handler+0x4>

08001154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001182:	f000 f8e5 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <TIM2_IRQHandler+0x10>)
 8001192:	f003 fca7 	bl	8004ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000240 	.word	0x20000240

080011a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <DMA2_Stream0_IRQHandler+0x10>)
 80011a6:	f000 ffe1 	bl	800216c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001e0 	.word	0x200001e0

080011b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <OTG_FS_IRQHandler+0x10>)
 80011ba:	f001 fd09 	bl	8002bd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20006ef4 	.word	0x20006ef4

080011c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d0:	4a14      	ldr	r2, [pc, #80]	@ (8001224 <_sbrk+0x5c>)
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <_sbrk+0x60>)
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <_sbrk+0x64>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <_sbrk+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d207      	bcs.n	8001208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f8:	f008 fb9e 	bl	8009938 <__errno>
 80011fc:	4603      	mov	r3, r0
 80011fe:	220c      	movs	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	e009      	b.n	800121c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	4a05      	ldr	r2, [pc, #20]	@ (800122c <_sbrk+0x64>)
 8001218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20010000 	.word	0x20010000
 8001228:	00000400 	.word	0x00000400
 800122c:	2000620c 	.word	0x2000620c
 8001230:	20007740 	.word	0x20007740

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001290 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800125c:	f7ff ffea 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	@ (8001298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	@ (80012a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001286:	f008 fb5d 	bl	8009944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff f971 	bl	8000570 <main>
  bx  lr    
 800128e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800129c:	0800a3ac 	.word	0x0800a3ac
  ldr r2, =_sbss
 80012a0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80012a4:	20007740 	.word	0x20007740

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	@ (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	@ (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 fd91 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	200f      	movs	r0, #15
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fd9a 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fda9 	bl	8001e66 <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 fd71 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	@ (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000030 	.word	0x20000030
 8001348:	20000038 	.word	0x20000038
 800134c:	20000034 	.word	0x20000034

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000038 	.word	0x20000038
 8001374:	20006210 	.word	0x20006210

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	@ (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20006210 	.word	0x20006210

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_Delay+0x44>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000038 	.word	0x20000038

080013d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e033      	b.n	8001456 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fd36 	bl	8000e68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800141e:	f023 0302 	bic.w	r3, r3, #2
 8001422:	f043 0202 	orr.w	r2, r3, #2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fa98 	bl	8001960 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	f043 0201 	orr.w	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	641a      	str	r2, [r3, #64]	@ 0x40
 8001446:	e001      	b.n	800144c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_ADC_Start_DMA+0x1e>
 800147a:	2302      	movs	r3, #2
 800147c:	e0ce      	b.n	800161c <HAL_ADC_Start_DMA+0x1bc>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b01      	cmp	r3, #1
 8001492:	d018      	beq.n	80014c6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001624 <HAL_ADC_Start_DMA+0x1c4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a5f      	ldr	r2, [pc, #380]	@ (8001628 <HAL_ADC_Start_DMA+0x1c8>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0c9a      	lsrs	r2, r3, #18
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80014b8:	e002      	b.n	80014c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	3b01      	subs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f9      	bne.n	80014ba <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014d4:	d107      	bne.n	80014e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014e4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	f040 8086 	bne.w	8001602 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001520:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001534:	d106      	bne.n	8001544 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f023 0206 	bic.w	r2, r3, #6
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	645a      	str	r2, [r3, #68]	@ 0x44
 8001542:	e002      	b.n	800154a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001552:	4b36      	ldr	r3, [pc, #216]	@ (800162c <HAL_ADC_Start_DMA+0x1cc>)
 8001554:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155a:	4a35      	ldr	r2, [pc, #212]	@ (8001630 <HAL_ADC_Start_DMA+0x1d0>)
 800155c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001562:	4a34      	ldr	r2, [pc, #208]	@ (8001634 <HAL_ADC_Start_DMA+0x1d4>)
 8001564:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800156a:	4a33      	ldr	r2, [pc, #204]	@ (8001638 <HAL_ADC_Start_DMA+0x1d8>)
 800156c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001576:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001586:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001596:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	334c      	adds	r3, #76	@ 0x4c
 80015a2:	4619      	mov	r1, r3
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f000 fd18 	bl	8001fdc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10f      	bne.n	80015d8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d129      	bne.n	800161a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	e020      	b.n	800161a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a17      	ldr	r2, [pc, #92]	@ (800163c <HAL_ADC_Start_DMA+0x1dc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d11b      	bne.n	800161a <HAL_ADC_Start_DMA+0x1ba>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d114      	bne.n	800161a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e00b      	b.n	800161a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f043 0210 	orr.w	r2, r3, #16
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000030 	.word	0x20000030
 8001628:	431bde83 	.word	0x431bde83
 800162c:	40012300 	.word	0x40012300
 8001630:	08001b59 	.word	0x08001b59
 8001634:	08001c13 	.word	0x08001c13
 8001638:	08001c2f 	.word	0x08001c2f
 800163c:	40012000 	.word	0x40012000

08001640 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_ADC_Stop_DMA+0x1a>
 8001656:	2302      	movs	r3, #2
 8001658:	e048      	b.n	80016ec <HAL_ADC_Stop_DMA+0xac>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0201 	bic.w	r2, r2, #1
 8001670:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d130      	bne.n	80016e2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800168e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001694:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d10f      	bne.n	80016be <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 fcf2 	bl	800208c <HAL_DMA_Abort>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80016cc:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x1c>
 8001734:	2302      	movs	r3, #2
 8001736:	e105      	b.n	8001944 <HAL_ADC_ConfigChannel+0x228>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b09      	cmp	r3, #9
 8001746:	d925      	bls.n	8001794 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68d9      	ldr	r1, [r3, #12]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	3b1e      	subs	r3, #30
 800175e:	2207      	movs	r2, #7
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43da      	mvns	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	400a      	ands	r2, r1
 800176c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68d9      	ldr	r1, [r3, #12]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4618      	mov	r0, r3
 8001780:	4603      	mov	r3, r0
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4403      	add	r3, r0
 8001786:	3b1e      	subs	r3, #30
 8001788:	409a      	lsls	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	e022      	b.n	80017da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6919      	ldr	r1, [r3, #16]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	2207      	movs	r2, #7
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	400a      	ands	r2, r1
 80017b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6919      	ldr	r1, [r3, #16]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	4603      	mov	r3, r0
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4403      	add	r3, r0
 80017d0:	409a      	lsls	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d824      	bhi.n	800182c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	3b05      	subs	r3, #5
 80017f4:	221f      	movs	r2, #31
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	400a      	ands	r2, r1
 8001802:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	b29b      	uxth	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	3b05      	subs	r3, #5
 800181e:	fa00 f203 	lsl.w	r2, r0, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	635a      	str	r2, [r3, #52]	@ 0x34
 800182a:	e04c      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d824      	bhi.n	800187e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	3b23      	subs	r3, #35	@ 0x23
 8001846:	221f      	movs	r2, #31
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43da      	mvns	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	400a      	ands	r2, r1
 8001854:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3b23      	subs	r3, #35	@ 0x23
 8001870:	fa00 f203 	lsl.w	r2, r0, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	631a      	str	r2, [r3, #48]	@ 0x30
 800187c:	e023      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	3b41      	subs	r3, #65	@ 0x41
 8001890:	221f      	movs	r2, #31
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	400a      	ands	r2, r1
 800189e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	3b41      	subs	r3, #65	@ 0x41
 80018ba:	fa00 f203 	lsl.w	r2, r0, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <HAL_ADC_ConfigChannel+0x234>)
 80018c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a21      	ldr	r2, [pc, #132]	@ (8001954 <HAL_ADC_ConfigChannel+0x238>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d109      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x1cc>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b12      	cmp	r3, #18
 80018da:	d105      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <HAL_ADC_ConfigChannel+0x238>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d123      	bne.n	800193a <HAL_ADC_ConfigChannel+0x21e>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d003      	beq.n	8001902 <HAL_ADC_ConfigChannel+0x1e6>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b11      	cmp	r3, #17
 8001900:	d11b      	bne.n	800193a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b10      	cmp	r3, #16
 8001914:	d111      	bne.n	800193a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <HAL_ADC_ConfigChannel+0x23c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a10      	ldr	r2, [pc, #64]	@ (800195c <HAL_ADC_ConfigChannel+0x240>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	0c9a      	lsrs	r2, r3, #18
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800192c:	e002      	b.n	8001934 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3b01      	subs	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f9      	bne.n	800192e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40012300 	.word	0x40012300
 8001954:	40012000 	.word	0x40012000
 8001958:	20000030 	.word	0x20000030
 800195c:	431bde83 	.word	0x431bde83

08001960 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001968:	4b79      	ldr	r3, [pc, #484]	@ (8001b50 <ADC_Init+0x1f0>)
 800196a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	431a      	orrs	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	021a      	lsls	r2, r3, #8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80019b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f2:	4a58      	ldr	r2, [pc, #352]	@ (8001b54 <ADC_Init+0x1f4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6899      	ldr	r1, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6899      	ldr	r1, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	e00f      	b.n	8001a5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a5c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0202 	bic.w	r2, r2, #2
 8001a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7e1b      	ldrb	r3, [r3, #24]
 8001a78:	005a      	lsls	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01b      	beq.n	8001ac4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a9a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6859      	ldr	r1, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	035a      	lsls	r2, r3, #13
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	e007      	b.n	8001ad4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ad2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	051a      	lsls	r2, r3, #20
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6899      	ldr	r1, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b16:	025a      	lsls	r2, r3, #9
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	029a      	lsls	r2, r3, #10
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40012300 	.word	0x40012300
 8001b54:	0f000001 	.word	0x0f000001

08001b58 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d13c      	bne.n	8001bec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d12b      	bne.n	8001be4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d127      	bne.n	8001be4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d119      	bne.n	8001be4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0220 	bic.w	r2, r2, #32
 8001bbe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7fe ffe5 	bl	8000bb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bea:	e00e      	b.n	8001c0a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff fd85 	bl	8001708 <HAL_ADC_ErrorCallback>
}
 8001bfe:	e004      	b.n	8001c0a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c1e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7ff fd67 	bl	80016f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2240      	movs	r2, #64	@ 0x40
 8001c40:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f043 0204 	orr.w	r2, r3, #4
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff fd5a 	bl	8001708 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4907      	ldr	r1, [pc, #28]	@ (8001cf8 <__NVIC_EnableIRQ+0x38>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	@ (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	@ (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff8e 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff29 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff3e 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff8e 	bl	8001d50 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff31 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa2 	bl	8001db8 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff fa74 	bl	8001378 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e099      	b.n	8001fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebc:	e00f      	b.n	8001ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ebe:	f7ff fa5b 	bl	8001378 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d908      	bls.n	8001ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e078      	b.n	8001fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e8      	bne.n	8001ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4b38      	ldr	r3, [pc, #224]	@ (8001fd8 <HAL_DMA_Init+0x158>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d107      	bne.n	8001f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	4313      	orrs	r3, r2
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f023 0307 	bic.w	r3, r3, #7
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d117      	bne.n	8001fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00e      	beq.n	8001fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fadf 	bl	8002548 <DMA_CheckFifoParam>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2240      	movs	r2, #64	@ 0x40
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e016      	b.n	8001fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fa96 	bl	80024dc <DMA_CalcBaseAndBitshift>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb8:	223f      	movs	r2, #63	@ 0x3f
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	f010803f 	.word	0xf010803f

08001fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_DMA_Start_IT+0x26>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e040      	b.n	8002084 <HAL_DMA_Start_IT+0xa8>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d12f      	bne.n	8002076 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fa28 	bl	8002480 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	223f      	movs	r2, #63	@ 0x3f
 8002036:	409a      	lsls	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0216 	orr.w	r2, r2, #22
 800204a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0208 	orr.w	r2, r2, #8
 8002062:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e005      	b.n	8002082 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800207e:	2302      	movs	r3, #2
 8002080:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002082:	7dfb      	ldrb	r3, [r7, #23]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002098:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800209a:	f7ff f96d 	bl	8001378 <HAL_GetTick>
 800209e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d008      	beq.n	80020be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e052      	b.n	8002164 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0216 	bic.w	r2, r2, #22
 80020cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <HAL_DMA_Abort+0x62>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210e:	e013      	b.n	8002138 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002110:	f7ff f932 	bl	8001378 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b05      	cmp	r3, #5
 800211c:	d90c      	bls.n	8002138 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e015      	b.n	8002164 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1e4      	bne.n	8002110 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214a:	223f      	movs	r2, #63	@ 0x3f
 800214c:	409a      	lsls	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002178:	4b8e      	ldr	r3, [pc, #568]	@ (80023b4 <HAL_DMA_IRQHandler+0x248>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a8e      	ldr	r2, [pc, #568]	@ (80023b8 <HAL_DMA_IRQHandler+0x24c>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0a9b      	lsrs	r3, r3, #10
 8002184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002196:	2208      	movs	r2, #8
 8002198:	409a      	lsls	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01a      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0204 	bic.w	r2, r2, #4
 80021be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c4:	2208      	movs	r2, #8
 80021c6:	409a      	lsls	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021dc:	2201      	movs	r2, #1
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d012      	beq.n	800220e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fa:	2201      	movs	r2, #1
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	f043 0202 	orr.w	r2, r3, #2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002212:	2204      	movs	r2, #4
 8002214:	409a      	lsls	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d012      	beq.n	8002244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002230:	2204      	movs	r2, #4
 8002232:	409a      	lsls	r2, r3
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223c:	f043 0204 	orr.w	r2, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002248:	2210      	movs	r2, #16
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d043      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03c      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002266:	2210      	movs	r2, #16
 8002268:	409a      	lsls	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d018      	beq.n	80022ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d108      	bne.n	800229c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d024      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
 800229a:	e01f      	b.n	80022dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01b      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	e016      	b.n	80022dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0208 	bic.w	r2, r2, #8
 80022ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e0:	2220      	movs	r2, #32
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 808f 	beq.w	800240c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8087 	beq.w	800240c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002302:	2220      	movs	r2, #32
 8002304:	409a      	lsls	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b05      	cmp	r3, #5
 8002314:	d136      	bne.n	8002384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0216 	bic.w	r2, r2, #22
 8002324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <HAL_DMA_IRQHandler+0x1da>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0208 	bic.w	r2, r2, #8
 8002354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235a:	223f      	movs	r2, #63	@ 0x3f
 800235c:	409a      	lsls	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002376:	2b00      	cmp	r3, #0
 8002378:	d07e      	beq.n	8002478 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
        }
        return;
 8002382:	e079      	b.n	8002478 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01d      	beq.n	80023ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10d      	bne.n	80023bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d031      	beq.n	800240c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
 80023b0:	e02c      	b.n	800240c <HAL_DMA_IRQHandler+0x2a0>
 80023b2:	bf00      	nop
 80023b4:	20000030 	.word	0x20000030
 80023b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d023      	beq.n	800240c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
 80023cc:	e01e      	b.n	800240c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10f      	bne.n	80023fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0210 	bic.w	r2, r2, #16
 80023ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002410:	2b00      	cmp	r3, #0
 8002412:	d032      	beq.n	800247a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d022      	beq.n	8002466 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2205      	movs	r2, #5
 8002424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	3301      	adds	r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	429a      	cmp	r2, r3
 8002442:	d307      	bcc.n	8002454 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f2      	bne.n	8002438 <HAL_DMA_IRQHandler+0x2cc>
 8002452:	e000      	b.n	8002456 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002454:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
 8002476:	e000      	b.n	800247a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002478:	bf00      	nop
    }
  }
}
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800249c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b40      	cmp	r3, #64	@ 0x40
 80024ac:	d108      	bne.n	80024c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024be:	e007      	b.n	80024d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3b10      	subs	r3, #16
 80024ec:	4a14      	ldr	r2, [pc, #80]	@ (8002540 <DMA_CalcBaseAndBitshift+0x64>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024f6:	4a13      	ldr	r2, [pc, #76]	@ (8002544 <DMA_CalcBaseAndBitshift+0x68>)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d909      	bls.n	800251e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	1d1a      	adds	r2, r3, #4
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	659a      	str	r2, [r3, #88]	@ 0x58
 800251c:	e007      	b.n	800252e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002526:	f023 0303 	bic.w	r3, r3, #3
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	aaaaaaab 	.word	0xaaaaaaab
 8002544:	0800a360 	.word	0x0800a360

08002548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11f      	bne.n	80025a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d856      	bhi.n	8002616 <DMA_CheckFifoParam+0xce>
 8002568:	a201      	add	r2, pc, #4	@ (adr r2, 8002570 <DMA_CheckFifoParam+0x28>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	08002581 	.word	0x08002581
 8002574:	08002593 	.word	0x08002593
 8002578:	08002581 	.word	0x08002581
 800257c:	08002617 	.word	0x08002617
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d046      	beq.n	800261a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002590:	e043      	b.n	800261a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002596:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800259a:	d140      	bne.n	800261e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a0:	e03d      	b.n	800261e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025aa:	d121      	bne.n	80025f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d837      	bhi.n	8002622 <DMA_CheckFifoParam+0xda>
 80025b2:	a201      	add	r2, pc, #4	@ (adr r2, 80025b8 <DMA_CheckFifoParam+0x70>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025cf 	.word	0x080025cf
 80025c0:	080025c9 	.word	0x080025c9
 80025c4:	080025e1 	.word	0x080025e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      break;
 80025cc:	e030      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d025      	beq.n	8002626 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025de:	e022      	b.n	8002626 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025e8:	d11f      	bne.n	800262a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ee:	e01c      	b.n	800262a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d903      	bls.n	80025fe <DMA_CheckFifoParam+0xb6>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d003      	beq.n	8002604 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025fc:	e018      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      break;
 8002602:	e015      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00e      	beq.n	800262e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
      break;
 8002614:	e00b      	b.n	800262e <DMA_CheckFifoParam+0xe6>
      break;
 8002616:	bf00      	nop
 8002618:	e00a      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800261a:	bf00      	nop
 800261c:	e008      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
 8002620:	e006      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 8002622:	bf00      	nop
 8002624:	e004      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e002      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;   
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
    }
  } 
  
  return status; 
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	@ 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	e159      	b.n	8002910 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	429a      	cmp	r2, r3
 8002676:	f040 8148 	bne.w	800290a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d005      	beq.n	8002692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268e:	2b02      	cmp	r3, #2
 8002690:	d130      	bne.n	80026f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 0201 	and.w	r2, r3, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d017      	beq.n	8002730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d123      	bne.n	8002784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	08da      	lsrs	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	220f      	movs	r2, #15
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	08da      	lsrs	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3208      	adds	r2, #8
 800277e:	69b9      	ldr	r1, [r7, #24]
 8002780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	2203      	movs	r2, #3
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0203 	and.w	r2, r3, #3
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a2 	beq.w	800290a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b57      	ldr	r3, [pc, #348]	@ (8002928 <HAL_GPIO_Init+0x2e8>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	4a56      	ldr	r2, [pc, #344]	@ (8002928 <HAL_GPIO_Init+0x2e8>)
 80027d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027d6:	4b54      	ldr	r3, [pc, #336]	@ (8002928 <HAL_GPIO_Init+0x2e8>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027e2:	4a52      	ldr	r2, [pc, #328]	@ (800292c <HAL_GPIO_Init+0x2ec>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a49      	ldr	r2, [pc, #292]	@ (8002930 <HAL_GPIO_Init+0x2f0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d019      	beq.n	8002842 <HAL_GPIO_Init+0x202>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a48      	ldr	r2, [pc, #288]	@ (8002934 <HAL_GPIO_Init+0x2f4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x1fe>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a47      	ldr	r2, [pc, #284]	@ (8002938 <HAL_GPIO_Init+0x2f8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_Init+0x1fa>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a46      	ldr	r2, [pc, #280]	@ (800293c <HAL_GPIO_Init+0x2fc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0x1f6>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a45      	ldr	r2, [pc, #276]	@ (8002940 <HAL_GPIO_Init+0x300>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_Init+0x1f2>
 800282e:	2304      	movs	r3, #4
 8002830:	e008      	b.n	8002844 <HAL_GPIO_Init+0x204>
 8002832:	2307      	movs	r3, #7
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x204>
 8002836:	2303      	movs	r3, #3
 8002838:	e004      	b.n	8002844 <HAL_GPIO_Init+0x204>
 800283a:	2302      	movs	r3, #2
 800283c:	e002      	b.n	8002844 <HAL_GPIO_Init+0x204>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_GPIO_Init+0x204>
 8002842:	2300      	movs	r3, #0
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	f002 0203 	and.w	r2, r2, #3
 800284a:	0092      	lsls	r2, r2, #2
 800284c:	4093      	lsls	r3, r2
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002854:	4935      	ldr	r1, [pc, #212]	@ (800292c <HAL_GPIO_Init+0x2ec>)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002862:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <HAL_GPIO_Init+0x304>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002886:	4a2f      	ldr	r2, [pc, #188]	@ (8002944 <HAL_GPIO_Init+0x304>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800288c:	4b2d      	ldr	r3, [pc, #180]	@ (8002944 <HAL_GPIO_Init+0x304>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b0:	4a24      	ldr	r2, [pc, #144]	@ (8002944 <HAL_GPIO_Init+0x304>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028b6:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <HAL_GPIO_Init+0x304>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028da:	4a1a      	ldr	r2, [pc, #104]	@ (8002944 <HAL_GPIO_Init+0x304>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e0:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <HAL_GPIO_Init+0x304>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002904:	4a0f      	ldr	r2, [pc, #60]	@ (8002944 <HAL_GPIO_Init+0x304>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3301      	adds	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b0f      	cmp	r3, #15
 8002914:	f67f aea2 	bls.w	800265c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3724      	adds	r7, #36	@ 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	40013800 	.word	0x40013800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020400 	.word	0x40020400
 8002938:	40020800 	.word	0x40020800
 800293c:	40020c00 	.word	0x40020c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40013c00 	.word	0x40013c00

08002948 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e101      	b.n	8002b5e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f006 fc87 	bl	8009288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002988:	d102      	bne.n	8002990 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 f88a 	bl	8005aae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7c1a      	ldrb	r2, [r3, #16]
 80029a2:	f88d 2000 	strb.w	r2, [sp]
 80029a6:	3304      	adds	r3, #4
 80029a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029aa:	f002 ff69 	bl	8005880 <USB_CoreInit>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0ce      	b.n	8002b5e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 f882 	bl	8005ad0 <USB_SetCurrentMode>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0bf      	b.n	8002b5e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029de:	2300      	movs	r3, #0
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	e04a      	b.n	8002a7a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3315      	adds	r3, #21
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3314      	adds	r3, #20
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	b298      	uxth	r0, r3
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	332e      	adds	r3, #46	@ 0x2e
 8002a20:	4602      	mov	r2, r0
 8002a22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3318      	adds	r3, #24
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	331c      	adds	r3, #28
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	3320      	adds	r3, #32
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3324      	adds	r3, #36	@ 0x24
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	3301      	adds	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	791b      	ldrb	r3, [r3, #4]
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3af      	bcc.n	80029e4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e044      	b.n	8002b14 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	3301      	adds	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	791b      	ldrb	r3, [r3, #4]
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d3b5      	bcc.n	8002a8a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	7c1a      	ldrb	r2, [r3, #16]
 8002b26:	f88d 2000 	strb.w	r2, [sp]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b2e:	f003 f81b 	bl	8005b68 <USB_DevInit>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e00c      	b.n	8002b5e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 f85f 	bl	8006c1a <USB_DevDisconnect>

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_PCD_Start+0x1c>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e022      	b.n	8002bc8 <HAL_PCD_Start+0x62>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d105      	bne.n	8002baa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 ff6c 	bl	8005a8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 f80d 	bl	8006bd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b08d      	sub	sp, #52	@ 0x34
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 f8cb 	bl	8006d82 <USB_GetMode>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 848c 	bne.w	800350c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f004 f82f 	bl	8006c5c <USB_ReadInterrupts>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8482 	beq.w	800350a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 f81c 	bl	8006c5c <USB_ReadInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d107      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f002 0202 	and.w	r2, r2, #2
 8002c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 f80a 	bl	8006c5c <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d161      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0210 	bic.w	r2, r2, #16
 8002c60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f003 020f 	and.w	r2, r3, #15
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	0c5b      	lsrs	r3, r3, #17
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d124      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d035      	beq.n	8002d06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	6a38      	ldr	r0, [r7, #32]
 8002cae:	f003 fe41 	bl	8006934 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cbe:	441a      	add	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cd0:	441a      	add	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	615a      	str	r2, [r3, #20]
 8002cd6:	e016      	b.n	8002d06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	0c5b      	lsrs	r3, r3, #17
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	2b06      	cmp	r3, #6
 8002ce2:	d110      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cea:	2208      	movs	r2, #8
 8002cec:	4619      	mov	r1, r3
 8002cee:	6a38      	ldr	r0, [r7, #32]
 8002cf0:	f003 fe20 	bl	8006934 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d00:	441a      	add	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0210 	orr.w	r2, r2, #16
 8002d14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 ff9e 	bl	8006c5c <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d26:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d2a:	f040 80a7 	bne.w	8002e7c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 ffa3 	bl	8006c82 <USB_ReadDevAllOutEpInterrupt>
 8002d3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002d3e:	e099      	b.n	8002e74 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 808e 	beq.w	8002e68 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 ffc7 	bl	8006cea <USB_ReadDevOutEPInterrupt>
 8002d5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00c      	beq.n	8002d82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d74:	461a      	mov	r2, r3
 8002d76:	2301      	movs	r3, #1
 8002d78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fea1 	bl	8003ac4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 ff77 	bl	8003c94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d030      	beq.n	8002e2e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd4:	2b80      	cmp	r3, #128	@ 0x80
 8002dd6:	d109      	bne.n	8002dec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	78db      	ldrb	r3, [r3, #3]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d108      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f006 fb32 	bl	8009480 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e44:	461a      	mov	r2, r3
 8002e46:	2320      	movs	r3, #32
 8002e48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e60:	461a      	mov	r2, r3
 8002e62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f47f af62 	bne.w	8002d40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 feeb 	bl	8006c5c <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e90:	f040 80db 	bne.w	800304a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 ff0c 	bl	8006cb6 <USB_ReadDevAllInEpInterrupt>
 8002e9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002ea4:	e0cd      	b.n	8003042 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80c2 	beq.w	8003036 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 ff32 	bl	8006d26 <USB_ReadDevInEPInterrupt>
 8002ec2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d057      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69f9      	ldr	r1, [r7, #28]
 8002eea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002eee:	4013      	ands	r3, r2
 8002ef0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002efe:	461a      	mov	r2, r3
 8002f00:	2301      	movs	r3, #1
 8002f02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	799b      	ldrb	r3, [r3, #6]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d132      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3320      	adds	r3, #32
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4403      	add	r3, r0
 8002f2c:	331c      	adds	r3, #28
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4419      	add	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4403      	add	r3, r0
 8002f40:	3320      	adds	r3, #32
 8002f42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d113      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x3a2>
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	3324      	adds	r3, #36	@ 0x24
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d108      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	f003 ff39 	bl	8006de4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f006 fa06 	bl	800938a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f94:	461a      	mov	r2, r3
 8002f96:	2308      	movs	r3, #8
 8002f98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2340      	movs	r3, #64	@ 0x40
 8002fd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d023      	beq.n	8003024 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fde:	6a38      	ldr	r0, [r7, #32]
 8002fe0:	f002 ff26 	bl	8005e30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	3310      	adds	r3, #16
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	78db      	ldrb	r3, [r3, #3]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d108      	bne.n	8003012 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2200      	movs	r2, #0
 8003004:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f006 fa49 	bl	80094a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800301e:	461a      	mov	r2, r3
 8003020:	2302      	movs	r3, #2
 8003022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800302e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fcbb 	bl	80039ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	3301      	adds	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	f47f af2e 	bne.w	8002ea6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f003 fe04 	bl	8006c5c <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800305a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800305e:	d122      	bne.n	80030a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800307a:	2b01      	cmp	r3, #1
 800307c:	d108      	bne.n	8003090 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003086:	2100      	movs	r1, #0
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fea1 	bl	8003dd0 <HAL_PCDEx_LPM_Callback>
 800308e:	e002      	b.n	8003096 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f006 f9e7 	bl	8009464 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80030a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fdd6 	bl	8006c5c <USB_ReadInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ba:	d112      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d102      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f006 f9a3 	bl	8009418 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80030e0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fdb8 	bl	8006c5c <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030f6:	f040 80b7 	bne.w	8003268 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2110      	movs	r1, #16
 8003114:	4618      	mov	r0, r3
 8003116:	f002 fe8b 	bl	8005e30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311a:	2300      	movs	r3, #0
 800311c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800311e:	e046      	b.n	80031ae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800312c:	461a      	mov	r2, r3
 800312e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003132:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003144:	0151      	lsls	r1, r2, #5
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	440a      	add	r2, r1
 800314a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800314e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003152:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003160:	461a      	mov	r2, r3
 8003162:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003166:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003178:	0151      	lsls	r1, r2, #5
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	440a      	add	r2, r1
 800317e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003182:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003186:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003198:	0151      	lsls	r1, r2, #5
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	440a      	add	r2, r1
 800319e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80031a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80031a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031aa:	3301      	adds	r3, #1
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	791b      	ldrb	r3, [r3, #4]
 80031b2:	461a      	mov	r2, r3
 80031b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d3b2      	bcc.n	8003120 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031c8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80031cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	7bdb      	ldrb	r3, [r3, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e6:	f043 030b 	orr.w	r3, r3, #11
 80031ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031fc:	f043 030b 	orr.w	r3, r3, #11
 8003200:	6453      	str	r3, [r2, #68]	@ 0x44
 8003202:	e015      	b.n	8003230 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003212:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003216:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800321a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800322a:	f043 030b 	orr.w	r3, r3, #11
 800322e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800323e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003242:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003252:	461a      	mov	r2, r3
 8003254:	f003 fdc6 	bl	8006de4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f003 fcf5 	bl	8006c5c <USB_ReadInterrupts>
 8003272:	4603      	mov	r3, r0
 8003274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800327c:	d123      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f003 fd8b 	bl	8006d9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f002 fe48 	bl	8005f22 <USB_GetDevSpeed>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681c      	ldr	r4, [r3, #0]
 800329e:	f001 f9c7 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 80032a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032a8:	461a      	mov	r2, r3
 80032aa:	4620      	mov	r0, r4
 80032ac:	f002 fb4c 	bl	8005948 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f006 f892 	bl	80093da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80032c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 fcc6 	bl	8006c5c <USB_ReadInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d10a      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f006 f86f 	bl	80093be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f002 0208 	and.w	r2, r2, #8
 80032ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 fcb1 	bl	8006c5c <USB_ReadInterrupts>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003300:	2b80      	cmp	r3, #128	@ 0x80
 8003302:	d123      	bne.n	800334c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003310:	2301      	movs	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
 8003314:	e014      	b.n	8003340 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	b2db      	uxtb	r3, r3
 8003332:	4619      	mov	r1, r3
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fb08 	bl	800394a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	3301      	adds	r3, #1
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	791b      	ldrb	r3, [r3, #4]
 8003344:	461a      	mov	r2, r3
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	4293      	cmp	r3, r2
 800334a:	d3e4      	bcc.n	8003316 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f003 fc83 	bl	8006c5c <USB_ReadInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003360:	d13c      	bne.n	80033dc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003362:	2301      	movs	r3, #1
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
 8003366:	e02b      	b.n	80033c0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3318      	adds	r3, #24
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d115      	bne.n	80033ba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800338e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003390:	2b00      	cmp	r3, #0
 8003392:	da12      	bge.n	80033ba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	3317      	adds	r3, #23
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fac8 	bl	800394a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	3301      	adds	r3, #1
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	791b      	ldrb	r3, [r3, #4]
 80033c4:	461a      	mov	r2, r3
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d3cd      	bcc.n	8003368 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80033da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f003 fc3b 	bl	8006c5c <USB_ReadInterrupts>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033f0:	d156      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033f2:	2301      	movs	r3, #1
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f6:	e045      	b.n	8003484 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d12e      	bne.n	800347e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003420:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003422:	2b00      	cmp	r3, #0
 8003424:	da2b      	bge.n	800347e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003432:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003436:	429a      	cmp	r2, r3
 8003438:	d121      	bne.n	800347e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800347a:	6053      	str	r3, [r2, #4]
            break;
 800347c:	e008      	b.n	8003490 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	3301      	adds	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	791b      	ldrb	r3, [r3, #4]
 8003488:	461a      	mov	r2, r3
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	4293      	cmp	r3, r2
 800348e:	d3b3      	bcc.n	80033f8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800349e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f003 fbd9 	bl	8006c5c <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b4:	d10a      	bne.n	80034cc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f006 f806 	bl	80094c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80034ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f003 fbc3 	bl	8006c5c <USB_ReadInterrupts>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d115      	bne.n	800350c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f005 fff6 	bl	80094e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	e000      	b.n	800350c <HAL_PCD_IRQHandler+0x93c>
      return;
 800350a:	bf00      	nop
    }
  }
}
 800350c:	3734      	adds	r7, #52	@ 0x34
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}

08003512 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_PCD_SetAddress+0x1a>
 8003528:	2302      	movs	r3, #2
 800352a:	e012      	b.n	8003552 <HAL_PCD_SetAddress+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f003 fb22 	bl	8006b8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	4608      	mov	r0, r1
 8003564:	4611      	mov	r1, r2
 8003566:	461a      	mov	r2, r3
 8003568:	4603      	mov	r3, r0
 800356a:	70fb      	strb	r3, [r7, #3]
 800356c:	460b      	mov	r3, r1
 800356e:	803b      	strh	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800357c:	2b00      	cmp	r3, #0
 800357e:	da0f      	bge.n	80035a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	f003 020f 	and.w	r2, r3, #15
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	3310      	adds	r3, #16
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4413      	add	r3, r2
 8003594:	3304      	adds	r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	705a      	strb	r2, [r3, #1]
 800359e:	e00f      	b.n	80035c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	f003 020f 	and.w	r2, r3, #15
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	3304      	adds	r3, #4
 80035b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80035cc:	883a      	ldrh	r2, [r7, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	78ba      	ldrb	r2, [r7, #2]
 80035d6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d004      	beq.n	80035ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035ea:	78bb      	ldrb	r3, [r7, #2]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d102      	bne.n	80035f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_PCD_EP_Open+0xaa>
 8003600:	2302      	movs	r3, #2
 8003602:	e00e      	b.n	8003622 <HAL_PCD_EP_Open+0xc8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68f9      	ldr	r1, [r7, #12]
 8003612:	4618      	mov	r0, r3
 8003614:	f002 fcaa 	bl	8005f6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003620:	7afb      	ldrb	r3, [r7, #11]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800363a:	2b00      	cmp	r3, #0
 800363c:	da0f      	bge.n	800365e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	f003 020f 	and.w	r2, r3, #15
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	3310      	adds	r3, #16
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	3304      	adds	r3, #4
 8003654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	705a      	strb	r2, [r3, #1]
 800365c:	e00f      	b.n	800367e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	f003 020f 	and.w	r2, r3, #15
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_PCD_EP_Close+0x6e>
 8003694:	2302      	movs	r3, #2
 8003696:	e00e      	b.n	80036b6 <HAL_PCD_EP_Close+0x8c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68f9      	ldr	r1, [r7, #12]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f002 fce8 	bl	800607c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	460b      	mov	r3, r1
 80036cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ce:	7afb      	ldrb	r3, [r7, #11]
 80036d0:	f003 020f 	and.w	r2, r3, #15
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	3304      	adds	r3, #4
 80036e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2200      	movs	r2, #0
 80036f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2200      	movs	r2, #0
 80036fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003700:	7afb      	ldrb	r3, [r7, #11]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	b2da      	uxtb	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	799b      	ldrb	r3, [r3, #6]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d102      	bne.n	800371a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	799b      	ldrb	r3, [r3, #6]
 8003722:	461a      	mov	r2, r3
 8003724:	6979      	ldr	r1, [r7, #20]
 8003726:	f002 fd85 	bl	8006234 <USB_EPStartXfer>

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	460b      	mov	r3, r1
 8003772:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003774:	7afb      	ldrb	r3, [r7, #11]
 8003776:	f003 020f 	and.w	r2, r3, #15
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	3310      	adds	r3, #16
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	3304      	adds	r3, #4
 800378a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2200      	movs	r2, #0
 800379c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2201      	movs	r2, #1
 80037a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a4:	7afb      	ldrb	r3, [r7, #11]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	799b      	ldrb	r3, [r3, #6]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d102      	bne.n	80037be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	799b      	ldrb	r3, [r3, #6]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6979      	ldr	r1, [r7, #20]
 80037ca:	f002 fd33 	bl	8006234 <USB_EPStartXfer>

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	7912      	ldrb	r2, [r2, #4]
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e04f      	b.n	8003896 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da0f      	bge.n	800381e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	3310      	adds	r3, #16
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	705a      	strb	r2, [r3, #1]
 800381c:	e00d      	b.n	800383a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_PCD_EP_SetStall+0x82>
 8003856:	2302      	movs	r3, #2
 8003858:	e01d      	b.n	8003896 <HAL_PCD_EP_SetStall+0xbe>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	4618      	mov	r0, r3
 800386a:	f003 f8bb 	bl	80069e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7999      	ldrb	r1, [r3, #6]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003886:	461a      	mov	r2, r3
 8003888:	f003 faac 	bl	8006de4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	7912      	ldrb	r2, [r2, #4]
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e042      	b.n	8003942 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	da0f      	bge.n	80038e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	f003 020f 	and.w	r2, r3, #15
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	3310      	adds	r3, #16
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	3304      	adds	r3, #4
 80038da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	705a      	strb	r2, [r3, #1]
 80038e2:	e00f      	b.n	8003904 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	f003 020f 	and.w	r2, r3, #15
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	3304      	adds	r3, #4
 80038fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	b2da      	uxtb	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_PCD_EP_ClrStall+0x86>
 8003920:	2302      	movs	r3, #2
 8003922:	e00e      	b.n	8003942 <HAL_PCD_EP_ClrStall+0xa4>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68f9      	ldr	r1, [r7, #12]
 8003932:	4618      	mov	r0, r3
 8003934:	f003 f8c4 	bl	8006ac0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800395a:	2b00      	cmp	r3, #0
 800395c:	da0c      	bge.n	8003978 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	3310      	adds	r3, #16
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	3304      	adds	r3, #4
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e00c      	b.n	8003992 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	3304      	adds	r3, #4
 8003990:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68f9      	ldr	r1, [r7, #12]
 8003998:	4618      	mov	r0, r3
 800399a:	f002 fee3 	bl	8006764 <USB_EPStopXfer>
 800399e:	4603      	mov	r3, r0
 80039a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80039a2:	7afb      	ldrb	r3, [r7, #11]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	@ 0x28
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	3310      	adds	r3, #16
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d901      	bls.n	80039e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e06b      	b.n	8003abc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d902      	bls.n	8003a00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3303      	adds	r3, #3
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a08:	e02a      	b.n	8003a60 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d902      	bls.n	8003a26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3303      	adds	r3, #3
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	68d9      	ldr	r1, [r3, #12]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	4603      	mov	r3, r0
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f002 ff38 	bl	80068b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	441a      	add	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	441a      	add	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d809      	bhi.n	8003a8a <PCD_WriteEmptyTxFifo+0xde>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d203      	bcs.n	8003a8a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1bf      	bne.n	8003a0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d811      	bhi.n	8003aba <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	6939      	ldr	r1, [r7, #16]
 8003ab2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	333c      	adds	r3, #60	@ 0x3c
 8003adc:	3304      	adds	r3, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	799b      	ldrb	r3, [r3, #6]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d17b      	bne.n	8003bf2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d015      	beq.n	8003b30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4a61      	ldr	r2, [pc, #388]	@ (8003c8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	f240 80b9 	bls.w	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80b3 	beq.w	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b26:	461a      	mov	r2, r3
 8003b28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2c:	6093      	str	r3, [r2, #8]
 8003b2e:	e0a7      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b46:	461a      	mov	r2, r3
 8003b48:	2320      	movs	r3, #32
 8003b4a:	6093      	str	r3, [r2, #8]
 8003b4c:	e098      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 8093 	bne.w	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d90f      	bls.n	8003b82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	e07e      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	0159      	lsls	r1, r3, #5
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d114      	bne.n	8003be4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2101      	movs	r1, #1
 8003bd0:	f003 f908 	bl	8006de4 <USB_EP0_OutStart>
 8003bd4:	e006      	b.n	8003be4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	441a      	add	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f005 fbb2 	bl	8009354 <HAL_PCD_DataOutStageCallback>
 8003bf0:	e046      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	4a26      	ldr	r2, [pc, #152]	@ (8003c90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d124      	bne.n	8003c44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c10:	461a      	mov	r2, r3
 8003c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c16:	6093      	str	r3, [r2, #8]
 8003c18:	e032      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c30:	461a      	mov	r2, r3
 8003c32:	2320      	movs	r3, #32
 8003c34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f005 fb89 	bl	8009354 <HAL_PCD_DataOutStageCallback>
 8003c42:	e01d      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d114      	bne.n	8003c74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d108      	bne.n	8003c74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2100      	movs	r1, #0
 8003c70:	f003 f8b8 	bl	8006de4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f005 fb6a 	bl	8009354 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	4f54300a 	.word	0x4f54300a
 8003c90:	4f54310a 	.word	0x4f54310a

08003c94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	333c      	adds	r3, #60	@ 0x3c
 8003cac:	3304      	adds	r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a15      	ldr	r2, [pc, #84]	@ (8003d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d90e      	bls.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ce6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f005 fb21 	bl	8009330 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8003d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d90c      	bls.n	8003d10 <PCD_EP_OutSetupPacket_int+0x7c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	799b      	ldrb	r3, [r3, #6]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d108      	bne.n	8003d10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	f003 f86a 	bl	8006de4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	4f54300a 	.word	0x4f54300a

08003d20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d3e:	883b      	ldrh	r3, [r7, #0]
 8003d40:	0419      	lsls	r1, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d4c:	e028      	b.n	8003da0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4413      	add	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]
 8003d60:	e00d      	b.n	8003d7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	3340      	adds	r3, #64	@ 0x40
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	4413      	add	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
 8003d7e:	7bfa      	ldrb	r2, [r7, #15]
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d3ec      	bcc.n	8003d62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d88:	883b      	ldrh	r3, [r7, #0]
 8003d8a:	0418      	lsls	r0, r3, #16
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	4302      	orrs	r2, r0
 8003d98:	3340      	adds	r3, #64	@ 0x40
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	887a      	ldrh	r2, [r7, #2]
 8003dc0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e267      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d075      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e06:	4b88      	ldr	r3, [pc, #544]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d00c      	beq.n	8003e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e12:	4b85      	ldr	r3, [pc, #532]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d112      	bne.n	8003e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e1e:	4b82      	ldr	r3, [pc, #520]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e2a:	d10b      	bne.n	8003e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d05b      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x108>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d157      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e242      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e4c:	d106      	bne.n	8003e5c <HAL_RCC_OscConfig+0x74>
 8003e4e:	4b76      	ldr	r3, [pc, #472]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a75      	ldr	r2, [pc, #468]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e01d      	b.n	8003e98 <HAL_RCC_OscConfig+0xb0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x98>
 8003e66:	4b70      	ldr	r3, [pc, #448]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a6f      	ldr	r2, [pc, #444]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	4b6d      	ldr	r3, [pc, #436]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a6c      	ldr	r2, [pc, #432]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0xb0>
 8003e80:	4b69      	ldr	r3, [pc, #420]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a68      	ldr	r2, [pc, #416]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b66      	ldr	r3, [pc, #408]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a65      	ldr	r2, [pc, #404]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fa6a 	bl	8001378 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fd fa66 	bl	8001378 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	@ 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e207      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	4b5b      	ldr	r3, [pc, #364]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0xc0>
 8003ec6:	e014      	b.n	8003ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fa56 	bl	8001378 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fd fa52 	bl	8001378 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	@ 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e1f3      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee2:	4b51      	ldr	r3, [pc, #324]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0xe8>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d063      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efe:	4b4a      	ldr	r3, [pc, #296]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b47      	ldr	r3, [pc, #284]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d11c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f16:	4b44      	ldr	r3, [pc, #272]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d116      	bne.n	8003f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f22:	4b41      	ldr	r3, [pc, #260]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_RCC_OscConfig+0x152>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e1c7      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4937      	ldr	r1, [pc, #220]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4e:	e03a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d020      	beq.n	8003f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f58:	4b34      	ldr	r3, [pc, #208]	@ (800402c <HAL_RCC_OscConfig+0x244>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fd fa0b 	bl	8001378 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f66:	f7fd fa07 	bl	8001378 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e1a8      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f78:	4b2b      	ldr	r3, [pc, #172]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	4b28      	ldr	r3, [pc, #160]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4925      	ldr	r1, [pc, #148]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
 8003f98:	e015      	b.n	8003fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9a:	4b24      	ldr	r3, [pc, #144]	@ (800402c <HAL_RCC_OscConfig+0x244>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd f9ea 	bl	8001378 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fd f9e6 	bl	8001378 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e187      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fba:	4b1b      	ldr	r3, [pc, #108]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d036      	beq.n	8004040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d016      	beq.n	8004008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fda:	4b15      	ldr	r3, [pc, #84]	@ (8004030 <HAL_RCC_OscConfig+0x248>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fd f9ca 	bl	8001378 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe8:	f7fd f9c6 	bl	8001378 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e167      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x200>
 8004006:	e01b      	b.n	8004040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004008:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <HAL_RCC_OscConfig+0x248>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400e:	f7fd f9b3 	bl	8001378 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	e00e      	b.n	8004034 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004016:	f7fd f9af 	bl	8001378 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d907      	bls.n	8004034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e150      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
 8004028:	40023800 	.word	0x40023800
 800402c:	42470000 	.word	0x42470000
 8004030:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004034:	4b88      	ldr	r3, [pc, #544]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ea      	bne.n	8004016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8097 	beq.w	800417c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004052:	4b81      	ldr	r3, [pc, #516]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	4b7d      	ldr	r3, [pc, #500]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	4a7c      	ldr	r2, [pc, #496]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800406c:	6413      	str	r3, [r2, #64]	@ 0x40
 800406e:	4b7a      	ldr	r3, [pc, #488]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b77      	ldr	r3, [pc, #476]	@ (800425c <HAL_RCC_OscConfig+0x474>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d118      	bne.n	80040bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408a:	4b74      	ldr	r3, [pc, #464]	@ (800425c <HAL_RCC_OscConfig+0x474>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a73      	ldr	r2, [pc, #460]	@ (800425c <HAL_RCC_OscConfig+0x474>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004096:	f7fd f96f 	bl	8001378 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fd f96b 	bl	8001378 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e10c      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	4b6a      	ldr	r3, [pc, #424]	@ (800425c <HAL_RCC_OscConfig+0x474>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x2ea>
 80040c4:	4b64      	ldr	r3, [pc, #400]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c8:	4a63      	ldr	r2, [pc, #396]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d0:	e01c      	b.n	800410c <HAL_RCC_OscConfig+0x324>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x30c>
 80040da:	4b5f      	ldr	r3, [pc, #380]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a5e      	ldr	r2, [pc, #376]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0x324>
 80040f4:	4b58      	ldr	r3, [pc, #352]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f8:	4a57      	ldr	r2, [pc, #348]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004100:	4b55      	ldr	r3, [pc, #340]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004104:	4a54      	ldr	r2, [pc, #336]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004106:	f023 0304 	bic.w	r3, r3, #4
 800410a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7fd f930 	bl	8001378 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	e00a      	b.n	8004132 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fd f92c 	bl	8001378 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e0cb      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004132:	4b49      	ldr	r3, [pc, #292]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ee      	beq.n	800411c <HAL_RCC_OscConfig+0x334>
 800413e:	e014      	b.n	800416a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004140:	f7fd f91a 	bl	8001378 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004146:	e00a      	b.n	800415e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fd f916 	bl	8001378 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0b5      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415e:	4b3e      	ldr	r3, [pc, #248]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1ee      	bne.n	8004148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d105      	bne.n	800417c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004170:	4b39      	ldr	r3, [pc, #228]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	4a38      	ldr	r2, [pc, #224]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800417a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80a1 	beq.w	80042c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004186:	4b34      	ldr	r3, [pc, #208]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b08      	cmp	r3, #8
 8004190:	d05c      	beq.n	800424c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d141      	bne.n	800421e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419a:	4b31      	ldr	r3, [pc, #196]	@ (8004260 <HAL_RCC_OscConfig+0x478>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fd f8ea 	bl	8001378 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fd f8e6 	bl	8001378 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e087      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	4b27      	ldr	r3, [pc, #156]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	3b01      	subs	r3, #1
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	491b      	ldr	r1, [pc, #108]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004260 <HAL_RCC_OscConfig+0x478>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7fd f8bf 	bl	8001378 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fd f8bb 	bl	8001378 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e05c      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004210:	4b11      	ldr	r3, [pc, #68]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x416>
 800421c:	e054      	b.n	80042c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421e:	4b10      	ldr	r3, [pc, #64]	@ (8004260 <HAL_RCC_OscConfig+0x478>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fd f8a8 	bl	8001378 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd f8a4 	bl	8001378 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e045      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCC_OscConfig+0x470>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x444>
 800424a:	e03d      	b.n	80042c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d107      	bne.n	8004264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e038      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
 8004258:	40023800 	.word	0x40023800
 800425c:	40007000 	.word	0x40007000
 8004260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004264:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <HAL_RCC_OscConfig+0x4ec>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d028      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d121      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d11a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800429a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800429c:	4293      	cmp	r3, r2
 800429e:	d111      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	3b01      	subs	r3, #1
 80042ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800

080042d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0cc      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ec:	4b68      	ldr	r3, [pc, #416]	@ (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d90c      	bls.n	8004314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b65      	ldr	r3, [pc, #404]	@ (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b63      	ldr	r3, [pc, #396]	@ (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0b8      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d020      	beq.n	8004362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800432c:	4b59      	ldr	r3, [pc, #356]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a58      	ldr	r2, [pc, #352]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004344:	4b53      	ldr	r3, [pc, #332]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a52      	ldr	r2, [pc, #328]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800434e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004350:	4b50      	ldr	r3, [pc, #320]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	494d      	ldr	r1, [pc, #308]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d044      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	4b47      	ldr	r3, [pc, #284]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d119      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e07f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d003      	beq.n	8004396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004392:	2b03      	cmp	r3, #3
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	4b3f      	ldr	r3, [pc, #252]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e06f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e067      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b6:	4b37      	ldr	r3, [pc, #220]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4934      	ldr	r1, [pc, #208]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c8:	f7fc ffd6 	bl	8001378 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7fc ffd2 	bl	8001378 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e04f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 020c 	and.w	r2, r3, #12
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d1eb      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f8:	4b25      	ldr	r3, [pc, #148]	@ (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d20c      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b22      	ldr	r3, [pc, #136]	@ (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b20      	ldr	r3, [pc, #128]	@ (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e032      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800442c:	4b19      	ldr	r3, [pc, #100]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4916      	ldr	r1, [pc, #88]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444a:	4b12      	ldr	r3, [pc, #72]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	490e      	ldr	r1, [pc, #56]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800445e:	f000 f821 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8004462:	4602      	mov	r2, r0
 8004464:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	490a      	ldr	r1, [pc, #40]	@ (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	5ccb      	ldrb	r3, [r1, r3]
 8004472:	fa22 f303 	lsr.w	r3, r2, r3
 8004476:	4a09      	ldr	r2, [pc, #36]	@ (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800447a:	4b09      	ldr	r3, [pc, #36]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc ff36 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40023c00 	.word	0x40023c00
 8004494:	40023800 	.word	0x40023800
 8004498:	0800a350 	.word	0x0800a350
 800449c:	20000030 	.word	0x20000030
 80044a0:	20000034 	.word	0x20000034

080044a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a8:	b090      	sub	sp, #64	@ 0x40
 80044aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80044b0:	2300      	movs	r3, #0
 80044b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044b4:	2300      	movs	r3, #0
 80044b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044bc:	4b59      	ldr	r3, [pc, #356]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x180>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d00d      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x40>
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	f200 80a1 	bhi.w	8004610 <HAL_RCC_GetSysClockFreq+0x16c>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x34>
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d003      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0x3a>
 80044d6:	e09b      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b53      	ldr	r3, [pc, #332]	@ (8004628 <HAL_RCC_GetSysClockFreq+0x184>)
 80044da:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80044dc:	e09b      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044de:	4b53      	ldr	r3, [pc, #332]	@ (800462c <HAL_RCC_GetSysClockFreq+0x188>)
 80044e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044e2:	e098      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x180>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x180>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d028      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x180>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	2200      	movs	r2, #0
 8004502:	623b      	str	r3, [r7, #32]
 8004504:	627a      	str	r2, [r7, #36]	@ 0x24
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800450c:	2100      	movs	r1, #0
 800450e:	4b47      	ldr	r3, [pc, #284]	@ (800462c <HAL_RCC_GetSysClockFreq+0x188>)
 8004510:	fb03 f201 	mul.w	r2, r3, r1
 8004514:	2300      	movs	r3, #0
 8004516:	fb00 f303 	mul.w	r3, r0, r3
 800451a:	4413      	add	r3, r2
 800451c:	4a43      	ldr	r2, [pc, #268]	@ (800462c <HAL_RCC_GetSysClockFreq+0x188>)
 800451e:	fba0 1202 	umull	r1, r2, r0, r2
 8004522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004524:	460a      	mov	r2, r1
 8004526:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800452a:	4413      	add	r3, r2
 800452c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800452e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004530:	2200      	movs	r2, #0
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	61fa      	str	r2, [r7, #28]
 8004536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800453a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800453e:	f7fb fe9f 	bl	8000280 <__aeabi_uldivmod>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4613      	mov	r3, r2
 8004548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800454a:	e053      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454c:	4b35      	ldr	r3, [pc, #212]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x180>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	2200      	movs	r2, #0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	617a      	str	r2, [r7, #20]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800455e:	f04f 0b00 	mov.w	fp, #0
 8004562:	4652      	mov	r2, sl
 8004564:	465b      	mov	r3, fp
 8004566:	f04f 0000 	mov.w	r0, #0
 800456a:	f04f 0100 	mov.w	r1, #0
 800456e:	0159      	lsls	r1, r3, #5
 8004570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004574:	0150      	lsls	r0, r2, #5
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	ebb2 080a 	subs.w	r8, r2, sl
 800457e:	eb63 090b 	sbc.w	r9, r3, fp
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800458e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004592:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004596:	ebb2 0408 	subs.w	r4, r2, r8
 800459a:	eb63 0509 	sbc.w	r5, r3, r9
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	00eb      	lsls	r3, r5, #3
 80045a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ac:	00e2      	lsls	r2, r4, #3
 80045ae:	4614      	mov	r4, r2
 80045b0:	461d      	mov	r5, r3
 80045b2:	eb14 030a 	adds.w	r3, r4, sl
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	eb45 030b 	adc.w	r3, r5, fp
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045ca:	4629      	mov	r1, r5
 80045cc:	028b      	lsls	r3, r1, #10
 80045ce:	4621      	mov	r1, r4
 80045d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045d4:	4621      	mov	r1, r4
 80045d6:	028a      	lsls	r2, r1, #10
 80045d8:	4610      	mov	r0, r2
 80045da:	4619      	mov	r1, r3
 80045dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045de:	2200      	movs	r2, #0
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	60fa      	str	r2, [r7, #12]
 80045e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045e8:	f7fb fe4a 	bl	8000280 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4613      	mov	r3, r2
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x180>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	3301      	adds	r3, #1
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004604:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800460e:	e002      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_RCC_GetSysClockFreq+0x184>)
 8004612:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004618:	4618      	mov	r0, r3
 800461a:	3740      	adds	r7, #64	@ 0x40
 800461c:	46bd      	mov	sp, r7
 800461e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	00f42400 	.word	0x00f42400
 800462c:	017d7840 	.word	0x017d7840

08004630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004634:	4b03      	ldr	r3, [pc, #12]	@ (8004644 <HAL_RCC_GetHCLKFreq+0x14>)
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000030 	.word	0x20000030

08004648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e041      	b.n	80046de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fc fc70 	bl	8000f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f000 fd10 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d001      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e044      	b.n	800478a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <HAL_TIM_Base_Start_IT+0xb0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x6c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800472a:	d013      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x6c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1a      	ldr	r2, [pc, #104]	@ (800479c <HAL_TIM_Base_Start_IT+0xb4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x6c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a19      	ldr	r2, [pc, #100]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x6c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a17      	ldr	r2, [pc, #92]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x6c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a16      	ldr	r2, [pc, #88]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d111      	bne.n	8004778 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b06      	cmp	r3, #6
 8004764:	d010      	beq.n	8004788 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004776:	e007      	b.n	8004788 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40014000 	.word	0x40014000

080047ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0201 	bic.w	r2, r2, #1
 80047c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10f      	bne.n	80047f4 <HAL_TIM_Base_Stop_IT+0x48>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	f240 4344 	movw	r3, #1092	@ 0x444
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_Base_Stop_IT+0x48>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e041      	b.n	80048a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f839 	bl	80048a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f000 fc2f 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_TIM_PWM_Start+0x24>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e022      	b.n	8004926 <HAL_TIM_PWM_Start+0x6a>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d109      	bne.n	80048fa <HAL_TIM_PWM_Start+0x3e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	bf14      	ite	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	2300      	moveq	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	e015      	b.n	8004926 <HAL_TIM_PWM_Start+0x6a>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d109      	bne.n	8004914 <HAL_TIM_PWM_Start+0x58>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	e008      	b.n	8004926 <HAL_TIM_PWM_Start+0x6a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e068      	b.n	8004a00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d104      	bne.n	800493e <HAL_TIM_PWM_Start+0x82>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800493c:	e013      	b.n	8004966 <HAL_TIM_PWM_Start+0xaa>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b04      	cmp	r3, #4
 8004942:	d104      	bne.n	800494e <HAL_TIM_PWM_Start+0x92>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800494c:	e00b      	b.n	8004966 <HAL_TIM_PWM_Start+0xaa>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d104      	bne.n	800495e <HAL_TIM_PWM_Start+0xa2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800495c:	e003      	b.n	8004966 <HAL_TIM_PWM_Start+0xaa>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2201      	movs	r2, #1
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fedf 	bl	8005732 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a23      	ldr	r2, [pc, #140]	@ (8004a08 <HAL_TIM_PWM_Start+0x14c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d107      	bne.n	800498e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1d      	ldr	r2, [pc, #116]	@ (8004a08 <HAL_TIM_PWM_Start+0x14c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d018      	beq.n	80049ca <HAL_TIM_PWM_Start+0x10e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a0:	d013      	beq.n	80049ca <HAL_TIM_PWM_Start+0x10e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a19      	ldr	r2, [pc, #100]	@ (8004a0c <HAL_TIM_PWM_Start+0x150>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00e      	beq.n	80049ca <HAL_TIM_PWM_Start+0x10e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a17      	ldr	r2, [pc, #92]	@ (8004a10 <HAL_TIM_PWM_Start+0x154>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d009      	beq.n	80049ca <HAL_TIM_PWM_Start+0x10e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a16      	ldr	r2, [pc, #88]	@ (8004a14 <HAL_TIM_PWM_Start+0x158>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d004      	beq.n	80049ca <HAL_TIM_PWM_Start+0x10e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a14      	ldr	r2, [pc, #80]	@ (8004a18 <HAL_TIM_PWM_Start+0x15c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d111      	bne.n	80049ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b06      	cmp	r3, #6
 80049da:	d010      	beq.n	80049fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ec:	e007      	b.n	80049fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0201 	orr.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40014000 	.word	0x40014000

08004a1c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fe7f 	bl	8005732 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a29      	ldr	r2, [pc, #164]	@ (8004ae0 <HAL_TIM_PWM_Stop+0xc4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d117      	bne.n	8004a6e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6a1a      	ldr	r2, [r3, #32]
 8004a44:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10f      	bne.n	8004a6e <HAL_TIM_PWM_Stop+0x52>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d107      	bne.n	8004a6e <HAL_TIM_PWM_Stop+0x52>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10f      	bne.n	8004a9e <HAL_TIM_PWM_Stop+0x82>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a1a      	ldr	r2, [r3, #32]
 8004a84:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d107      	bne.n	8004a9e <HAL_TIM_PWM_Stop+0x82>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Stop+0x92>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aac:	e013      	b.n	8004ad6 <HAL_TIM_PWM_Stop+0xba>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Stop+0xa2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004abc:	e00b      	b.n	8004ad6 <HAL_TIM_PWM_Stop+0xba>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Stop+0xb2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004acc:	e003      	b.n	8004ad6 <HAL_TIM_PWM_Stop+0xba>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40010000 	.word	0x40010000

08004ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0202 	mvn.w	r2, #2
 8004b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa9d 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa8f 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 faa0 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d020      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01b      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0204 	mvn.w	r2, #4
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa77 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa69 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fa7a 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0208 	mvn.w	r2, #8
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa51 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa43 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa54 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0210 	mvn.w	r2, #16
 8004bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2208      	movs	r2, #8
 8004c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa2b 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa1d 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fa2e 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0201 	mvn.w	r2, #1
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fb ffee 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fdfc 	bl	800586c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f9ff 	bl	8005096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0220 	mvn.w	r2, #32
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fdce 	bl	8005858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e0ae      	b.n	8004e40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b0c      	cmp	r3, #12
 8004cee:	f200 809f 	bhi.w	8004e30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d2d 	.word	0x08004d2d
 8004cfc:	08004e31 	.word	0x08004e31
 8004d00:	08004e31 	.word	0x08004e31
 8004d04:	08004e31 	.word	0x08004e31
 8004d08:	08004d6d 	.word	0x08004d6d
 8004d0c:	08004e31 	.word	0x08004e31
 8004d10:	08004e31 	.word	0x08004e31
 8004d14:	08004e31 	.word	0x08004e31
 8004d18:	08004daf 	.word	0x08004daf
 8004d1c:	08004e31 	.word	0x08004e31
 8004d20:	08004e31 	.word	0x08004e31
 8004d24:	08004e31 	.word	0x08004e31
 8004d28:	08004def 	.word	0x08004def
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa46 	bl	80051c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0208 	orr.w	r2, r2, #8
 8004d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0204 	bic.w	r2, r2, #4
 8004d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6999      	ldr	r1, [r3, #24]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	619a      	str	r2, [r3, #24]
      break;
 8004d6a:	e064      	b.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fa8c 	bl	8005290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6999      	ldr	r1, [r3, #24]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	021a      	lsls	r2, r3, #8
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	619a      	str	r2, [r3, #24]
      break;
 8004dac:	e043      	b.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fad7 	bl	8005368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0208 	orr.w	r2, r2, #8
 8004dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0204 	bic.w	r2, r2, #4
 8004dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	61da      	str	r2, [r3, #28]
      break;
 8004dec:	e023      	b.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fb21 	bl	800543c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69d9      	ldr	r1, [r3, #28]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	021a      	lsls	r2, r3, #8
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	61da      	str	r2, [r3, #28]
      break;
 8004e2e:	e002      	b.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
      break;
 8004e34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_ConfigClockSource+0x1c>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e0b4      	b.n	8004fce <HAL_TIM_ConfigClockSource+0x186>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e9c:	d03e      	beq.n	8004f1c <HAL_TIM_ConfigClockSource+0xd4>
 8004e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ea2:	f200 8087 	bhi.w	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eaa:	f000 8086 	beq.w	8004fba <HAL_TIM_ConfigClockSource+0x172>
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb2:	d87f      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb4:	2b70      	cmp	r3, #112	@ 0x70
 8004eb6:	d01a      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0xa6>
 8004eb8:	2b70      	cmp	r3, #112	@ 0x70
 8004eba:	d87b      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ebc:	2b60      	cmp	r3, #96	@ 0x60
 8004ebe:	d050      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x11a>
 8004ec0:	2b60      	cmp	r3, #96	@ 0x60
 8004ec2:	d877      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec4:	2b50      	cmp	r3, #80	@ 0x50
 8004ec6:	d03c      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0xfa>
 8004ec8:	2b50      	cmp	r3, #80	@ 0x50
 8004eca:	d873      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ecc:	2b40      	cmp	r3, #64	@ 0x40
 8004ece:	d058      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x13a>
 8004ed0:	2b40      	cmp	r3, #64	@ 0x40
 8004ed2:	d86f      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed4:	2b30      	cmp	r3, #48	@ 0x30
 8004ed6:	d064      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ed8:	2b30      	cmp	r3, #48	@ 0x30
 8004eda:	d86b      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d060      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d867      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d05c      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d05a      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8004eec:	e062      	b.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004efe:	f000 fbf8 	bl	80056f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	609a      	str	r2, [r3, #8]
      break;
 8004f1a:	e04f      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f2c:	f000 fbe1 	bl	80056f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f3e:	609a      	str	r2, [r3, #8]
      break;
 8004f40:	e03c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f000 fb55 	bl	80055fe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2150      	movs	r1, #80	@ 0x50
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fbae 	bl	80056bc <TIM_ITRx_SetConfig>
      break;
 8004f60:	e02c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f000 fb74 	bl	800565c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2160      	movs	r1, #96	@ 0x60
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fb9e 	bl	80056bc <TIM_ITRx_SetConfig>
      break;
 8004f80:	e01c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f000 fb35 	bl	80055fe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2140      	movs	r1, #64	@ 0x40
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fb8e 	bl	80056bc <TIM_ITRx_SetConfig>
      break;
 8004fa0:	e00c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f000 fb85 	bl	80056bc <TIM_ITRx_SetConfig>
      break;
 8004fb2:	e003      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb8:	e000      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_TIM_SlaveConfigSynchro+0x18>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e031      	b.n	8005052 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fa6b 	bl	80054dc <TIM_SlaveTimer_SetConfig>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e018      	b.n	8005052 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800502e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800503e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3a      	ldr	r2, [pc, #232]	@ (80051a8 <TIM_Base_SetConfig+0xfc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00f      	beq.n	80050e4 <TIM_Base_SetConfig+0x38>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ca:	d00b      	beq.n	80050e4 <TIM_Base_SetConfig+0x38>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a37      	ldr	r2, [pc, #220]	@ (80051ac <TIM_Base_SetConfig+0x100>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d007      	beq.n	80050e4 <TIM_Base_SetConfig+0x38>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a36      	ldr	r2, [pc, #216]	@ (80051b0 <TIM_Base_SetConfig+0x104>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_Base_SetConfig+0x38>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a35      	ldr	r2, [pc, #212]	@ (80051b4 <TIM_Base_SetConfig+0x108>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d108      	bne.n	80050f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2b      	ldr	r2, [pc, #172]	@ (80051a8 <TIM_Base_SetConfig+0xfc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d01b      	beq.n	8005136 <TIM_Base_SetConfig+0x8a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005104:	d017      	beq.n	8005136 <TIM_Base_SetConfig+0x8a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a28      	ldr	r2, [pc, #160]	@ (80051ac <TIM_Base_SetConfig+0x100>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <TIM_Base_SetConfig+0x8a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a27      	ldr	r2, [pc, #156]	@ (80051b0 <TIM_Base_SetConfig+0x104>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_Base_SetConfig+0x8a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a26      	ldr	r2, [pc, #152]	@ (80051b4 <TIM_Base_SetConfig+0x108>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_Base_SetConfig+0x8a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a25      	ldr	r2, [pc, #148]	@ (80051b8 <TIM_Base_SetConfig+0x10c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_Base_SetConfig+0x8a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a24      	ldr	r2, [pc, #144]	@ (80051bc <TIM_Base_SetConfig+0x110>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_Base_SetConfig+0x8a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <TIM_Base_SetConfig+0x114>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d108      	bne.n	8005148 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800513c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0e      	ldr	r2, [pc, #56]	@ (80051a8 <TIM_Base_SetConfig+0xfc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d103      	bne.n	800517c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b01      	cmp	r3, #1
 800518c:	d105      	bne.n	800519a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f023 0201 	bic.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	611a      	str	r2, [r3, #16]
  }
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800

080051c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f023 0201 	bic.w	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f023 0302 	bic.w	r3, r3, #2
 800520c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a1c      	ldr	r2, [pc, #112]	@ (800528c <TIM_OC1_SetConfig+0xc8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10c      	bne.n	800523a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0308 	bic.w	r3, r3, #8
 8005226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f023 0304 	bic.w	r3, r3, #4
 8005238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a13      	ldr	r2, [pc, #76]	@ (800528c <TIM_OC1_SetConfig+0xc8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d111      	bne.n	8005266 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40010000 	.word	0x40010000

08005290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f023 0210 	bic.w	r2, r3, #16
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0320 	bic.w	r3, r3, #32
 80052da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005364 <TIM_OC2_SetConfig+0xd4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d10d      	bne.n	800530c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800530a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a15      	ldr	r2, [pc, #84]	@ (8005364 <TIM_OC2_SetConfig+0xd4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d113      	bne.n	800533c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800531a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000

08005368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005438 <TIM_OC3_SetConfig+0xd0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d10d      	bne.n	80053e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a14      	ldr	r2, [pc, #80]	@ (8005438 <TIM_OC3_SetConfig+0xd0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d113      	bne.n	8005412 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	621a      	str	r2, [r3, #32]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40010000 	.word	0x40010000

0800543c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a10      	ldr	r2, [pc, #64]	@ (80054d8 <TIM_OC4_SetConfig+0x9c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d109      	bne.n	80054b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	019b      	lsls	r3, r3, #6
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000

080054dc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f023 0307 	bic.w	r3, r3, #7
 800550a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b70      	cmp	r3, #112	@ 0x70
 8005524:	d01a      	beq.n	800555c <TIM_SlaveTimer_SetConfig+0x80>
 8005526:	2b70      	cmp	r3, #112	@ 0x70
 8005528:	d860      	bhi.n	80055ec <TIM_SlaveTimer_SetConfig+0x110>
 800552a:	2b60      	cmp	r3, #96	@ 0x60
 800552c:	d054      	beq.n	80055d8 <TIM_SlaveTimer_SetConfig+0xfc>
 800552e:	2b60      	cmp	r3, #96	@ 0x60
 8005530:	d85c      	bhi.n	80055ec <TIM_SlaveTimer_SetConfig+0x110>
 8005532:	2b50      	cmp	r3, #80	@ 0x50
 8005534:	d046      	beq.n	80055c4 <TIM_SlaveTimer_SetConfig+0xe8>
 8005536:	2b50      	cmp	r3, #80	@ 0x50
 8005538:	d858      	bhi.n	80055ec <TIM_SlaveTimer_SetConfig+0x110>
 800553a:	2b40      	cmp	r3, #64	@ 0x40
 800553c:	d019      	beq.n	8005572 <TIM_SlaveTimer_SetConfig+0x96>
 800553e:	2b40      	cmp	r3, #64	@ 0x40
 8005540:	d854      	bhi.n	80055ec <TIM_SlaveTimer_SetConfig+0x110>
 8005542:	2b30      	cmp	r3, #48	@ 0x30
 8005544:	d055      	beq.n	80055f2 <TIM_SlaveTimer_SetConfig+0x116>
 8005546:	2b30      	cmp	r3, #48	@ 0x30
 8005548:	d850      	bhi.n	80055ec <TIM_SlaveTimer_SetConfig+0x110>
 800554a:	2b20      	cmp	r3, #32
 800554c:	d051      	beq.n	80055f2 <TIM_SlaveTimer_SetConfig+0x116>
 800554e:	2b20      	cmp	r3, #32
 8005550:	d84c      	bhi.n	80055ec <TIM_SlaveTimer_SetConfig+0x110>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d04d      	beq.n	80055f2 <TIM_SlaveTimer_SetConfig+0x116>
 8005556:	2b10      	cmp	r3, #16
 8005558:	d04b      	beq.n	80055f2 <TIM_SlaveTimer_SetConfig+0x116>
 800555a:	e047      	b.n	80055ec <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800556c:	f000 f8c1 	bl	80056f2 <TIM_ETR_SetConfig>
      break;
 8005570:	e040      	b.n	80055f4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b05      	cmp	r3, #5
 8005578:	d101      	bne.n	800557e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e03b      	b.n	80055f6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0201 	bic.w	r2, r2, #1
 8005594:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055a4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
      break;
 80055c2:	e017      	b.n	80055f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d0:	461a      	mov	r2, r3
 80055d2:	f000 f814 	bl	80055fe <TIM_TI1_ConfigInputStage>
      break;
 80055d6:	e00d      	b.n	80055f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e4:	461a      	mov	r2, r3
 80055e6:	f000 f839 	bl	800565c <TIM_TI2_ConfigInputStage>
      break;
 80055ea:	e003      	b.n	80055f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	75fb      	strb	r3, [r7, #23]
      break;
 80055f0:	e000      	b.n	80055f4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80055f2:	bf00      	nop
  }

  return status;
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f023 0201 	bic.w	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 030a 	bic.w	r3, r3, #10
 800563a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0210 	bic.w	r2, r3, #16
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	031b      	lsls	r3, r3, #12
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005698:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	f043 0307 	orr.w	r3, r3, #7
 80056de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	609a      	str	r2, [r3, #8]
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b087      	sub	sp, #28
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
 80056fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800570c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	021a      	lsls	r2, r3, #8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	431a      	orrs	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	609a      	str	r2, [r3, #8]
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005732:	b480      	push	{r7}
 8005734:	b087      	sub	sp, #28
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2201      	movs	r2, #1
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a1a      	ldr	r2, [r3, #32]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	43db      	mvns	r3, r3
 8005754:	401a      	ands	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	fa01 f303 	lsl.w	r3, r1, r3
 800576a:	431a      	orrs	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	621a      	str	r2, [r3, #32]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005790:	2302      	movs	r3, #2
 8005792:	e050      	b.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e0:	d013      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a18      	ldr	r2, [pc, #96]	@ (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a16      	ldr	r2, [pc, #88]	@ (800584c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a15      	ldr	r2, [pc, #84]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a13      	ldr	r2, [pc, #76]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10c      	bne.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	4313      	orrs	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40014000 	.word	0x40014000

08005858 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005880:	b084      	sub	sp, #16
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	f107 001c 	add.w	r0, r7, #28
 800588e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005892:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005896:	2b01      	cmp	r3, #1
 8005898:	d123      	bne.n	80058e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80058ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d105      	bne.n	80058d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fae2 	bl	8006ea0 <USB_CoreReset>
 80058dc:	4603      	mov	r3, r0
 80058de:	73fb      	strb	r3, [r7, #15]
 80058e0:	e01b      	b.n	800591a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 fad6 	bl	8006ea0 <USB_CoreReset>
 80058f4:	4603      	mov	r3, r0
 80058f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	639a      	str	r2, [r3, #56]	@ 0x38
 800590c:	e005      	b.n	800591a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005912:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800591a:	7fbb      	ldrb	r3, [r7, #30]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10b      	bne.n	8005938 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f043 0206 	orr.w	r2, r3, #6
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f043 0220 	orr.w	r2, r3, #32
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005944:	b004      	add	sp, #16
 8005946:	4770      	bx	lr

08005948 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d165      	bne.n	8005a28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4a41      	ldr	r2, [pc, #260]	@ (8005a64 <USB_SetTurnaroundTime+0x11c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d906      	bls.n	8005972 <USB_SetTurnaroundTime+0x2a>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4a40      	ldr	r2, [pc, #256]	@ (8005a68 <USB_SetTurnaroundTime+0x120>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d202      	bcs.n	8005972 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800596c:	230f      	movs	r3, #15
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	e062      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	4a3c      	ldr	r2, [pc, #240]	@ (8005a68 <USB_SetTurnaroundTime+0x120>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d306      	bcc.n	8005988 <USB_SetTurnaroundTime+0x40>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a3b      	ldr	r2, [pc, #236]	@ (8005a6c <USB_SetTurnaroundTime+0x124>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d202      	bcs.n	8005988 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005982:	230e      	movs	r3, #14
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e057      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4a38      	ldr	r2, [pc, #224]	@ (8005a6c <USB_SetTurnaroundTime+0x124>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d306      	bcc.n	800599e <USB_SetTurnaroundTime+0x56>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4a37      	ldr	r2, [pc, #220]	@ (8005a70 <USB_SetTurnaroundTime+0x128>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d202      	bcs.n	800599e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005998:	230d      	movs	r3, #13
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	e04c      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	4a33      	ldr	r2, [pc, #204]	@ (8005a70 <USB_SetTurnaroundTime+0x128>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d306      	bcc.n	80059b4 <USB_SetTurnaroundTime+0x6c>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4a32      	ldr	r2, [pc, #200]	@ (8005a74 <USB_SetTurnaroundTime+0x12c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d802      	bhi.n	80059b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80059ae:	230c      	movs	r3, #12
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e041      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005a74 <USB_SetTurnaroundTime+0x12c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d906      	bls.n	80059ca <USB_SetTurnaroundTime+0x82>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4a2e      	ldr	r2, [pc, #184]	@ (8005a78 <USB_SetTurnaroundTime+0x130>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d802      	bhi.n	80059ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80059c4:	230b      	movs	r3, #11
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e036      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005a78 <USB_SetTurnaroundTime+0x130>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d906      	bls.n	80059e0 <USB_SetTurnaroundTime+0x98>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4a29      	ldr	r2, [pc, #164]	@ (8005a7c <USB_SetTurnaroundTime+0x134>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d802      	bhi.n	80059e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80059da:	230a      	movs	r3, #10
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e02b      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4a26      	ldr	r2, [pc, #152]	@ (8005a7c <USB_SetTurnaroundTime+0x134>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d906      	bls.n	80059f6 <USB_SetTurnaroundTime+0xae>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4a25      	ldr	r2, [pc, #148]	@ (8005a80 <USB_SetTurnaroundTime+0x138>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d202      	bcs.n	80059f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80059f0:	2309      	movs	r3, #9
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	e020      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4a21      	ldr	r2, [pc, #132]	@ (8005a80 <USB_SetTurnaroundTime+0x138>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d306      	bcc.n	8005a0c <USB_SetTurnaroundTime+0xc4>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4a20      	ldr	r2, [pc, #128]	@ (8005a84 <USB_SetTurnaroundTime+0x13c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d802      	bhi.n	8005a0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a06:	2308      	movs	r3, #8
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e015      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005a84 <USB_SetTurnaroundTime+0x13c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d906      	bls.n	8005a22 <USB_SetTurnaroundTime+0xda>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4a1c      	ldr	r2, [pc, #112]	@ (8005a88 <USB_SetTurnaroundTime+0x140>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d202      	bcs.n	8005a22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a1c:	2307      	movs	r3, #7
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e00a      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a22:	2306      	movs	r3, #6
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e007      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a2e:	2309      	movs	r3, #9
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	e001      	b.n	8005a38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a34:	2309      	movs	r3, #9
 8005a36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	029b      	lsls	r3, r3, #10
 8005a4c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005a50:	431a      	orrs	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	00d8acbf 	.word	0x00d8acbf
 8005a68:	00e4e1c0 	.word	0x00e4e1c0
 8005a6c:	00f42400 	.word	0x00f42400
 8005a70:	01067380 	.word	0x01067380
 8005a74:	011a499f 	.word	0x011a499f
 8005a78:	01312cff 	.word	0x01312cff
 8005a7c:	014ca43f 	.word	0x014ca43f
 8005a80:	016e3600 	.word	0x016e3600
 8005a84:	01a6ab1f 	.word	0x01a6ab1f
 8005a88:	01e84800 	.word	0x01e84800

08005a8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f043 0201 	orr.w	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f023 0201 	bic.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d115      	bne.n	8005b1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005afe:	200a      	movs	r0, #10
 8005b00:	f7fb fc46 	bl	8001390 <HAL_Delay>
      ms += 10U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	330a      	adds	r3, #10
 8005b08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f001 f939 	bl	8006d82 <USB_GetMode>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d01e      	beq.n	8005b54 <USB_SetCurrentMode+0x84>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b1a:	d9f0      	bls.n	8005afe <USB_SetCurrentMode+0x2e>
 8005b1c:	e01a      	b.n	8005b54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d115      	bne.n	8005b50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b30:	200a      	movs	r0, #10
 8005b32:	f7fb fc2d 	bl	8001390 <HAL_Delay>
      ms += 10U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	330a      	adds	r3, #10
 8005b3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 f920 	bl	8006d82 <USB_GetMode>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d005      	beq.n	8005b54 <USB_SetCurrentMode+0x84>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b4c:	d9f0      	bls.n	8005b30 <USB_SetCurrentMode+0x60>
 8005b4e:	e001      	b.n	8005b54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e005      	b.n	8005b60 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b58:	d101      	bne.n	8005b5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b68:	b084      	sub	sp, #16
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b086      	sub	sp, #24
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	e009      	b.n	8005b9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	3340      	adds	r3, #64	@ 0x40
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	2200      	movs	r2, #0
 8005b94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b0e      	cmp	r3, #14
 8005ba0:	d9f2      	bls.n	8005b88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ba2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d11c      	bne.n	8005be4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bb8:	f043 0302 	orr.w	r3, r3, #2
 8005bbc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bda:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38
 8005be2:	e00b      	b.n	8005bfc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c02:	461a      	mov	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d10d      	bne.n	8005c2c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d104      	bne.n	8005c22 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c18:	2100      	movs	r1, #0
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f968 	bl	8005ef0 <USB_SetDevSpeed>
 8005c20:	e008      	b.n	8005c34 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c22:	2101      	movs	r1, #1
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f963 	bl	8005ef0 <USB_SetDevSpeed>
 8005c2a:	e003      	b.n	8005c34 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c2c:	2103      	movs	r1, #3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f95e 	bl	8005ef0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c34:	2110      	movs	r1, #16
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f8fa 	bl	8005e30 <USB_FlushTxFifo>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f924 	bl	8005e94 <USB_FlushRxFifo>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c74:	461a      	mov	r2, r3
 8005c76:	2300      	movs	r3, #0
 8005c78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e043      	b.n	8005d08 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c96:	d118      	bne.n	8005cca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005caa:	461a      	mov	r2, r3
 8005cac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e013      	b.n	8005cdc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	e008      	b.n	8005cdc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2300      	movs	r3, #0
 8005cda:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2300      	movs	r3, #0
 8005cec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	3301      	adds	r3, #1
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d3b5      	bcc.n	8005c80 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d14:	2300      	movs	r3, #0
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	e043      	b.n	8005da2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d30:	d118      	bne.n	8005d64 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d44:	461a      	mov	r2, r3
 8005d46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e013      	b.n	8005d76 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e008      	b.n	8005d76 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d70:	461a      	mov	r2, r3
 8005d72:	2300      	movs	r3, #0
 8005d74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d82:	461a      	mov	r2, r3
 8005d84:	2300      	movs	r3, #0
 8005d86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d94:	461a      	mov	r2, r3
 8005d96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005da6:	461a      	mov	r2, r3
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d3b5      	bcc.n	8005d1a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dc0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005dce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d105      	bne.n	8005de4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	f043 0210 	orr.w	r2, r3, #16
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	4b10      	ldr	r3, [pc, #64]	@ (8005e2c <USB_DevInit+0x2c4>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005df0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f043 0208 	orr.w	r2, r3, #8
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e04:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d107      	bne.n	8005e1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e14:	f043 0304 	orr.w	r3, r3, #4
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e28:	b004      	add	sp, #16
 8005e2a:	4770      	bx	lr
 8005e2c:	803c3800 	.word	0x803c3800

08005e30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e4a:	d901      	bls.n	8005e50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e01b      	b.n	8005e88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	daf2      	bge.n	8005e3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	019b      	lsls	r3, r3, #6
 8005e60:	f043 0220 	orr.w	r2, r3, #32
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e74:	d901      	bls.n	8005e7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e006      	b.n	8005e88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	d0f0      	beq.n	8005e68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005eac:	d901      	bls.n	8005eb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e018      	b.n	8005ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	daf2      	bge.n	8005ea0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ed0:	d901      	bls.n	8005ed6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e006      	b.n	8005ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0310 	and.w	r3, r3, #16
 8005ede:	2b10      	cmp	r3, #16
 8005ee0:	d0f0      	beq.n	8005ec4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f10:	4313      	orrs	r3, r2
 8005f12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b087      	sub	sp, #28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0306 	and.w	r3, r3, #6
 8005f3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f42:	2300      	movs	r3, #0
 8005f44:	75fb      	strb	r3, [r7, #23]
 8005f46:	e00a      	b.n	8005f5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d002      	beq.n	8005f54 <USB_GetDevSpeed+0x32>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b06      	cmp	r3, #6
 8005f52:	d102      	bne.n	8005f5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f54:	2302      	movs	r3, #2
 8005f56:	75fb      	strb	r3, [r7, #23]
 8005f58:	e001      	b.n	8005f5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f5a:	230f      	movs	r3, #15
 8005f5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d13a      	bne.n	8005ffe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	68f9      	ldr	r1, [r7, #12]
 8005fa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d155      	bne.n	800606c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	791b      	ldrb	r3, [r3, #4]
 8005fda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fdc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	059b      	lsls	r3, r3, #22
 8005fe2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	e036      	b.n	800606c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006004:	69da      	ldr	r2, [r3, #28]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	2101      	movs	r1, #1
 8006010:	fa01 f303 	lsl.w	r3, r1, r3
 8006014:	041b      	lsls	r3, r3, #16
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800601c:	4313      	orrs	r3, r2
 800601e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d11a      	bne.n	800606c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	791b      	ldrb	r3, [r3, #4]
 8006050:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006052:	430b      	orrs	r3, r1
 8006054:	4313      	orrs	r3, r2
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800606a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d161      	bne.n	800615c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060ae:	d11f      	bne.n	80060f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	2101      	movs	r1, #1
 8006102:	fa01 f303 	lsl.w	r3, r1, r3
 8006106:	b29b      	uxth	r3, r3
 8006108:	43db      	mvns	r3, r3
 800610a:	68f9      	ldr	r1, [r7, #12]
 800610c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006110:	4013      	ands	r3, r2
 8006112:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	2101      	movs	r1, #1
 8006126:	fa01 f303 	lsl.w	r3, r1, r3
 800612a:	b29b      	uxth	r3, r3
 800612c:	43db      	mvns	r3, r3
 800612e:	68f9      	ldr	r1, [r7, #12]
 8006130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006134:	4013      	ands	r3, r2
 8006136:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	0159      	lsls	r1, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	440b      	add	r3, r1
 800614e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006152:	4619      	mov	r1, r3
 8006154:	4b35      	ldr	r3, [pc, #212]	@ (800622c <USB_DeactivateEndpoint+0x1b0>)
 8006156:	4013      	ands	r3, r2
 8006158:	600b      	str	r3, [r1, #0]
 800615a:	e060      	b.n	800621e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800616e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006172:	d11f      	bne.n	80061b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800618e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006192:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	041b      	lsls	r3, r3, #16
 80061cc:	43db      	mvns	r3, r3
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061d4:	4013      	ands	r3, r2
 80061d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	2101      	movs	r1, #1
 80061ea:	fa01 f303 	lsl.w	r3, r1, r3
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	43db      	mvns	r3, r3
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061f8:	4013      	ands	r3, r2
 80061fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	0159      	lsls	r1, r3, #5
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	440b      	add	r3, r1
 8006212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006216:	4619      	mov	r1, r3
 8006218:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <USB_DeactivateEndpoint+0x1b4>)
 800621a:	4013      	ands	r3, r2
 800621c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	ec337800 	.word	0xec337800
 8006230:	eff37800 	.word	0xeff37800

08006234 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08a      	sub	sp, #40	@ 0x28
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4613      	mov	r3, r2
 8006240:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	2b01      	cmp	r3, #1
 8006252:	f040 817a 	bne.w	800654a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d132      	bne.n	80062c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006278:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800627c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006280:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800629c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062bc:	0cdb      	lsrs	r3, r3, #19
 80062be:	04db      	lsls	r3, r3, #19
 80062c0:	6113      	str	r3, [r2, #16]
 80062c2:	e092      	b.n	80063ea <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062de:	0cdb      	lsrs	r3, r3, #19
 80062e0:	04db      	lsls	r3, r3, #19
 80062e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006302:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006306:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d11a      	bne.n	8006344 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	d903      	bls.n	8006322 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	440a      	add	r2, r1
 8006338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800633c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006340:	6113      	str	r3, [r2, #16]
 8006342:	e01b      	b.n	800637c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006350:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	6919      	ldr	r1, [r3, #16]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	440b      	add	r3, r1
 800635c:	1e59      	subs	r1, r3, #1
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	fbb1 f3f3 	udiv	r3, r1, r3
 8006366:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006368:	4ba2      	ldr	r3, [pc, #648]	@ (80065f4 <USB_EPStartXfer+0x3c0>)
 800636a:	400b      	ands	r3, r1
 800636c:	69b9      	ldr	r1, [r7, #24]
 800636e:	0148      	lsls	r0, r1, #5
 8006370:	69f9      	ldr	r1, [r7, #28]
 8006372:	4401      	add	r1, r0
 8006374:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006378:	4313      	orrs	r3, r2
 800637a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006392:	69b9      	ldr	r1, [r7, #24]
 8006394:	0148      	lsls	r0, r1, #5
 8006396:	69f9      	ldr	r1, [r7, #28]
 8006398:	4401      	add	r1, r0
 800639a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800639e:	4313      	orrs	r3, r2
 80063a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	791b      	ldrb	r3, [r3, #4]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d11f      	bne.n	80063ea <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063c4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80063c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d14b      	bne.n	8006488 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d009      	beq.n	800640c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006404:	461a      	mov	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	791b      	ldrb	r3, [r3, #4]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d128      	bne.n	8006466 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006420:	2b00      	cmp	r3, #0
 8006422:	d110      	bne.n	8006446 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	440a      	add	r2, r1
 800643a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800643e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	e00f      	b.n	8006466 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006464:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	440a      	add	r2, r1
 800647c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006480:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e165      	b.n	8006754 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	0151      	lsls	r1, r2, #5
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	440a      	add	r2, r1
 800649e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80064a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	791b      	ldrb	r3, [r3, #4]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d015      	beq.n	80064dc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 814d 	beq.w	8006754 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	2101      	movs	r1, #1
 80064cc:	fa01 f303 	lsl.w	r3, r1, r3
 80064d0:	69f9      	ldr	r1, [r7, #28]
 80064d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064d6:	4313      	orrs	r3, r2
 80064d8:	634b      	str	r3, [r1, #52]	@ 0x34
 80064da:	e13b      	b.n	8006754 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d110      	bne.n	800650e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	440a      	add	r2, r1
 8006502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006506:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	e00f      	b.n	800652e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	440a      	add	r2, r1
 8006524:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800652c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	68d9      	ldr	r1, [r3, #12]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	b298      	uxth	r0, r3
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	4603      	mov	r3, r0
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f9b8 	bl	80068b8 <USB_WritePacket>
 8006548:	e104      	b.n	8006754 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	440a      	add	r2, r1
 8006560:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006564:	0cdb      	lsrs	r3, r3, #19
 8006566:	04db      	lsls	r3, r3, #19
 8006568:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	440a      	add	r2, r1
 8006580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006584:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006588:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800658c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d131      	bne.n	80065f8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b8:	691a      	ldr	r2, [r3, #16]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065c2:	69b9      	ldr	r1, [r7, #24]
 80065c4:	0148      	lsls	r0, r1, #5
 80065c6:	69f9      	ldr	r1, [r7, #28]
 80065c8:	4401      	add	r1, r0
 80065ca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065ce:	4313      	orrs	r3, r2
 80065d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065f0:	6113      	str	r3, [r2, #16]
 80065f2:	e061      	b.n	80066b8 <USB_EPStartXfer+0x484>
 80065f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d123      	bne.n	8006648 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006616:	69b9      	ldr	r1, [r7, #24]
 8006618:	0148      	lsls	r0, r1, #5
 800661a:	69f9      	ldr	r1, [r7, #28]
 800661c:	4401      	add	r1, r0
 800661e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006622:	4313      	orrs	r3, r2
 8006624:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	0151      	lsls	r1, r2, #5
 8006638:	69fa      	ldr	r2, [r7, #28]
 800663a:	440a      	add	r2, r1
 800663c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006640:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006644:	6113      	str	r3, [r2, #16]
 8006646:	e037      	b.n	80066b8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	4413      	add	r3, r2
 8006652:	1e5a      	subs	r2, r3, #1
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	fbb2 f3f3 	udiv	r3, r2, r3
 800665c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	8afa      	ldrh	r2, [r7, #22]
 8006664:	fb03 f202 	mul.w	r2, r3, r2
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	8afb      	ldrh	r3, [r7, #22]
 800667c:	04d9      	lsls	r1, r3, #19
 800667e:	4b38      	ldr	r3, [pc, #224]	@ (8006760 <USB_EPStartXfer+0x52c>)
 8006680:	400b      	ands	r3, r1
 8006682:	69b9      	ldr	r1, [r7, #24]
 8006684:	0148      	lsls	r0, r1, #5
 8006686:	69f9      	ldr	r1, [r7, #28]
 8006688:	4401      	add	r1, r0
 800668a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800668e:	4313      	orrs	r3, r2
 8006690:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a8:	69b9      	ldr	r1, [r7, #24]
 80066aa:	0148      	lsls	r0, r1, #5
 80066ac:	69f9      	ldr	r1, [r7, #28]
 80066ae:	4401      	add	r1, r0
 80066b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80066b4:	4313      	orrs	r3, r2
 80066b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d10d      	bne.n	80066da <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	68d9      	ldr	r1, [r3, #12]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d6:	460a      	mov	r2, r1
 80066d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	791b      	ldrb	r3, [r3, #4]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d128      	bne.n	8006734 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d110      	bne.n	8006714 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800670c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e00f      	b.n	8006734 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800672e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006732:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800674e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006752:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3720      	adds	r7, #32
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	1ff80000 	.word	0x1ff80000

08006764 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d14a      	bne.n	8006818 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800679a:	f040 8086 	bne.w	80068aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	7812      	ldrb	r2, [r2, #0]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	7812      	ldrb	r2, [r2, #0]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d902      	bls.n	80067fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
          break;
 80067fa:	e056      	b.n	80068aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006810:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006814:	d0e7      	beq.n	80067e6 <USB_EPStopXfer+0x82>
 8006816:	e048      	b.n	80068aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800682c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006830:	d13b      	bne.n	80068aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	7812      	ldrb	r2, [r2, #0]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006850:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006854:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	440a      	add	r2, r1
 8006870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006874:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006878:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006886:	4293      	cmp	r3, r2
 8006888:	d902      	bls.n	8006890 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	75fb      	strb	r3, [r7, #23]
          break;
 800688e:	e00c      	b.n	80068aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068a8:	d0e7      	beq.n	800687a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b089      	sub	sp, #36	@ 0x24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	4611      	mov	r1, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	460b      	mov	r3, r1
 80068c8:	71fb      	strb	r3, [r7, #7]
 80068ca:	4613      	mov	r3, r2
 80068cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d123      	bne.n	8006926 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068de:	88bb      	ldrh	r3, [r7, #4]
 80068e0:	3303      	adds	r3, #3
 80068e2:	089b      	lsrs	r3, r3, #2
 80068e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068e6:	2300      	movs	r3, #0
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e018      	b.n	800691e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	031a      	lsls	r2, r3, #12
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f8:	461a      	mov	r2, r3
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	3301      	adds	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	3301      	adds	r3, #1
 800690a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	3301      	adds	r3, #1
 8006910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	3301      	adds	r3, #1
 8006916:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	3301      	adds	r3, #1
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d3e2      	bcc.n	80068ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3724      	adds	r7, #36	@ 0x24
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006934:	b480      	push	{r7}
 8006936:	b08b      	sub	sp, #44	@ 0x2c
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800694a:	88fb      	ldrh	r3, [r7, #6]
 800694c:	089b      	lsrs	r3, r3, #2
 800694e:	b29b      	uxth	r3, r3
 8006950:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	f003 0303 	and.w	r3, r3, #3
 8006958:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800695a:	2300      	movs	r3, #0
 800695c:	623b      	str	r3, [r7, #32]
 800695e:	e014      	b.n	800698a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696a:	601a      	str	r2, [r3, #0]
    pDest++;
 800696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696e:	3301      	adds	r3, #1
 8006970:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	3301      	adds	r3, #1
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697a:	3301      	adds	r3, #1
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	3301      	adds	r3, #1
 8006982:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	3301      	adds	r3, #1
 8006988:	623b      	str	r3, [r7, #32]
 800698a:	6a3a      	ldr	r2, [r7, #32]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	429a      	cmp	r2, r3
 8006990:	d3e6      	bcc.n	8006960 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006992:	8bfb      	ldrh	r3, [r7, #30]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01e      	beq.n	80069d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069a2:	461a      	mov	r2, r3
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	fa22 f303 	lsr.w	r3, r2, r3
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	701a      	strb	r2, [r3, #0]
      i++;
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	3301      	adds	r3, #1
 80069c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c6:	3301      	adds	r3, #1
 80069c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80069ca:	8bfb      	ldrh	r3, [r7, #30]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069d0:	8bfb      	ldrh	r3, [r7, #30]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1ea      	bne.n	80069ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069d8:	4618      	mov	r0, r3
 80069da:	372c      	adds	r7, #44	@ 0x2c
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	785b      	ldrb	r3, [r3, #1]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d12c      	bne.n	8006a5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	db12      	blt.n	8006a38 <USB_EPSetStall+0x54>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00f      	beq.n	8006a38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	0151      	lsls	r1, r2, #5
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	e02b      	b.n	8006ab2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	db12      	blt.n	8006a92 <USB_EPSetStall+0xae>
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00f      	beq.n	8006a92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	0151      	lsls	r1, r2, #5
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	440a      	add	r2, r1
 8006aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ab0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d128      	bne.n	8006b2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006afa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	791b      	ldrb	r3, [r3, #4]
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d003      	beq.n	8006b0c <USB_EPClearStall+0x4c>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	791b      	ldrb	r3, [r3, #4]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d138      	bne.n	8006b7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	e027      	b.n	8006b7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	791b      	ldrb	r3, [r3, #4]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d003      	beq.n	8006b5e <USB_EPClearStall+0x9e>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	791b      	ldrb	r3, [r3, #4]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d10f      	bne.n	8006b7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006baa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006bae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006bc0:	68f9      	ldr	r1, [r7, #12]
 8006bc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c06:	f023 0302 	bic.w	r3, r3, #2
 8006c0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c34:	f023 0303 	bic.w	r3, r3, #3
 8006c38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c48:	f043 0302 	orr.w	r3, r3, #2
 8006c4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4013      	ands	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c74:	68fb      	ldr	r3, [r7, #12]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	0c1b      	lsrs	r3, r3, #16
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b085      	sub	sp, #20
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	b29b      	uxth	r3, r3
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	4013      	ands	r3, r2
 8006d16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d18:	68bb      	ldr	r3, [r7, #8]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b087      	sub	sp, #28
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	460b      	mov	r3, r1
 8006d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	01db      	lsls	r3, r3, #7
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4013      	ands	r3, r2
 8006d72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d74:	68bb      	ldr	r3, [r7, #8]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006db8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006dbc:	f023 0307 	bic.w	r3, r3, #7
 8006dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	460b      	mov	r3, r1
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	333c      	adds	r3, #60	@ 0x3c
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4a26      	ldr	r2, [pc, #152]	@ (8006e9c <USB_EP0_OutStart+0xb8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d90a      	bls.n	8006e1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e18:	d101      	bne.n	8006e1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e037      	b.n	8006e8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e24:	461a      	mov	r2, r3
 8006e26:	2300      	movs	r3, #0
 8006e28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e4c:	f043 0318 	orr.w	r3, r3, #24
 8006e50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e60:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006e64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e66:	7afb      	ldrb	r3, [r7, #11]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d10f      	bne.n	8006e8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e72:	461a      	mov	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e86:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	4f54300a 	.word	0x4f54300a

08006ea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eb8:	d901      	bls.n	8006ebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e01b      	b.n	8006ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	daf2      	bge.n	8006eac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f043 0201 	orr.w	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ee2:	d901      	bls.n	8006ee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e006      	b.n	8006ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d0f0      	beq.n	8006ed6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f10:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006f14:	f002 fc7e 	bl	8009814 <USBD_static_malloc>
 8006f18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d109      	bne.n	8006f34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	32b0      	adds	r2, #176	@ 0xb0
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006f30:	2302      	movs	r3, #2
 8006f32:	e0d4      	b.n	80070de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006f34:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006f38:	2100      	movs	r1, #0
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f002 fce2 	bl	8009904 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	32b0      	adds	r2, #176	@ 0xb0
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	32b0      	adds	r2, #176	@ 0xb0
 8006f5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	7c1b      	ldrb	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d138      	bne.n	8006fde <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80070e8 <USBD_CDC_Init+0x1e4>)
 8006f6e:	7819      	ldrb	r1, [r3, #0]
 8006f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f74:	2202      	movs	r2, #2
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f002 fb29 	bl	80095ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80070e8 <USBD_CDC_Init+0x1e4>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f003 020f 	and.w	r2, r3, #15
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	3324      	adds	r3, #36	@ 0x24
 8006f92:	2201      	movs	r2, #1
 8006f94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f96:	4b55      	ldr	r3, [pc, #340]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 8006f98:	7819      	ldrb	r1, [r3, #0]
 8006f9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f002 fb14 	bl	80095ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006fa6:	4b51      	ldr	r3, [pc, #324]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	f003 020f 	and.w	r2, r3, #15
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	440b      	add	r3, r1
 8006fba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80070f0 <USBD_CDC_Init+0x1ec>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	f003 020f 	and.w	r2, r3, #15
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	3326      	adds	r3, #38	@ 0x26
 8006fd8:	2210      	movs	r2, #16
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	e035      	b.n	800704a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fde:	4b42      	ldr	r3, [pc, #264]	@ (80070e8 <USBD_CDC_Init+0x1e4>)
 8006fe0:	7819      	ldrb	r1, [r3, #0]
 8006fe2:	2340      	movs	r3, #64	@ 0x40
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f002 faf1 	bl	80095ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006fec:	4b3e      	ldr	r3, [pc, #248]	@ (80070e8 <USBD_CDC_Init+0x1e4>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	f003 020f 	and.w	r2, r3, #15
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	440b      	add	r3, r1
 8007000:	3324      	adds	r3, #36	@ 0x24
 8007002:	2201      	movs	r2, #1
 8007004:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007006:	4b39      	ldr	r3, [pc, #228]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 8007008:	7819      	ldrb	r1, [r3, #0]
 800700a:	2340      	movs	r3, #64	@ 0x40
 800700c:	2202      	movs	r2, #2
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f002 fadd 	bl	80095ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007014:	4b35      	ldr	r3, [pc, #212]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f003 020f 	and.w	r2, r3, #15
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800702c:	2201      	movs	r2, #1
 800702e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007030:	4b2f      	ldr	r3, [pc, #188]	@ (80070f0 <USBD_CDC_Init+0x1ec>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	3326      	adds	r3, #38	@ 0x26
 8007046:	2210      	movs	r2, #16
 8007048:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800704a:	4b29      	ldr	r3, [pc, #164]	@ (80070f0 <USBD_CDC_Init+0x1ec>)
 800704c:	7819      	ldrb	r1, [r3, #0]
 800704e:	2308      	movs	r3, #8
 8007050:	2203      	movs	r2, #3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f002 fabb 	bl	80095ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007058:	4b25      	ldr	r3, [pc, #148]	@ (80070f0 <USBD_CDC_Init+0x1ec>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f003 020f 	and.w	r2, r3, #15
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	3324      	adds	r3, #36	@ 0x24
 800706e:	2201      	movs	r2, #1
 8007070:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	33b0      	adds	r3, #176	@ 0xb0
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80070a8:	2302      	movs	r3, #2
 80070aa:	e018      	b.n	80070de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7c1b      	ldrb	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070b4:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 80070b6:	7819      	ldrb	r1, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f002 fb72 	bl	80097ac <USBD_LL_PrepareReceive>
 80070c8:	e008      	b.n	80070dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070ca:	4b08      	ldr	r3, [pc, #32]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 80070cc:	7819      	ldrb	r1, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070d4:	2340      	movs	r3, #64	@ 0x40
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f002 fb68 	bl	80097ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	200000c3 	.word	0x200000c3
 80070ec:	200000c4 	.word	0x200000c4
 80070f0:	200000c5 	.word	0x200000c5

080070f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007100:	4b3a      	ldr	r3, [pc, #232]	@ (80071ec <USBD_CDC_DeInit+0xf8>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f002 fa87 	bl	800961a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800710c:	4b37      	ldr	r3, [pc, #220]	@ (80071ec <USBD_CDC_DeInit+0xf8>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	f003 020f 	and.w	r2, r3, #15
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	440b      	add	r3, r1
 8007120:	3324      	adds	r3, #36	@ 0x24
 8007122:	2200      	movs	r2, #0
 8007124:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007126:	4b32      	ldr	r3, [pc, #200]	@ (80071f0 <USBD_CDC_DeInit+0xfc>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f002 fa74 	bl	800961a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007132:	4b2f      	ldr	r3, [pc, #188]	@ (80071f0 <USBD_CDC_DeInit+0xfc>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 020f 	and.w	r2, r3, #15
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	440b      	add	r3, r1
 8007146:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800714a:	2200      	movs	r2, #0
 800714c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800714e:	4b29      	ldr	r3, [pc, #164]	@ (80071f4 <USBD_CDC_DeInit+0x100>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f002 fa60 	bl	800961a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800715a:	4b26      	ldr	r3, [pc, #152]	@ (80071f4 <USBD_CDC_DeInit+0x100>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	f003 020f 	and.w	r2, r3, #15
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	3324      	adds	r3, #36	@ 0x24
 8007170:	2200      	movs	r2, #0
 8007172:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007174:	4b1f      	ldr	r3, [pc, #124]	@ (80071f4 <USBD_CDC_DeInit+0x100>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	f003 020f 	and.w	r2, r3, #15
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	3326      	adds	r3, #38	@ 0x26
 800718a:	2200      	movs	r2, #0
 800718c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	32b0      	adds	r2, #176	@ 0xb0
 8007198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01f      	beq.n	80071e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	33b0      	adds	r3, #176	@ 0xb0
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	32b0      	adds	r2, #176	@ 0xb0
 80071be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f002 fb34 	bl	8009830 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32b0      	adds	r2, #176	@ 0xb0
 80071d2:	2100      	movs	r1, #0
 80071d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	200000c3 	.word	0x200000c3
 80071f0:	200000c4 	.word	0x200000c4
 80071f4:	200000c5 	.word	0x200000c5

080071f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	32b0      	adds	r2, #176	@ 0xb0
 800720c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007210:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007224:	2303      	movs	r3, #3
 8007226:	e0bf      	b.n	80073a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007230:	2b00      	cmp	r3, #0
 8007232:	d050      	beq.n	80072d6 <USBD_CDC_Setup+0xde>
 8007234:	2b20      	cmp	r3, #32
 8007236:	f040 80af 	bne.w	8007398 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	88db      	ldrh	r3, [r3, #6]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d03a      	beq.n	80072b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	b25b      	sxtb	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	da1b      	bge.n	8007284 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	33b0      	adds	r3, #176	@ 0xb0
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007262:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	88d2      	ldrh	r2, [r2, #6]
 8007268:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	88db      	ldrh	r3, [r3, #6]
 800726e:	2b07      	cmp	r3, #7
 8007270:	bf28      	it	cs
 8007272:	2307      	movcs	r3, #7
 8007274:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	89fa      	ldrh	r2, [r7, #14]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 fd87 	bl	8008d90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007282:	e090      	b.n	80073a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	785a      	ldrb	r2, [r3, #1]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	88db      	ldrh	r3, [r3, #6]
 8007292:	2b3f      	cmp	r3, #63	@ 0x3f
 8007294:	d803      	bhi.n	800729e <USBD_CDC_Setup+0xa6>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	88db      	ldrh	r3, [r3, #6]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	e000      	b.n	80072a0 <USBD_CDC_Setup+0xa8>
 800729e:	2240      	movs	r2, #64	@ 0x40
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80072a6:	6939      	ldr	r1, [r7, #16]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80072ae:	461a      	mov	r2, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 fd99 	bl	8008de8 <USBD_CtlPrepareRx>
      break;
 80072b6:	e076      	b.n	80073a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	33b0      	adds	r3, #176	@ 0xb0
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	7850      	ldrb	r0, [r2, #1]
 80072ce:	2200      	movs	r2, #0
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	4798      	blx	r3
      break;
 80072d4:	e067      	b.n	80073a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	2b0b      	cmp	r3, #11
 80072dc:	d851      	bhi.n	8007382 <USBD_CDC_Setup+0x18a>
 80072de:	a201      	add	r2, pc, #4	@ (adr r2, 80072e4 <USBD_CDC_Setup+0xec>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007315 	.word	0x08007315
 80072e8:	08007391 	.word	0x08007391
 80072ec:	08007383 	.word	0x08007383
 80072f0:	08007383 	.word	0x08007383
 80072f4:	08007383 	.word	0x08007383
 80072f8:	08007383 	.word	0x08007383
 80072fc:	08007383 	.word	0x08007383
 8007300:	08007383 	.word	0x08007383
 8007304:	08007383 	.word	0x08007383
 8007308:	08007383 	.word	0x08007383
 800730c:	0800733f 	.word	0x0800733f
 8007310:	08007369 	.word	0x08007369
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b03      	cmp	r3, #3
 800731e:	d107      	bne.n	8007330 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007320:	f107 030a 	add.w	r3, r7, #10
 8007324:	2202      	movs	r2, #2
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 fd31 	bl	8008d90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800732e:	e032      	b.n	8007396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fcbb 	bl	8008cae <USBD_CtlError>
            ret = USBD_FAIL;
 8007338:	2303      	movs	r3, #3
 800733a:	75fb      	strb	r3, [r7, #23]
          break;
 800733c:	e02b      	b.n	8007396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b03      	cmp	r3, #3
 8007348:	d107      	bne.n	800735a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800734a:	f107 030d 	add.w	r3, r7, #13
 800734e:	2201      	movs	r2, #1
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fd1c 	bl	8008d90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007358:	e01d      	b.n	8007396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 fca6 	bl	8008cae <USBD_CtlError>
            ret = USBD_FAIL;
 8007362:	2303      	movs	r3, #3
 8007364:	75fb      	strb	r3, [r7, #23]
          break;
 8007366:	e016      	b.n	8007396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b03      	cmp	r3, #3
 8007372:	d00f      	beq.n	8007394 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f001 fc99 	bl	8008cae <USBD_CtlError>
            ret = USBD_FAIL;
 800737c:	2303      	movs	r3, #3
 800737e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007380:	e008      	b.n	8007394 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 fc92 	bl	8008cae <USBD_CtlError>
          ret = USBD_FAIL;
 800738a:	2303      	movs	r3, #3
 800738c:	75fb      	strb	r3, [r7, #23]
          break;
 800738e:	e002      	b.n	8007396 <USBD_CDC_Setup+0x19e>
          break;
 8007390:	bf00      	nop
 8007392:	e008      	b.n	80073a6 <USBD_CDC_Setup+0x1ae>
          break;
 8007394:	bf00      	nop
      }
      break;
 8007396:	e006      	b.n	80073a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 fc87 	bl	8008cae <USBD_CtlError>
      ret = USBD_FAIL;
 80073a0:	2303      	movs	r3, #3
 80073a2:	75fb      	strb	r3, [r7, #23]
      break;
 80073a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32b0      	adds	r2, #176	@ 0xb0
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e065      	b.n	80074a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	32b0      	adds	r2, #176	@ 0xb0
 80073e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	f003 020f 	and.w	r2, r3, #15
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	3318      	adds	r3, #24
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02f      	beq.n	8007464 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	f003 020f 	and.w	r2, r3, #15
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	440b      	add	r3, r1
 8007416:	3318      	adds	r3, #24
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	f003 010f 	and.w	r1, r3, #15
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	460b      	mov	r3, r1
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	440b      	add	r3, r1
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4403      	add	r3, r0
 800742c:	331c      	adds	r3, #28
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	fbb2 f1f3 	udiv	r1, r2, r3
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800743a:	2b00      	cmp	r3, #0
 800743c:	d112      	bne.n	8007464 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	f003 020f 	and.w	r2, r3, #15
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	440b      	add	r3, r1
 8007450:	3318      	adds	r3, #24
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007456:	78f9      	ldrb	r1, [r7, #3]
 8007458:	2300      	movs	r3, #0
 800745a:	2200      	movs	r2, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f002 f984 	bl	800976a <USBD_LL_Transmit>
 8007462:	e01f      	b.n	80074a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	33b0      	adds	r3, #176	@ 0xb0
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d010      	beq.n	80074a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	33b0      	adds	r3, #176	@ 0xb0
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	460b      	mov	r3, r1
 80074b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	32b0      	adds	r2, #176	@ 0xb0
 80074c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	32b0      	adds	r2, #176	@ 0xb0
 80074d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	e01a      	b.n	8007516 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f002 f982 	bl	80097ee <USBD_LL_GetRxDataSize>
 80074ea:	4602      	mov	r2, r0
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	33b0      	adds	r3, #176	@ 0xb0
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007510:	4611      	mov	r1, r2
 8007512:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	32b0      	adds	r2, #176	@ 0xb0
 8007530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007534:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	e024      	b.n	800758a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	33b0      	adds	r3, #176	@ 0xb0
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d019      	beq.n	8007588 <USBD_CDC_EP0_RxReady+0x6a>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800755a:	2bff      	cmp	r3, #255	@ 0xff
 800755c:	d014      	beq.n	8007588 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	33b0      	adds	r3, #176	@ 0xb0
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007576:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800757e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	22ff      	movs	r2, #255	@ 0xff
 8007584:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800759c:	2182      	movs	r1, #130	@ 0x82
 800759e:	4818      	ldr	r0, [pc, #96]	@ (8007600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075a0:	f000 fd4f 	bl	8008042 <USBD_GetEpDesc>
 80075a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075a6:	2101      	movs	r1, #1
 80075a8:	4815      	ldr	r0, [pc, #84]	@ (8007600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075aa:	f000 fd4a 	bl	8008042 <USBD_GetEpDesc>
 80075ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075b0:	2181      	movs	r1, #129	@ 0x81
 80075b2:	4813      	ldr	r0, [pc, #76]	@ (8007600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075b4:	f000 fd45 	bl	8008042 <USBD_GetEpDesc>
 80075b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2210      	movs	r2, #16
 80075c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d006      	beq.n	80075da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075d4:	711a      	strb	r2, [r3, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075e8:	711a      	strb	r2, [r3, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2243      	movs	r2, #67	@ 0x43
 80075f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075f4:	4b02      	ldr	r3, [pc, #8]	@ (8007600 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000080 	.word	0x20000080

08007604 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800760c:	2182      	movs	r1, #130	@ 0x82
 800760e:	4818      	ldr	r0, [pc, #96]	@ (8007670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007610:	f000 fd17 	bl	8008042 <USBD_GetEpDesc>
 8007614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007616:	2101      	movs	r1, #1
 8007618:	4815      	ldr	r0, [pc, #84]	@ (8007670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800761a:	f000 fd12 	bl	8008042 <USBD_GetEpDesc>
 800761e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007620:	2181      	movs	r1, #129	@ 0x81
 8007622:	4813      	ldr	r0, [pc, #76]	@ (8007670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007624:	f000 fd0d 	bl	8008042 <USBD_GetEpDesc>
 8007628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2210      	movs	r2, #16
 8007634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d006      	beq.n	800764a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2200      	movs	r2, #0
 8007640:	711a      	strb	r2, [r3, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f042 0202 	orr.w	r2, r2, #2
 8007648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d006      	beq.n	800765e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	711a      	strb	r2, [r3, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f042 0202 	orr.w	r2, r2, #2
 800765c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2243      	movs	r2, #67	@ 0x43
 8007662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007664:	4b02      	ldr	r3, [pc, #8]	@ (8007670 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000080 	.word	0x20000080

08007674 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800767c:	2182      	movs	r1, #130	@ 0x82
 800767e:	4818      	ldr	r0, [pc, #96]	@ (80076e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007680:	f000 fcdf 	bl	8008042 <USBD_GetEpDesc>
 8007684:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007686:	2101      	movs	r1, #1
 8007688:	4815      	ldr	r0, [pc, #84]	@ (80076e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800768a:	f000 fcda 	bl	8008042 <USBD_GetEpDesc>
 800768e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007690:	2181      	movs	r1, #129	@ 0x81
 8007692:	4813      	ldr	r0, [pc, #76]	@ (80076e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007694:	f000 fcd5 	bl	8008042 <USBD_GetEpDesc>
 8007698:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2210      	movs	r2, #16
 80076a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076b4:	711a      	strb	r2, [r3, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d006      	beq.n	80076ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c8:	711a      	strb	r2, [r3, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2243      	movs	r2, #67	@ 0x43
 80076d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076d4:	4b02      	ldr	r3, [pc, #8]	@ (80076e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000080 	.word	0x20000080

080076e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	220a      	movs	r2, #10
 80076f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076f2:	4b03      	ldr	r3, [pc, #12]	@ (8007700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	2000003c 	.word	0x2000003c

08007704 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007714:	2303      	movs	r3, #3
 8007716:	e009      	b.n	800772c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	33b0      	adds	r3, #176	@ 0xb0
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	32b0      	adds	r2, #176	@ 0xb0
 800774e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007752:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800775a:	2303      	movs	r3, #3
 800775c:	e008      	b.n	8007770 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	371c      	adds	r7, #28
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	32b0      	adds	r2, #176	@ 0xb0
 8007790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007794:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	e004      	b.n	80077aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
	...

080077b8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	32b0      	adds	r2, #176	@ 0xb0
 80077ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80077d0:	2301      	movs	r3, #1
 80077d2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077da:	2303      	movs	r3, #3
 80077dc:	e025      	b.n	800782a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d11f      	bne.n	8007828 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80077f0:	4b10      	ldr	r3, [pc, #64]	@ (8007834 <USBD_CDC_TransmitPacket+0x7c>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4403      	add	r3, r0
 800780a:	3318      	adds	r3, #24
 800780c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800780e:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <USBD_CDC_TransmitPacket+0x7c>)
 8007810:	7819      	ldrb	r1, [r3, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 ffa3 	bl	800976a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	200000c3 	.word	0x200000c3

08007838 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	32b0      	adds	r2, #176	@ 0xb0
 800784a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	32b0      	adds	r2, #176	@ 0xb0
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007862:	2303      	movs	r3, #3
 8007864:	e018      	b.n	8007898 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7c1b      	ldrb	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800786e:	4b0c      	ldr	r3, [pc, #48]	@ (80078a0 <USBD_CDC_ReceivePacket+0x68>)
 8007870:	7819      	ldrb	r1, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 ff95 	bl	80097ac <USBD_LL_PrepareReceive>
 8007882:	e008      	b.n	8007896 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007884:	4b06      	ldr	r3, [pc, #24]	@ (80078a0 <USBD_CDC_ReceivePacket+0x68>)
 8007886:	7819      	ldrb	r1, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800788e:	2340      	movs	r3, #64	@ 0x40
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 ff8b 	bl	80097ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200000c4 	.word	0x200000c4

080078a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e01f      	b.n	80078fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	79fa      	ldrb	r2, [r7, #7]
 80078ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f001 fe05 	bl	8009500 <USBD_LL_Init>
 80078f6:	4603      	mov	r3, r0
 80078f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	e025      	b.n	8007968 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	32ae      	adds	r2, #174	@ 0xae
 800792e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00f      	beq.n	8007958 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	32ae      	adds	r2, #174	@ 0xae
 8007942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007948:	f107 020e 	add.w	r2, r7, #14
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
 8007950:	4602      	mov	r2, r0
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 fe0d 	bl	8009598 <USBD_LL_Start>
 800797e:	4603      	mov	r3, r0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007990:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	4611      	mov	r1, r2
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	4611      	mov	r1, r2
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80079fc:	2303      	movs	r3, #3
 80079fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 f90c 	bl	8008c3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007a30:	461a      	mov	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a3e:	f003 031f 	and.w	r3, r3, #31
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d01a      	beq.n	8007a7c <USBD_LL_SetupStage+0x72>
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d822      	bhi.n	8007a90 <USBD_LL_SetupStage+0x86>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <USBD_LL_SetupStage+0x4a>
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d00a      	beq.n	8007a68 <USBD_LL_SetupStage+0x5e>
 8007a52:	e01d      	b.n	8007a90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fb63 	bl	8008128 <USBD_StdDevReq>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]
      break;
 8007a66:	e020      	b.n	8007aaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fbcb 	bl	800820c <USBD_StdItfReq>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7a:	e016      	b.n	8007aaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fc2d 	bl	80082e4 <USBD_StdEPReq>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8e:	e00c      	b.n	8007aaa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 fdda 	bl	8009658 <USBD_LL_StallEP>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa8:	bf00      	nop
  }

  return ret;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	460b      	mov	r3, r1
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d16e      	bne.n	8007baa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007ad2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	f040 8098 	bne.w	8007c10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d913      	bls.n	8007b14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	1ad2      	subs	r2, r2, r3
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	4293      	cmp	r3, r2
 8007b04:	bf28      	it	cs
 8007b06:	4613      	movcs	r3, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f001 f988 	bl	8008e22 <USBD_CtlContinueRx>
 8007b12:	e07d      	b.n	8007c10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d014      	beq.n	8007b4c <USBD_LL_DataOutStage+0x98>
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d81d      	bhi.n	8007b62 <USBD_LL_DataOutStage+0xae>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <USBD_LL_DataOutStage+0x7c>
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d003      	beq.n	8007b36 <USBD_LL_DataOutStage+0x82>
 8007b2e:	e018      	b.n	8007b62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	75bb      	strb	r3, [r7, #22]
            break;
 8007b34:	e018      	b.n	8007b68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	4619      	mov	r1, r3
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fa64 	bl	800800e <USBD_CoreFindIF>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75bb      	strb	r3, [r7, #22]
            break;
 8007b4a:	e00d      	b.n	8007b68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	4619      	mov	r1, r3
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 fa66 	bl	8008028 <USBD_CoreFindEP>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75bb      	strb	r3, [r7, #22]
            break;
 8007b60:	e002      	b.n	8007b68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	75bb      	strb	r3, [r7, #22]
            break;
 8007b66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b68:	7dbb      	ldrb	r3, [r7, #22]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d119      	bne.n	8007ba2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d113      	bne.n	8007ba2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b7a:	7dba      	ldrb	r2, [r7, #22]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	32ae      	adds	r2, #174	@ 0xae
 8007b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00b      	beq.n	8007ba2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007b8a:	7dba      	ldrb	r2, [r7, #22]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b92:	7dba      	ldrb	r2, [r7, #22]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	32ae      	adds	r2, #174	@ 0xae
 8007b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f001 f94e 	bl	8008e44 <USBD_CtlSendStatus>
 8007ba8:	e032      	b.n	8007c10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007baa:	7afb      	ldrb	r3, [r7, #11]
 8007bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 fa37 	bl	8008028 <USBD_CoreFindEP>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bbe:	7dbb      	ldrb	r3, [r7, #22]
 8007bc0:	2bff      	cmp	r3, #255	@ 0xff
 8007bc2:	d025      	beq.n	8007c10 <USBD_LL_DataOutStage+0x15c>
 8007bc4:	7dbb      	ldrb	r3, [r7, #22]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d122      	bne.n	8007c10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d117      	bne.n	8007c06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007bd6:	7dba      	ldrb	r2, [r7, #22]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	32ae      	adds	r2, #174	@ 0xae
 8007bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00f      	beq.n	8007c06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007be6:	7dba      	ldrb	r2, [r7, #22]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007bee:	7dba      	ldrb	r2, [r7, #22]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	32ae      	adds	r2, #174	@ 0xae
 8007bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	7afa      	ldrb	r2, [r7, #11]
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	4798      	blx	r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
 8007c0e:	e000      	b.n	8007c12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b086      	sub	sp, #24
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	460b      	mov	r3, r1
 8007c24:	607a      	str	r2, [r7, #4]
 8007c26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d16f      	bne.n	8007d0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3314      	adds	r3, #20
 8007c32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d15a      	bne.n	8007cf4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d914      	bls.n	8007c74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	1ad2      	subs	r2, r2, r3
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f001 f8b0 	bl	8008dc6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c66:	2300      	movs	r3, #0
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f001 fd9d 	bl	80097ac <USBD_LL_PrepareReceive>
 8007c72:	e03f      	b.n	8007cf4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d11c      	bne.n	8007cba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d316      	bcc.n	8007cba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d20f      	bcs.n	8007cba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f001 f891 	bl	8008dc6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cac:	2300      	movs	r3, #0
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f001 fd7a 	bl	80097ac <USBD_LL_PrepareReceive>
 8007cb8:	e01c      	b.n	8007cf4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d10f      	bne.n	8007ce6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ce6:	2180      	movs	r1, #128	@ 0x80
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f001 fcb5 	bl	8009658 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f001 f8bb 	bl	8008e6a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d03a      	beq.n	8007d74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff fe42 	bl	8007988 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007d0c:	e032      	b.n	8007d74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d0e:	7afb      	ldrb	r3, [r7, #11]
 8007d10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	4619      	mov	r1, r3
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f985 	bl	8008028 <USBD_CoreFindEP>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	2bff      	cmp	r3, #255	@ 0xff
 8007d26:	d025      	beq.n	8007d74 <USBD_LL_DataInStage+0x15a>
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d122      	bne.n	8007d74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d11c      	bne.n	8007d74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007d3a:	7dfa      	ldrb	r2, [r7, #23]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	32ae      	adds	r2, #174	@ 0xae
 8007d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d014      	beq.n	8007d74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007d4a:	7dfa      	ldrb	r2, [r7, #23]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d52:	7dfa      	ldrb	r2, [r7, #23]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	32ae      	adds	r2, #174	@ 0xae
 8007d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	7afa      	ldrb	r2, [r7, #11]
 8007d60:	4611      	mov	r1, r2
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	4798      	blx	r3
 8007d66:	4603      	mov	r3, r0
 8007d68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d6a:	7dbb      	ldrb	r3, [r7, #22]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007d70:	7dbb      	ldrb	r3, [r7, #22]
 8007d72:	e000      	b.n	8007d76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d014      	beq.n	8007de4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6852      	ldr	r2, [r2, #4]
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007de0:	2303      	movs	r3, #3
 8007de2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007de4:	2340      	movs	r3, #64	@ 0x40
 8007de6:	2200      	movs	r2, #0
 8007de8:	2100      	movs	r1, #0
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 fbef 	bl	80095ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2240      	movs	r2, #64	@ 0x40
 8007dfc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e00:	2340      	movs	r3, #64	@ 0x40
 8007e02:	2200      	movs	r2, #0
 8007e04:	2180      	movs	r1, #128	@ 0x80
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fbe1 	bl	80095ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2240      	movs	r2, #64	@ 0x40
 8007e16:	621a      	str	r2, [r3, #32]

  return ret;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	78fa      	ldrb	r2, [r7, #3]
 8007e32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d006      	beq.n	8007e64 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2204      	movs	r2, #4
 8007e68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	d106      	bne.n	8007e9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d110      	bne.n	8007ee0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	32ae      	adds	r2, #174	@ 0xae
 8007f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e01c      	b.n	8007f46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d115      	bne.n	8007f44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	32ae      	adds	r2, #174	@ 0xae
 8007f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	32ae      	adds	r2, #174	@ 0xae
 8007f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	78fa      	ldrb	r2, [r7, #3]
 8007f3e:	4611      	mov	r1, r2
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	32ae      	adds	r2, #174	@ 0xae
 8007f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e01c      	b.n	8007faa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d115      	bne.n	8007fa8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	32ae      	adds	r2, #174	@ 0xae
 8007f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	32ae      	adds	r2, #174	@ 0xae
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa0:	78fa      	ldrb	r2, [r7, #3]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00e      	beq.n	8008004 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	6852      	ldr	r2, [r2, #4]
 8007ff2:	b2d2      	uxtb	r2, r2
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	4798      	blx	r3
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008000:	2303      	movs	r3, #3
 8008002:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008004:	7bfb      	ldrb	r3, [r7, #15]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800801a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008034:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b086      	sub	sp, #24
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	460b      	mov	r3, r1
 800804c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008056:	2300      	movs	r3, #0
 8008058:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	885b      	ldrh	r3, [r3, #2]
 800805e:	b29b      	uxth	r3, r3
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	7812      	ldrb	r2, [r2, #0]
 8008064:	4293      	cmp	r3, r2
 8008066:	d91f      	bls.n	80080a8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800806e:	e013      	b.n	8008098 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008070:	f107 030a 	add.w	r3, r7, #10
 8008074:	4619      	mov	r1, r3
 8008076:	6978      	ldr	r0, [r7, #20]
 8008078:	f000 f81b 	bl	80080b2 <USBD_GetNextDesc>
 800807c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	785b      	ldrb	r3, [r3, #1]
 8008082:	2b05      	cmp	r3, #5
 8008084:	d108      	bne.n	8008098 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	789b      	ldrb	r3, [r3, #2]
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	429a      	cmp	r2, r3
 8008092:	d008      	beq.n	80080a6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008094:	2300      	movs	r3, #0
 8008096:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	885b      	ldrh	r3, [r3, #2]
 800809c:	b29a      	uxth	r2, r3
 800809e:	897b      	ldrh	r3, [r7, #10]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d8e5      	bhi.n	8008070 <USBD_GetEpDesc+0x2e>
 80080a4:	e000      	b.n	80080a8 <USBD_GetEpDesc+0x66>
          break;
 80080a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80080a8:	693b      	ldr	r3, [r7, #16]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b085      	sub	sp, #20
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	7812      	ldrb	r2, [r2, #0]
 80080c8:	4413      	add	r3, r2
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4413      	add	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080dc:	68fb      	ldr	r3, [r7, #12]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b087      	sub	sp, #28
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	3301      	adds	r3, #1
 8008100:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008108:	8a3b      	ldrh	r3, [r7, #16]
 800810a:	021b      	lsls	r3, r3, #8
 800810c:	b21a      	sxth	r2, r3
 800810e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008112:	4313      	orrs	r3, r2
 8008114:	b21b      	sxth	r3, r3
 8008116:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008118:	89fb      	ldrh	r3, [r7, #14]
}
 800811a:	4618      	mov	r0, r3
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
	...

08008128 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800813e:	2b40      	cmp	r3, #64	@ 0x40
 8008140:	d005      	beq.n	800814e <USBD_StdDevReq+0x26>
 8008142:	2b40      	cmp	r3, #64	@ 0x40
 8008144:	d857      	bhi.n	80081f6 <USBD_StdDevReq+0xce>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00f      	beq.n	800816a <USBD_StdDevReq+0x42>
 800814a:	2b20      	cmp	r3, #32
 800814c:	d153      	bne.n	80081f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	32ae      	adds	r2, #174	@ 0xae
 8008158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
      break;
 8008168:	e04a      	b.n	8008200 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	2b09      	cmp	r3, #9
 8008170:	d83b      	bhi.n	80081ea <USBD_StdDevReq+0xc2>
 8008172:	a201      	add	r2, pc, #4	@ (adr r2, 8008178 <USBD_StdDevReq+0x50>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	080081cd 	.word	0x080081cd
 800817c:	080081e1 	.word	0x080081e1
 8008180:	080081eb 	.word	0x080081eb
 8008184:	080081d7 	.word	0x080081d7
 8008188:	080081eb 	.word	0x080081eb
 800818c:	080081ab 	.word	0x080081ab
 8008190:	080081a1 	.word	0x080081a1
 8008194:	080081eb 	.word	0x080081eb
 8008198:	080081c3 	.word	0x080081c3
 800819c:	080081b5 	.word	0x080081b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa3c 	bl	8008620 <USBD_GetDescriptor>
          break;
 80081a8:	e024      	b.n	80081f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fba1 	bl	80088f4 <USBD_SetAddress>
          break;
 80081b2:	e01f      	b.n	80081f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fbe0 	bl	800897c <USBD_SetConfig>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]
          break;
 80081c0:	e018      	b.n	80081f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fc83 	bl	8008ad0 <USBD_GetConfig>
          break;
 80081ca:	e013      	b.n	80081f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fcb4 	bl	8008b3c <USBD_GetStatus>
          break;
 80081d4:	e00e      	b.n	80081f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fce3 	bl	8008ba4 <USBD_SetFeature>
          break;
 80081de:	e009      	b.n	80081f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fd07 	bl	8008bf6 <USBD_ClrFeature>
          break;
 80081e8:	e004      	b.n	80081f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fd5e 	bl	8008cae <USBD_CtlError>
          break;
 80081f2:	bf00      	nop
      }
      break;
 80081f4:	e004      	b.n	8008200 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fd58 	bl	8008cae <USBD_CtlError>
      break;
 80081fe:	bf00      	nop
  }

  return ret;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop

0800820c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008222:	2b40      	cmp	r3, #64	@ 0x40
 8008224:	d005      	beq.n	8008232 <USBD_StdItfReq+0x26>
 8008226:	2b40      	cmp	r3, #64	@ 0x40
 8008228:	d852      	bhi.n	80082d0 <USBD_StdItfReq+0xc4>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <USBD_StdItfReq+0x26>
 800822e:	2b20      	cmp	r3, #32
 8008230:	d14e      	bne.n	80082d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008238:	b2db      	uxtb	r3, r3
 800823a:	3b01      	subs	r3, #1
 800823c:	2b02      	cmp	r3, #2
 800823e:	d840      	bhi.n	80082c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	889b      	ldrh	r3, [r3, #4]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b01      	cmp	r3, #1
 8008248:	d836      	bhi.n	80082b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	889b      	ldrh	r3, [r3, #4]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff fedb 	bl	800800e <USBD_CoreFindIF>
 8008258:	4603      	mov	r3, r0
 800825a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	2bff      	cmp	r3, #255	@ 0xff
 8008260:	d01d      	beq.n	800829e <USBD_StdItfReq+0x92>
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d11a      	bne.n	800829e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008268:	7bba      	ldrb	r2, [r7, #14]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	32ae      	adds	r2, #174	@ 0xae
 800826e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00f      	beq.n	8008298 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008278:	7bba      	ldrb	r2, [r7, #14]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008280:	7bba      	ldrb	r2, [r7, #14]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	32ae      	adds	r2, #174	@ 0xae
 8008286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
 8008292:	4603      	mov	r3, r0
 8008294:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008296:	e004      	b.n	80082a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008298:	2303      	movs	r3, #3
 800829a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800829c:	e001      	b.n	80082a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800829e:	2303      	movs	r3, #3
 80082a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	88db      	ldrh	r3, [r3, #6]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d110      	bne.n	80082cc <USBD_StdItfReq+0xc0>
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10d      	bne.n	80082cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fdc7 	bl	8008e44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082b6:	e009      	b.n	80082cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fcf7 	bl	8008cae <USBD_CtlError>
          break;
 80082c0:	e004      	b.n	80082cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fcf2 	bl	8008cae <USBD_CtlError>
          break;
 80082ca:	e000      	b.n	80082ce <USBD_StdItfReq+0xc2>
          break;
 80082cc:	bf00      	nop
      }
      break;
 80082ce:	e004      	b.n	80082da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fceb 	bl	8008cae <USBD_CtlError>
      break;
 80082d8:	bf00      	nop
  }

  return ret;
 80082da:	7bfb      	ldrb	r3, [r7, #15]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	889b      	ldrh	r3, [r3, #4]
 80082f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008300:	2b40      	cmp	r3, #64	@ 0x40
 8008302:	d007      	beq.n	8008314 <USBD_StdEPReq+0x30>
 8008304:	2b40      	cmp	r3, #64	@ 0x40
 8008306:	f200 817f 	bhi.w	8008608 <USBD_StdEPReq+0x324>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d02a      	beq.n	8008364 <USBD_StdEPReq+0x80>
 800830e:	2b20      	cmp	r3, #32
 8008310:	f040 817a 	bne.w	8008608 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff fe85 	bl	8008028 <USBD_CoreFindEP>
 800831e:	4603      	mov	r3, r0
 8008320:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008322:	7b7b      	ldrb	r3, [r7, #13]
 8008324:	2bff      	cmp	r3, #255	@ 0xff
 8008326:	f000 8174 	beq.w	8008612 <USBD_StdEPReq+0x32e>
 800832a:	7b7b      	ldrb	r3, [r7, #13]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 8170 	bne.w	8008612 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008332:	7b7a      	ldrb	r2, [r7, #13]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800833a:	7b7a      	ldrb	r2, [r7, #13]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	32ae      	adds	r2, #174	@ 0xae
 8008340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 8163 	beq.w	8008612 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800834c:	7b7a      	ldrb	r2, [r7, #13]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	32ae      	adds	r2, #174	@ 0xae
 8008352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008362:	e156      	b.n	8008612 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	785b      	ldrb	r3, [r3, #1]
 8008368:	2b03      	cmp	r3, #3
 800836a:	d008      	beq.n	800837e <USBD_StdEPReq+0x9a>
 800836c:	2b03      	cmp	r3, #3
 800836e:	f300 8145 	bgt.w	80085fc <USBD_StdEPReq+0x318>
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 809b 	beq.w	80084ae <USBD_StdEPReq+0x1ca>
 8008378:	2b01      	cmp	r3, #1
 800837a:	d03c      	beq.n	80083f6 <USBD_StdEPReq+0x112>
 800837c:	e13e      	b.n	80085fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b02      	cmp	r3, #2
 8008388:	d002      	beq.n	8008390 <USBD_StdEPReq+0xac>
 800838a:	2b03      	cmp	r3, #3
 800838c:	d016      	beq.n	80083bc <USBD_StdEPReq+0xd8>
 800838e:	e02c      	b.n	80083ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00d      	beq.n	80083b2 <USBD_StdEPReq+0xce>
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	2b80      	cmp	r3, #128	@ 0x80
 800839a:	d00a      	beq.n	80083b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 f959 	bl	8009658 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083a6:	2180      	movs	r1, #128	@ 0x80
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 f955 	bl	8009658 <USBD_LL_StallEP>
 80083ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083b0:	e020      	b.n	80083f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc7a 	bl	8008cae <USBD_CtlError>
              break;
 80083ba:	e01b      	b.n	80083f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	885b      	ldrh	r3, [r3, #2]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10e      	bne.n	80083e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <USBD_StdEPReq+0xfe>
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b80      	cmp	r3, #128	@ 0x80
 80083ce:	d008      	beq.n	80083e2 <USBD_StdEPReq+0xfe>
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	88db      	ldrh	r3, [r3, #6]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 f93b 	bl	8009658 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fd2e 	bl	8008e44 <USBD_CtlSendStatus>

              break;
 80083e8:	e004      	b.n	80083f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fc5e 	bl	8008cae <USBD_CtlError>
              break;
 80083f2:	bf00      	nop
          }
          break;
 80083f4:	e107      	b.n	8008606 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d002      	beq.n	8008408 <USBD_StdEPReq+0x124>
 8008402:	2b03      	cmp	r3, #3
 8008404:	d016      	beq.n	8008434 <USBD_StdEPReq+0x150>
 8008406:	e04b      	b.n	80084a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00d      	beq.n	800842a <USBD_StdEPReq+0x146>
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b80      	cmp	r3, #128	@ 0x80
 8008412:	d00a      	beq.n	800842a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 f91d 	bl	8009658 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800841e:	2180      	movs	r1, #128	@ 0x80
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 f919 	bl	8009658 <USBD_LL_StallEP>
 8008426:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008428:	e040      	b.n	80084ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fc3e 	bl	8008cae <USBD_CtlError>
              break;
 8008432:	e03b      	b.n	80084ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	885b      	ldrh	r3, [r3, #2]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d136      	bne.n	80084aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 f923 	bl	8009696 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fcf7 	bl	8008e44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff fde4 	bl	8008028 <USBD_CoreFindEP>
 8008460:	4603      	mov	r3, r0
 8008462:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008464:	7b7b      	ldrb	r3, [r7, #13]
 8008466:	2bff      	cmp	r3, #255	@ 0xff
 8008468:	d01f      	beq.n	80084aa <USBD_StdEPReq+0x1c6>
 800846a:	7b7b      	ldrb	r3, [r7, #13]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d11c      	bne.n	80084aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008470:	7b7a      	ldrb	r2, [r7, #13]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008478:	7b7a      	ldrb	r2, [r7, #13]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	32ae      	adds	r2, #174	@ 0xae
 800847e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d010      	beq.n	80084aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008488:	7b7a      	ldrb	r2, [r7, #13]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	32ae      	adds	r2, #174	@ 0xae
 800848e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
 800849a:	4603      	mov	r3, r0
 800849c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800849e:	e004      	b.n	80084aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fc03 	bl	8008cae <USBD_CtlError>
              break;
 80084a8:	e000      	b.n	80084ac <USBD_StdEPReq+0x1c8>
              break;
 80084aa:	bf00      	nop
          }
          break;
 80084ac:	e0ab      	b.n	8008606 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d002      	beq.n	80084c0 <USBD_StdEPReq+0x1dc>
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d032      	beq.n	8008524 <USBD_StdEPReq+0x240>
 80084be:	e097      	b.n	80085f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d007      	beq.n	80084d6 <USBD_StdEPReq+0x1f2>
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b80      	cmp	r3, #128	@ 0x80
 80084ca:	d004      	beq.n	80084d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fbed 	bl	8008cae <USBD_CtlError>
                break;
 80084d4:	e091      	b.n	80085fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da0b      	bge.n	80084f6 <USBD_StdEPReq+0x212>
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	3310      	adds	r3, #16
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	4413      	add	r3, r2
 80084f2:	3304      	adds	r3, #4
 80084f4:	e00b      	b.n	800850e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	4413      	add	r3, r2
 800850c:	3304      	adds	r3, #4
 800850e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2202      	movs	r2, #2
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fc37 	bl	8008d90 <USBD_CtlSendData>
              break;
 8008522:	e06a      	b.n	80085fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008528:	2b00      	cmp	r3, #0
 800852a:	da11      	bge.n	8008550 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	f003 020f 	and.w	r2, r3, #15
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	3324      	adds	r3, #36	@ 0x24
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d117      	bne.n	8008576 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fbb0 	bl	8008cae <USBD_CtlError>
                  break;
 800854e:	e054      	b.n	80085fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	f003 020f 	and.w	r2, r3, #15
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d104      	bne.n	8008576 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fb9d 	bl	8008cae <USBD_CtlError>
                  break;
 8008574:	e041      	b.n	80085fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800857a:	2b00      	cmp	r3, #0
 800857c:	da0b      	bge.n	8008596 <USBD_StdEPReq+0x2b2>
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008584:	4613      	mov	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	3310      	adds	r3, #16
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	4413      	add	r3, r2
 8008592:	3304      	adds	r3, #4
 8008594:	e00b      	b.n	80085ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008596:	7bbb      	ldrb	r3, [r7, #14]
 8008598:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800859c:	4613      	mov	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	4413      	add	r3, r2
 80085ac:	3304      	adds	r3, #4
 80085ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <USBD_StdEPReq+0x2d8>
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	2b80      	cmp	r3, #128	@ 0x80
 80085ba:	d103      	bne.n	80085c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	e00e      	b.n	80085e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 f883 	bl	80096d4 <USBD_LL_IsStallEP>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2201      	movs	r2, #1
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	e002      	b.n	80085e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2202      	movs	r2, #2
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fbd1 	bl	8008d90 <USBD_CtlSendData>
              break;
 80085ee:	e004      	b.n	80085fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fb5b 	bl	8008cae <USBD_CtlError>
              break;
 80085f8:	bf00      	nop
          }
          break;
 80085fa:	e004      	b.n	8008606 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fb55 	bl	8008cae <USBD_CtlError>
          break;
 8008604:	bf00      	nop
      }
      break;
 8008606:	e005      	b.n	8008614 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fb4f 	bl	8008cae <USBD_CtlError>
      break;
 8008610:	e000      	b.n	8008614 <USBD_StdEPReq+0x330>
      break;
 8008612:	bf00      	nop
  }

  return ret;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	885b      	ldrh	r3, [r3, #2]
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	b29b      	uxth	r3, r3
 800863e:	3b01      	subs	r3, #1
 8008640:	2b06      	cmp	r3, #6
 8008642:	f200 8128 	bhi.w	8008896 <USBD_GetDescriptor+0x276>
 8008646:	a201      	add	r2, pc, #4	@ (adr r2, 800864c <USBD_GetDescriptor+0x2c>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	08008669 	.word	0x08008669
 8008650:	08008681 	.word	0x08008681
 8008654:	080086c1 	.word	0x080086c1
 8008658:	08008897 	.word	0x08008897
 800865c:	08008897 	.word	0x08008897
 8008660:	08008837 	.word	0x08008837
 8008664:	08008863 	.word	0x08008863
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	7c12      	ldrb	r2, [r2, #16]
 8008674:	f107 0108 	add.w	r1, r7, #8
 8008678:	4610      	mov	r0, r2
 800867a:	4798      	blx	r3
 800867c:	60f8      	str	r0, [r7, #12]
      break;
 800867e:	e112      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	7c1b      	ldrb	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10d      	bne.n	80086a4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800868e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008690:	f107 0208 	add.w	r2, r7, #8
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
 8008698:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	2202      	movs	r2, #2
 80086a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086a2:	e100      	b.n	80088a6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ac:	f107 0208 	add.w	r2, r7, #8
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	2202      	movs	r2, #2
 80086bc:	701a      	strb	r2, [r3, #0]
      break;
 80086be:	e0f2      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	885b      	ldrh	r3, [r3, #2]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	f200 80ac 	bhi.w	8008824 <USBD_GetDescriptor+0x204>
 80086cc:	a201      	add	r2, pc, #4	@ (adr r2, 80086d4 <USBD_GetDescriptor+0xb4>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	080086ed 	.word	0x080086ed
 80086d8:	08008721 	.word	0x08008721
 80086dc:	08008755 	.word	0x08008755
 80086e0:	08008789 	.word	0x08008789
 80086e4:	080087bd 	.word	0x080087bd
 80086e8:	080087f1 	.word	0x080087f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	7c12      	ldrb	r2, [r2, #16]
 8008704:	f107 0108 	add.w	r1, r7, #8
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
 800870c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870e:	e091      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 facb 	bl	8008cae <USBD_CtlError>
            err++;
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	3301      	adds	r3, #1
 800871c:	72fb      	strb	r3, [r7, #11]
          break;
 800871e:	e089      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00b      	beq.n	8008744 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	7c12      	ldrb	r2, [r2, #16]
 8008738:	f107 0108 	add.w	r1, r7, #8
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008742:	e077      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fab1 	bl	8008cae <USBD_CtlError>
            err++;
 800874c:	7afb      	ldrb	r3, [r7, #11]
 800874e:	3301      	adds	r3, #1
 8008750:	72fb      	strb	r3, [r7, #11]
          break;
 8008752:	e06f      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00b      	beq.n	8008778 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	7c12      	ldrb	r2, [r2, #16]
 800876c:	f107 0108 	add.w	r1, r7, #8
 8008770:	4610      	mov	r0, r2
 8008772:	4798      	blx	r3
 8008774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008776:	e05d      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa97 	bl	8008cae <USBD_CtlError>
            err++;
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	3301      	adds	r3, #1
 8008784:	72fb      	strb	r3, [r7, #11]
          break;
 8008786:	e055      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00b      	beq.n	80087ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	7c12      	ldrb	r2, [r2, #16]
 80087a0:	f107 0108 	add.w	r1, r7, #8
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
 80087a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087aa:	e043      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa7d 	bl	8008cae <USBD_CtlError>
            err++;
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	3301      	adds	r3, #1
 80087b8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ba:	e03b      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	7c12      	ldrb	r2, [r2, #16]
 80087d4:	f107 0108 	add.w	r1, r7, #8
 80087d8:	4610      	mov	r0, r2
 80087da:	4798      	blx	r3
 80087dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087de:	e029      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa63 	bl	8008cae <USBD_CtlError>
            err++;
 80087e8:	7afb      	ldrb	r3, [r7, #11]
 80087ea:	3301      	adds	r3, #1
 80087ec:	72fb      	strb	r3, [r7, #11]
          break;
 80087ee:	e021      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00b      	beq.n	8008814 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	7c12      	ldrb	r2, [r2, #16]
 8008808:	f107 0108 	add.w	r1, r7, #8
 800880c:	4610      	mov	r0, r2
 800880e:	4798      	blx	r3
 8008810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008812:	e00f      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa49 	bl	8008cae <USBD_CtlError>
            err++;
 800881c:	7afb      	ldrb	r3, [r7, #11]
 800881e:	3301      	adds	r3, #1
 8008820:	72fb      	strb	r3, [r7, #11]
          break;
 8008822:	e007      	b.n	8008834 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa41 	bl	8008cae <USBD_CtlError>
          err++;
 800882c:	7afb      	ldrb	r3, [r7, #11]
 800882e:	3301      	adds	r3, #1
 8008830:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008832:	bf00      	nop
      }
      break;
 8008834:	e037      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	7c1b      	ldrb	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d109      	bne.n	8008852 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008846:	f107 0208 	add.w	r2, r7, #8
 800884a:	4610      	mov	r0, r2
 800884c:	4798      	blx	r3
 800884e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008850:	e029      	b.n	80088a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fa2a 	bl	8008cae <USBD_CtlError>
        err++;
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	3301      	adds	r3, #1
 800885e:	72fb      	strb	r3, [r7, #11]
      break;
 8008860:	e021      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	7c1b      	ldrb	r3, [r3, #16]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10d      	bne.n	8008886 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008872:	f107 0208 	add.w	r2, r7, #8
 8008876:	4610      	mov	r0, r2
 8008878:	4798      	blx	r3
 800887a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	2207      	movs	r2, #7
 8008882:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008884:	e00f      	b.n	80088a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fa10 	bl	8008cae <USBD_CtlError>
        err++;
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	3301      	adds	r3, #1
 8008892:	72fb      	strb	r3, [r7, #11]
      break;
 8008894:	e007      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fa08 	bl	8008cae <USBD_CtlError>
      err++;
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	3301      	adds	r3, #1
 80088a2:	72fb      	strb	r3, [r7, #11]
      break;
 80088a4:	bf00      	nop
  }

  if (err != 0U)
 80088a6:	7afb      	ldrb	r3, [r7, #11]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d11e      	bne.n	80088ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	88db      	ldrh	r3, [r3, #6]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d016      	beq.n	80088e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088b4:	893b      	ldrh	r3, [r7, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00e      	beq.n	80088d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	88da      	ldrh	r2, [r3, #6]
 80088be:	893b      	ldrh	r3, [r7, #8]
 80088c0:	4293      	cmp	r3, r2
 80088c2:	bf28      	it	cs
 80088c4:	4613      	movcs	r3, r2
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088ca:	893b      	ldrh	r3, [r7, #8]
 80088cc:	461a      	mov	r2, r3
 80088ce:	68f9      	ldr	r1, [r7, #12]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fa5d 	bl	8008d90 <USBD_CtlSendData>
 80088d6:	e009      	b.n	80088ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f9e7 	bl	8008cae <USBD_CtlError>
 80088e0:	e004      	b.n	80088ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 faae 	bl	8008e44 <USBD_CtlSendStatus>
 80088e8:	e000      	b.n	80088ec <USBD_GetDescriptor+0x2cc>
    return;
 80088ea:	bf00      	nop
  }
}
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop

080088f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	889b      	ldrh	r3, [r3, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d131      	bne.n	800896a <USBD_SetAddress+0x76>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	88db      	ldrh	r3, [r3, #6]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d12d      	bne.n	800896a <USBD_SetAddress+0x76>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	885b      	ldrh	r3, [r3, #2]
 8008912:	2b7f      	cmp	r3, #127	@ 0x7f
 8008914:	d829      	bhi.n	800896a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	885b      	ldrh	r3, [r3, #2]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008920:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b03      	cmp	r3, #3
 800892c:	d104      	bne.n	8008938 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f9bc 	bl	8008cae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008936:	e01d      	b.n	8008974 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	7bfa      	ldrb	r2, [r7, #15]
 800893c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fef1 	bl	800972c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa7a 	bl	8008e44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d004      	beq.n	8008960 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2202      	movs	r2, #2
 800895a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895e:	e009      	b.n	8008974 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008968:	e004      	b.n	8008974 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f99e 	bl	8008cae <USBD_CtlError>
  }
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	885b      	ldrh	r3, [r3, #2]
 800898e:	b2da      	uxtb	r2, r3
 8008990:	4b4e      	ldr	r3, [pc, #312]	@ (8008acc <USBD_SetConfig+0x150>)
 8008992:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008994:	4b4d      	ldr	r3, [pc, #308]	@ (8008acc <USBD_SetConfig+0x150>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d905      	bls.n	80089a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f985 	bl	8008cae <USBD_CtlError>
    return USBD_FAIL;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e08c      	b.n	8008ac2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d002      	beq.n	80089ba <USBD_SetConfig+0x3e>
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d029      	beq.n	8008a0c <USBD_SetConfig+0x90>
 80089b8:	e075      	b.n	8008aa6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089ba:	4b44      	ldr	r3, [pc, #272]	@ (8008acc <USBD_SetConfig+0x150>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d020      	beq.n	8008a04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80089c2:	4b42      	ldr	r3, [pc, #264]	@ (8008acc <USBD_SetConfig+0x150>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089cc:	4b3f      	ldr	r3, [pc, #252]	@ (8008acc <USBD_SetConfig+0x150>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7fe ffe3 	bl	800799e <USBD_SetClassConfig>
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d008      	beq.n	80089f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f962 	bl	8008cae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2202      	movs	r2, #2
 80089ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089f2:	e065      	b.n	8008ac0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fa25 	bl	8008e44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2203      	movs	r2, #3
 80089fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a02:	e05d      	b.n	8008ac0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fa1d 	bl	8008e44 <USBD_CtlSendStatus>
      break;
 8008a0a:	e059      	b.n	8008ac0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a0c:	4b2f      	ldr	r3, [pc, #188]	@ (8008acc <USBD_SetConfig+0x150>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d112      	bne.n	8008a3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8008acc <USBD_SetConfig+0x150>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	461a      	mov	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a26:	4b29      	ldr	r3, [pc, #164]	@ (8008acc <USBD_SetConfig+0x150>)
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7fe ffd2 	bl	80079d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fa06 	bl	8008e44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a38:	e042      	b.n	8008ac0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008a3a:	4b24      	ldr	r3, [pc, #144]	@ (8008acc <USBD_SetConfig+0x150>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d02a      	beq.n	8008a9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7fe ffc0 	bl	80079d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a56:	4b1d      	ldr	r3, [pc, #116]	@ (8008acc <USBD_SetConfig+0x150>)
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a60:	4b1a      	ldr	r3, [pc, #104]	@ (8008acc <USBD_SetConfig+0x150>)
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7fe ff99 	bl	800799e <USBD_SetClassConfig>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00f      	beq.n	8008a96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f918 	bl	8008cae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7fe ffa5 	bl	80079d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a94:	e014      	b.n	8008ac0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f9d4 	bl	8008e44 <USBD_CtlSendStatus>
      break;
 8008a9c:	e010      	b.n	8008ac0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f9d0 	bl	8008e44 <USBD_CtlSendStatus>
      break;
 8008aa4:	e00c      	b.n	8008ac0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f900 	bl	8008cae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008aae:	4b07      	ldr	r3, [pc, #28]	@ (8008acc <USBD_SetConfig+0x150>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7fe ff8e 	bl	80079d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008aba:	2303      	movs	r3, #3
 8008abc:	73fb      	strb	r3, [r7, #15]
      break;
 8008abe:	bf00      	nop
  }

  return ret;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20006214 	.word	0x20006214

08008ad0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	88db      	ldrh	r3, [r3, #6]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d004      	beq.n	8008aec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f8e2 	bl	8008cae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008aea:	e023      	b.n	8008b34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	dc02      	bgt.n	8008afe <USBD_GetConfig+0x2e>
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dc03      	bgt.n	8008b04 <USBD_GetConfig+0x34>
 8008afc:	e015      	b.n	8008b2a <USBD_GetConfig+0x5a>
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d00b      	beq.n	8008b1a <USBD_GetConfig+0x4a>
 8008b02:	e012      	b.n	8008b2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f93c 	bl	8008d90 <USBD_CtlSendData>
        break;
 8008b18:	e00c      	b.n	8008b34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	2201      	movs	r2, #1
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f934 	bl	8008d90 <USBD_CtlSendData>
        break;
 8008b28:	e004      	b.n	8008b34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f8be 	bl	8008cae <USBD_CtlError>
        break;
 8008b32:	bf00      	nop
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d81e      	bhi.n	8008b92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	88db      	ldrh	r3, [r3, #6]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d004      	beq.n	8008b66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f8a5 	bl	8008cae <USBD_CtlError>
        break;
 8008b64:	e01a      	b.n	8008b9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f043 0202 	orr.w	r2, r3, #2
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	330c      	adds	r3, #12
 8008b86:	2202      	movs	r2, #2
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f900 	bl	8008d90 <USBD_CtlSendData>
      break;
 8008b90:	e004      	b.n	8008b9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f88a 	bl	8008cae <USBD_CtlError>
      break;
 8008b9a:	bf00      	nop
  }
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	885b      	ldrh	r3, [r3, #2]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d107      	bne.n	8008bc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f940 	bl	8008e44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008bc4:	e013      	b.n	8008bee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	885b      	ldrh	r3, [r3, #2]
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d10b      	bne.n	8008be6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	889b      	ldrh	r3, [r3, #4]
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f930 	bl	8008e44 <USBD_CtlSendStatus>
}
 8008be4:	e003      	b.n	8008bee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f860 	bl	8008cae <USBD_CtlError>
}
 8008bee:	bf00      	nop
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b082      	sub	sp, #8
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d80b      	bhi.n	8008c26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	885b      	ldrh	r3, [r3, #2]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d10c      	bne.n	8008c30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f910 	bl	8008e44 <USBD_CtlSendStatus>
      }
      break;
 8008c24:	e004      	b.n	8008c30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f840 	bl	8008cae <USBD_CtlError>
      break;
 8008c2e:	e000      	b.n	8008c32 <USBD_ClrFeature+0x3c>
      break;
 8008c30:	bf00      	nop
  }
}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3301      	adds	r3, #1
 8008c54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	781a      	ldrb	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3301      	adds	r3, #1
 8008c62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f7ff fa40 	bl	80080ea <SWAPBYTE>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3301      	adds	r3, #1
 8008c76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f7ff fa33 	bl	80080ea <SWAPBYTE>
 8008c84:	4603      	mov	r3, r0
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3301      	adds	r3, #1
 8008c96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7ff fa26 	bl	80080ea <SWAPBYTE>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	80da      	strh	r2, [r3, #6]
}
 8008ca6:	bf00      	nop
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cb8:	2180      	movs	r1, #128	@ 0x80
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fccc 	bl	8009658 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fcc8 	bl	8009658 <USBD_LL_StallEP>
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d036      	beq.n	8008d54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008cea:	6938      	ldr	r0, [r7, #16]
 8008cec:	f000 f836 	bl	8008d5c <USBD_GetLen>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	4413      	add	r3, r2
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	7812      	ldrb	r2, [r2, #0]
 8008d08:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	4413      	add	r3, r2
 8008d16:	2203      	movs	r2, #3
 8008d18:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d20:	e013      	b.n	8008d4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	4413      	add	r3, r2
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	7812      	ldrb	r2, [r2, #0]
 8008d2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	3301      	adds	r3, #1
 8008d32:	613b      	str	r3, [r7, #16]
    idx++;
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	3301      	adds	r3, #1
 8008d38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	4413      	add	r3, r2
 8008d40:	2200      	movs	r2, #0
 8008d42:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	3301      	adds	r3, #1
 8008d48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e7      	bne.n	8008d22 <USBD_GetString+0x52>
 8008d52:	e000      	b.n	8008d56 <USBD_GetString+0x86>
    return;
 8008d54:	bf00      	nop
  }
}
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d6c:	e005      	b.n	8008d7a <USBD_GetLen+0x1e>
  {
    len++;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	3301      	adds	r3, #1
 8008d72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	3301      	adds	r3, #1
 8008d78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1f5      	bne.n	8008d6e <USBD_GetLen+0x12>
  }

  return len;
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	2100      	movs	r1, #0
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 fcd7 	bl	800976a <USBD_LL_Transmit>

  return USBD_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 fcc6 	bl	800976a <USBD_LL_Transmit>

  return USBD_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2203      	movs	r2, #3
 8008df8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	2100      	movs	r1, #0
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fcca 	bl	80097ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	60f8      	str	r0, [r7, #12]
 8008e2a:	60b9      	str	r1, [r7, #8]
 8008e2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	2100      	movs	r1, #0
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 fcb9 	bl	80097ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2204      	movs	r2, #4
 8008e50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e54:	2300      	movs	r3, #0
 8008e56:	2200      	movs	r2, #0
 8008e58:	2100      	movs	r1, #0
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fc85 	bl	800976a <USBD_LL_Transmit>

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2205      	movs	r2, #5
 8008e76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2100      	movs	r1, #0
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fc93 	bl	80097ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e94:	2200      	movs	r2, #0
 8008e96:	4912      	ldr	r1, [pc, #72]	@ (8008ee0 <MX_USB_DEVICE_Init+0x50>)
 8008e98:	4812      	ldr	r0, [pc, #72]	@ (8008ee4 <MX_USB_DEVICE_Init+0x54>)
 8008e9a:	f7fe fd03 	bl	80078a4 <USBD_Init>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ea4:	f7f7 ffb2 	bl	8000e0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ea8:	490f      	ldr	r1, [pc, #60]	@ (8008ee8 <MX_USB_DEVICE_Init+0x58>)
 8008eaa:	480e      	ldr	r0, [pc, #56]	@ (8008ee4 <MX_USB_DEVICE_Init+0x54>)
 8008eac:	f7fe fd2a 	bl	8007904 <USBD_RegisterClass>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008eb6:	f7f7 ffa9 	bl	8000e0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008eba:	490c      	ldr	r1, [pc, #48]	@ (8008eec <MX_USB_DEVICE_Init+0x5c>)
 8008ebc:	4809      	ldr	r0, [pc, #36]	@ (8008ee4 <MX_USB_DEVICE_Init+0x54>)
 8008ebe:	f7fe fc21 	bl	8007704 <USBD_CDC_RegisterInterface>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ec8:	f7f7 ffa0 	bl	8000e0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ecc:	4805      	ldr	r0, [pc, #20]	@ (8008ee4 <MX_USB_DEVICE_Init+0x54>)
 8008ece:	f7fe fd4f 	bl	8007970 <USBD_Start>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ed8:	f7f7 ff98 	bl	8000e0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008edc:	bf00      	nop
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	200000dc 	.word	0x200000dc
 8008ee4:	20006218 	.word	0x20006218
 8008ee8:	20000048 	.word	0x20000048
 8008eec:	200000c8 	.word	0x200000c8

08008ef0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4905      	ldr	r1, [pc, #20]	@ (8008f0c <CDC_Init_FS+0x1c>)
 8008ef8:	4805      	ldr	r0, [pc, #20]	@ (8008f10 <CDC_Init_FS+0x20>)
 8008efa:	f7fe fc1d 	bl	8007738 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008efe:	4905      	ldr	r1, [pc, #20]	@ (8008f14 <CDC_Init_FS+0x24>)
 8008f00:	4803      	ldr	r0, [pc, #12]	@ (8008f10 <CDC_Init_FS+0x20>)
 8008f02:	f7fe fc3b 	bl	800777c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	200068f4 	.word	0x200068f4
 8008f10:	20006218 	.word	0x20006218
 8008f14:	200064f4 	.word	0x200064f4

08008f18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	6039      	str	r1, [r7, #0]
 8008f32:	71fb      	strb	r3, [r7, #7]
 8008f34:	4613      	mov	r3, r2
 8008f36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	2b23      	cmp	r3, #35	@ 0x23
 8008f3c:	d84a      	bhi.n	8008fd4 <CDC_Control_FS+0xac>
 8008f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f44 <CDC_Control_FS+0x1c>)
 8008f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f44:	08008fd5 	.word	0x08008fd5
 8008f48:	08008fd5 	.word	0x08008fd5
 8008f4c:	08008fd5 	.word	0x08008fd5
 8008f50:	08008fd5 	.word	0x08008fd5
 8008f54:	08008fd5 	.word	0x08008fd5
 8008f58:	08008fd5 	.word	0x08008fd5
 8008f5c:	08008fd5 	.word	0x08008fd5
 8008f60:	08008fd5 	.word	0x08008fd5
 8008f64:	08008fd5 	.word	0x08008fd5
 8008f68:	08008fd5 	.word	0x08008fd5
 8008f6c:	08008fd5 	.word	0x08008fd5
 8008f70:	08008fd5 	.word	0x08008fd5
 8008f74:	08008fd5 	.word	0x08008fd5
 8008f78:	08008fd5 	.word	0x08008fd5
 8008f7c:	08008fd5 	.word	0x08008fd5
 8008f80:	08008fd5 	.word	0x08008fd5
 8008f84:	08008fd5 	.word	0x08008fd5
 8008f88:	08008fd5 	.word	0x08008fd5
 8008f8c:	08008fd5 	.word	0x08008fd5
 8008f90:	08008fd5 	.word	0x08008fd5
 8008f94:	08008fd5 	.word	0x08008fd5
 8008f98:	08008fd5 	.word	0x08008fd5
 8008f9c:	08008fd5 	.word	0x08008fd5
 8008fa0:	08008fd5 	.word	0x08008fd5
 8008fa4:	08008fd5 	.word	0x08008fd5
 8008fa8:	08008fd5 	.word	0x08008fd5
 8008fac:	08008fd5 	.word	0x08008fd5
 8008fb0:	08008fd5 	.word	0x08008fd5
 8008fb4:	08008fd5 	.word	0x08008fd5
 8008fb8:	08008fd5 	.word	0x08008fd5
 8008fbc:	08008fd5 	.word	0x08008fd5
 8008fc0:	08008fd5 	.word	0x08008fd5
 8008fc4:	08008fd5 	.word	0x08008fd5
 8008fc8:	08008fd5 	.word	0x08008fd5
 8008fcc:	08008fd5 	.word	0x08008fd5
 8008fd0:	08008fd5 	.word	0x08008fd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fd4:	bf00      	nop
  }

  return (USBD_OK);
 8008fd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	4808      	ldr	r0, [pc, #32]	@ (8009014 <CDC_Receive_FS+0x30>)
 8008ff2:	f7fe fbc3 	bl	800777c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ff6:	4807      	ldr	r0, [pc, #28]	@ (8009014 <CDC_Receive_FS+0x30>)
 8008ff8:	f7fe fc1e 	bl	8007838 <USBD_CDC_ReceivePacket>
  CDCReceiveCallback(Buf, *Len);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7f7 fe46 	bl	8000c94 <CDCReceiveCallback>
  return (USBD_OK);
 8009008:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20006218 	.word	0x20006218

08009018 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009028:	4b0d      	ldr	r3, [pc, #52]	@ (8009060 <CDC_Transmit_FS+0x48>)
 800902a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800902e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800903a:	2301      	movs	r3, #1
 800903c:	e00b      	b.n	8009056 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800903e:	887b      	ldrh	r3, [r7, #2]
 8009040:	461a      	mov	r2, r3
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	4806      	ldr	r0, [pc, #24]	@ (8009060 <CDC_Transmit_FS+0x48>)
 8009046:	f7fe fb77 	bl	8007738 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800904a:	4805      	ldr	r0, [pc, #20]	@ (8009060 <CDC_Transmit_FS+0x48>)
 800904c:	f7fe fbb4 	bl	80077b8 <USBD_CDC_TransmitPacket>
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009054:	7bfb      	ldrb	r3, [r7, #15]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20006218 	.word	0x20006218

08009064 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009064:	b480      	push	{r7}
 8009066:	b087      	sub	sp, #28
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800907a:	4618      	mov	r0, r3
 800907c:	371c      	adds	r7, #28
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
	...

08009088 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	6039      	str	r1, [r7, #0]
 8009092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2212      	movs	r2, #18
 8009098:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800909a:	4b03      	ldr	r3, [pc, #12]	@ (80090a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	200000f8 	.word	0x200000f8

080090ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	6039      	str	r1, [r7, #0]
 80090b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2204      	movs	r2, #4
 80090bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090be:	4b03      	ldr	r3, [pc, #12]	@ (80090cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	2000010c 	.word	0x2000010c

080090d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	6039      	str	r1, [r7, #0]
 80090da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d105      	bne.n	80090ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	4907      	ldr	r1, [pc, #28]	@ (8009104 <USBD_FS_ProductStrDescriptor+0x34>)
 80090e6:	4808      	ldr	r0, [pc, #32]	@ (8009108 <USBD_FS_ProductStrDescriptor+0x38>)
 80090e8:	f7ff fdf2 	bl	8008cd0 <USBD_GetString>
 80090ec:	e004      	b.n	80090f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	4904      	ldr	r1, [pc, #16]	@ (8009104 <USBD_FS_ProductStrDescriptor+0x34>)
 80090f2:	4805      	ldr	r0, [pc, #20]	@ (8009108 <USBD_FS_ProductStrDescriptor+0x38>)
 80090f4:	f7ff fdec 	bl	8008cd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090f8:	4b02      	ldr	r3, [pc, #8]	@ (8009104 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20006cf4 	.word	0x20006cf4
 8009108:	0800a308 	.word	0x0800a308

0800910c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	6039      	str	r1, [r7, #0]
 8009116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	4904      	ldr	r1, [pc, #16]	@ (800912c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800911c:	4804      	ldr	r0, [pc, #16]	@ (8009130 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800911e:	f7ff fdd7 	bl	8008cd0 <USBD_GetString>
  return USBD_StrDesc;
 8009122:	4b02      	ldr	r3, [pc, #8]	@ (800912c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009124:	4618      	mov	r0, r3
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20006cf4 	.word	0x20006cf4
 8009130:	0800a320 	.word	0x0800a320

08009134 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	6039      	str	r1, [r7, #0]
 800913e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	221a      	movs	r2, #26
 8009144:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009146:	f000 f843 	bl	80091d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800914a:	4b02      	ldr	r3, [pc, #8]	@ (8009154 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	20000110 	.word	0x20000110

08009158 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	6039      	str	r1, [r7, #0]
 8009162:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d105      	bne.n	8009176 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	4907      	ldr	r1, [pc, #28]	@ (800918c <USBD_FS_ConfigStrDescriptor+0x34>)
 800916e:	4808      	ldr	r0, [pc, #32]	@ (8009190 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009170:	f7ff fdae 	bl	8008cd0 <USBD_GetString>
 8009174:	e004      	b.n	8009180 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	4904      	ldr	r1, [pc, #16]	@ (800918c <USBD_FS_ConfigStrDescriptor+0x34>)
 800917a:	4805      	ldr	r0, [pc, #20]	@ (8009190 <USBD_FS_ConfigStrDescriptor+0x38>)
 800917c:	f7ff fda8 	bl	8008cd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009180:	4b02      	ldr	r3, [pc, #8]	@ (800918c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20006cf4 	.word	0x20006cf4
 8009190:	0800a334 	.word	0x0800a334

08009194 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	6039      	str	r1, [r7, #0]
 800919e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091a0:	79fb      	ldrb	r3, [r7, #7]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d105      	bne.n	80091b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	4907      	ldr	r1, [pc, #28]	@ (80091c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091aa:	4808      	ldr	r0, [pc, #32]	@ (80091cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091ac:	f7ff fd90 	bl	8008cd0 <USBD_GetString>
 80091b0:	e004      	b.n	80091bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	4904      	ldr	r1, [pc, #16]	@ (80091c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091b6:	4805      	ldr	r0, [pc, #20]	@ (80091cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091b8:	f7ff fd8a 	bl	8008cd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091bc:	4b02      	ldr	r3, [pc, #8]	@ (80091c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20006cf4 	.word	0x20006cf4
 80091cc:	0800a340 	.word	0x0800a340

080091d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4413      	add	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d009      	beq.n	80091f8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091e4:	2208      	movs	r2, #8
 80091e6:	4906      	ldr	r1, [pc, #24]	@ (8009200 <Get_SerialNum+0x30>)
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 f80d 	bl	8009208 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091ee:	2204      	movs	r2, #4
 80091f0:	4904      	ldr	r1, [pc, #16]	@ (8009204 <Get_SerialNum+0x34>)
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f808 	bl	8009208 <IntToUnicode>
  }
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20000112 	.word	0x20000112
 8009204:	20000122 	.word	0x20000122

08009208 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009208:	b480      	push	{r7}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4613      	mov	r3, r2
 8009214:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800921a:	2300      	movs	r3, #0
 800921c:	75fb      	strb	r3, [r7, #23]
 800921e:	e027      	b.n	8009270 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	0f1b      	lsrs	r3, r3, #28
 8009224:	2b09      	cmp	r3, #9
 8009226:	d80b      	bhi.n	8009240 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	0f1b      	lsrs	r3, r3, #28
 800922c:	b2da      	uxtb	r2, r3
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	4619      	mov	r1, r3
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	440b      	add	r3, r1
 8009238:	3230      	adds	r2, #48	@ 0x30
 800923a:	b2d2      	uxtb	r2, r2
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	e00a      	b.n	8009256 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	0f1b      	lsrs	r3, r3, #28
 8009244:	b2da      	uxtb	r2, r3
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	4619      	mov	r1, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	440b      	add	r3, r1
 8009250:	3237      	adds	r2, #55	@ 0x37
 8009252:	b2d2      	uxtb	r2, r2
 8009254:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	011b      	lsls	r3, r3, #4
 800925a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800925c:	7dfb      	ldrb	r3, [r7, #23]
 800925e:	005b      	lsls	r3, r3, #1
 8009260:	3301      	adds	r3, #1
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	4413      	add	r3, r2
 8009266:	2200      	movs	r2, #0
 8009268:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800926a:	7dfb      	ldrb	r3, [r7, #23]
 800926c:	3301      	adds	r3, #1
 800926e:	75fb      	strb	r3, [r7, #23]
 8009270:	7dfa      	ldrb	r2, [r7, #23]
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	429a      	cmp	r2, r3
 8009276:	d3d3      	bcc.n	8009220 <IntToUnicode+0x18>
  }
}
 8009278:	bf00      	nop
 800927a:	bf00      	nop
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
	...

08009288 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	@ 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009290:	f107 0314 	add.w	r3, r7, #20
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	605a      	str	r2, [r3, #4]
 800929a:	609a      	str	r2, [r3, #8]
 800929c:	60da      	str	r2, [r3, #12]
 800929e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092a8:	d13a      	bne.n	8009320 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092aa:	2300      	movs	r3, #0
 80092ac:	613b      	str	r3, [r7, #16]
 80092ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009328 <HAL_PCD_MspInit+0xa0>)
 80092b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009328 <HAL_PCD_MspInit+0xa0>)
 80092b4:	f043 0301 	orr.w	r3, r3, #1
 80092b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80092ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009328 <HAL_PCD_MspInit+0xa0>)
 80092bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	613b      	str	r3, [r7, #16]
 80092c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80092c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80092ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092cc:	2302      	movs	r3, #2
 80092ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092d0:	2300      	movs	r3, #0
 80092d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092d4:	2303      	movs	r3, #3
 80092d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092d8:	230a      	movs	r3, #10
 80092da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092dc:	f107 0314 	add.w	r3, r7, #20
 80092e0:	4619      	mov	r1, r3
 80092e2:	4812      	ldr	r0, [pc, #72]	@ (800932c <HAL_PCD_MspInit+0xa4>)
 80092e4:	f7f9 f9ac 	bl	8002640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009328 <HAL_PCD_MspInit+0xa0>)
 80092ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ec:	4a0e      	ldr	r2, [pc, #56]	@ (8009328 <HAL_PCD_MspInit+0xa0>)
 80092ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80092f4:	2300      	movs	r3, #0
 80092f6:	60fb      	str	r3, [r7, #12]
 80092f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009328 <HAL_PCD_MspInit+0xa0>)
 80092fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092fc:	4a0a      	ldr	r2, [pc, #40]	@ (8009328 <HAL_PCD_MspInit+0xa0>)
 80092fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009302:	6453      	str	r3, [r2, #68]	@ 0x44
 8009304:	4b08      	ldr	r3, [pc, #32]	@ (8009328 <HAL_PCD_MspInit+0xa0>)
 8009306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009310:	2200      	movs	r2, #0
 8009312:	2100      	movs	r1, #0
 8009314:	2043      	movs	r0, #67	@ 0x43
 8009316:	f7f8 fd7c 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800931a:	2043      	movs	r0, #67	@ 0x43
 800931c:	f7f8 fd95 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009320:	bf00      	nop
 8009322:	3728      	adds	r7, #40	@ 0x28
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	40023800 	.word	0x40023800
 800932c:	40020000 	.word	0x40020000

08009330 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009344:	4619      	mov	r1, r3
 8009346:	4610      	mov	r0, r2
 8009348:	f7fe fb5f 	bl	8007a0a <USBD_LL_SetupStage>
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009366:	78fa      	ldrb	r2, [r7, #3]
 8009368:	6879      	ldr	r1, [r7, #4]
 800936a:	4613      	mov	r3, r2
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	78fb      	ldrb	r3, [r7, #3]
 800937c:	4619      	mov	r1, r3
 800937e:	f7fe fb99 	bl	8007ab4 <USBD_LL_DataOutStage>
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800939c:	78fa      	ldrb	r2, [r7, #3]
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4613      	mov	r3, r2
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	4413      	add	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	440b      	add	r3, r1
 80093aa:	3320      	adds	r3, #32
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	4619      	mov	r1, r3
 80093b2:	f7fe fc32 	bl	8007c1a <USBD_LL_DataInStage>
}
 80093b6:	bf00      	nop
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fd6c 	bl	8007eaa <USBD_LL_SOF>
}
 80093d2:	bf00      	nop
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093e2:	2301      	movs	r3, #1
 80093e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	79db      	ldrb	r3, [r3, #7]
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d001      	beq.n	80093f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80093ee:	f7f7 fd0d 	bl	8000e0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093f8:	7bfa      	ldrb	r2, [r7, #15]
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fe fd10 	bl	8007e22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009408:	4618      	mov	r0, r3
 800940a:	f7fe fcb8 	bl	8007d7e <USBD_LL_Reset>
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fd0b 	bl	8007e42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	6812      	ldr	r2, [r2, #0]
 800943a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800943e:	f043 0301 	orr.w	r3, r3, #1
 8009442:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	7adb      	ldrb	r3, [r3, #11]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800944c:	4b04      	ldr	r3, [pc, #16]	@ (8009460 <HAL_PCD_SuspendCallback+0x48>)
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	4a03      	ldr	r2, [pc, #12]	@ (8009460 <HAL_PCD_SuspendCallback+0x48>)
 8009452:	f043 0306 	orr.w	r3, r3, #6
 8009456:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	e000ed00 	.word	0xe000ed00

08009464 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fd01 	bl	8007e7a <USBD_LL_Resume>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009492:	78fa      	ldrb	r2, [r7, #3]
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fd59 	bl	8007f4e <USBD_LL_IsoOUTIncomplete>
}
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094b6:	78fa      	ldrb	r2, [r7, #3]
 80094b8:	4611      	mov	r1, r2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fe fd15 	bl	8007eea <USBD_LL_IsoINIncomplete>
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe fd6b 	bl	8007fb2 <USBD_LL_DevConnected>
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe fd68 	bl	8007fc8 <USBD_LL_DevDisconnected>
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d13c      	bne.n	800958a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009510:	4a20      	ldr	r2, [pc, #128]	@ (8009594 <USBD_LL_Init+0x94>)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a1e      	ldr	r2, [pc, #120]	@ (8009594 <USBD_LL_Init+0x94>)
 800951c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009520:	4b1c      	ldr	r3, [pc, #112]	@ (8009594 <USBD_LL_Init+0x94>)
 8009522:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009526:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009528:	4b1a      	ldr	r3, [pc, #104]	@ (8009594 <USBD_LL_Init+0x94>)
 800952a:	2204      	movs	r2, #4
 800952c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800952e:	4b19      	ldr	r3, [pc, #100]	@ (8009594 <USBD_LL_Init+0x94>)
 8009530:	2202      	movs	r2, #2
 8009532:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009534:	4b17      	ldr	r3, [pc, #92]	@ (8009594 <USBD_LL_Init+0x94>)
 8009536:	2200      	movs	r2, #0
 8009538:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800953a:	4b16      	ldr	r3, [pc, #88]	@ (8009594 <USBD_LL_Init+0x94>)
 800953c:	2202      	movs	r2, #2
 800953e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009540:	4b14      	ldr	r3, [pc, #80]	@ (8009594 <USBD_LL_Init+0x94>)
 8009542:	2200      	movs	r2, #0
 8009544:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009546:	4b13      	ldr	r3, [pc, #76]	@ (8009594 <USBD_LL_Init+0x94>)
 8009548:	2200      	movs	r2, #0
 800954a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800954c:	4b11      	ldr	r3, [pc, #68]	@ (8009594 <USBD_LL_Init+0x94>)
 800954e:	2200      	movs	r2, #0
 8009550:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009552:	4b10      	ldr	r3, [pc, #64]	@ (8009594 <USBD_LL_Init+0x94>)
 8009554:	2200      	movs	r2, #0
 8009556:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009558:	4b0e      	ldr	r3, [pc, #56]	@ (8009594 <USBD_LL_Init+0x94>)
 800955a:	2200      	movs	r2, #0
 800955c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800955e:	480d      	ldr	r0, [pc, #52]	@ (8009594 <USBD_LL_Init+0x94>)
 8009560:	f7f9 f9f2 	bl	8002948 <HAL_PCD_Init>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800956a:	f7f7 fc4f 	bl	8000e0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800956e:	2180      	movs	r1, #128	@ 0x80
 8009570:	4808      	ldr	r0, [pc, #32]	@ (8009594 <USBD_LL_Init+0x94>)
 8009572:	f7fa fc1c 	bl	8003dae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009576:	2240      	movs	r2, #64	@ 0x40
 8009578:	2100      	movs	r1, #0
 800957a:	4806      	ldr	r0, [pc, #24]	@ (8009594 <USBD_LL_Init+0x94>)
 800957c:	f7fa fbd0 	bl	8003d20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009580:	2280      	movs	r2, #128	@ 0x80
 8009582:	2101      	movs	r1, #1
 8009584:	4803      	ldr	r0, [pc, #12]	@ (8009594 <USBD_LL_Init+0x94>)
 8009586:	f7fa fbcb 	bl	8003d20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20006ef4 	.word	0x20006ef4

08009598 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7f9 fad9 	bl	8002b66 <HAL_PCD_Start>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f942 	bl	8009844 <USBD_Get_USB_Status>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	4608      	mov	r0, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	461a      	mov	r2, r3
 80095dc:	4603      	mov	r3, r0
 80095de:	70fb      	strb	r3, [r7, #3]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70bb      	strb	r3, [r7, #2]
 80095e4:	4613      	mov	r3, r2
 80095e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80095f6:	78bb      	ldrb	r3, [r7, #2]
 80095f8:	883a      	ldrh	r2, [r7, #0]
 80095fa:	78f9      	ldrb	r1, [r7, #3]
 80095fc:	f7f9 ffad 	bl	800355a <HAL_PCD_EP_Open>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	4618      	mov	r0, r3
 8009608:	f000 f91c 	bl	8009844 <USBD_Get_USB_Status>
 800960c:	4603      	mov	r3, r0
 800960e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009610:	7bbb      	ldrb	r3, [r7, #14]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	460b      	mov	r3, r1
 8009624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009634:	78fa      	ldrb	r2, [r7, #3]
 8009636:	4611      	mov	r1, r2
 8009638:	4618      	mov	r0, r3
 800963a:	f7f9 fff6 	bl	800362a <HAL_PCD_EP_Close>
 800963e:	4603      	mov	r3, r0
 8009640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 f8fd 	bl	8009844 <USBD_Get_USB_Status>
 800964a:	4603      	mov	r3, r0
 800964c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009672:	78fa      	ldrb	r2, [r7, #3]
 8009674:	4611      	mov	r1, r2
 8009676:	4618      	mov	r0, r3
 8009678:	f7fa f8ae 	bl	80037d8 <HAL_PCD_EP_SetStall>
 800967c:	4603      	mov	r3, r0
 800967e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	4618      	mov	r0, r3
 8009684:	f000 f8de 	bl	8009844 <USBD_Get_USB_Status>
 8009688:	4603      	mov	r3, r0
 800968a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800968c:	7bbb      	ldrb	r3, [r7, #14]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	460b      	mov	r3, r1
 80096a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096b0:	78fa      	ldrb	r2, [r7, #3]
 80096b2:	4611      	mov	r1, r2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fa f8f2 	bl	800389e <HAL_PCD_EP_ClrStall>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 f8bf 	bl	8009844 <USBD_Get_USB_Status>
 80096c6:	4603      	mov	r3, r0
 80096c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	da0b      	bge.n	8009708 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096f0:	78fb      	ldrb	r3, [r7, #3]
 80096f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096f6:	68f9      	ldr	r1, [r7, #12]
 80096f8:	4613      	mov	r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	3316      	adds	r3, #22
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	e00b      	b.n	8009720 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009708:	78fb      	ldrb	r3, [r7, #3]
 800970a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	4613      	mov	r3, r2
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	440b      	add	r3, r1
 800971a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800971e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009720:	4618      	mov	r0, r3
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7f9 fee1 	bl	8003512 <HAL_PCD_SetAddress>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 f874 	bl	8009844 <USBD_Get_USB_Status>
 800975c:	4603      	mov	r3, r0
 800975e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009760:	7bbb      	ldrb	r3, [r7, #14]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b086      	sub	sp, #24
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]
 8009776:	460b      	mov	r3, r1
 8009778:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009788:	7af9      	ldrb	r1, [r7, #11]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	f7f9 ffe9 	bl	8003764 <HAL_PCD_EP_Transmit>
 8009792:	4603      	mov	r3, r0
 8009794:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f853 	bl	8009844 <USBD_Get_USB_Status>
 800979e:	4603      	mov	r3, r0
 80097a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	607a      	str	r2, [r7, #4]
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	460b      	mov	r3, r1
 80097ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80097ca:	7af9      	ldrb	r1, [r7, #11]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	f7f9 ff75 	bl	80036be <HAL_PCD_EP_Receive>
 80097d4:	4603      	mov	r3, r0
 80097d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f832 	bl	8009844 <USBD_Get_USB_Status>
 80097e0:	4603      	mov	r3, r0
 80097e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7f9 ff95 	bl	8003734 <HAL_PCD_EP_GetRxCount>
 800980a:	4603      	mov	r3, r0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800981c:	4b03      	ldr	r3, [pc, #12]	@ (800982c <USBD_static_malloc+0x18>)
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	200073d8 	.word	0x200073d8

08009830 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]

}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	2b03      	cmp	r3, #3
 8009856:	d817      	bhi.n	8009888 <USBD_Get_USB_Status+0x44>
 8009858:	a201      	add	r2, pc, #4	@ (adr r2, 8009860 <USBD_Get_USB_Status+0x1c>)
 800985a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985e:	bf00      	nop
 8009860:	08009871 	.word	0x08009871
 8009864:	08009877 	.word	0x08009877
 8009868:	0800987d 	.word	0x0800987d
 800986c:	08009883 	.word	0x08009883
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
    break;
 8009874:	e00b      	b.n	800988e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009876:	2303      	movs	r3, #3
 8009878:	73fb      	strb	r3, [r7, #15]
    break;
 800987a:	e008      	b.n	800988e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800987c:	2301      	movs	r3, #1
 800987e:	73fb      	strb	r3, [r7, #15]
    break;
 8009880:	e005      	b.n	800988e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009882:	2303      	movs	r3, #3
 8009884:	73fb      	strb	r3, [r7, #15]
    break;
 8009886:	e002      	b.n	800988e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009888:	2303      	movs	r3, #3
 800988a:	73fb      	strb	r3, [r7, #15]
    break;
 800988c:	bf00      	nop
  }
  return usb_status;
 800988e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <sniprintf>:
 800989c:	b40c      	push	{r2, r3}
 800989e:	b530      	push	{r4, r5, lr}
 80098a0:	4b17      	ldr	r3, [pc, #92]	@ (8009900 <sniprintf+0x64>)
 80098a2:	1e0c      	subs	r4, r1, #0
 80098a4:	681d      	ldr	r5, [r3, #0]
 80098a6:	b09d      	sub	sp, #116	@ 0x74
 80098a8:	da08      	bge.n	80098bc <sniprintf+0x20>
 80098aa:	238b      	movs	r3, #139	@ 0x8b
 80098ac:	602b      	str	r3, [r5, #0]
 80098ae:	f04f 30ff 	mov.w	r0, #4294967295
 80098b2:	b01d      	add	sp, #116	@ 0x74
 80098b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098b8:	b002      	add	sp, #8
 80098ba:	4770      	bx	lr
 80098bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80098c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80098c4:	bf14      	ite	ne
 80098c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80098ca:	4623      	moveq	r3, r4
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	9307      	str	r3, [sp, #28]
 80098d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80098d4:	9002      	str	r0, [sp, #8]
 80098d6:	9006      	str	r0, [sp, #24]
 80098d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80098dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80098de:	ab21      	add	r3, sp, #132	@ 0x84
 80098e0:	a902      	add	r1, sp, #8
 80098e2:	4628      	mov	r0, r5
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	f000 f9b5 	bl	8009c54 <_svfiprintf_r>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	bfbc      	itt	lt
 80098ee:	238b      	movlt	r3, #139	@ 0x8b
 80098f0:	602b      	strlt	r3, [r5, #0]
 80098f2:	2c00      	cmp	r4, #0
 80098f4:	d0dd      	beq.n	80098b2 <sniprintf+0x16>
 80098f6:	9b02      	ldr	r3, [sp, #8]
 80098f8:	2200      	movs	r2, #0
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	e7d9      	b.n	80098b2 <sniprintf+0x16>
 80098fe:	bf00      	nop
 8009900:	2000012c 	.word	0x2000012c

08009904 <memset>:
 8009904:	4402      	add	r2, r0
 8009906:	4603      	mov	r3, r0
 8009908:	4293      	cmp	r3, r2
 800990a:	d100      	bne.n	800990e <memset+0xa>
 800990c:	4770      	bx	lr
 800990e:	f803 1b01 	strb.w	r1, [r3], #1
 8009912:	e7f9      	b.n	8009908 <memset+0x4>

08009914 <strncmp>:
 8009914:	b510      	push	{r4, lr}
 8009916:	b16a      	cbz	r2, 8009934 <strncmp+0x20>
 8009918:	3901      	subs	r1, #1
 800991a:	1884      	adds	r4, r0, r2
 800991c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009920:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009924:	429a      	cmp	r2, r3
 8009926:	d103      	bne.n	8009930 <strncmp+0x1c>
 8009928:	42a0      	cmp	r0, r4
 800992a:	d001      	beq.n	8009930 <strncmp+0x1c>
 800992c:	2a00      	cmp	r2, #0
 800992e:	d1f5      	bne.n	800991c <strncmp+0x8>
 8009930:	1ad0      	subs	r0, r2, r3
 8009932:	bd10      	pop	{r4, pc}
 8009934:	4610      	mov	r0, r2
 8009936:	e7fc      	b.n	8009932 <strncmp+0x1e>

08009938 <__errno>:
 8009938:	4b01      	ldr	r3, [pc, #4]	@ (8009940 <__errno+0x8>)
 800993a:	6818      	ldr	r0, [r3, #0]
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	2000012c 	.word	0x2000012c

08009944 <__libc_init_array>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	4d0d      	ldr	r5, [pc, #52]	@ (800997c <__libc_init_array+0x38>)
 8009948:	4c0d      	ldr	r4, [pc, #52]	@ (8009980 <__libc_init_array+0x3c>)
 800994a:	1b64      	subs	r4, r4, r5
 800994c:	10a4      	asrs	r4, r4, #2
 800994e:	2600      	movs	r6, #0
 8009950:	42a6      	cmp	r6, r4
 8009952:	d109      	bne.n	8009968 <__libc_init_array+0x24>
 8009954:	4d0b      	ldr	r5, [pc, #44]	@ (8009984 <__libc_init_array+0x40>)
 8009956:	4c0c      	ldr	r4, [pc, #48]	@ (8009988 <__libc_init_array+0x44>)
 8009958:	f000 fc66 	bl	800a228 <_init>
 800995c:	1b64      	subs	r4, r4, r5
 800995e:	10a4      	asrs	r4, r4, #2
 8009960:	2600      	movs	r6, #0
 8009962:	42a6      	cmp	r6, r4
 8009964:	d105      	bne.n	8009972 <__libc_init_array+0x2e>
 8009966:	bd70      	pop	{r4, r5, r6, pc}
 8009968:	f855 3b04 	ldr.w	r3, [r5], #4
 800996c:	4798      	blx	r3
 800996e:	3601      	adds	r6, #1
 8009970:	e7ee      	b.n	8009950 <__libc_init_array+0xc>
 8009972:	f855 3b04 	ldr.w	r3, [r5], #4
 8009976:	4798      	blx	r3
 8009978:	3601      	adds	r6, #1
 800997a:	e7f2      	b.n	8009962 <__libc_init_array+0x1e>
 800997c:	0800a3a4 	.word	0x0800a3a4
 8009980:	0800a3a4 	.word	0x0800a3a4
 8009984:	0800a3a4 	.word	0x0800a3a4
 8009988:	0800a3a8 	.word	0x0800a3a8

0800998c <__retarget_lock_acquire_recursive>:
 800998c:	4770      	bx	lr

0800998e <__retarget_lock_release_recursive>:
 800998e:	4770      	bx	lr

08009990 <memcpy>:
 8009990:	440a      	add	r2, r1
 8009992:	4291      	cmp	r1, r2
 8009994:	f100 33ff 	add.w	r3, r0, #4294967295
 8009998:	d100      	bne.n	800999c <memcpy+0xc>
 800999a:	4770      	bx	lr
 800999c:	b510      	push	{r4, lr}
 800999e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099a6:	4291      	cmp	r1, r2
 80099a8:	d1f9      	bne.n	800999e <memcpy+0xe>
 80099aa:	bd10      	pop	{r4, pc}

080099ac <_free_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4605      	mov	r5, r0
 80099b0:	2900      	cmp	r1, #0
 80099b2:	d041      	beq.n	8009a38 <_free_r+0x8c>
 80099b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099b8:	1f0c      	subs	r4, r1, #4
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bfb8      	it	lt
 80099be:	18e4      	addlt	r4, r4, r3
 80099c0:	f000 f8e0 	bl	8009b84 <__malloc_lock>
 80099c4:	4a1d      	ldr	r2, [pc, #116]	@ (8009a3c <_free_r+0x90>)
 80099c6:	6813      	ldr	r3, [r2, #0]
 80099c8:	b933      	cbnz	r3, 80099d8 <_free_r+0x2c>
 80099ca:	6063      	str	r3, [r4, #4]
 80099cc:	6014      	str	r4, [r2, #0]
 80099ce:	4628      	mov	r0, r5
 80099d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099d4:	f000 b8dc 	b.w	8009b90 <__malloc_unlock>
 80099d8:	42a3      	cmp	r3, r4
 80099da:	d908      	bls.n	80099ee <_free_r+0x42>
 80099dc:	6820      	ldr	r0, [r4, #0]
 80099de:	1821      	adds	r1, r4, r0
 80099e0:	428b      	cmp	r3, r1
 80099e2:	bf01      	itttt	eq
 80099e4:	6819      	ldreq	r1, [r3, #0]
 80099e6:	685b      	ldreq	r3, [r3, #4]
 80099e8:	1809      	addeq	r1, r1, r0
 80099ea:	6021      	streq	r1, [r4, #0]
 80099ec:	e7ed      	b.n	80099ca <_free_r+0x1e>
 80099ee:	461a      	mov	r2, r3
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	b10b      	cbz	r3, 80099f8 <_free_r+0x4c>
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	d9fa      	bls.n	80099ee <_free_r+0x42>
 80099f8:	6811      	ldr	r1, [r2, #0]
 80099fa:	1850      	adds	r0, r2, r1
 80099fc:	42a0      	cmp	r0, r4
 80099fe:	d10b      	bne.n	8009a18 <_free_r+0x6c>
 8009a00:	6820      	ldr	r0, [r4, #0]
 8009a02:	4401      	add	r1, r0
 8009a04:	1850      	adds	r0, r2, r1
 8009a06:	4283      	cmp	r3, r0
 8009a08:	6011      	str	r1, [r2, #0]
 8009a0a:	d1e0      	bne.n	80099ce <_free_r+0x22>
 8009a0c:	6818      	ldr	r0, [r3, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	6053      	str	r3, [r2, #4]
 8009a12:	4408      	add	r0, r1
 8009a14:	6010      	str	r0, [r2, #0]
 8009a16:	e7da      	b.n	80099ce <_free_r+0x22>
 8009a18:	d902      	bls.n	8009a20 <_free_r+0x74>
 8009a1a:	230c      	movs	r3, #12
 8009a1c:	602b      	str	r3, [r5, #0]
 8009a1e:	e7d6      	b.n	80099ce <_free_r+0x22>
 8009a20:	6820      	ldr	r0, [r4, #0]
 8009a22:	1821      	adds	r1, r4, r0
 8009a24:	428b      	cmp	r3, r1
 8009a26:	bf04      	itt	eq
 8009a28:	6819      	ldreq	r1, [r3, #0]
 8009a2a:	685b      	ldreq	r3, [r3, #4]
 8009a2c:	6063      	str	r3, [r4, #4]
 8009a2e:	bf04      	itt	eq
 8009a30:	1809      	addeq	r1, r1, r0
 8009a32:	6021      	streq	r1, [r4, #0]
 8009a34:	6054      	str	r4, [r2, #4]
 8009a36:	e7ca      	b.n	80099ce <_free_r+0x22>
 8009a38:	bd38      	pop	{r3, r4, r5, pc}
 8009a3a:	bf00      	nop
 8009a3c:	2000773c 	.word	0x2000773c

08009a40 <sbrk_aligned>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	4e0f      	ldr	r6, [pc, #60]	@ (8009a80 <sbrk_aligned+0x40>)
 8009a44:	460c      	mov	r4, r1
 8009a46:	6831      	ldr	r1, [r6, #0]
 8009a48:	4605      	mov	r5, r0
 8009a4a:	b911      	cbnz	r1, 8009a52 <sbrk_aligned+0x12>
 8009a4c:	f000 fba6 	bl	800a19c <_sbrk_r>
 8009a50:	6030      	str	r0, [r6, #0]
 8009a52:	4621      	mov	r1, r4
 8009a54:	4628      	mov	r0, r5
 8009a56:	f000 fba1 	bl	800a19c <_sbrk_r>
 8009a5a:	1c43      	adds	r3, r0, #1
 8009a5c:	d103      	bne.n	8009a66 <sbrk_aligned+0x26>
 8009a5e:	f04f 34ff 	mov.w	r4, #4294967295
 8009a62:	4620      	mov	r0, r4
 8009a64:	bd70      	pop	{r4, r5, r6, pc}
 8009a66:	1cc4      	adds	r4, r0, #3
 8009a68:	f024 0403 	bic.w	r4, r4, #3
 8009a6c:	42a0      	cmp	r0, r4
 8009a6e:	d0f8      	beq.n	8009a62 <sbrk_aligned+0x22>
 8009a70:	1a21      	subs	r1, r4, r0
 8009a72:	4628      	mov	r0, r5
 8009a74:	f000 fb92 	bl	800a19c <_sbrk_r>
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d1f2      	bne.n	8009a62 <sbrk_aligned+0x22>
 8009a7c:	e7ef      	b.n	8009a5e <sbrk_aligned+0x1e>
 8009a7e:	bf00      	nop
 8009a80:	20007738 	.word	0x20007738

08009a84 <_malloc_r>:
 8009a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a88:	1ccd      	adds	r5, r1, #3
 8009a8a:	f025 0503 	bic.w	r5, r5, #3
 8009a8e:	3508      	adds	r5, #8
 8009a90:	2d0c      	cmp	r5, #12
 8009a92:	bf38      	it	cc
 8009a94:	250c      	movcc	r5, #12
 8009a96:	2d00      	cmp	r5, #0
 8009a98:	4606      	mov	r6, r0
 8009a9a:	db01      	blt.n	8009aa0 <_malloc_r+0x1c>
 8009a9c:	42a9      	cmp	r1, r5
 8009a9e:	d904      	bls.n	8009aaa <_malloc_r+0x26>
 8009aa0:	230c      	movs	r3, #12
 8009aa2:	6033      	str	r3, [r6, #0]
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b80 <_malloc_r+0xfc>
 8009aae:	f000 f869 	bl	8009b84 <__malloc_lock>
 8009ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ab6:	461c      	mov	r4, r3
 8009ab8:	bb44      	cbnz	r4, 8009b0c <_malloc_r+0x88>
 8009aba:	4629      	mov	r1, r5
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7ff ffbf 	bl	8009a40 <sbrk_aligned>
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	d158      	bne.n	8009b7a <_malloc_r+0xf6>
 8009ac8:	f8d8 4000 	ldr.w	r4, [r8]
 8009acc:	4627      	mov	r7, r4
 8009ace:	2f00      	cmp	r7, #0
 8009ad0:	d143      	bne.n	8009b5a <_malloc_r+0xd6>
 8009ad2:	2c00      	cmp	r4, #0
 8009ad4:	d04b      	beq.n	8009b6e <_malloc_r+0xea>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	4639      	mov	r1, r7
 8009ada:	4630      	mov	r0, r6
 8009adc:	eb04 0903 	add.w	r9, r4, r3
 8009ae0:	f000 fb5c 	bl	800a19c <_sbrk_r>
 8009ae4:	4581      	cmp	r9, r0
 8009ae6:	d142      	bne.n	8009b6e <_malloc_r+0xea>
 8009ae8:	6821      	ldr	r1, [r4, #0]
 8009aea:	1a6d      	subs	r5, r5, r1
 8009aec:	4629      	mov	r1, r5
 8009aee:	4630      	mov	r0, r6
 8009af0:	f7ff ffa6 	bl	8009a40 <sbrk_aligned>
 8009af4:	3001      	adds	r0, #1
 8009af6:	d03a      	beq.n	8009b6e <_malloc_r+0xea>
 8009af8:	6823      	ldr	r3, [r4, #0]
 8009afa:	442b      	add	r3, r5
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	f8d8 3000 	ldr.w	r3, [r8]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	bb62      	cbnz	r2, 8009b60 <_malloc_r+0xdc>
 8009b06:	f8c8 7000 	str.w	r7, [r8]
 8009b0a:	e00f      	b.n	8009b2c <_malloc_r+0xa8>
 8009b0c:	6822      	ldr	r2, [r4, #0]
 8009b0e:	1b52      	subs	r2, r2, r5
 8009b10:	d420      	bmi.n	8009b54 <_malloc_r+0xd0>
 8009b12:	2a0b      	cmp	r2, #11
 8009b14:	d917      	bls.n	8009b46 <_malloc_r+0xc2>
 8009b16:	1961      	adds	r1, r4, r5
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	6025      	str	r5, [r4, #0]
 8009b1c:	bf18      	it	ne
 8009b1e:	6059      	strne	r1, [r3, #4]
 8009b20:	6863      	ldr	r3, [r4, #4]
 8009b22:	bf08      	it	eq
 8009b24:	f8c8 1000 	streq.w	r1, [r8]
 8009b28:	5162      	str	r2, [r4, r5]
 8009b2a:	604b      	str	r3, [r1, #4]
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f000 f82f 	bl	8009b90 <__malloc_unlock>
 8009b32:	f104 000b 	add.w	r0, r4, #11
 8009b36:	1d23      	adds	r3, r4, #4
 8009b38:	f020 0007 	bic.w	r0, r0, #7
 8009b3c:	1ac2      	subs	r2, r0, r3
 8009b3e:	bf1c      	itt	ne
 8009b40:	1a1b      	subne	r3, r3, r0
 8009b42:	50a3      	strne	r3, [r4, r2]
 8009b44:	e7af      	b.n	8009aa6 <_malloc_r+0x22>
 8009b46:	6862      	ldr	r2, [r4, #4]
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	bf0c      	ite	eq
 8009b4c:	f8c8 2000 	streq.w	r2, [r8]
 8009b50:	605a      	strne	r2, [r3, #4]
 8009b52:	e7eb      	b.n	8009b2c <_malloc_r+0xa8>
 8009b54:	4623      	mov	r3, r4
 8009b56:	6864      	ldr	r4, [r4, #4]
 8009b58:	e7ae      	b.n	8009ab8 <_malloc_r+0x34>
 8009b5a:	463c      	mov	r4, r7
 8009b5c:	687f      	ldr	r7, [r7, #4]
 8009b5e:	e7b6      	b.n	8009ace <_malloc_r+0x4a>
 8009b60:	461a      	mov	r2, r3
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	42a3      	cmp	r3, r4
 8009b66:	d1fb      	bne.n	8009b60 <_malloc_r+0xdc>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	6053      	str	r3, [r2, #4]
 8009b6c:	e7de      	b.n	8009b2c <_malloc_r+0xa8>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	6033      	str	r3, [r6, #0]
 8009b72:	4630      	mov	r0, r6
 8009b74:	f000 f80c 	bl	8009b90 <__malloc_unlock>
 8009b78:	e794      	b.n	8009aa4 <_malloc_r+0x20>
 8009b7a:	6005      	str	r5, [r0, #0]
 8009b7c:	e7d6      	b.n	8009b2c <_malloc_r+0xa8>
 8009b7e:	bf00      	nop
 8009b80:	2000773c 	.word	0x2000773c

08009b84 <__malloc_lock>:
 8009b84:	4801      	ldr	r0, [pc, #4]	@ (8009b8c <__malloc_lock+0x8>)
 8009b86:	f7ff bf01 	b.w	800998c <__retarget_lock_acquire_recursive>
 8009b8a:	bf00      	nop
 8009b8c:	20007734 	.word	0x20007734

08009b90 <__malloc_unlock>:
 8009b90:	4801      	ldr	r0, [pc, #4]	@ (8009b98 <__malloc_unlock+0x8>)
 8009b92:	f7ff befc 	b.w	800998e <__retarget_lock_release_recursive>
 8009b96:	bf00      	nop
 8009b98:	20007734 	.word	0x20007734

08009b9c <__ssputs_r>:
 8009b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba0:	688e      	ldr	r6, [r1, #8]
 8009ba2:	461f      	mov	r7, r3
 8009ba4:	42be      	cmp	r6, r7
 8009ba6:	680b      	ldr	r3, [r1, #0]
 8009ba8:	4682      	mov	sl, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	4690      	mov	r8, r2
 8009bae:	d82d      	bhi.n	8009c0c <__ssputs_r+0x70>
 8009bb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009bb8:	d026      	beq.n	8009c08 <__ssputs_r+0x6c>
 8009bba:	6965      	ldr	r5, [r4, #20]
 8009bbc:	6909      	ldr	r1, [r1, #16]
 8009bbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bc2:	eba3 0901 	sub.w	r9, r3, r1
 8009bc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bca:	1c7b      	adds	r3, r7, #1
 8009bcc:	444b      	add	r3, r9
 8009bce:	106d      	asrs	r5, r5, #1
 8009bd0:	429d      	cmp	r5, r3
 8009bd2:	bf38      	it	cc
 8009bd4:	461d      	movcc	r5, r3
 8009bd6:	0553      	lsls	r3, r2, #21
 8009bd8:	d527      	bpl.n	8009c2a <__ssputs_r+0x8e>
 8009bda:	4629      	mov	r1, r5
 8009bdc:	f7ff ff52 	bl	8009a84 <_malloc_r>
 8009be0:	4606      	mov	r6, r0
 8009be2:	b360      	cbz	r0, 8009c3e <__ssputs_r+0xa2>
 8009be4:	6921      	ldr	r1, [r4, #16]
 8009be6:	464a      	mov	r2, r9
 8009be8:	f7ff fed2 	bl	8009990 <memcpy>
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	6126      	str	r6, [r4, #16]
 8009bfa:	6165      	str	r5, [r4, #20]
 8009bfc:	444e      	add	r6, r9
 8009bfe:	eba5 0509 	sub.w	r5, r5, r9
 8009c02:	6026      	str	r6, [r4, #0]
 8009c04:	60a5      	str	r5, [r4, #8]
 8009c06:	463e      	mov	r6, r7
 8009c08:	42be      	cmp	r6, r7
 8009c0a:	d900      	bls.n	8009c0e <__ssputs_r+0x72>
 8009c0c:	463e      	mov	r6, r7
 8009c0e:	6820      	ldr	r0, [r4, #0]
 8009c10:	4632      	mov	r2, r6
 8009c12:	4641      	mov	r1, r8
 8009c14:	f000 faa8 	bl	800a168 <memmove>
 8009c18:	68a3      	ldr	r3, [r4, #8]
 8009c1a:	1b9b      	subs	r3, r3, r6
 8009c1c:	60a3      	str	r3, [r4, #8]
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	4433      	add	r3, r6
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	2000      	movs	r0, #0
 8009c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	f000 fac6 	bl	800a1bc <_realloc_r>
 8009c30:	4606      	mov	r6, r0
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d1e0      	bne.n	8009bf8 <__ssputs_r+0x5c>
 8009c36:	6921      	ldr	r1, [r4, #16]
 8009c38:	4650      	mov	r0, sl
 8009c3a:	f7ff feb7 	bl	80099ac <_free_r>
 8009c3e:	230c      	movs	r3, #12
 8009c40:	f8ca 3000 	str.w	r3, [sl]
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c50:	e7e9      	b.n	8009c26 <__ssputs_r+0x8a>
	...

08009c54 <_svfiprintf_r>:
 8009c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c58:	4698      	mov	r8, r3
 8009c5a:	898b      	ldrh	r3, [r1, #12]
 8009c5c:	061b      	lsls	r3, r3, #24
 8009c5e:	b09d      	sub	sp, #116	@ 0x74
 8009c60:	4607      	mov	r7, r0
 8009c62:	460d      	mov	r5, r1
 8009c64:	4614      	mov	r4, r2
 8009c66:	d510      	bpl.n	8009c8a <_svfiprintf_r+0x36>
 8009c68:	690b      	ldr	r3, [r1, #16]
 8009c6a:	b973      	cbnz	r3, 8009c8a <_svfiprintf_r+0x36>
 8009c6c:	2140      	movs	r1, #64	@ 0x40
 8009c6e:	f7ff ff09 	bl	8009a84 <_malloc_r>
 8009c72:	6028      	str	r0, [r5, #0]
 8009c74:	6128      	str	r0, [r5, #16]
 8009c76:	b930      	cbnz	r0, 8009c86 <_svfiprintf_r+0x32>
 8009c78:	230c      	movs	r3, #12
 8009c7a:	603b      	str	r3, [r7, #0]
 8009c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c80:	b01d      	add	sp, #116	@ 0x74
 8009c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	2340      	movs	r3, #64	@ 0x40
 8009c88:	616b      	str	r3, [r5, #20]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c8e:	2320      	movs	r3, #32
 8009c90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c98:	2330      	movs	r3, #48	@ 0x30
 8009c9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e38 <_svfiprintf_r+0x1e4>
 8009c9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ca2:	f04f 0901 	mov.w	r9, #1
 8009ca6:	4623      	mov	r3, r4
 8009ca8:	469a      	mov	sl, r3
 8009caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cae:	b10a      	cbz	r2, 8009cb4 <_svfiprintf_r+0x60>
 8009cb0:	2a25      	cmp	r2, #37	@ 0x25
 8009cb2:	d1f9      	bne.n	8009ca8 <_svfiprintf_r+0x54>
 8009cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8009cb8:	d00b      	beq.n	8009cd2 <_svfiprintf_r+0x7e>
 8009cba:	465b      	mov	r3, fp
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	f7ff ff6b 	bl	8009b9c <__ssputs_r>
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	f000 80a7 	beq.w	8009e1a <_svfiprintf_r+0x1c6>
 8009ccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cce:	445a      	add	r2, fp
 8009cd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 809f 	beq.w	8009e1a <_svfiprintf_r+0x1c6>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ce6:	f10a 0a01 	add.w	sl, sl, #1
 8009cea:	9304      	str	r3, [sp, #16]
 8009cec:	9307      	str	r3, [sp, #28]
 8009cee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cf4:	4654      	mov	r4, sl
 8009cf6:	2205      	movs	r2, #5
 8009cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfc:	484e      	ldr	r0, [pc, #312]	@ (8009e38 <_svfiprintf_r+0x1e4>)
 8009cfe:	f7f6 fa6f 	bl	80001e0 <memchr>
 8009d02:	9a04      	ldr	r2, [sp, #16]
 8009d04:	b9d8      	cbnz	r0, 8009d3e <_svfiprintf_r+0xea>
 8009d06:	06d0      	lsls	r0, r2, #27
 8009d08:	bf44      	itt	mi
 8009d0a:	2320      	movmi	r3, #32
 8009d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d10:	0711      	lsls	r1, r2, #28
 8009d12:	bf44      	itt	mi
 8009d14:	232b      	movmi	r3, #43	@ 0x2b
 8009d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d20:	d015      	beq.n	8009d4e <_svfiprintf_r+0xfa>
 8009d22:	9a07      	ldr	r2, [sp, #28]
 8009d24:	4654      	mov	r4, sl
 8009d26:	2000      	movs	r0, #0
 8009d28:	f04f 0c0a 	mov.w	ip, #10
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d32:	3b30      	subs	r3, #48	@ 0x30
 8009d34:	2b09      	cmp	r3, #9
 8009d36:	d94b      	bls.n	8009dd0 <_svfiprintf_r+0x17c>
 8009d38:	b1b0      	cbz	r0, 8009d68 <_svfiprintf_r+0x114>
 8009d3a:	9207      	str	r2, [sp, #28]
 8009d3c:	e014      	b.n	8009d68 <_svfiprintf_r+0x114>
 8009d3e:	eba0 0308 	sub.w	r3, r0, r8
 8009d42:	fa09 f303 	lsl.w	r3, r9, r3
 8009d46:	4313      	orrs	r3, r2
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	46a2      	mov	sl, r4
 8009d4c:	e7d2      	b.n	8009cf4 <_svfiprintf_r+0xa0>
 8009d4e:	9b03      	ldr	r3, [sp, #12]
 8009d50:	1d19      	adds	r1, r3, #4
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	9103      	str	r1, [sp, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bfbb      	ittet	lt
 8009d5a:	425b      	neglt	r3, r3
 8009d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d60:	9307      	strge	r3, [sp, #28]
 8009d62:	9307      	strlt	r3, [sp, #28]
 8009d64:	bfb8      	it	lt
 8009d66:	9204      	strlt	r2, [sp, #16]
 8009d68:	7823      	ldrb	r3, [r4, #0]
 8009d6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d6c:	d10a      	bne.n	8009d84 <_svfiprintf_r+0x130>
 8009d6e:	7863      	ldrb	r3, [r4, #1]
 8009d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d72:	d132      	bne.n	8009dda <_svfiprintf_r+0x186>
 8009d74:	9b03      	ldr	r3, [sp, #12]
 8009d76:	1d1a      	adds	r2, r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	9203      	str	r2, [sp, #12]
 8009d7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d80:	3402      	adds	r4, #2
 8009d82:	9305      	str	r3, [sp, #20]
 8009d84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e48 <_svfiprintf_r+0x1f4>
 8009d88:	7821      	ldrb	r1, [r4, #0]
 8009d8a:	2203      	movs	r2, #3
 8009d8c:	4650      	mov	r0, sl
 8009d8e:	f7f6 fa27 	bl	80001e0 <memchr>
 8009d92:	b138      	cbz	r0, 8009da4 <_svfiprintf_r+0x150>
 8009d94:	9b04      	ldr	r3, [sp, #16]
 8009d96:	eba0 000a 	sub.w	r0, r0, sl
 8009d9a:	2240      	movs	r2, #64	@ 0x40
 8009d9c:	4082      	lsls	r2, r0
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	3401      	adds	r4, #1
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da8:	4824      	ldr	r0, [pc, #144]	@ (8009e3c <_svfiprintf_r+0x1e8>)
 8009daa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dae:	2206      	movs	r2, #6
 8009db0:	f7f6 fa16 	bl	80001e0 <memchr>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d036      	beq.n	8009e26 <_svfiprintf_r+0x1d2>
 8009db8:	4b21      	ldr	r3, [pc, #132]	@ (8009e40 <_svfiprintf_r+0x1ec>)
 8009dba:	bb1b      	cbnz	r3, 8009e04 <_svfiprintf_r+0x1b0>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	3307      	adds	r3, #7
 8009dc0:	f023 0307 	bic.w	r3, r3, #7
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	9303      	str	r3, [sp, #12]
 8009dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dca:	4433      	add	r3, r6
 8009dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dce:	e76a      	b.n	8009ca6 <_svfiprintf_r+0x52>
 8009dd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	e7a8      	b.n	8009d2c <_svfiprintf_r+0xd8>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	3401      	adds	r4, #1
 8009dde:	9305      	str	r3, [sp, #20]
 8009de0:	4619      	mov	r1, r3
 8009de2:	f04f 0c0a 	mov.w	ip, #10
 8009de6:	4620      	mov	r0, r4
 8009de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dec:	3a30      	subs	r2, #48	@ 0x30
 8009dee:	2a09      	cmp	r2, #9
 8009df0:	d903      	bls.n	8009dfa <_svfiprintf_r+0x1a6>
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0c6      	beq.n	8009d84 <_svfiprintf_r+0x130>
 8009df6:	9105      	str	r1, [sp, #20]
 8009df8:	e7c4      	b.n	8009d84 <_svfiprintf_r+0x130>
 8009dfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dfe:	4604      	mov	r4, r0
 8009e00:	2301      	movs	r3, #1
 8009e02:	e7f0      	b.n	8009de6 <_svfiprintf_r+0x192>
 8009e04:	ab03      	add	r3, sp, #12
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	462a      	mov	r2, r5
 8009e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e44 <_svfiprintf_r+0x1f0>)
 8009e0c:	a904      	add	r1, sp, #16
 8009e0e:	4638      	mov	r0, r7
 8009e10:	f3af 8000 	nop.w
 8009e14:	1c42      	adds	r2, r0, #1
 8009e16:	4606      	mov	r6, r0
 8009e18:	d1d6      	bne.n	8009dc8 <_svfiprintf_r+0x174>
 8009e1a:	89ab      	ldrh	r3, [r5, #12]
 8009e1c:	065b      	lsls	r3, r3, #25
 8009e1e:	f53f af2d 	bmi.w	8009c7c <_svfiprintf_r+0x28>
 8009e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e24:	e72c      	b.n	8009c80 <_svfiprintf_r+0x2c>
 8009e26:	ab03      	add	r3, sp, #12
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	462a      	mov	r2, r5
 8009e2c:	4b05      	ldr	r3, [pc, #20]	@ (8009e44 <_svfiprintf_r+0x1f0>)
 8009e2e:	a904      	add	r1, sp, #16
 8009e30:	4638      	mov	r0, r7
 8009e32:	f000 f879 	bl	8009f28 <_printf_i>
 8009e36:	e7ed      	b.n	8009e14 <_svfiprintf_r+0x1c0>
 8009e38:	0800a368 	.word	0x0800a368
 8009e3c:	0800a372 	.word	0x0800a372
 8009e40:	00000000 	.word	0x00000000
 8009e44:	08009b9d 	.word	0x08009b9d
 8009e48:	0800a36e 	.word	0x0800a36e

08009e4c <_printf_common>:
 8009e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	4616      	mov	r6, r2
 8009e52:	4698      	mov	r8, r3
 8009e54:	688a      	ldr	r2, [r1, #8]
 8009e56:	690b      	ldr	r3, [r1, #16]
 8009e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	bfb8      	it	lt
 8009e60:	4613      	movlt	r3, r2
 8009e62:	6033      	str	r3, [r6, #0]
 8009e64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e68:	4607      	mov	r7, r0
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	b10a      	cbz	r2, 8009e72 <_printf_common+0x26>
 8009e6e:	3301      	adds	r3, #1
 8009e70:	6033      	str	r3, [r6, #0]
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	0699      	lsls	r1, r3, #26
 8009e76:	bf42      	ittt	mi
 8009e78:	6833      	ldrmi	r3, [r6, #0]
 8009e7a:	3302      	addmi	r3, #2
 8009e7c:	6033      	strmi	r3, [r6, #0]
 8009e7e:	6825      	ldr	r5, [r4, #0]
 8009e80:	f015 0506 	ands.w	r5, r5, #6
 8009e84:	d106      	bne.n	8009e94 <_printf_common+0x48>
 8009e86:	f104 0a19 	add.w	sl, r4, #25
 8009e8a:	68e3      	ldr	r3, [r4, #12]
 8009e8c:	6832      	ldr	r2, [r6, #0]
 8009e8e:	1a9b      	subs	r3, r3, r2
 8009e90:	42ab      	cmp	r3, r5
 8009e92:	dc26      	bgt.n	8009ee2 <_printf_common+0x96>
 8009e94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e98:	6822      	ldr	r2, [r4, #0]
 8009e9a:	3b00      	subs	r3, #0
 8009e9c:	bf18      	it	ne
 8009e9e:	2301      	movne	r3, #1
 8009ea0:	0692      	lsls	r2, r2, #26
 8009ea2:	d42b      	bmi.n	8009efc <_printf_common+0xb0>
 8009ea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ea8:	4641      	mov	r1, r8
 8009eaa:	4638      	mov	r0, r7
 8009eac:	47c8      	blx	r9
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d01e      	beq.n	8009ef0 <_printf_common+0xa4>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	6922      	ldr	r2, [r4, #16]
 8009eb6:	f003 0306 	and.w	r3, r3, #6
 8009eba:	2b04      	cmp	r3, #4
 8009ebc:	bf02      	ittt	eq
 8009ebe:	68e5      	ldreq	r5, [r4, #12]
 8009ec0:	6833      	ldreq	r3, [r6, #0]
 8009ec2:	1aed      	subeq	r5, r5, r3
 8009ec4:	68a3      	ldr	r3, [r4, #8]
 8009ec6:	bf0c      	ite	eq
 8009ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ecc:	2500      	movne	r5, #0
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	bfc4      	itt	gt
 8009ed2:	1a9b      	subgt	r3, r3, r2
 8009ed4:	18ed      	addgt	r5, r5, r3
 8009ed6:	2600      	movs	r6, #0
 8009ed8:	341a      	adds	r4, #26
 8009eda:	42b5      	cmp	r5, r6
 8009edc:	d11a      	bne.n	8009f14 <_printf_common+0xc8>
 8009ede:	2000      	movs	r0, #0
 8009ee0:	e008      	b.n	8009ef4 <_printf_common+0xa8>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	4652      	mov	r2, sl
 8009ee6:	4641      	mov	r1, r8
 8009ee8:	4638      	mov	r0, r7
 8009eea:	47c8      	blx	r9
 8009eec:	3001      	adds	r0, #1
 8009eee:	d103      	bne.n	8009ef8 <_printf_common+0xac>
 8009ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef8:	3501      	adds	r5, #1
 8009efa:	e7c6      	b.n	8009e8a <_printf_common+0x3e>
 8009efc:	18e1      	adds	r1, r4, r3
 8009efe:	1c5a      	adds	r2, r3, #1
 8009f00:	2030      	movs	r0, #48	@ 0x30
 8009f02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f06:	4422      	add	r2, r4
 8009f08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f10:	3302      	adds	r3, #2
 8009f12:	e7c7      	b.n	8009ea4 <_printf_common+0x58>
 8009f14:	2301      	movs	r3, #1
 8009f16:	4622      	mov	r2, r4
 8009f18:	4641      	mov	r1, r8
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	47c8      	blx	r9
 8009f1e:	3001      	adds	r0, #1
 8009f20:	d0e6      	beq.n	8009ef0 <_printf_common+0xa4>
 8009f22:	3601      	adds	r6, #1
 8009f24:	e7d9      	b.n	8009eda <_printf_common+0x8e>
	...

08009f28 <_printf_i>:
 8009f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2c:	7e0f      	ldrb	r7, [r1, #24]
 8009f2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f30:	2f78      	cmp	r7, #120	@ 0x78
 8009f32:	4691      	mov	r9, r2
 8009f34:	4680      	mov	r8, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	469a      	mov	sl, r3
 8009f3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f3e:	d807      	bhi.n	8009f50 <_printf_i+0x28>
 8009f40:	2f62      	cmp	r7, #98	@ 0x62
 8009f42:	d80a      	bhi.n	8009f5a <_printf_i+0x32>
 8009f44:	2f00      	cmp	r7, #0
 8009f46:	f000 80d2 	beq.w	800a0ee <_printf_i+0x1c6>
 8009f4a:	2f58      	cmp	r7, #88	@ 0x58
 8009f4c:	f000 80b9 	beq.w	800a0c2 <_printf_i+0x19a>
 8009f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f58:	e03a      	b.n	8009fd0 <_printf_i+0xa8>
 8009f5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f5e:	2b15      	cmp	r3, #21
 8009f60:	d8f6      	bhi.n	8009f50 <_printf_i+0x28>
 8009f62:	a101      	add	r1, pc, #4	@ (adr r1, 8009f68 <_printf_i+0x40>)
 8009f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f68:	08009fc1 	.word	0x08009fc1
 8009f6c:	08009fd5 	.word	0x08009fd5
 8009f70:	08009f51 	.word	0x08009f51
 8009f74:	08009f51 	.word	0x08009f51
 8009f78:	08009f51 	.word	0x08009f51
 8009f7c:	08009f51 	.word	0x08009f51
 8009f80:	08009fd5 	.word	0x08009fd5
 8009f84:	08009f51 	.word	0x08009f51
 8009f88:	08009f51 	.word	0x08009f51
 8009f8c:	08009f51 	.word	0x08009f51
 8009f90:	08009f51 	.word	0x08009f51
 8009f94:	0800a0d5 	.word	0x0800a0d5
 8009f98:	08009fff 	.word	0x08009fff
 8009f9c:	0800a08f 	.word	0x0800a08f
 8009fa0:	08009f51 	.word	0x08009f51
 8009fa4:	08009f51 	.word	0x08009f51
 8009fa8:	0800a0f7 	.word	0x0800a0f7
 8009fac:	08009f51 	.word	0x08009f51
 8009fb0:	08009fff 	.word	0x08009fff
 8009fb4:	08009f51 	.word	0x08009f51
 8009fb8:	08009f51 	.word	0x08009f51
 8009fbc:	0800a097 	.word	0x0800a097
 8009fc0:	6833      	ldr	r3, [r6, #0]
 8009fc2:	1d1a      	adds	r2, r3, #4
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6032      	str	r2, [r6, #0]
 8009fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e09d      	b.n	800a110 <_printf_i+0x1e8>
 8009fd4:	6833      	ldr	r3, [r6, #0]
 8009fd6:	6820      	ldr	r0, [r4, #0]
 8009fd8:	1d19      	adds	r1, r3, #4
 8009fda:	6031      	str	r1, [r6, #0]
 8009fdc:	0606      	lsls	r6, r0, #24
 8009fde:	d501      	bpl.n	8009fe4 <_printf_i+0xbc>
 8009fe0:	681d      	ldr	r5, [r3, #0]
 8009fe2:	e003      	b.n	8009fec <_printf_i+0xc4>
 8009fe4:	0645      	lsls	r5, r0, #25
 8009fe6:	d5fb      	bpl.n	8009fe0 <_printf_i+0xb8>
 8009fe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009fec:	2d00      	cmp	r5, #0
 8009fee:	da03      	bge.n	8009ff8 <_printf_i+0xd0>
 8009ff0:	232d      	movs	r3, #45	@ 0x2d
 8009ff2:	426d      	negs	r5, r5
 8009ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ff8:	4859      	ldr	r0, [pc, #356]	@ (800a160 <_printf_i+0x238>)
 8009ffa:	230a      	movs	r3, #10
 8009ffc:	e011      	b.n	800a022 <_printf_i+0xfa>
 8009ffe:	6821      	ldr	r1, [r4, #0]
 800a000:	6833      	ldr	r3, [r6, #0]
 800a002:	0608      	lsls	r0, r1, #24
 800a004:	f853 5b04 	ldr.w	r5, [r3], #4
 800a008:	d402      	bmi.n	800a010 <_printf_i+0xe8>
 800a00a:	0649      	lsls	r1, r1, #25
 800a00c:	bf48      	it	mi
 800a00e:	b2ad      	uxthmi	r5, r5
 800a010:	2f6f      	cmp	r7, #111	@ 0x6f
 800a012:	4853      	ldr	r0, [pc, #332]	@ (800a160 <_printf_i+0x238>)
 800a014:	6033      	str	r3, [r6, #0]
 800a016:	bf14      	ite	ne
 800a018:	230a      	movne	r3, #10
 800a01a:	2308      	moveq	r3, #8
 800a01c:	2100      	movs	r1, #0
 800a01e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a022:	6866      	ldr	r6, [r4, #4]
 800a024:	60a6      	str	r6, [r4, #8]
 800a026:	2e00      	cmp	r6, #0
 800a028:	bfa2      	ittt	ge
 800a02a:	6821      	ldrge	r1, [r4, #0]
 800a02c:	f021 0104 	bicge.w	r1, r1, #4
 800a030:	6021      	strge	r1, [r4, #0]
 800a032:	b90d      	cbnz	r5, 800a038 <_printf_i+0x110>
 800a034:	2e00      	cmp	r6, #0
 800a036:	d04b      	beq.n	800a0d0 <_printf_i+0x1a8>
 800a038:	4616      	mov	r6, r2
 800a03a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a03e:	fb03 5711 	mls	r7, r3, r1, r5
 800a042:	5dc7      	ldrb	r7, [r0, r7]
 800a044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a048:	462f      	mov	r7, r5
 800a04a:	42bb      	cmp	r3, r7
 800a04c:	460d      	mov	r5, r1
 800a04e:	d9f4      	bls.n	800a03a <_printf_i+0x112>
 800a050:	2b08      	cmp	r3, #8
 800a052:	d10b      	bne.n	800a06c <_printf_i+0x144>
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	07df      	lsls	r7, r3, #31
 800a058:	d508      	bpl.n	800a06c <_printf_i+0x144>
 800a05a:	6923      	ldr	r3, [r4, #16]
 800a05c:	6861      	ldr	r1, [r4, #4]
 800a05e:	4299      	cmp	r1, r3
 800a060:	bfde      	ittt	le
 800a062:	2330      	movle	r3, #48	@ 0x30
 800a064:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a06c:	1b92      	subs	r2, r2, r6
 800a06e:	6122      	str	r2, [r4, #16]
 800a070:	f8cd a000 	str.w	sl, [sp]
 800a074:	464b      	mov	r3, r9
 800a076:	aa03      	add	r2, sp, #12
 800a078:	4621      	mov	r1, r4
 800a07a:	4640      	mov	r0, r8
 800a07c:	f7ff fee6 	bl	8009e4c <_printf_common>
 800a080:	3001      	adds	r0, #1
 800a082:	d14a      	bne.n	800a11a <_printf_i+0x1f2>
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	b004      	add	sp, #16
 800a08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	f043 0320 	orr.w	r3, r3, #32
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	4833      	ldr	r0, [pc, #204]	@ (800a164 <_printf_i+0x23c>)
 800a098:	2778      	movs	r7, #120	@ 0x78
 800a09a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	6831      	ldr	r1, [r6, #0]
 800a0a2:	061f      	lsls	r7, r3, #24
 800a0a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0a8:	d402      	bmi.n	800a0b0 <_printf_i+0x188>
 800a0aa:	065f      	lsls	r7, r3, #25
 800a0ac:	bf48      	it	mi
 800a0ae:	b2ad      	uxthmi	r5, r5
 800a0b0:	6031      	str	r1, [r6, #0]
 800a0b2:	07d9      	lsls	r1, r3, #31
 800a0b4:	bf44      	itt	mi
 800a0b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0ba:	6023      	strmi	r3, [r4, #0]
 800a0bc:	b11d      	cbz	r5, 800a0c6 <_printf_i+0x19e>
 800a0be:	2310      	movs	r3, #16
 800a0c0:	e7ac      	b.n	800a01c <_printf_i+0xf4>
 800a0c2:	4827      	ldr	r0, [pc, #156]	@ (800a160 <_printf_i+0x238>)
 800a0c4:	e7e9      	b.n	800a09a <_printf_i+0x172>
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	f023 0320 	bic.w	r3, r3, #32
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	e7f6      	b.n	800a0be <_printf_i+0x196>
 800a0d0:	4616      	mov	r6, r2
 800a0d2:	e7bd      	b.n	800a050 <_printf_i+0x128>
 800a0d4:	6833      	ldr	r3, [r6, #0]
 800a0d6:	6825      	ldr	r5, [r4, #0]
 800a0d8:	6961      	ldr	r1, [r4, #20]
 800a0da:	1d18      	adds	r0, r3, #4
 800a0dc:	6030      	str	r0, [r6, #0]
 800a0de:	062e      	lsls	r6, r5, #24
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	d501      	bpl.n	800a0e8 <_printf_i+0x1c0>
 800a0e4:	6019      	str	r1, [r3, #0]
 800a0e6:	e002      	b.n	800a0ee <_printf_i+0x1c6>
 800a0e8:	0668      	lsls	r0, r5, #25
 800a0ea:	d5fb      	bpl.n	800a0e4 <_printf_i+0x1bc>
 800a0ec:	8019      	strh	r1, [r3, #0]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	4616      	mov	r6, r2
 800a0f4:	e7bc      	b.n	800a070 <_printf_i+0x148>
 800a0f6:	6833      	ldr	r3, [r6, #0]
 800a0f8:	1d1a      	adds	r2, r3, #4
 800a0fa:	6032      	str	r2, [r6, #0]
 800a0fc:	681e      	ldr	r6, [r3, #0]
 800a0fe:	6862      	ldr	r2, [r4, #4]
 800a100:	2100      	movs	r1, #0
 800a102:	4630      	mov	r0, r6
 800a104:	f7f6 f86c 	bl	80001e0 <memchr>
 800a108:	b108      	cbz	r0, 800a10e <_printf_i+0x1e6>
 800a10a:	1b80      	subs	r0, r0, r6
 800a10c:	6060      	str	r0, [r4, #4]
 800a10e:	6863      	ldr	r3, [r4, #4]
 800a110:	6123      	str	r3, [r4, #16]
 800a112:	2300      	movs	r3, #0
 800a114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a118:	e7aa      	b.n	800a070 <_printf_i+0x148>
 800a11a:	6923      	ldr	r3, [r4, #16]
 800a11c:	4632      	mov	r2, r6
 800a11e:	4649      	mov	r1, r9
 800a120:	4640      	mov	r0, r8
 800a122:	47d0      	blx	sl
 800a124:	3001      	adds	r0, #1
 800a126:	d0ad      	beq.n	800a084 <_printf_i+0x15c>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	079b      	lsls	r3, r3, #30
 800a12c:	d413      	bmi.n	800a156 <_printf_i+0x22e>
 800a12e:	68e0      	ldr	r0, [r4, #12]
 800a130:	9b03      	ldr	r3, [sp, #12]
 800a132:	4298      	cmp	r0, r3
 800a134:	bfb8      	it	lt
 800a136:	4618      	movlt	r0, r3
 800a138:	e7a6      	b.n	800a088 <_printf_i+0x160>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4632      	mov	r2, r6
 800a13e:	4649      	mov	r1, r9
 800a140:	4640      	mov	r0, r8
 800a142:	47d0      	blx	sl
 800a144:	3001      	adds	r0, #1
 800a146:	d09d      	beq.n	800a084 <_printf_i+0x15c>
 800a148:	3501      	adds	r5, #1
 800a14a:	68e3      	ldr	r3, [r4, #12]
 800a14c:	9903      	ldr	r1, [sp, #12]
 800a14e:	1a5b      	subs	r3, r3, r1
 800a150:	42ab      	cmp	r3, r5
 800a152:	dcf2      	bgt.n	800a13a <_printf_i+0x212>
 800a154:	e7eb      	b.n	800a12e <_printf_i+0x206>
 800a156:	2500      	movs	r5, #0
 800a158:	f104 0619 	add.w	r6, r4, #25
 800a15c:	e7f5      	b.n	800a14a <_printf_i+0x222>
 800a15e:	bf00      	nop
 800a160:	0800a379 	.word	0x0800a379
 800a164:	0800a38a 	.word	0x0800a38a

0800a168 <memmove>:
 800a168:	4288      	cmp	r0, r1
 800a16a:	b510      	push	{r4, lr}
 800a16c:	eb01 0402 	add.w	r4, r1, r2
 800a170:	d902      	bls.n	800a178 <memmove+0x10>
 800a172:	4284      	cmp	r4, r0
 800a174:	4623      	mov	r3, r4
 800a176:	d807      	bhi.n	800a188 <memmove+0x20>
 800a178:	1e43      	subs	r3, r0, #1
 800a17a:	42a1      	cmp	r1, r4
 800a17c:	d008      	beq.n	800a190 <memmove+0x28>
 800a17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a182:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a186:	e7f8      	b.n	800a17a <memmove+0x12>
 800a188:	4402      	add	r2, r0
 800a18a:	4601      	mov	r1, r0
 800a18c:	428a      	cmp	r2, r1
 800a18e:	d100      	bne.n	800a192 <memmove+0x2a>
 800a190:	bd10      	pop	{r4, pc}
 800a192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a19a:	e7f7      	b.n	800a18c <memmove+0x24>

0800a19c <_sbrk_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4d06      	ldr	r5, [pc, #24]	@ (800a1b8 <_sbrk_r+0x1c>)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	602b      	str	r3, [r5, #0]
 800a1a8:	f7f7 f80e 	bl	80011c8 <_sbrk>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d102      	bne.n	800a1b6 <_sbrk_r+0x1a>
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	b103      	cbz	r3, 800a1b6 <_sbrk_r+0x1a>
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	20007730 	.word	0x20007730

0800a1bc <_realloc_r>:
 800a1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	4615      	mov	r5, r2
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	b921      	cbnz	r1, 800a1d2 <_realloc_r+0x16>
 800a1c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	f7ff bc59 	b.w	8009a84 <_malloc_r>
 800a1d2:	b92a      	cbnz	r2, 800a1e0 <_realloc_r+0x24>
 800a1d4:	f7ff fbea 	bl	80099ac <_free_r>
 800a1d8:	2400      	movs	r4, #0
 800a1da:	4620      	mov	r0, r4
 800a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e0:	f000 f81a 	bl	800a218 <_malloc_usable_size_r>
 800a1e4:	4285      	cmp	r5, r0
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	d802      	bhi.n	800a1f0 <_realloc_r+0x34>
 800a1ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a1ee:	d8f4      	bhi.n	800a1da <_realloc_r+0x1e>
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	f7ff fc46 	bl	8009a84 <_malloc_r>
 800a1f8:	4607      	mov	r7, r0
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d0ec      	beq.n	800a1d8 <_realloc_r+0x1c>
 800a1fe:	42b5      	cmp	r5, r6
 800a200:	462a      	mov	r2, r5
 800a202:	4621      	mov	r1, r4
 800a204:	bf28      	it	cs
 800a206:	4632      	movcs	r2, r6
 800a208:	f7ff fbc2 	bl	8009990 <memcpy>
 800a20c:	4621      	mov	r1, r4
 800a20e:	4640      	mov	r0, r8
 800a210:	f7ff fbcc 	bl	80099ac <_free_r>
 800a214:	463c      	mov	r4, r7
 800a216:	e7e0      	b.n	800a1da <_realloc_r+0x1e>

0800a218 <_malloc_usable_size_r>:
 800a218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a21c:	1f18      	subs	r0, r3, #4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	bfbc      	itt	lt
 800a222:	580b      	ldrlt	r3, [r1, r0]
 800a224:	18c0      	addlt	r0, r0, r3
 800a226:	4770      	bx	lr

0800a228 <_init>:
 800a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22a:	bf00      	nop
 800a22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a22e:	bc08      	pop	{r3}
 800a230:	469e      	mov	lr, r3
 800a232:	4770      	bx	lr

0800a234 <_fini>:
 800a234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a236:	bf00      	nop
 800a238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23a:	bc08      	pop	{r3}
 800a23c:	469e      	mov	lr, r3
 800a23e:	4770      	bx	lr
