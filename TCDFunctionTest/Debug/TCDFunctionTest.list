
TCDFunctionTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000967c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009810  08009810  0000a810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009888  08009888  0000b100  2**0
                  CONTENTS
  4 .ARM          00000008  08009888  08009888  0000a888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009890  08009890  0000b100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009890  08009890  0000a890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009894  08009894  0000a894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08009898  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044b4  20000100  08009998  0000b100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045b4  08009998  0000b5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b40  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f7  00000000  00000000  0001fc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00023268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e15  00000000  00000000  000244d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a06a  00000000  00000000  000252ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017567  00000000  00000000  0003f357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac5e  00000000  00000000  000568be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f151c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d10  00000000  00000000  000f1560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f6270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000100 	.word	0x20000100
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080097f8 	.word	0x080097f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000104 	.word	0x20000104
 80001d0:	080097f8 	.word	0x080097f8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fe02 	bl	80010d0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f82a 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fb04 	bl	8000adc <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 fae2 	bl	8000a9c <MX_DMA_Init>
  MX_TIM2_Init();
 80004d8:	f000 f8e2 	bl	80006a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004dc:	f000 f966 	bl	80007ac <MX_TIM3_Init>
  MX_TIM4_Init();
 80004e0:	f000 f9da 	bl	8000898 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004e4:	f000 fa4a 	bl	800097c <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f008 fc42 	bl	8008d70 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004ec:	f000 f886 	bl	80005fc <MX_ADC1_Init>
//  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
////  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
//  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH

  if (!start_command_received) {
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <main+0x54>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d107      	bne.n	800050a <main+0x46>
  CDC_Transmit_FS((uint8_t *)"Target Ready\r\n",14);
 80004fa:	210e      	movs	r1, #14
 80004fc:	4807      	ldr	r0, [pc, #28]	@ (800051c <main+0x58>)
 80004fe:	f008 fcfb 	bl	8008ef8 <CDC_Transmit_FS>
  HAL_Delay(1000);}
 8000502:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000506:	f000 fe55 	bl	80011b4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  single_capture_flag = 1;
 800050a:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <main+0x5c>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]



  while (1)
  {
	  SingleCapture();
 8000510:	f000 fb0c 	bl	8000b2c <SingleCapture>
 8000514:	e7fc      	b.n	8000510 <main+0x4c>
 8000516:	bf00      	nop
 8000518:	200031c4 	.word	0x200031c4
 800051c:	08009810 	.word	0x08009810
 8000520:	200031c8 	.word	0x200031c8

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	@ 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	@ 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f009 f922 	bl	800977c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b29      	ldr	r3, [pc, #164]	@ (80005f4 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	4a28      	ldr	r2, [pc, #160]	@ (80005f4 <SystemClock_Config+0xd0>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	@ 0x40
 8000558:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000570:	4a21      	ldr	r2, [pc, #132]	@ (80005f8 <SystemClock_Config+0xd4>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000598:	2319      	movs	r3, #25
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fa6c 	bl	8003a8c <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ba:	f000 fb6f 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fcce 	bl	8003f7c <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e6:	f000 fb59 	bl	8000c9c <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	@ 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000610:	4a22      	ldr	r2, [pc, #136]	@ (800069c <MX_ADC1_Init+0xa0>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000616:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_ADC1_Init+0x9c>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_ADC1_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000636:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800063e:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000640:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_ADC1_Init+0x9c>)
 800064e:	2201      	movs	r2, #1
 8000650:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000654:	2201      	movs	r2, #1
 8000656:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_ADC1_Init+0x9c>)
 800065c:	2201      	movs	r2, #1
 800065e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000662:	f000 fdcb 	bl	80011fc <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800066c:	f000 fb16 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000670:	2303      	movs	r3, #3
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000682:	f000 ff0d 	bl	80014a0 <HAL_ADC_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800068c:	f000 fb06 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000011c 	.word	0x2000011c
 800069c:	40012000 	.word	0x40012000

080006a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	@ 0x38
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]
 80006ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d0:	4b34      	ldr	r3, [pc, #208]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006d8:	4b32      	ldr	r3, [pc, #200]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b31      	ldr	r3, [pc, #196]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 80006e4:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006e6:	4a30      	ldr	r2, [pc, #192]	@ (80007a8 <MX_TIM2_Init+0x108>)
 80006e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f0:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f6:	482b      	ldr	r0, [pc, #172]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006f8:	f003 fdf8 	bl	80042ec <HAL_TIM_Base_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000702:	f000 facb 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800070c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000710:	4619      	mov	r1, r3
 8000712:	4824      	ldr	r0, [pc, #144]	@ (80007a4 <MX_TIM2_Init+0x104>)
 8000714:	f004 fb08 	bl	8004d28 <HAL_TIM_ConfigClockSource>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800071e:	f000 fabd 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000722:	4820      	ldr	r0, [pc, #128]	@ (80007a4 <MX_TIM2_Init+0x104>)
 8000724:	f003 fe31 	bl	800438a <HAL_TIM_PWM_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800072e:	f000 fab5 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000732:	2310      	movs	r3, #16
 8000734:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000736:	2380      	movs	r3, #128	@ 0x80
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4619      	mov	r1, r3
 8000740:	4818      	ldr	r0, [pc, #96]	@ (80007a4 <MX_TIM2_Init+0x104>)
 8000742:	f004 ff8b 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800074c:	f000 faa6 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000750:	2370      	movs	r3, #112	@ 0x70
 8000752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 8000754:	f242 2373 	movw	r3, #8819	@ 0x2273
 8000758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800075a:	2302      	movs	r3, #2
 800075c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <MX_TIM2_Init+0x104>)
 800076a:	f004 fa1b 	bl	8004ba4 <HAL_TIM_PWM_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000774:	f000 fa92 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000778:	2360      	movs	r3, #96	@ 0x60
 800077a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2204      	movs	r2, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <MX_TIM2_Init+0x104>)
 8000788:	f004 fa0c 	bl	8004ba4 <HAL_TIM_PWM_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000792:	f000 fa83 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000796:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <MX_TIM2_Init+0x104>)
 8000798:	f000 fb8c 	bl	8000eb4 <HAL_TIM_MspPostInit>

}
 800079c:	bf00      	nop
 800079e:	3738      	adds	r7, #56	@ 0x38
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200001c4 	.word	0x200001c4
 80007a8:	000802c7 	.word	0x000802c7

080007ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	@ 0x38
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007de:	4a2d      	ldr	r2, [pc, #180]	@ (8000894 <MX_TIM3_Init+0xe8>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 80007ee:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007f0:	22a7      	movs	r2, #167	@ 0xa7
 80007f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000800:	4823      	ldr	r0, [pc, #140]	@ (8000890 <MX_TIM3_Init+0xe4>)
 8000802:	f003 fd73 	bl	80042ec <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800080c:	f000 fa46 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081a:	4619      	mov	r1, r3
 800081c:	481c      	ldr	r0, [pc, #112]	@ (8000890 <MX_TIM3_Init+0xe4>)
 800081e:	f004 fa83 	bl	8004d28 <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000828:	f000 fa38 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800082c:	4818      	ldr	r0, [pc, #96]	@ (8000890 <MX_TIM3_Init+0xe4>)
 800082e:	f003 fdac 	bl	800438a <HAL_TIM_PWM_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000838:	f000 fa30 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	@ (8000890 <MX_TIM3_Init+0xe4>)
 800084c:	f004 ff06 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000856:	f000 fa21 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085a:	2360      	movs	r3, #96	@ 0x60
 800085c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 800085e:	2353      	movs	r3, #83	@ 0x53
 8000860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	4807      	ldr	r0, [pc, #28]	@ (8000890 <MX_TIM3_Init+0xe4>)
 8000872:	f004 f997 	bl	8004ba4 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800087c:	f000 fa0e 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <MX_TIM3_Init+0xe4>)
 8000882:	f000 fb17 	bl	8000eb4 <HAL_TIM_MspPostInit>

}
 8000886:	bf00      	nop
 8000888:	3738      	adds	r7, #56	@ 0x38
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000020c 	.word	0x2000020c
 8000894:	40000400 	.word	0x40000400

08000898 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	@ 0x38
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000978 <MX_TIM4_Init+0xe0>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008ce:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 80008da:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008dc:	22a7      	movs	r2, #167	@ 0xa7
 80008de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008ec:	4821      	ldr	r0, [pc, #132]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008ee:	f003 fcfd 	bl	80042ec <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80008f8:	f000 f9d0 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000906:	4619      	mov	r1, r3
 8000908:	481a      	ldr	r0, [pc, #104]	@ (8000974 <MX_TIM4_Init+0xdc>)
 800090a:	f004 fa0d 	bl	8004d28 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000914:	f000 f9c2 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000918:	4816      	ldr	r0, [pc, #88]	@ (8000974 <MX_TIM4_Init+0xdc>)
 800091a:	f003 fd36 	bl	800438a <HAL_TIM_PWM_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000924:	f000 f9ba 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000930:	f107 0320 	add.w	r3, r7, #32
 8000934:	4619      	mov	r1, r3
 8000936:	480f      	ldr	r0, [pc, #60]	@ (8000974 <MX_TIM4_Init+0xdc>)
 8000938:	f004 fe90 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000942:	f000 f9ab 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000946:	2360      	movs	r3, #96	@ 0x60
 8000948:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 800094a:	2329      	movs	r3, #41	@ 0x29
 800094c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	220c      	movs	r2, #12
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_TIM4_Init+0xdc>)
 800095e:	f004 f921 	bl	8004ba4 <HAL_TIM_PWM_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000968:	f000 f998 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3738      	adds	r7, #56	@ 0x38
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000254 	.word	0x20000254
 8000978:	40000800 	.word	0x40000800

0800097c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b092      	sub	sp, #72	@ 0x48
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009bc:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009be:	4a35      	ldr	r2, [pc, #212]	@ (8000a94 <MX_TIM5_Init+0x118>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009c2:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b31      	ldr	r3, [pc, #196]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009d0:	4a31      	ldr	r2, [pc, #196]	@ (8000a98 <MX_TIM5_Init+0x11c>)
 80009d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009e0:	482b      	ldr	r0, [pc, #172]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009e2:	f003 fc83 	bl	80042ec <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80009ec:	f000 f956 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009fa:	4619      	mov	r1, r3
 80009fc:	4824      	ldr	r0, [pc, #144]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009fe:	f004 f993 	bl	8004d28 <HAL_TIM_ConfigClockSource>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a08:	f000 f948 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a0c:	4820      	ldr	r0, [pc, #128]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a0e:	f003 fcbc 	bl	800438a <HAL_TIM_PWM_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000a18:	f000 f940 	bl	8000c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4819      	ldr	r0, [pc, #100]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a2c:	f004 fa43 	bl	8004eb6 <HAL_TIM_SlaveConfigSynchro>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000a36:	f000 f931 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a4a:	f004 fe07 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000a54:	f000 f922 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a58:	2360      	movs	r3, #96	@ 0x60
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000a5c:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000a60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a72:	f004 f897 	bl	8004ba4 <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000a7c:	f000 f90e 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a80:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a82:	f000 fa17 	bl	8000eb4 <HAL_TIM_MspPostInit>

}
 8000a86:	bf00      	nop
 8000a88:	3748      	adds	r7, #72	@ 0x48
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000029c 	.word	0x2000029c
 8000a94:	40000c00 	.word	0x40000c00
 8000a98:	000802c7 	.word	0x000802c7

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_DMA_Init+0x3c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad8 <MX_DMA_Init+0x3c>)
 8000aac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_DMA_Init+0x3c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2038      	movs	r0, #56	@ 0x38
 8000ac4:	f001 f867 	bl	8001b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ac8:	2038      	movs	r0, #56	@ 0x38
 8000aca:	f001 f880 	bl	8001bce <HAL_NVIC_EnableIRQ>

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a0f      	ldr	r2, [pc, #60]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <SingleCapture>:

/* USER CODE BEGIN 4 */
void SingleCapture(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	if(timer_flag == 1){
 8000b30:	4b2c      	ldr	r3, [pc, #176]	@ (8000be4 <SingleCapture+0xb8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <SingleCapture+0x1e>
		count_signals++;
 8000b38:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <SingleCapture+0xbc>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4b29      	ldr	r3, [pc, #164]	@ (8000be8 <SingleCapture+0xbc>)
 8000b42:	701a      	strb	r2, [r3, #0]
		timer_flag = 0;
 8000b44:	4b27      	ldr	r3, [pc, #156]	@ (8000be4 <SingleCapture+0xb8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
	}
	if(single_capture_flag == 1){
 8000b4a:	4b28      	ldr	r3, [pc, #160]	@ (8000bec <SingleCapture+0xc0>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d128      	bne.n	8000ba4 <SingleCapture+0x78>
	  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay for icg
 8000b52:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <SingleCapture+0xc4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2242      	movs	r2, #66	@ 0x42
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_COUNTER(&htim5, 0); // sh
 8000b5a:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <SingleCapture+0xc8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_COUNTER(&htim3, 0); // fm
 8000b62:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <SingleCapture+0xcc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4820      	ldr	r0, [pc, #128]	@ (8000bf0 <SingleCapture+0xc4>)
 8000b6e:	f003 fd79 	bl	8004664 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 8000b72:	2100      	movs	r1, #0
 8000b74:	481e      	ldr	r0, [pc, #120]	@ (8000bf0 <SingleCapture+0xc4>)
 8000b76:	f003 fc61 	bl	800443c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	481d      	ldr	r0, [pc, #116]	@ (8000bf4 <SingleCapture+0xc8>)
 8000b7e:	f003 fc5d 	bl	800443c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8000b82:	2100      	movs	r1, #0
 8000b84:	481c      	ldr	r0, [pc, #112]	@ (8000bf8 <SingleCapture+0xcc>)
 8000b86:	f003 fc59 	bl	800443c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 8000b8a:	210c      	movs	r1, #12
 8000b8c:	481b      	ldr	r0, [pc, #108]	@ (8000bfc <SingleCapture+0xd0>)
 8000b8e:	f003 fc55 	bl	800443c <HAL_TIM_PWM_Start>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000b92:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000b96:	491a      	ldr	r1, [pc, #104]	@ (8000c00 <SingleCapture+0xd4>)
 8000b98:	481a      	ldr	r0, [pc, #104]	@ (8000c04 <SingleCapture+0xd8>)
 8000b9a:	f000 fb73 	bl	8001284 <HAL_ADC_Start_DMA>
	  single_capture_flag = 0;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <SingleCapture+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
	}

	  if(count_signals >= signals){
 8000ba4:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <SingleCapture+0xbc>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <SingleCapture+0xdc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d316      	bcc.n	8000bde <SingleCapture+0xb2>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); //ICG
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	480f      	ldr	r0, [pc, #60]	@ (8000bf0 <SingleCapture+0xc4>)
 8000bb4:	f003 fcf2 	bl	800459c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); //SH
 8000bb8:	2108      	movs	r1, #8
 8000bba:	480e      	ldr	r0, [pc, #56]	@ (8000bf4 <SingleCapture+0xc8>)
 8000bbc:	f003 fcee 	bl	800459c <HAL_TIM_PWM_Stop>
  		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); //fM
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <SingleCapture+0xcc>)
 8000bc4:	f003 fcea 	bl	800459c <HAL_TIM_PWM_Stop>
  		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //ADC
 8000bc8:	210c      	movs	r1, #12
 8000bca:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <SingleCapture+0xd0>)
 8000bcc:	f003 fce6 	bl	800459c <HAL_TIM_PWM_Stop>
  	   	  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <SingleCapture+0xc4>)
 8000bd4:	f003 fe44 	bl	8004860 <HAL_TIM_PWM_Stop_IT>
  		  count_signals = 0;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <SingleCapture+0xbc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]

	  }

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200031c7 	.word	0x200031c7
 8000be8:	200031c5 	.word	0x200031c5
 8000bec:	200031c8 	.word	0x200031c8
 8000bf0:	200001c4 	.word	0x200001c4
 8000bf4:	2000029c 	.word	0x2000029c
 8000bf8:	2000020c 	.word	0x2000020c
 8000bfc:	20000254 	.word	0x20000254
 8000c00:	200002e4 	.word	0x200002e4
 8000c04:	2000011c 	.word	0x2000011c
 8000c08:	20000000 	.word	0x20000000

08000c0c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c1c:	d102      	bne.n	8000c24 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
			timer_flag = 1;
 8000c1e:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
			}
		}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	200031c7 	.word	0x200031c7

08000c34 <CDCReceiveCallback>:



//when the stm receives anything, it checks if it is the string start

void CDCReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
    // Ensure the buffer is null-terminated
    Buf[Len] = '\0';
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]

    // Check for the "start" command
    if (strncmp((char*)Buf, "start", 5) == 0) {
 8000c48:	2205      	movs	r2, #5
 8000c4a:	490e      	ldr	r1, [pc, #56]	@ (8000c84 <CDCReceiveCallback+0x50>)
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f008 fd9d 	bl	800978c <strncmp>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d111      	bne.n	8000c7c <CDCReceiveCallback+0x48>
    	signals = 2;
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <CDCReceiveCallback+0x54>)
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	701a      	strb	r2, [r3, #0]
    	count_signals = 0;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <CDCReceiveCallback+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
    	adc_flag = 0;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <CDCReceiveCallback+0x5c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
    	timer_flag = 0;
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <CDCReceiveCallback+0x60>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
    	single_capture_flag = 0;
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <CDCReceiveCallback+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
    	single_capture_flag = 1;
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <CDCReceiveCallback+0x64>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]


    }
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	08009820 	.word	0x08009820
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	200031c5 	.word	0x200031c5
 8000c90:	200031c6 	.word	0x200031c6
 8000c94:	200031c7 	.word	0x200031c7
 8000c98:	200031c8 	.word	0x200031c8

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Error_Handler+0x8>

08000ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf4 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf4 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a08      	ldr	r2, [pc, #32]	@ (8000cf4 <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd0 <HAL_ADC_MspInit+0xd8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d156      	bne.n	8000dc8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a25      	ldr	r2, [pc, #148]	@ (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d52:	2308      	movs	r3, #8
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d56:	2303      	movs	r3, #3
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	481c      	ldr	r0, [pc, #112]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d66:	f001 fabd 	bl	80022e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <HAL_ADC_MspInit+0xe8>)
 8000d6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d82:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000d84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000d8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d92:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000d94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dac:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000dae:	f000 ff29 	bl	8001c04 <HAL_DMA_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000db8:	f7ff ff70 	bl	8000c9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000dc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dc2:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	@ 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40012000 	.word	0x40012000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	20000164 	.word	0x20000164
 8000de0:	40026410 	.word	0x40026410

08000de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df4:	d116      	bne.n	8000e24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a29      	ldr	r2, [pc, #164]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	201c      	movs	r0, #28
 8000e18:	f000 febd 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e1c:	201c      	movs	r0, #28
 8000e1e:	f000 fed6 	bl	8001bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000e22:	e03a      	b.n	8000e9a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea8 <HAL_TIM_Base_MspInit+0xc4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d10e      	bne.n	8000e4c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
}
 8000e4a:	e026      	b.n	8000e9a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a16      	ldr	r2, [pc, #88]	@ (8000eac <HAL_TIM_Base_MspInit+0xc8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10e      	bne.n	8000e74 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
}
 8000e72:	e012      	b.n	8000e9a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <HAL_TIM_Base_MspInit+0xcc>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d10d      	bne.n	8000e9a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	40000800 	.word	0x40000800
 8000eb0:	40000c00 	.word	0x40000c00

08000eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ed4:	d11e      	bne.n	8000f14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b34      	ldr	r3, [pc, #208]	@ (8000fac <HAL_TIM_MspPostInit+0xf8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a33      	ldr	r2, [pc, #204]	@ (8000fac <HAL_TIM_MspPostInit+0xf8>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b31      	ldr	r3, [pc, #196]	@ (8000fac <HAL_TIM_MspPostInit+0xf8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f02:	2301      	movs	r3, #1
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4828      	ldr	r0, [pc, #160]	@ (8000fb0 <HAL_TIM_MspPostInit+0xfc>)
 8000f0e:	f001 f9e9 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000f12:	e046      	b.n	8000fa2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a26      	ldr	r2, [pc, #152]	@ (8000fb4 <HAL_TIM_MspPostInit+0x100>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d11e      	bne.n	8000f5c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <HAL_TIM_MspPostInit+0xf8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <HAL_TIM_MspPostInit+0xf8>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <HAL_TIM_MspPostInit+0xf8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f3a:	2340      	movs	r3, #64	@ 0x40
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4816      	ldr	r0, [pc, #88]	@ (8000fb0 <HAL_TIM_MspPostInit+0xfc>)
 8000f56:	f001 f9c5 	bl	80022e4 <HAL_GPIO_Init>
}
 8000f5a:	e022      	b.n	8000fa2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a15      	ldr	r2, [pc, #84]	@ (8000fb8 <HAL_TIM_MspPostInit+0x104>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d11d      	bne.n	8000fa2 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <HAL_TIM_MspPostInit+0xf8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fac <HAL_TIM_MspPostInit+0xf8>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <HAL_TIM_MspPostInit+0xf8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f82:	2304      	movs	r3, #4
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f92:	2302      	movs	r3, #2
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <HAL_TIM_MspPostInit+0xfc>)
 8000f9e:	f001 f9a1 	bl	80022e4 <HAL_GPIO_Init>
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	@ 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40000400 	.word	0x40000400
 8000fb8:	40000c00 	.word	0x40000c00

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001012:	f000 f8af 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <TIM2_IRQHandler+0x10>)
 8001022:	f003 fccf 	bl	80049c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001c4 	.word	0x200001c4

08001030 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <DMA2_Stream0_IRQHandler+0x10>)
 8001036:	f000 feeb 	bl	8001e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000164 	.word	0x20000164

08001044 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <OTG_FS_IRQHandler+0x10>)
 800104a:	f001 fc13 	bl	8002874 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20003eb0 	.word	0x20003eb0

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001080:	f7ff ffea 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	@ (80010bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	@ (80010c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010aa:	f008 fb81 	bl	80097b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fa09 	bl	80004c4 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80010c0:	08009898 	.word	0x08009898
  ldr r2, =_sbss
 80010c4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80010c8:	200045b4 	.word	0x200045b4

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	@ (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 fd41 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fdd0 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fd59 	bl	8001bea <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 fd21 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000004 	.word	0x20000004
 800116c:	2000000c 	.word	0x2000000c
 8001170:	20000008 	.word	0x20000008

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000000c 	.word	0x2000000c
 8001198:	200031cc 	.word	0x200031cc

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200031cc 	.word	0x200031cc

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000000c 	.word	0x2000000c

080011fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e033      	b.n	800127a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fd6c 	bl	8000cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	2b00      	cmp	r3, #0
 8001238:	d118      	bne.n	800126c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001242:	f023 0302 	bic.w	r3, r3, #2
 8001246:	f043 0202 	orr.w	r2, r3, #2
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 fa48 	bl	80016e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	f023 0303 	bic.w	r3, r3, #3
 8001262:	f043 0201 	orr.w	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	@ 0x40
 800126a:	e001      	b.n	8001270 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800129a:	2b01      	cmp	r3, #1
 800129c:	d101      	bne.n	80012a2 <HAL_ADC_Start_DMA+0x1e>
 800129e:	2302      	movs	r3, #2
 80012a0:	e0ce      	b.n	8001440 <HAL_ADC_Start_DMA+0x1bc>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d018      	beq.n	80012ea <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001448 <HAL_ADC_Start_DMA+0x1c4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a5f      	ldr	r2, [pc, #380]	@ (800144c <HAL_ADC_Start_DMA+0x1c8>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	0c9a      	lsrs	r2, r3, #18
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012dc:	e002      	b.n	80012e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f9      	bne.n	80012de <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012f8:	d107      	bne.n	800130a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001308:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	f040 8086 	bne.w	8001426 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001338:	2b00      	cmp	r3, #0
 800133a:	d007      	beq.n	800134c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001344:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001358:	d106      	bne.n	8001368 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	f023 0206 	bic.w	r2, r3, #6
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	645a      	str	r2, [r3, #68]	@ 0x44
 8001366:	e002      	b.n	800136e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001376:	4b36      	ldr	r3, [pc, #216]	@ (8001450 <HAL_ADC_Start_DMA+0x1cc>)
 8001378:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137e:	4a35      	ldr	r2, [pc, #212]	@ (8001454 <HAL_ADC_Start_DMA+0x1d0>)
 8001380:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001386:	4a34      	ldr	r2, [pc, #208]	@ (8001458 <HAL_ADC_Start_DMA+0x1d4>)
 8001388:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800138e:	4a33      	ldr	r2, [pc, #204]	@ (800145c <HAL_ADC_Start_DMA+0x1d8>)
 8001390:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800139a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80013aa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013ba:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	334c      	adds	r3, #76	@ 0x4c
 80013c6:	4619      	mov	r1, r3
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f000 fcc8 	bl	8001d60 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10f      	bne.n	80013fc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d129      	bne.n	800143e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	e020      	b.n	800143e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <HAL_ADC_Start_DMA+0x1dc>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d11b      	bne.n	800143e <HAL_ADC_Start_DMA+0x1ba>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d114      	bne.n	800143e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	e00b      	b.n	800143e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f043 0210 	orr.w	r2, r3, #16
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000004 	.word	0x20000004
 800144c:	431bde83 	.word	0x431bde83
 8001450:	40012300 	.word	0x40012300
 8001454:	080018dd 	.word	0x080018dd
 8001458:	08001997 	.word	0x08001997
 800145c:	080019b3 	.word	0x080019b3
 8001460:	40012000 	.word	0x40012000

08001464 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1c>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e105      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x228>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	d925      	bls.n	8001518 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68d9      	ldr	r1, [r3, #12]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	3b1e      	subs	r3, #30
 80014e2:	2207      	movs	r2, #7
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43da      	mvns	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	400a      	ands	r2, r1
 80014f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68d9      	ldr	r1, [r3, #12]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	4603      	mov	r3, r0
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4403      	add	r3, r0
 800150a:	3b1e      	subs	r3, #30
 800150c:	409a      	lsls	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	e022      	b.n	800155e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6919      	ldr	r1, [r3, #16]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	2207      	movs	r2, #7
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6919      	ldr	r1, [r3, #16]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	4603      	mov	r3, r0
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4403      	add	r3, r0
 8001554:	409a      	lsls	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b06      	cmp	r3, #6
 8001564:	d824      	bhi.n	80015b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b05      	subs	r3, #5
 8001578:	221f      	movs	r2, #31
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	b29b      	uxth	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b05      	subs	r3, #5
 80015a2:	fa00 f203 	lsl.w	r2, r0, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80015ae:	e04c      	b.n	800164a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d824      	bhi.n	8001602 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b23      	subs	r3, #35	@ 0x23
 80015ca:	221f      	movs	r2, #31
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43da      	mvns	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	400a      	ands	r2, r1
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	3b23      	subs	r3, #35	@ 0x23
 80015f4:	fa00 f203 	lsl.w	r2, r0, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001600:	e023      	b.n	800164a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b41      	subs	r3, #65	@ 0x41
 8001614:	221f      	movs	r2, #31
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	400a      	ands	r2, r1
 8001622:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3b41      	subs	r3, #65	@ 0x41
 800163e:	fa00 f203 	lsl.w	r2, r0, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800164a:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <HAL_ADC_ConfigChannel+0x234>)
 800164c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a21      	ldr	r2, [pc, #132]	@ (80016d8 <HAL_ADC_ConfigChannel+0x238>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d109      	bne.n	800166c <HAL_ADC_ConfigChannel+0x1cc>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b12      	cmp	r3, #18
 800165e:	d105      	bne.n	800166c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a19      	ldr	r2, [pc, #100]	@ (80016d8 <HAL_ADC_ConfigChannel+0x238>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d123      	bne.n	80016be <HAL_ADC_ConfigChannel+0x21e>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b10      	cmp	r3, #16
 800167c:	d003      	beq.n	8001686 <HAL_ADC_ConfigChannel+0x1e6>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b11      	cmp	r3, #17
 8001684:	d11b      	bne.n	80016be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b10      	cmp	r3, #16
 8001698:	d111      	bne.n	80016be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_ADC_ConfigChannel+0x23c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <HAL_ADC_ConfigChannel+0x240>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9a      	lsrs	r2, r3, #18
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40012300 	.word	0x40012300
 80016d8:	40012000 	.word	0x40012000
 80016dc:	20000004 	.word	0x20000004
 80016e0:	431bde83 	.word	0x431bde83

080016e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ec:	4b79      	ldr	r3, [pc, #484]	@ (80018d4 <ADC_Init+0x1f0>)
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	431a      	orrs	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	021a      	lsls	r2, r3, #8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800173c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800175e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6899      	ldr	r1, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001776:	4a58      	ldr	r2, [pc, #352]	@ (80018d8 <ADC_Init+0x1f4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d022      	beq.n	80017c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800178a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6899      	ldr	r1, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6899      	ldr	r1, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	e00f      	b.n	80017e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0202 	bic.w	r2, r2, #2
 80017f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6899      	ldr	r1, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7e1b      	ldrb	r3, [r3, #24]
 80017fc:	005a      	lsls	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01b      	beq.n	8001848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800181e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800182e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6859      	ldr	r1, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183a:	3b01      	subs	r3, #1
 800183c:	035a      	lsls	r2, r3, #13
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	e007      	b.n	8001858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001856:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	3b01      	subs	r3, #1
 8001874:	051a      	lsls	r2, r3, #20
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800188c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6899      	ldr	r1, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800189a:	025a      	lsls	r2, r3, #9
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6899      	ldr	r1, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	029a      	lsls	r2, r3, #10
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40012300 	.word	0x40012300
 80018d8:	0f000001 	.word	0x0f000001

080018dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d13c      	bne.n	8001970 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d12b      	bne.n	8001968 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001914:	2b00      	cmp	r3, #0
 8001916:	d127      	bne.n	8001968 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001930:	2b00      	cmp	r3, #0
 8001932:	d119      	bne.n	8001968 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0220 	bic.w	r2, r2, #32
 8001942:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff fd7b 	bl	8001464 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800196e:	e00e      	b.n	800198e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fd85 	bl	800148c <HAL_ADC_ErrorCallback>
}
 8001982:	e004      	b.n	800198e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fd67 	bl	8001478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2240      	movs	r2, #64	@ 0x40
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	f043 0204 	orr.w	r2, r3, #4
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f7ff fd5a 	bl	800148c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	@ (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	@ (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	@ (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	@ 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff29 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff3e 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff31 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffa2 	bl	8001b3c <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff fac4 	bl	800119c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e099      	b.n	8001d54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c40:	e00f      	b.n	8001c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c42:	f7ff faab 	bl	800119c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d908      	bls.n	8001c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2220      	movs	r2, #32
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e078      	b.n	8001d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e8      	bne.n	8001c42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <HAL_DMA_Init+0x158>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d107      	bne.n	8001ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f023 0307 	bic.w	r3, r3, #7
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d117      	bne.n	8001d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fa6f 	bl	80021ec <DMA_CheckFifoParam>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2240      	movs	r2, #64	@ 0x40
 8001d18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d22:	2301      	movs	r3, #1
 8001d24:	e016      	b.n	8001d54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fa26 	bl	8002180 <DMA_CalcBaseAndBitshift>
 8001d34:	4603      	mov	r3, r0
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3c:	223f      	movs	r2, #63	@ 0x3f
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	f010803f 	.word	0xf010803f

08001d60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_DMA_Start_IT+0x26>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e040      	b.n	8001e08 <HAL_DMA_Start_IT+0xa8>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d12f      	bne.n	8001dfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f9b8 	bl	8002124 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	223f      	movs	r2, #63	@ 0x3f
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0216 	orr.w	r2, r2, #22
 8001dce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0208 	orr.w	r2, r2, #8
 8001de6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e005      	b.n	8001e06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e02:	2302      	movs	r3, #2
 8001e04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e1c:	4b8e      	ldr	r3, [pc, #568]	@ (8002058 <HAL_DMA_IRQHandler+0x248>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a8e      	ldr	r2, [pc, #568]	@ (800205c <HAL_DMA_IRQHandler+0x24c>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0a9b      	lsrs	r3, r3, #10
 8001e28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01a      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e68:	2208      	movs	r2, #8
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e74:	f043 0201 	orr.w	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e80:	2201      	movs	r2, #1
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d012      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00b      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	f043 0202 	orr.w	r2, r3, #2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d012      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00b      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee0:	f043 0204 	orr.w	r2, r3, #4
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eec:	2210      	movs	r2, #16
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d043      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d03c      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d018      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d108      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d024      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
 8001f3e:	e01f      	b.n	8001f80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
 8001f50:	e016      	b.n	8001f80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0208 	bic.w	r2, r2, #8
 8001f6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	2220      	movs	r2, #32
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 808f 	beq.w	80020b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8087 	beq.w	80020b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d136      	bne.n	8002028 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0216 	bic.w	r2, r2, #22
 8001fc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <HAL_DMA_IRQHandler+0x1da>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0208 	bic.w	r2, r2, #8
 8001ff8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffe:	223f      	movs	r2, #63	@ 0x3f
 8002000:	409a      	lsls	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800201a:	2b00      	cmp	r3, #0
 800201c:	d07e      	beq.n	800211c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
        }
        return;
 8002026:	e079      	b.n	800211c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01d      	beq.n	8002072 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10d      	bne.n	8002060 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002048:	2b00      	cmp	r3, #0
 800204a:	d031      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e02c      	b.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
 8002056:	bf00      	nop
 8002058:	20000004 	.word	0x20000004
 800205c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d023      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	e01e      	b.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10f      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0210 	bic.w	r2, r2, #16
 800208e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d032      	beq.n	800211e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d022      	beq.n	800210a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2205      	movs	r2, #5
 80020c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3301      	adds	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d307      	bcc.n	80020f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f2      	bne.n	80020dc <HAL_DMA_IRQHandler+0x2cc>
 80020f6:	e000      	b.n	80020fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
 800211a:	e000      	b.n	800211e <HAL_DMA_IRQHandler+0x30e>
        return;
 800211c:	bf00      	nop
    }
  }
}
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002140:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b40      	cmp	r3, #64	@ 0x40
 8002150:	d108      	bne.n	8002164 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002162:	e007      	b.n	8002174 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	3b10      	subs	r3, #16
 8002190:	4a14      	ldr	r2, [pc, #80]	@ (80021e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800219a:	4a13      	ldr	r2, [pc, #76]	@ (80021e8 <DMA_CalcBaseAndBitshift+0x68>)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d909      	bls.n	80021c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	1d1a      	adds	r2, r3, #4
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	659a      	str	r2, [r3, #88]	@ 0x58
 80021c0:	e007      	b.n	80021d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	aaaaaaab 	.word	0xaaaaaaab
 80021e8:	08009880 	.word	0x08009880

080021ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11f      	bne.n	8002246 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d856      	bhi.n	80022ba <DMA_CheckFifoParam+0xce>
 800220c:	a201      	add	r2, pc, #4	@ (adr r2, 8002214 <DMA_CheckFifoParam+0x28>)
 800220e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002212:	bf00      	nop
 8002214:	08002225 	.word	0x08002225
 8002218:	08002237 	.word	0x08002237
 800221c:	08002225 	.word	0x08002225
 8002220:	080022bb 	.word	0x080022bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d046      	beq.n	80022be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002234:	e043      	b.n	80022be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800223e:	d140      	bne.n	80022c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002244:	e03d      	b.n	80022c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800224e:	d121      	bne.n	8002294 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b03      	cmp	r3, #3
 8002254:	d837      	bhi.n	80022c6 <DMA_CheckFifoParam+0xda>
 8002256:	a201      	add	r2, pc, #4	@ (adr r2, 800225c <DMA_CheckFifoParam+0x70>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	0800226d 	.word	0x0800226d
 8002260:	08002273 	.word	0x08002273
 8002264:	0800226d 	.word	0x0800226d
 8002268:	08002285 	.word	0x08002285
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	e030      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002276:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d025      	beq.n	80022ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002282:	e022      	b.n	80022ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800228c:	d11f      	bne.n	80022ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002292:	e01c      	b.n	80022ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d903      	bls.n	80022a2 <DMA_CheckFifoParam+0xb6>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d003      	beq.n	80022a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022a0:	e018      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
      break;
 80022a6:	e015      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00e      	beq.n	80022d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
      break;
 80022b8:	e00b      	b.n	80022d2 <DMA_CheckFifoParam+0xe6>
      break;
 80022ba:	bf00      	nop
 80022bc:	e00a      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;
 80022be:	bf00      	nop
 80022c0:	e008      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
 80022c4:	e006      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
 80022c8:	e004      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
 80022cc:	e002      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022ce:	bf00      	nop
 80022d0:	e000      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
    }
  } 
  
  return status; 
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e159      	b.n	80025b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8148 	bne.w	80025ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d005      	beq.n	8002336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	2b02      	cmp	r3, #2
 8002334:	d130      	bne.n	8002398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0201 	and.w	r2, r3, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d017      	beq.n	80023d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d123      	bne.n	8002428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a2 	beq.w	80025ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b57      	ldr	r3, [pc, #348]	@ (80025cc <HAL_GPIO_Init+0x2e8>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	4a56      	ldr	r2, [pc, #344]	@ (80025cc <HAL_GPIO_Init+0x2e8>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002478:	6453      	str	r3, [r2, #68]	@ 0x44
 800247a:	4b54      	ldr	r3, [pc, #336]	@ (80025cc <HAL_GPIO_Init+0x2e8>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002486:	4a52      	ldr	r2, [pc, #328]	@ (80025d0 <HAL_GPIO_Init+0x2ec>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a49      	ldr	r2, [pc, #292]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d019      	beq.n	80024e6 <HAL_GPIO_Init+0x202>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a48      	ldr	r2, [pc, #288]	@ (80025d8 <HAL_GPIO_Init+0x2f4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_Init+0x1fe>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a47      	ldr	r2, [pc, #284]	@ (80025dc <HAL_GPIO_Init+0x2f8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <HAL_GPIO_Init+0x1fa>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a46      	ldr	r2, [pc, #280]	@ (80025e0 <HAL_GPIO_Init+0x2fc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <HAL_GPIO_Init+0x1f6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a45      	ldr	r2, [pc, #276]	@ (80025e4 <HAL_GPIO_Init+0x300>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_GPIO_Init+0x1f2>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024d6:	2307      	movs	r3, #7
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e6:	2300      	movs	r3, #0
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f8:	4935      	ldr	r1, [pc, #212]	@ (80025d0 <HAL_GPIO_Init+0x2ec>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002506:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252a:	4a2f      	ldr	r2, [pc, #188]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002530:	4b2d      	ldr	r3, [pc, #180]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002554:	4a24      	ldr	r2, [pc, #144]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255a:	4b23      	ldr	r3, [pc, #140]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257e:	4a1a      	ldr	r2, [pc, #104]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002584:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a8:	4a0f      	ldr	r2, [pc, #60]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	f67f aea2 	bls.w	8002300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3724      	adds	r7, #36	@ 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e101      	b.n	8002802 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d106      	bne.n	800261e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f006 fda5 	bl	8009168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800262c:	d102      	bne.n	8002634 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f003 f9a8 	bl	800598e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7c1a      	ldrb	r2, [r3, #16]
 8002646:	f88d 2000 	strb.w	r2, [sp]
 800264a:	3304      	adds	r3, #4
 800264c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800264e:	f003 f887 	bl	8005760 <USB_CoreInit>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0ce      	b.n	8002802 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f003 f9a0 	bl	80059b0 <USB_SetCurrentMode>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e0bf      	b.n	8002802 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
 8002686:	e04a      	b.n	800271e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3315      	adds	r3, #21
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3314      	adds	r3, #20
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	b298      	uxth	r0, r3
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	332e      	adds	r3, #46	@ 0x2e
 80026c4:	4602      	mov	r2, r0
 80026c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3318      	adds	r3, #24
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	331c      	adds	r3, #28
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	3320      	adds	r3, #32
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3324      	adds	r3, #36	@ 0x24
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	3301      	adds	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	791b      	ldrb	r3, [r3, #4]
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	429a      	cmp	r2, r3
 8002726:	d3af      	bcc.n	8002688 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e044      	b.n	80027b8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	3301      	adds	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	791b      	ldrb	r3, [r3, #4]
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d3b5      	bcc.n	800272e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7c1a      	ldrb	r2, [r3, #16]
 80027ca:	f88d 2000 	strb.w	r2, [sp]
 80027ce:	3304      	adds	r3, #4
 80027d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d2:	f003 f939 	bl	8005a48 <USB_DevInit>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e00c      	b.n	8002802 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f004 f97d 	bl	8006afa <USB_DevDisconnect>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_PCD_Start+0x1c>
 8002822:	2302      	movs	r3, #2
 8002824:	e022      	b.n	800286c <HAL_PCD_Start+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002846:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f003 f88a 	bl	800596c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f004 f92b 	bl	8006ab8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b08d      	sub	sp, #52	@ 0x34
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 f9e9 	bl	8006c62 <USB_GetMode>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 848c 	bne.w	80031b0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f004 f94d 	bl	8006b3c <USB_ReadInterrupts>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8482 	beq.w	80031ae <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 f93a 	bl	8006b3c <USB_ReadInterrupts>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d107      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f002 0202 	and.w	r2, r2, #2
 80028e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 f928 	bl	8006b3c <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d161      	bne.n	80029ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0210 	bic.w	r2, r2, #16
 8002904:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	3304      	adds	r3, #4
 8002924:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	0c5b      	lsrs	r3, r3, #17
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	2b02      	cmp	r3, #2
 8002930:	d124      	bne.n	800297c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d035      	beq.n	80029aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	6a38      	ldr	r0, [r7, #32]
 8002952:	f003 ff5f 	bl	8006814 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002962:	441a      	add	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002974:	441a      	add	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	615a      	str	r2, [r3, #20]
 800297a:	e016      	b.n	80029aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	0c5b      	lsrs	r3, r3, #17
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	2b06      	cmp	r3, #6
 8002986:	d110      	bne.n	80029aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800298e:	2208      	movs	r2, #8
 8002990:	4619      	mov	r1, r3
 8002992:	6a38      	ldr	r0, [r7, #32]
 8002994:	f003 ff3e 	bl	8006814 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029a4:	441a      	add	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0210 	orr.w	r2, r2, #16
 80029b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 f8bc 	bl	8006b3c <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029ce:	f040 80a7 	bne.w	8002b20 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 f8c1 	bl	8006b62 <USB_ReadDevAllOutEpInterrupt>
 80029e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80029e2:	e099      	b.n	8002b18 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 808e 	beq.w	8002b0c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 f8e5 	bl	8006bca <USB_ReadDevOutEPInterrupt>
 8002a00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00c      	beq.n	8002a26 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fea1 	bl	8003768 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2308      	movs	r3, #8
 8002a40:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 ff77 	bl	8003938 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a60:	461a      	mov	r2, r3
 8002a62:	2310      	movs	r3, #16
 8002a64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d030      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a78:	2b80      	cmp	r3, #128	@ 0x80
 8002a7a:	d109      	bne.n	8002a90 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a8e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	78db      	ldrb	r3, [r3, #3]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d108      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f006 fc50 	bl	8009360 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002acc:	461a      	mov	r2, r3
 8002ace:	2302      	movs	r3, #2
 8002ad0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2320      	movs	r3, #32
 8002aec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b04:	461a      	mov	r2, r3
 8002b06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	3301      	adds	r3, #1
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f47f af62 	bne.w	80029e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f004 f809 	bl	8006b3c <USB_ReadInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b34:	f040 80db 	bne.w	8002cee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f004 f82a 	bl	8006b96 <USB_ReadDevAllInEpInterrupt>
 8002b42:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b48:	e0cd      	b.n	8002ce6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80c2 	beq.w	8002cda <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f004 f850 	bl	8006c06 <USB_ReadDevInEPInterrupt>
 8002b66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d057      	beq.n	8002c22 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	2201      	movs	r2, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69f9      	ldr	r1, [r7, #28]
 8002b8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b92:	4013      	ands	r3, r2
 8002b94:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	799b      	ldrb	r3, [r3, #6]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d132      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3320      	adds	r3, #32
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4403      	add	r3, r0
 8002bd0:	331c      	adds	r3, #28
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4419      	add	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4403      	add	r3, r0
 8002be4:	3320      	adds	r3, #32
 8002be6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d113      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x3a2>
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3324      	adds	r3, #36	@ 0x24
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d108      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2101      	movs	r1, #1
 8002c12:	f004 f857 	bl	8006cc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f006 fb24 	bl	800926a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c54:	461a      	mov	r2, r3
 8002c56:	2310      	movs	r3, #16
 8002c58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c70:	461a      	mov	r2, r3
 8002c72:	2340      	movs	r3, #64	@ 0x40
 8002c74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c82:	6a38      	ldr	r0, [r7, #32]
 8002c84:	f003 f844 	bl	8005d10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	3310      	adds	r3, #16
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	3304      	adds	r3, #4
 8002c9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	78db      	ldrb	r3, [r3, #3]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d108      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f006 fb67 	bl	8009384 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fcbb 	bl	8003650 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	3301      	adds	r3, #1
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f47f af2e 	bne.w	8002b4a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 ff22 	bl	8006b3c <USB_ReadInterrupts>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d02:	d122      	bne.n	8002d4a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d108      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fea1 	bl	8003a74 <HAL_PCDEx_LPM_Callback>
 8002d32:	e002      	b.n	8002d3a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f006 fb05 	bl	8009344 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fef4 	bl	8006b3c <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d5e:	d112      	bne.n	8002d86 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d102      	bne.n	8002d76 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f006 fac1 	bl	80092f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d84:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 fed6 	bl	8006b3c <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d9a:	f040 80b7 	bne.w	8002f0c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2110      	movs	r1, #16
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 ffa9 	bl	8005d10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dc2:	e046      	b.n	8002e52 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dd6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002de8:	0151      	lsls	r1, r2, #5
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	440a      	add	r2, r1
 8002dee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002df2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002df6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e04:	461a      	mov	r2, r3
 8002e06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e1c:	0151      	lsls	r1, r2, #5
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	440a      	add	r2, r1
 8002e22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e3c:	0151      	lsls	r1, r2, #5
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	440a      	add	r2, r1
 8002e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4e:	3301      	adds	r3, #1
 8002e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	791b      	ldrb	r3, [r3, #4]
 8002e56:	461a      	mov	r2, r3
 8002e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d3b2      	bcc.n	8002dc4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e6c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	7bdb      	ldrb	r3, [r3, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e8a:	f043 030b 	orr.w	r3, r3, #11
 8002e8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ea0:	f043 030b 	orr.w	r3, r3, #11
 8002ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea6:	e015      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002eba:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ebe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ece:	f043 030b 	orr.w	r3, r3, #11
 8002ed2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ee2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ee6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f003 fee4 	bl	8006cc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 fe13 	bl	8006b3c <USB_ReadInterrupts>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f20:	d123      	bne.n	8002f6a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 fea9 	bl	8006c7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f002 ff66 	bl	8005e02 <USB_GetDevSpeed>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681c      	ldr	r4, [r3, #0]
 8002f42:	f001 f9c7 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 8002f46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f002 fc6a 	bl	8005828 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f006 f9b0 	bl	80092ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 fde4 	bl	8006b3c <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d10a      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f006 f98d 	bl	800929e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f002 0208 	and.w	r2, r2, #8
 8002f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fdcf 	bl	8006b3c <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa4:	2b80      	cmp	r3, #128	@ 0x80
 8002fa6:	d123      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb8:	e014      	b.n	8002fe4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d105      	bne.n	8002fde <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fb08 	bl	80035ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	791b      	ldrb	r3, [r3, #4]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d3e4      	bcc.n	8002fba <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f003 fda1 	bl	8006b3c <USB_ReadInterrupts>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003004:	d13c      	bne.n	8003080 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003006:	2301      	movs	r3, #1
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
 800300a:	e02b      	b.n	8003064 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	3318      	adds	r3, #24
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d115      	bne.n	800305e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003032:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003034:	2b00      	cmp	r3, #0
 8003036:	da12      	bge.n	800305e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3317      	adds	r3, #23
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fac8 	bl	80035ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	3301      	adds	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	791b      	ldrb	r3, [r3, #4]
 8003068:	461a      	mov	r2, r3
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	4293      	cmp	r3, r2
 800306e:	d3cd      	bcc.n	800300c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800307e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f003 fd59 	bl	8006b3c <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003090:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003094:	d156      	bne.n	8003144 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003096:	2301      	movs	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
 800309a:	e045      	b.n	8003128 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d12e      	bne.n	8003122 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	da2b      	bge.n	8003122 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80030d6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030da:	429a      	cmp	r2, r3
 80030dc:	d121      	bne.n	8003122 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800311a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800311e:	6053      	str	r3, [r2, #4]
            break;
 8003120:	e008      	b.n	8003134 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	3301      	adds	r3, #1
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	791b      	ldrb	r3, [r3, #4]
 800312c:	461a      	mov	r2, r3
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	4293      	cmp	r3, r2
 8003132:	d3b3      	bcc.n	800309c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fcf7 	bl	8006b3c <USB_ReadInterrupts>
 800314e:	4603      	mov	r3, r0
 8003150:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003158:	d10a      	bne.n	8003170 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f006 f924 	bl	80093a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800316e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fce1 	bl	8006b3c <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d115      	bne.n	80031b0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f006 f914 	bl	80093c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	e000      	b.n	80031b0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80031ae:	bf00      	nop
    }
  }
}
 80031b0:	3734      	adds	r7, #52	@ 0x34
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}

080031b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_PCD_SetAddress+0x1a>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e012      	b.n	80031f6 <HAL_PCD_SetAddress+0x40>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 fc40 	bl	8006a6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	4608      	mov	r0, r1
 8003208:	4611      	mov	r1, r2
 800320a:	461a      	mov	r2, r3
 800320c:	4603      	mov	r3, r0
 800320e:	70fb      	strb	r3, [r7, #3]
 8003210:	460b      	mov	r3, r1
 8003212:	803b      	strh	r3, [r7, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800321c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003220:	2b00      	cmp	r3, #0
 8003222:	da0f      	bge.n	8003244 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	3310      	adds	r3, #16
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4413      	add	r3, r2
 8003238:	3304      	adds	r3, #4
 800323a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	705a      	strb	r2, [r3, #1]
 8003242:	e00f      	b.n	8003264 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	f003 020f 	and.w	r2, r3, #15
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	3304      	adds	r3, #4
 800325c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003270:	883a      	ldrh	r2, [r7, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	78ba      	ldrb	r2, [r7, #2]
 800327a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	785b      	ldrb	r3, [r3, #1]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800328e:	78bb      	ldrb	r3, [r7, #2]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d102      	bne.n	800329a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_PCD_EP_Open+0xaa>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e00e      	b.n	80032c6 <HAL_PCD_EP_Open+0xc8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 fdc8 	bl	8005e4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80032c4:	7afb      	ldrb	r3, [r7, #11]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	da0f      	bge.n	8003302 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 020f 	and.w	r2, r3, #15
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	3310      	adds	r3, #16
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	3304      	adds	r3, #4
 80032f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	705a      	strb	r2, [r3, #1]
 8003300:	e00f      	b.n	8003322 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	3304      	adds	r3, #4
 800331a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_PCD_EP_Close+0x6e>
 8003338:	2302      	movs	r3, #2
 800333a:	e00e      	b.n	800335a <HAL_PCD_EP_Close+0x8c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68f9      	ldr	r1, [r7, #12]
 800334a:	4618      	mov	r0, r3
 800334c:	f002 fe06 	bl	8005f5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	460b      	mov	r3, r1
 8003370:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003372:	7afb      	ldrb	r3, [r7, #11]
 8003374:	f003 020f 	and.w	r2, r3, #15
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	3304      	adds	r3, #4
 800338a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2200      	movs	r2, #0
 800339c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2200      	movs	r2, #0
 80033a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a4:	7afb      	ldrb	r3, [r7, #11]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	799b      	ldrb	r3, [r3, #6]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d102      	bne.n	80033be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	799b      	ldrb	r3, [r3, #6]
 80033c6:	461a      	mov	r2, r3
 80033c8:	6979      	ldr	r1, [r7, #20]
 80033ca:	f002 fea3 	bl	8006114 <USB_EPStartXfer>

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 020f 	and.w	r2, r3, #15
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	460b      	mov	r3, r1
 8003416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003418:	7afb      	ldrb	r3, [r7, #11]
 800341a:	f003 020f 	and.w	r2, r3, #15
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	3310      	adds	r3, #16
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	3304      	adds	r3, #4
 800342e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2200      	movs	r2, #0
 8003440:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2201      	movs	r2, #1
 8003446:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	b2da      	uxtb	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	799b      	ldrb	r3, [r3, #6]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d102      	bne.n	8003462 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	799b      	ldrb	r3, [r3, #6]
 800346a:	461a      	mov	r2, r3
 800346c:	6979      	ldr	r1, [r7, #20]
 800346e:	f002 fe51 	bl	8006114 <USB_EPStartXfer>

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	7912      	ldrb	r2, [r2, #4]
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e04f      	b.n	800353a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800349a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	da0f      	bge.n	80034c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	f003 020f 	and.w	r2, r3, #15
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	3310      	adds	r3, #16
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	3304      	adds	r3, #4
 80034b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	705a      	strb	r2, [r3, #1]
 80034c0:	e00d      	b.n	80034de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_PCD_EP_SetStall+0x82>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e01d      	b.n	800353a <HAL_PCD_EP_SetStall+0xbe>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	4618      	mov	r0, r3
 800350e:	f003 f9d9 	bl	80068c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7999      	ldrb	r1, [r3, #6]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800352a:	461a      	mov	r2, r3
 800352c:	f003 fbca 	bl	8006cc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	7912      	ldrb	r2, [r2, #4]
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e042      	b.n	80035e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003564:	2b00      	cmp	r3, #0
 8003566:	da0f      	bge.n	8003588 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	f003 020f 	and.w	r2, r3, #15
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	3310      	adds	r3, #16
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	4413      	add	r3, r2
 800357c:	3304      	adds	r3, #4
 800357e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	705a      	strb	r2, [r3, #1]
 8003586:	e00f      	b.n	80035a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	f003 020f 	and.w	r2, r3, #15
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_PCD_EP_ClrStall+0x86>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e00e      	b.n	80035e6 <HAL_PCD_EP_ClrStall+0xa4>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68f9      	ldr	r1, [r7, #12]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f003 f9e2 	bl	80069a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da0c      	bge.n	800361c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	f003 020f 	and.w	r2, r3, #15
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	3310      	adds	r3, #16
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	3304      	adds	r3, #4
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e00c      	b.n	8003636 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	f003 020f 	and.w	r2, r3, #15
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	3304      	adds	r3, #4
 8003634:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	4618      	mov	r0, r3
 800363e:	f003 f801 	bl	8006644 <USB_EPStopXfer>
 8003642:	4603      	mov	r3, r0
 8003644:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003646:	7afb      	ldrb	r3, [r7, #11]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	@ 0x28
 8003654:	af02      	add	r7, sp, #8
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	3310      	adds	r3, #16
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	429a      	cmp	r2, r3
 8003682:	d901      	bls.n	8003688 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e06b      	b.n	8003760 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	429a      	cmp	r2, r3
 800369c:	d902      	bls.n	80036a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	3303      	adds	r3, #3
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ac:	e02a      	b.n	8003704 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d902      	bls.n	80036ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3303      	adds	r3, #3
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68d9      	ldr	r1, [r3, #12]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	4603      	mov	r3, r0
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f003 f856 	bl	8006798 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	441a      	add	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	429a      	cmp	r2, r3
 8003718:	d809      	bhi.n	800372e <PCD_WriteEmptyTxFifo+0xde>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003722:	429a      	cmp	r2, r3
 8003724:	d203      	bcs.n	800372e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1bf      	bne.n	80036ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	429a      	cmp	r2, r3
 8003738:	d811      	bhi.n	800375e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	2201      	movs	r2, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800374e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	43db      	mvns	r3, r3
 8003754:	6939      	ldr	r1, [r7, #16]
 8003756:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800375a:	4013      	ands	r3, r2
 800375c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	333c      	adds	r3, #60	@ 0x3c
 8003780:	3304      	adds	r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	799b      	ldrb	r3, [r3, #6]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d17b      	bne.n	8003896 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	4a61      	ldr	r2, [pc, #388]	@ (8003930 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	f240 80b9 	bls.w	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80b3 	beq.w	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ca:	461a      	mov	r2, r3
 80037cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037d0:	6093      	str	r3, [r2, #8]
 80037d2:	e0a7      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ea:	461a      	mov	r2, r3
 80037ec:	2320      	movs	r3, #32
 80037ee:	6093      	str	r3, [r2, #8]
 80037f0:	e098      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f040 8093 	bne.w	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	4a4b      	ldr	r2, [pc, #300]	@ (8003930 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d90f      	bls.n	8003826 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800381c:	461a      	mov	r2, r3
 800381e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003822:	6093      	str	r3, [r2, #8]
 8003824:	e07e      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	0159      	lsls	r1, r3, #5
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	440b      	add	r3, r1
 8003848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003852:	1ad2      	subs	r2, r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d114      	bne.n	8003888 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003870:	461a      	mov	r2, r3
 8003872:	2101      	movs	r1, #1
 8003874:	f003 fa26 	bl	8006cc4 <USB_EP0_OutStart>
 8003878:	e006      	b.n	8003888 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	441a      	add	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	4619      	mov	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f005 fcd0 	bl	8009234 <HAL_PCD_DataOutStageCallback>
 8003894:	e046      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	4a26      	ldr	r2, [pc, #152]	@ (8003934 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d124      	bne.n	80038e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b4:	461a      	mov	r2, r3
 80038b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ba:	6093      	str	r3, [r2, #8]
 80038bc:	e032      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d4:	461a      	mov	r2, r3
 80038d6:	2320      	movs	r3, #32
 80038d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f005 fca7 	bl	8009234 <HAL_PCD_DataOutStageCallback>
 80038e6:	e01d      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d114      	bne.n	8003918 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d108      	bne.n	8003918 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003910:	461a      	mov	r2, r3
 8003912:	2100      	movs	r1, #0
 8003914:	f003 f9d6 	bl	8006cc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f005 fc88 	bl	8009234 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	4f54300a 	.word	0x4f54300a
 8003934:	4f54310a 	.word	0x4f54310a

08003938 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	333c      	adds	r3, #60	@ 0x3c
 8003950:	3304      	adds	r3, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a15      	ldr	r2, [pc, #84]	@ (80039c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d90e      	bls.n	800398c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003984:	461a      	mov	r2, r3
 8003986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800398a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f005 fc3f 	bl	8009210 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d90c      	bls.n	80039b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	799b      	ldrb	r3, [r3, #6]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d108      	bne.n	80039b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039ac:	461a      	mov	r2, r3
 80039ae:	2101      	movs	r1, #1
 80039b0:	f003 f988 	bl	8006cc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	4f54300a 	.word	0x4f54300a

080039c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
 80039d0:	4613      	mov	r3, r2
 80039d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d107      	bne.n	80039f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039e2:	883b      	ldrh	r3, [r7, #0]
 80039e4:	0419      	lsls	r1, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80039f0:	e028      	b.n	8003a44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	4413      	add	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e00d      	b.n	8003a22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	3340      	adds	r3, #64	@ 0x40
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	4413      	add	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3ec      	bcc.n	8003a06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a2c:	883b      	ldrh	r3, [r7, #0]
 8003a2e:	0418      	lsls	r0, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	4302      	orrs	r2, r0
 8003a3c:	3340      	adds	r3, #64	@ 0x40
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e267      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d075      	beq.n	8003b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aaa:	4b88      	ldr	r3, [pc, #544]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab6:	4b85      	ldr	r3, [pc, #532]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d112      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac2:	4b82      	ldr	r3, [pc, #520]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	4b7e      	ldr	r3, [pc, #504]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d05b      	beq.n	8003b94 <HAL_RCC_OscConfig+0x108>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d157      	bne.n	8003b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e242      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x74>
 8003af2:	4b76      	ldr	r3, [pc, #472]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a75      	ldr	r2, [pc, #468]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e01d      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x98>
 8003b0a:	4b70      	ldr	r3, [pc, #448]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a6f      	ldr	r2, [pc, #444]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b6d      	ldr	r3, [pc, #436]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6c      	ldr	r2, [pc, #432]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e00b      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b24:	4b69      	ldr	r3, [pc, #420]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a68      	ldr	r2, [pc, #416]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b66      	ldr	r3, [pc, #408]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a65      	ldr	r2, [pc, #404]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fd fb2a 	bl	800119c <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fd fb26 	bl	800119c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	@ 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e207      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0xc0>
 8003b6a:	e014      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fb16 	bl	800119c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fd fb12 	bl	800119c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	@ 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e1f3      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b86:	4b51      	ldr	r3, [pc, #324]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0xe8>
 8003b92:	e000      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d063      	beq.n	8003c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bae:	4b47      	ldr	r3, [pc, #284]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d11c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bba:	4b44      	ldr	r3, [pc, #272]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d116      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc6:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_RCC_OscConfig+0x152>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e1c7      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bde:	4b3b      	ldr	r3, [pc, #236]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4937      	ldr	r1, [pc, #220]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	e03a      	b.n	8003c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfc:	4b34      	ldr	r3, [pc, #208]	@ (8003cd0 <HAL_RCC_OscConfig+0x244>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fd facb 	bl	800119c <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fd fac7 	bl	800119c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e1a8      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b28      	ldr	r3, [pc, #160]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4925      	ldr	r1, [pc, #148]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]
 8003c3c:	e015      	b.n	8003c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3e:	4b24      	ldr	r3, [pc, #144]	@ (8003cd0 <HAL_RCC_OscConfig+0x244>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd faaa 	bl	800119c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4c:	f7fd faa6 	bl	800119c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e187      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d036      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7e:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <HAL_RCC_OscConfig+0x248>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fd fa8a 	bl	800119c <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8c:	f7fd fa86 	bl	800119c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e167      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x200>
 8003caa:	e01b      	b.n	8003ce4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cac:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <HAL_RCC_OscConfig+0x248>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fa73 	bl	800119c <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	e00e      	b.n	8003cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fd fa6f 	bl	800119c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d907      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e150      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	42470000 	.word	0x42470000
 8003cd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd8:	4b88      	ldr	r3, [pc, #544]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ea      	bne.n	8003cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8097 	beq.w	8003e20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf6:	4b81      	ldr	r3, [pc, #516]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	4b7d      	ldr	r3, [pc, #500]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d12:	4b7a      	ldr	r3, [pc, #488]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b77      	ldr	r3, [pc, #476]	@ (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d118      	bne.n	8003d60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2e:	4b74      	ldr	r3, [pc, #464]	@ (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a73      	ldr	r2, [pc, #460]	@ (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fa2f 	bl	800119c <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d42:	f7fd fa2b 	bl	800119c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e10c      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	4b6a      	ldr	r3, [pc, #424]	@ (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x2ea>
 8003d68:	4b64      	ldr	r3, [pc, #400]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6c:	4a63      	ldr	r2, [pc, #396]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d74:	e01c      	b.n	8003db0 <HAL_RCC_OscConfig+0x324>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x30c>
 8003d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	4a5e      	ldr	r2, [pc, #376]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_OscConfig+0x324>
 8003d98:	4b58      	ldr	r3, [pc, #352]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9c:	4a57      	ldr	r2, [pc, #348]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da4:	4b55      	ldr	r3, [pc, #340]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da8:	4a54      	ldr	r2, [pc, #336]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003daa:	f023 0304 	bic.w	r3, r3, #4
 8003dae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fd f9f0 	bl	800119c <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fd f9ec 	bl	800119c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e0cb      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd6:	4b49      	ldr	r3, [pc, #292]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ee      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x334>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de4:	f7fd f9da 	bl	800119c <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fd f9d6 	bl	800119c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0b5      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e02:	4b3e      	ldr	r3, [pc, #248]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ee      	bne.n	8003dec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e14:	4b39      	ldr	r3, [pc, #228]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	4a38      	ldr	r2, [pc, #224]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80a1 	beq.w	8003f6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e2a:	4b34      	ldr	r3, [pc, #208]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d05c      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d141      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b31      	ldr	r3, [pc, #196]	@ (8003f04 <HAL_RCC_OscConfig+0x478>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fd f9aa 	bl	800119c <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fd f9a6 	bl	800119c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e087      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5e:	4b27      	ldr	r3, [pc, #156]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69da      	ldr	r2, [r3, #28]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	3b01      	subs	r3, #1
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	491b      	ldr	r1, [pc, #108]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e94:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <HAL_RCC_OscConfig+0x478>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7fd f97f 	bl	800119c <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7fd f97b 	bl	800119c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e05c      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb4:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x416>
 8003ec0:	e054      	b.n	8003f6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <HAL_RCC_OscConfig+0x478>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fd f968 	bl	800119c <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd f964 	bl	800119c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e045      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_OscConfig+0x470>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x444>
 8003eee:	e03d      	b.n	8003f6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e038      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40007000 	.word	0x40007000
 8003f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f08:	4b1b      	ldr	r3, [pc, #108]	@ (8003f78 <HAL_RCC_OscConfig+0x4ec>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d028      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d121      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d11a      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d111      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	085b      	lsrs	r3, r3, #1
 8003f50:	3b01      	subs	r3, #1
 8003f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800

08003f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0cc      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f90:	4b68      	ldr	r3, [pc, #416]	@ (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d90c      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b65      	ldr	r3, [pc, #404]	@ (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b63      	ldr	r3, [pc, #396]	@ (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0b8      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd0:	4b59      	ldr	r3, [pc, #356]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4a58      	ldr	r2, [pc, #352]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe8:	4b53      	ldr	r3, [pc, #332]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a52      	ldr	r2, [pc, #328]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff4:	4b50      	ldr	r3, [pc, #320]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	494d      	ldr	r1, [pc, #308]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d044      	beq.n	800409c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	4b47      	ldr	r3, [pc, #284]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d119      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d003      	beq.n	800403a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004036:	2b03      	cmp	r3, #3
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403a:	4b3f      	ldr	r3, [pc, #252]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e06f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404a:	4b3b      	ldr	r3, [pc, #236]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e067      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405a:	4b37      	ldr	r3, [pc, #220]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 0203 	bic.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4934      	ldr	r1, [pc, #208]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800406c:	f7fd f896 	bl	800119c <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	e00a      	b.n	800408a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004074:	f7fd f892 	bl	800119c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e04f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	4b2b      	ldr	r3, [pc, #172]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 020c 	and.w	r2, r3, #12
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	429a      	cmp	r2, r3
 800409a:	d1eb      	bne.n	8004074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800409c:	4b25      	ldr	r3, [pc, #148]	@ (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d20c      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b22      	ldr	r3, [pc, #136]	@ (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b20      	ldr	r3, [pc, #128]	@ (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e032      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d0:	4b19      	ldr	r3, [pc, #100]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4916      	ldr	r1, [pc, #88]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ee:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	490e      	ldr	r1, [pc, #56]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004102:	f000 f821 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004106:	4602      	mov	r2, r0
 8004108:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	490a      	ldr	r1, [pc, #40]	@ (800413c <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	5ccb      	ldrb	r3, [r1, r3]
 8004116:	fa22 f303 	lsr.w	r3, r2, r3
 800411a:	4a09      	ldr	r2, [pc, #36]	@ (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411e:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc fff6 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40023c00 	.word	0x40023c00
 8004138:	40023800 	.word	0x40023800
 800413c:	08009870 	.word	0x08009870
 8004140:	20000004 	.word	0x20000004
 8004144:	20000008 	.word	0x20000008

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800414c:	b090      	sub	sp, #64	@ 0x40
 800414e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
 8004154:	2300      	movs	r3, #0
 8004156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004158:	2300      	movs	r3, #0
 800415a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004160:	4b59      	ldr	r3, [pc, #356]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b08      	cmp	r3, #8
 800416a:	d00d      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x40>
 800416c:	2b08      	cmp	r3, #8
 800416e:	f200 80a1 	bhi.w	80042b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x34>
 8004176:	2b04      	cmp	r3, #4
 8004178:	d003      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x3a>
 800417a:	e09b      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b53      	ldr	r3, [pc, #332]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x184>)
 800417e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004180:	e09b      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004182:	4b53      	ldr	r3, [pc, #332]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004184:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004186:	e098      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004188:	4b4f      	ldr	r3, [pc, #316]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004190:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004192:	4b4d      	ldr	r3, [pc, #308]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d028      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419e:	4b4a      	ldr	r3, [pc, #296]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	2200      	movs	r2, #0
 80041a6:	623b      	str	r3, [r7, #32]
 80041a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041b0:	2100      	movs	r1, #0
 80041b2:	4b47      	ldr	r3, [pc, #284]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041b4:	fb03 f201 	mul.w	r2, r3, r1
 80041b8:	2300      	movs	r3, #0
 80041ba:	fb00 f303 	mul.w	r3, r0, r3
 80041be:	4413      	add	r3, r2
 80041c0:	4a43      	ldr	r2, [pc, #268]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041c2:	fba0 1202 	umull	r1, r2, r0, r2
 80041c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041c8:	460a      	mov	r2, r1
 80041ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ce:	4413      	add	r3, r2
 80041d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d4:	2200      	movs	r2, #0
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	61fa      	str	r2, [r7, #28]
 80041da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041e2:	f7fb fff7 	bl	80001d4 <__aeabi_uldivmod>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4613      	mov	r3, r2
 80041ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ee:	e053      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f0:	4b35      	ldr	r3, [pc, #212]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	099b      	lsrs	r3, r3, #6
 80041f6:	2200      	movs	r2, #0
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	617a      	str	r2, [r7, #20]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004202:	f04f 0b00 	mov.w	fp, #0
 8004206:	4652      	mov	r2, sl
 8004208:	465b      	mov	r3, fp
 800420a:	f04f 0000 	mov.w	r0, #0
 800420e:	f04f 0100 	mov.w	r1, #0
 8004212:	0159      	lsls	r1, r3, #5
 8004214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004218:	0150      	lsls	r0, r2, #5
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	ebb2 080a 	subs.w	r8, r2, sl
 8004222:	eb63 090b 	sbc.w	r9, r3, fp
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004232:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004236:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800423a:	ebb2 0408 	subs.w	r4, r2, r8
 800423e:	eb63 0509 	sbc.w	r5, r3, r9
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	00eb      	lsls	r3, r5, #3
 800424c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004250:	00e2      	lsls	r2, r4, #3
 8004252:	4614      	mov	r4, r2
 8004254:	461d      	mov	r5, r3
 8004256:	eb14 030a 	adds.w	r3, r4, sl
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	eb45 030b 	adc.w	r3, r5, fp
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800426e:	4629      	mov	r1, r5
 8004270:	028b      	lsls	r3, r1, #10
 8004272:	4621      	mov	r1, r4
 8004274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004278:	4621      	mov	r1, r4
 800427a:	028a      	lsls	r2, r1, #10
 800427c:	4610      	mov	r0, r2
 800427e:	4619      	mov	r1, r3
 8004280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004282:	2200      	movs	r2, #0
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	60fa      	str	r2, [r7, #12]
 8004288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800428c:	f7fb ffa2 	bl	80001d4 <__aeabi_uldivmod>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4613      	mov	r3, r2
 8004296:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004298:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	0c1b      	lsrs	r3, r3, #16
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	3301      	adds	r3, #1
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80042a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042b2:	e002      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x184>)
 80042b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3740      	adds	r7, #64	@ 0x40
 80042c0:	46bd      	mov	sp, r7
 80042c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	017d7840 	.word	0x017d7840

080042d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d8:	4b03      	ldr	r3, [pc, #12]	@ (80042e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000004 	.word	0x20000004

080042ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e041      	b.n	8004382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc fd66 	bl	8000de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fe2e 	bl	8004f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e041      	b.n	8004420 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f839 	bl	8004428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4610      	mov	r0, r2
 80043ca:	f000 fddf 	bl	8004f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <HAL_TIM_PWM_Start+0x24>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	bf14      	ite	ne
 8004458:	2301      	movne	r3, #1
 800445a:	2300      	moveq	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	e022      	b.n	80044a6 <HAL_TIM_PWM_Start+0x6a>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b04      	cmp	r3, #4
 8004464:	d109      	bne.n	800447a <HAL_TIM_PWM_Start+0x3e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	bf14      	ite	ne
 8004472:	2301      	movne	r3, #1
 8004474:	2300      	moveq	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e015      	b.n	80044a6 <HAL_TIM_PWM_Start+0x6a>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d109      	bne.n	8004494 <HAL_TIM_PWM_Start+0x58>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e008      	b.n	80044a6 <HAL_TIM_PWM_Start+0x6a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e068      	b.n	8004580 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d104      	bne.n	80044be <HAL_TIM_PWM_Start+0x82>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044bc:	e013      	b.n	80044e6 <HAL_TIM_PWM_Start+0xaa>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d104      	bne.n	80044ce <HAL_TIM_PWM_Start+0x92>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044cc:	e00b      	b.n	80044e6 <HAL_TIM_PWM_Start+0xaa>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d104      	bne.n	80044de <HAL_TIM_PWM_Start+0xa2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044dc:	e003      	b.n	80044e6 <HAL_TIM_PWM_Start+0xaa>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2201      	movs	r2, #1
 80044ec:	6839      	ldr	r1, [r7, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f88f 	bl	8005612 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a23      	ldr	r2, [pc, #140]	@ (8004588 <HAL_TIM_PWM_Start+0x14c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d107      	bne.n	800450e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800450c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <HAL_TIM_PWM_Start+0x14c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_TIM_PWM_Start+0x10e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004520:	d013      	beq.n	800454a <HAL_TIM_PWM_Start+0x10e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a19      	ldr	r2, [pc, #100]	@ (800458c <HAL_TIM_PWM_Start+0x150>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_TIM_PWM_Start+0x10e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a17      	ldr	r2, [pc, #92]	@ (8004590 <HAL_TIM_PWM_Start+0x154>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_TIM_PWM_Start+0x10e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a16      	ldr	r2, [pc, #88]	@ (8004594 <HAL_TIM_PWM_Start+0x158>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_TIM_PWM_Start+0x10e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a14      	ldr	r2, [pc, #80]	@ (8004598 <HAL_TIM_PWM_Start+0x15c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d111      	bne.n	800456e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d010      	beq.n	800457e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456c:	e007      	b.n	800457e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40014000 	.word	0x40014000

0800459c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f001 f82f 	bl	8005612 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a29      	ldr	r2, [pc, #164]	@ (8004660 <HAL_TIM_PWM_Stop+0xc4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d117      	bne.n	80045ee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6a1a      	ldr	r2, [r3, #32]
 80045c4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <HAL_TIM_PWM_Stop+0x52>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a1a      	ldr	r2, [r3, #32]
 80045d4:	f240 4344 	movw	r3, #1092	@ 0x444
 80045d8:	4013      	ands	r3, r2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d107      	bne.n	80045ee <HAL_TIM_PWM_Stop+0x52>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a1a      	ldr	r2, [r3, #32]
 80045f4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10f      	bne.n	800461e <HAL_TIM_PWM_Stop+0x82>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6a1a      	ldr	r2, [r3, #32]
 8004604:	f240 4344 	movw	r3, #1092	@ 0x444
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d107      	bne.n	800461e <HAL_TIM_PWM_Stop+0x82>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0201 	bic.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <HAL_TIM_PWM_Stop+0x92>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800462c:	e013      	b.n	8004656 <HAL_TIM_PWM_Stop+0xba>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d104      	bne.n	800463e <HAL_TIM_PWM_Stop+0xa2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800463c:	e00b      	b.n	8004656 <HAL_TIM_PWM_Stop+0xba>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d104      	bne.n	800464e <HAL_TIM_PWM_Stop+0xb2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800464c:	e003      	b.n	8004656 <HAL_TIM_PWM_Stop+0xba>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40010000 	.word	0x40010000

08004664 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d109      	bne.n	800468c <HAL_TIM_PWM_Start_IT+0x28>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e022      	b.n	80046d2 <HAL_TIM_PWM_Start_IT+0x6e>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b04      	cmp	r3, #4
 8004690:	d109      	bne.n	80046a6 <HAL_TIM_PWM_Start_IT+0x42>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	bf14      	ite	ne
 800469e:	2301      	movne	r3, #1
 80046a0:	2300      	moveq	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	e015      	b.n	80046d2 <HAL_TIM_PWM_Start_IT+0x6e>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d109      	bne.n	80046c0 <HAL_TIM_PWM_Start_IT+0x5c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e008      	b.n	80046d2 <HAL_TIM_PWM_Start_IT+0x6e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0b3      	b.n	8004842 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start_IT+0x86>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e8:	e013      	b.n	8004712 <HAL_TIM_PWM_Start_IT+0xae>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start_IT+0x96>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f8:	e00b      	b.n	8004712 <HAL_TIM_PWM_Start_IT+0xae>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d104      	bne.n	800470a <HAL_TIM_PWM_Start_IT+0xa6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004708:	e003      	b.n	8004712 <HAL_TIM_PWM_Start_IT+0xae>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	d841      	bhi.n	800479c <HAL_TIM_PWM_Start_IT+0x138>
 8004718:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <HAL_TIM_PWM_Start_IT+0xbc>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004755 	.word	0x08004755
 8004724:	0800479d 	.word	0x0800479d
 8004728:	0800479d 	.word	0x0800479d
 800472c:	0800479d 	.word	0x0800479d
 8004730:	08004767 	.word	0x08004767
 8004734:	0800479d 	.word	0x0800479d
 8004738:	0800479d 	.word	0x0800479d
 800473c:	0800479d 	.word	0x0800479d
 8004740:	08004779 	.word	0x08004779
 8004744:	0800479d 	.word	0x0800479d
 8004748:	0800479d 	.word	0x0800479d
 800474c:	0800479d 	.word	0x0800479d
 8004750:	0800478b 	.word	0x0800478b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0202 	orr.w	r2, r2, #2
 8004762:	60da      	str	r2, [r3, #12]
      break;
 8004764:	e01d      	b.n	80047a2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0204 	orr.w	r2, r2, #4
 8004774:	60da      	str	r2, [r3, #12]
      break;
 8004776:	e014      	b.n	80047a2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0208 	orr.w	r2, r2, #8
 8004786:	60da      	str	r2, [r3, #12]
      break;
 8004788:	e00b      	b.n	80047a2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0210 	orr.w	r2, r2, #16
 8004798:	60da      	str	r2, [r3, #12]
      break;
 800479a:	e002      	b.n	80047a2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d14b      	bne.n	8004840 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2201      	movs	r2, #1
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 ff2e 	bl	8005612 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a24      	ldr	r2, [pc, #144]	@ (800484c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d107      	bne.n	80047d0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1d      	ldr	r2, [pc, #116]	@ (800484c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <HAL_TIM_PWM_Start_IT+0x1a8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e2:	d013      	beq.n	800480c <HAL_TIM_PWM_Start_IT+0x1a8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a19      	ldr	r2, [pc, #100]	@ (8004850 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <HAL_TIM_PWM_Start_IT+0x1a8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a18      	ldr	r2, [pc, #96]	@ (8004854 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_TIM_PWM_Start_IT+0x1a8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a16      	ldr	r2, [pc, #88]	@ (8004858 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_TIM_PWM_Start_IT+0x1a8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a15      	ldr	r2, [pc, #84]	@ (800485c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d111      	bne.n	8004830 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b06      	cmp	r3, #6
 800481c:	d010      	beq.n	8004840 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482e:	e007      	b.n	8004840 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40014000 	.word	0x40014000

08004860 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d841      	bhi.n	80048f8 <HAL_TIM_PWM_Stop_IT+0x98>
 8004874:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048f9 	.word	0x080048f9
 8004884:	080048f9 	.word	0x080048f9
 8004888:	080048f9 	.word	0x080048f9
 800488c:	080048c3 	.word	0x080048c3
 8004890:	080048f9 	.word	0x080048f9
 8004894:	080048f9 	.word	0x080048f9
 8004898:	080048f9 	.word	0x080048f9
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048f9 	.word	0x080048f9
 80048a4:	080048f9 	.word	0x080048f9
 80048a8:	080048f9 	.word	0x080048f9
 80048ac:	080048e7 	.word	0x080048e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0202 	bic.w	r2, r2, #2
 80048be:	60da      	str	r2, [r3, #12]
      break;
 80048c0:	e01d      	b.n	80048fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0204 	bic.w	r2, r2, #4
 80048d0:	60da      	str	r2, [r3, #12]
      break;
 80048d2:	e014      	b.n	80048fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0208 	bic.w	r2, r2, #8
 80048e2:	60da      	str	r2, [r3, #12]
      break;
 80048e4:	e00b      	b.n	80048fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0210 	bic.w	r2, r2, #16
 80048f4:	60da      	str	r2, [r3, #12]
      break;
 80048f6:	e002      	b.n	80048fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
      break;
 80048fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d157      	bne.n	80049b4 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2200      	movs	r2, #0
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fe80 	bl	8005612 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2a      	ldr	r2, [pc, #168]	@ (80049c0 <HAL_TIM_PWM_Stop_IT+0x160>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d117      	bne.n	800494c <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a1a      	ldr	r2, [r3, #32]
 8004922:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10f      	bne.n	800494c <HAL_TIM_PWM_Stop_IT+0xec>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6a1a      	ldr	r2, [r3, #32]
 8004932:	f240 4344 	movw	r3, #1092	@ 0x444
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d107      	bne.n	800494c <HAL_TIM_PWM_Stop_IT+0xec>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800494a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10f      	bne.n	800497c <HAL_TIM_PWM_Stop_IT+0x11c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6a1a      	ldr	r2, [r3, #32]
 8004962:	f240 4344 	movw	r3, #1092	@ 0x444
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d107      	bne.n	800497c <HAL_TIM_PWM_Stop_IT+0x11c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d104      	bne.n	800498c <HAL_TIM_PWM_Stop_IT+0x12c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800498a:	e013      	b.n	80049b4 <HAL_TIM_PWM_Stop_IT+0x154>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b04      	cmp	r3, #4
 8004990:	d104      	bne.n	800499c <HAL_TIM_PWM_Stop_IT+0x13c>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800499a:	e00b      	b.n	80049b4 <HAL_TIM_PWM_Stop_IT+0x154>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d104      	bne.n	80049ac <HAL_TIM_PWM_Stop_IT+0x14c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049aa:	e003      	b.n	80049b4 <HAL_TIM_PWM_Stop_IT+0x154>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40010000 	.word	0x40010000

080049c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0202 	mvn.w	r2, #2
 80049f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 faa7 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa99 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fc f8f5 	bl	8000c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d020      	beq.n	8004a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01b      	beq.n	8004a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0204 	mvn.w	r2, #4
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa81 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa73 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc f8cf 	bl	8000c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d020      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01b      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0208 	mvn.w	r2, #8
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2204      	movs	r2, #4
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa5b 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa4d 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7fc f8a9 	bl	8000c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d020      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01b      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0210 	mvn.w	r2, #16
 8004adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa35 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004af8:	e005      	b.n	8004b06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa27 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fc f883 	bl	8000c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00c      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0201 	mvn.w	r2, #1
 8004b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fa05 	bl	8004f3a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d007      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fdfc 	bl	800574c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9ff 	bl	8004f76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0220 	mvn.w	r2, #32
 8004b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fdce 	bl	8005738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e0ae      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b0c      	cmp	r3, #12
 8004bce:	f200 809f 	bhi.w	8004d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004c0d 	.word	0x08004c0d
 8004bdc:	08004d11 	.word	0x08004d11
 8004be0:	08004d11 	.word	0x08004d11
 8004be4:	08004d11 	.word	0x08004d11
 8004be8:	08004c4d 	.word	0x08004c4d
 8004bec:	08004d11 	.word	0x08004d11
 8004bf0:	08004d11 	.word	0x08004d11
 8004bf4:	08004d11 	.word	0x08004d11
 8004bf8:	08004c8f 	.word	0x08004c8f
 8004bfc:	08004d11 	.word	0x08004d11
 8004c00:	08004d11 	.word	0x08004d11
 8004c04:	08004d11 	.word	0x08004d11
 8004c08:	08004ccf 	.word	0x08004ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fa46 	bl	80050a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0208 	orr.w	r2, r2, #8
 8004c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0204 	bic.w	r2, r2, #4
 8004c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6999      	ldr	r1, [r3, #24]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	619a      	str	r2, [r3, #24]
      break;
 8004c4a:	e064      	b.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fa8c 	bl	8005170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6999      	ldr	r1, [r3, #24]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	021a      	lsls	r2, r3, #8
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	619a      	str	r2, [r3, #24]
      break;
 8004c8c:	e043      	b.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fad7 	bl	8005248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0208 	orr.w	r2, r2, #8
 8004ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0204 	bic.w	r2, r2, #4
 8004cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69d9      	ldr	r1, [r3, #28]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	61da      	str	r2, [r3, #28]
      break;
 8004ccc:	e023      	b.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fb21 	bl	800531c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69d9      	ldr	r1, [r3, #28]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	021a      	lsls	r2, r3, #8
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	61da      	str	r2, [r3, #28]
      break;
 8004d0e:	e002      	b.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	75fb      	strb	r3, [r7, #23]
      break;
 8004d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIM_ConfigClockSource+0x1c>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e0b4      	b.n	8004eae <HAL_TIM_ConfigClockSource+0x186>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d7c:	d03e      	beq.n	8004dfc <HAL_TIM_ConfigClockSource+0xd4>
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d82:	f200 8087 	bhi.w	8004e94 <HAL_TIM_ConfigClockSource+0x16c>
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d8a:	f000 8086 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x172>
 8004d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d92:	d87f      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x16c>
 8004d94:	2b70      	cmp	r3, #112	@ 0x70
 8004d96:	d01a      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0xa6>
 8004d98:	2b70      	cmp	r3, #112	@ 0x70
 8004d9a:	d87b      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b60      	cmp	r3, #96	@ 0x60
 8004d9e:	d050      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x11a>
 8004da0:	2b60      	cmp	r3, #96	@ 0x60
 8004da2:	d877      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x16c>
 8004da4:	2b50      	cmp	r3, #80	@ 0x50
 8004da6:	d03c      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0xfa>
 8004da8:	2b50      	cmp	r3, #80	@ 0x50
 8004daa:	d873      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x16c>
 8004dac:	2b40      	cmp	r3, #64	@ 0x40
 8004dae:	d058      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x13a>
 8004db0:	2b40      	cmp	r3, #64	@ 0x40
 8004db2:	d86f      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x16c>
 8004db4:	2b30      	cmp	r3, #48	@ 0x30
 8004db6:	d064      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x15a>
 8004db8:	2b30      	cmp	r3, #48	@ 0x30
 8004dba:	d86b      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x16c>
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d060      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x15a>
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d867      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d05c      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x15a>
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d05a      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x15a>
 8004dcc:	e062      	b.n	8004e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dde:	f000 fbf8 	bl	80055d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	609a      	str	r2, [r3, #8]
      break;
 8004dfa:	e04f      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e0c:	f000 fbe1 	bl	80055d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e1e:	609a      	str	r2, [r3, #8]
      break;
 8004e20:	e03c      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f000 fb55 	bl	80054de <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2150      	movs	r1, #80	@ 0x50
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fbae 	bl	800559c <TIM_ITRx_SetConfig>
      break;
 8004e40:	e02c      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f000 fb74 	bl	800553c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2160      	movs	r1, #96	@ 0x60
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fb9e 	bl	800559c <TIM_ITRx_SetConfig>
      break;
 8004e60:	e01c      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f000 fb35 	bl	80054de <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2140      	movs	r1, #64	@ 0x40
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fb8e 	bl	800559c <TIM_ITRx_SetConfig>
      break;
 8004e80:	e00c      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	f000 fb85 	bl	800559c <TIM_ITRx_SetConfig>
      break;
 8004e92:	e003      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
      break;
 8004e98:	e000      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_SlaveConfigSynchro+0x18>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e031      	b.n	8004f32 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004ede:	6839      	ldr	r1, [r7, #0]
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fa6b 	bl	80053bc <TIM_SlaveTimer_SetConfig>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e018      	b.n	8004f32 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f1e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3a      	ldr	r2, [pc, #232]	@ (8005088 <TIM_Base_SetConfig+0xfc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00f      	beq.n	8004fc4 <TIM_Base_SetConfig+0x38>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004faa:	d00b      	beq.n	8004fc4 <TIM_Base_SetConfig+0x38>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a37      	ldr	r2, [pc, #220]	@ (800508c <TIM_Base_SetConfig+0x100>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d007      	beq.n	8004fc4 <TIM_Base_SetConfig+0x38>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a36      	ldr	r2, [pc, #216]	@ (8005090 <TIM_Base_SetConfig+0x104>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_Base_SetConfig+0x38>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a35      	ldr	r2, [pc, #212]	@ (8005094 <TIM_Base_SetConfig+0x108>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d108      	bne.n	8004fd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8005088 <TIM_Base_SetConfig+0xfc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01b      	beq.n	8005016 <TIM_Base_SetConfig+0x8a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe4:	d017      	beq.n	8005016 <TIM_Base_SetConfig+0x8a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a28      	ldr	r2, [pc, #160]	@ (800508c <TIM_Base_SetConfig+0x100>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <TIM_Base_SetConfig+0x8a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a27      	ldr	r2, [pc, #156]	@ (8005090 <TIM_Base_SetConfig+0x104>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00f      	beq.n	8005016 <TIM_Base_SetConfig+0x8a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a26      	ldr	r2, [pc, #152]	@ (8005094 <TIM_Base_SetConfig+0x108>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00b      	beq.n	8005016 <TIM_Base_SetConfig+0x8a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a25      	ldr	r2, [pc, #148]	@ (8005098 <TIM_Base_SetConfig+0x10c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d007      	beq.n	8005016 <TIM_Base_SetConfig+0x8a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a24      	ldr	r2, [pc, #144]	@ (800509c <TIM_Base_SetConfig+0x110>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_Base_SetConfig+0x8a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a23      	ldr	r2, [pc, #140]	@ (80050a0 <TIM_Base_SetConfig+0x114>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d108      	bne.n	8005028 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800501c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a0e      	ldr	r2, [pc, #56]	@ (8005088 <TIM_Base_SetConfig+0xfc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d103      	bne.n	800505c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d105      	bne.n	800507a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f023 0201 	bic.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	611a      	str	r2, [r3, #16]
  }
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40014000 	.word	0x40014000
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800

080050a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f023 0201 	bic.w	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 0302 	bic.w	r3, r3, #2
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a1c      	ldr	r2, [pc, #112]	@ (800516c <TIM_OC1_SetConfig+0xc8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10c      	bne.n	800511a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0308 	bic.w	r3, r3, #8
 8005106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a13      	ldr	r2, [pc, #76]	@ (800516c <TIM_OC1_SetConfig+0xc8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d111      	bne.n	8005146 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	621a      	str	r2, [r3, #32]
}
 8005160:	bf00      	nop
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40010000 	.word	0x40010000

08005170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f023 0210 	bic.w	r2, r3, #16
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0320 	bic.w	r3, r3, #32
 80051ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005244 <TIM_OC2_SetConfig+0xd4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d10d      	bne.n	80051ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a15      	ldr	r2, [pc, #84]	@ (8005244 <TIM_OC2_SetConfig+0xd4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d113      	bne.n	800521c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000

08005248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005318 <TIM_OC3_SetConfig+0xd0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d10d      	bne.n	80052c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a14      	ldr	r2, [pc, #80]	@ (8005318 <TIM_OC3_SetConfig+0xd0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d113      	bne.n	80052f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40010000 	.word	0x40010000

0800531c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	031b      	lsls	r3, r3, #12
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a10      	ldr	r2, [pc, #64]	@ (80053b8 <TIM_OC4_SetConfig+0x9c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d109      	bne.n	8005390 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	019b      	lsls	r3, r3, #6
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010000 	.word	0x40010000

080053bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b70      	cmp	r3, #112	@ 0x70
 8005404:	d01a      	beq.n	800543c <TIM_SlaveTimer_SetConfig+0x80>
 8005406:	2b70      	cmp	r3, #112	@ 0x70
 8005408:	d860      	bhi.n	80054cc <TIM_SlaveTimer_SetConfig+0x110>
 800540a:	2b60      	cmp	r3, #96	@ 0x60
 800540c:	d054      	beq.n	80054b8 <TIM_SlaveTimer_SetConfig+0xfc>
 800540e:	2b60      	cmp	r3, #96	@ 0x60
 8005410:	d85c      	bhi.n	80054cc <TIM_SlaveTimer_SetConfig+0x110>
 8005412:	2b50      	cmp	r3, #80	@ 0x50
 8005414:	d046      	beq.n	80054a4 <TIM_SlaveTimer_SetConfig+0xe8>
 8005416:	2b50      	cmp	r3, #80	@ 0x50
 8005418:	d858      	bhi.n	80054cc <TIM_SlaveTimer_SetConfig+0x110>
 800541a:	2b40      	cmp	r3, #64	@ 0x40
 800541c:	d019      	beq.n	8005452 <TIM_SlaveTimer_SetConfig+0x96>
 800541e:	2b40      	cmp	r3, #64	@ 0x40
 8005420:	d854      	bhi.n	80054cc <TIM_SlaveTimer_SetConfig+0x110>
 8005422:	2b30      	cmp	r3, #48	@ 0x30
 8005424:	d055      	beq.n	80054d2 <TIM_SlaveTimer_SetConfig+0x116>
 8005426:	2b30      	cmp	r3, #48	@ 0x30
 8005428:	d850      	bhi.n	80054cc <TIM_SlaveTimer_SetConfig+0x110>
 800542a:	2b20      	cmp	r3, #32
 800542c:	d051      	beq.n	80054d2 <TIM_SlaveTimer_SetConfig+0x116>
 800542e:	2b20      	cmp	r3, #32
 8005430:	d84c      	bhi.n	80054cc <TIM_SlaveTimer_SetConfig+0x110>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d04d      	beq.n	80054d2 <TIM_SlaveTimer_SetConfig+0x116>
 8005436:	2b10      	cmp	r3, #16
 8005438:	d04b      	beq.n	80054d2 <TIM_SlaveTimer_SetConfig+0x116>
 800543a:	e047      	b.n	80054cc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800544c:	f000 f8c1 	bl	80055d2 <TIM_ETR_SetConfig>
      break;
 8005450:	e040      	b.n	80054d4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b05      	cmp	r3, #5
 8005458:	d101      	bne.n	800545e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e03b      	b.n	80054d6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1a      	ldr	r2, [r3, #32]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005484:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	4313      	orrs	r3, r2
 8005490:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	621a      	str	r2, [r3, #32]
      break;
 80054a2:	e017      	b.n	80054d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b0:	461a      	mov	r2, r3
 80054b2:	f000 f814 	bl	80054de <TIM_TI1_ConfigInputStage>
      break;
 80054b6:	e00d      	b.n	80054d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054c4:	461a      	mov	r2, r3
 80054c6:	f000 f839 	bl	800553c <TIM_TI2_ConfigInputStage>
      break;
 80054ca:	e003      	b.n	80054d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	75fb      	strb	r3, [r7, #23]
      break;
 80054d0:	e000      	b.n	80054d4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80054d2:	bf00      	nop
  }

  return status;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054de:	b480      	push	{r7}
 80054e0:	b087      	sub	sp, #28
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f023 0201 	bic.w	r2, r3, #1
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005508:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 030a 	bic.w	r3, r3, #10
 800551a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	621a      	str	r2, [r3, #32]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0210 	bic.w	r2, r3, #16
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	031b      	lsls	r3, r3, #12
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005578:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	621a      	str	r2, [r3, #32]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f043 0307 	orr.w	r3, r3, #7
 80055be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	609a      	str	r2, [r3, #8]
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b087      	sub	sp, #28
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	021a      	lsls	r2, r3, #8
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	609a      	str	r2, [r3, #8]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005612:	b480      	push	{r7}
 8005614:	b087      	sub	sp, #28
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2201      	movs	r2, #1
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a1a      	ldr	r2, [r3, #32]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	43db      	mvns	r3, r3
 8005634:	401a      	ands	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	431a      	orrs	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005670:	2302      	movs	r3, #2
 8005672:	e050      	b.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c0:	d013      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a18      	ldr	r2, [pc, #96]	@ (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a16      	ldr	r2, [pc, #88]	@ (800572c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a15      	ldr	r2, [pc, #84]	@ (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a13      	ldr	r2, [pc, #76]	@ (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d10c      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40010000 	.word	0x40010000
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40014000 	.word	0x40014000

08005738 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005760:	b084      	sub	sp, #16
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	f107 001c 	add.w	r0, r7, #28
 800576e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005772:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005776:	2b01      	cmp	r3, #1
 8005778:	d123      	bne.n	80057c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800578e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d105      	bne.n	80057b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 fae2 	bl	8006d80 <USB_CoreReset>
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	e01b      	b.n	80057fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 fad6 	bl	8006d80 <USB_CoreReset>
 80057d4:	4603      	mov	r3, r0
 80057d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80057ec:	e005      	b.n	80057fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057fa:	7fbb      	ldrb	r3, [r7, #30]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d10b      	bne.n	8005818 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f043 0206 	orr.w	r2, r3, #6
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f043 0220 	orr.w	r2, r3, #32
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr

08005828 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d165      	bne.n	8005908 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4a41      	ldr	r2, [pc, #260]	@ (8005944 <USB_SetTurnaroundTime+0x11c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d906      	bls.n	8005852 <USB_SetTurnaroundTime+0x2a>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4a40      	ldr	r2, [pc, #256]	@ (8005948 <USB_SetTurnaroundTime+0x120>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d202      	bcs.n	8005852 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800584c:	230f      	movs	r3, #15
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e062      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4a3c      	ldr	r2, [pc, #240]	@ (8005948 <USB_SetTurnaroundTime+0x120>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d306      	bcc.n	8005868 <USB_SetTurnaroundTime+0x40>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4a3b      	ldr	r2, [pc, #236]	@ (800594c <USB_SetTurnaroundTime+0x124>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d202      	bcs.n	8005868 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005862:	230e      	movs	r3, #14
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e057      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4a38      	ldr	r2, [pc, #224]	@ (800594c <USB_SetTurnaroundTime+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d306      	bcc.n	800587e <USB_SetTurnaroundTime+0x56>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4a37      	ldr	r2, [pc, #220]	@ (8005950 <USB_SetTurnaroundTime+0x128>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d202      	bcs.n	800587e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005878:	230d      	movs	r3, #13
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e04c      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	4a33      	ldr	r2, [pc, #204]	@ (8005950 <USB_SetTurnaroundTime+0x128>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d306      	bcc.n	8005894 <USB_SetTurnaroundTime+0x6c>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4a32      	ldr	r2, [pc, #200]	@ (8005954 <USB_SetTurnaroundTime+0x12c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d802      	bhi.n	8005894 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800588e:	230c      	movs	r3, #12
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e041      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4a2f      	ldr	r2, [pc, #188]	@ (8005954 <USB_SetTurnaroundTime+0x12c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d906      	bls.n	80058aa <USB_SetTurnaroundTime+0x82>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4a2e      	ldr	r2, [pc, #184]	@ (8005958 <USB_SetTurnaroundTime+0x130>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d802      	bhi.n	80058aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80058a4:	230b      	movs	r3, #11
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e036      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005958 <USB_SetTurnaroundTime+0x130>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d906      	bls.n	80058c0 <USB_SetTurnaroundTime+0x98>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4a29      	ldr	r2, [pc, #164]	@ (800595c <USB_SetTurnaroundTime+0x134>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d802      	bhi.n	80058c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80058ba:	230a      	movs	r3, #10
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e02b      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4a26      	ldr	r2, [pc, #152]	@ (800595c <USB_SetTurnaroundTime+0x134>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d906      	bls.n	80058d6 <USB_SetTurnaroundTime+0xae>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4a25      	ldr	r2, [pc, #148]	@ (8005960 <USB_SetTurnaroundTime+0x138>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d202      	bcs.n	80058d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80058d0:	2309      	movs	r3, #9
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e020      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4a21      	ldr	r2, [pc, #132]	@ (8005960 <USB_SetTurnaroundTime+0x138>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d306      	bcc.n	80058ec <USB_SetTurnaroundTime+0xc4>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4a20      	ldr	r2, [pc, #128]	@ (8005964 <USB_SetTurnaroundTime+0x13c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d802      	bhi.n	80058ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80058e6:	2308      	movs	r3, #8
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e015      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005964 <USB_SetTurnaroundTime+0x13c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d906      	bls.n	8005902 <USB_SetTurnaroundTime+0xda>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005968 <USB_SetTurnaroundTime+0x140>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d202      	bcs.n	8005902 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058fc:	2307      	movs	r3, #7
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e00a      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005902:	2306      	movs	r3, #6
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e007      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800590e:	2309      	movs	r3, #9
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e001      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005914:	2309      	movs	r3, #9
 8005916:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	029b      	lsls	r3, r3, #10
 800592c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005930:	431a      	orrs	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	00d8acbf 	.word	0x00d8acbf
 8005948:	00e4e1c0 	.word	0x00e4e1c0
 800594c:	00f42400 	.word	0x00f42400
 8005950:	01067380 	.word	0x01067380
 8005954:	011a499f 	.word	0x011a499f
 8005958:	01312cff 	.word	0x01312cff
 800595c:	014ca43f 	.word	0x014ca43f
 8005960:	016e3600 	.word	0x016e3600
 8005964:	01a6ab1f 	.word	0x01a6ab1f
 8005968:	01e84800 	.word	0x01e84800

0800596c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f043 0201 	orr.w	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 0201 	bic.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d115      	bne.n	80059fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059de:	200a      	movs	r0, #10
 80059e0:	f7fb fbe8 	bl	80011b4 <HAL_Delay>
      ms += 10U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	330a      	adds	r3, #10
 80059e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 f939 	bl	8006c62 <USB_GetMode>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d01e      	beq.n	8005a34 <USB_SetCurrentMode+0x84>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80059fa:	d9f0      	bls.n	80059de <USB_SetCurrentMode+0x2e>
 80059fc:	e01a      	b.n	8005a34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d115      	bne.n	8005a30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a10:	200a      	movs	r0, #10
 8005a12:	f7fb fbcf 	bl	80011b4 <HAL_Delay>
      ms += 10U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	330a      	adds	r3, #10
 8005a1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 f920 	bl	8006c62 <USB_GetMode>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <USB_SetCurrentMode+0x84>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a2c:	d9f0      	bls.n	8005a10 <USB_SetCurrentMode+0x60>
 8005a2e:	e001      	b.n	8005a34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e005      	b.n	8005a40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a38:	d101      	bne.n	8005a3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a48:	b084      	sub	sp, #16
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b086      	sub	sp, #24
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	e009      	b.n	8005a7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3340      	adds	r3, #64	@ 0x40
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	2200      	movs	r2, #0
 8005a74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2b0e      	cmp	r3, #14
 8005a80:	d9f2      	bls.n	8005a68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11c      	bne.n	8005ac4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a98:	f043 0302 	orr.w	r3, r3, #2
 8005a9c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ac2:	e00b      	b.n	8005adc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ae8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d10d      	bne.n	8005b0c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005af0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005af8:	2100      	movs	r1, #0
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f968 	bl	8005dd0 <USB_SetDevSpeed>
 8005b00:	e008      	b.n	8005b14 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b02:	2101      	movs	r1, #1
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f963 	bl	8005dd0 <USB_SetDevSpeed>
 8005b0a:	e003      	b.n	8005b14 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b0c:	2103      	movs	r1, #3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f95e 	bl	8005dd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b14:	2110      	movs	r1, #16
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f8fa 	bl	8005d10 <USB_FlushTxFifo>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f924 	bl	8005d74 <USB_FlushRxFifo>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b54:	461a      	mov	r2, r3
 8005b56:	2300      	movs	r3, #0
 8005b58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	e043      	b.n	8005be8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b76:	d118      	bne.n	8005baa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e013      	b.n	8005bbc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	e008      	b.n	8005bbc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005be0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3301      	adds	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bec:	461a      	mov	r2, r3
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d3b5      	bcc.n	8005b60 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	e043      	b.n	8005c82 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c10:	d118      	bne.n	8005c44 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c24:	461a      	mov	r2, r3
 8005c26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	e013      	b.n	8005c56 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e008      	b.n	8005c56 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c50:	461a      	mov	r2, r3
 8005c52:	2300      	movs	r3, #0
 8005c54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c62:	461a      	mov	r2, r3
 8005c64:	2300      	movs	r3, #0
 8005c66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c74:	461a      	mov	r2, r3
 8005c76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c86:	461a      	mov	r2, r3
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d3b5      	bcc.n	8005bfa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ca0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005cae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f043 0210 	orr.w	r2, r3, #16
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	4b10      	ldr	r3, [pc, #64]	@ (8005d0c <USB_DevInit+0x2c4>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cd0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	f043 0208 	orr.w	r2, r3, #8
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ce4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d107      	bne.n	8005cfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cf4:	f043 0304 	orr.w	r3, r3, #4
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d08:	b004      	add	sp, #16
 8005d0a:	4770      	bx	lr
 8005d0c:	803c3800 	.word	0x803c3800

08005d10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d2a:	d901      	bls.n	8005d30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e01b      	b.n	8005d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	daf2      	bge.n	8005d1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	019b      	lsls	r3, r3, #6
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d54:	d901      	bls.n	8005d5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e006      	b.n	8005d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d0f0      	beq.n	8005d48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d8c:	d901      	bls.n	8005d92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e018      	b.n	8005dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	daf2      	bge.n	8005d80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2210      	movs	r2, #16
 8005da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005db0:	d901      	bls.n	8005db6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e006      	b.n	8005dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b10      	cmp	r3, #16
 8005dc0:	d0f0      	beq.n	8005da4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005df0:	4313      	orrs	r3, r2
 8005df2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b087      	sub	sp, #28
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 0306 	and.w	r3, r3, #6
 8005e1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e22:	2300      	movs	r3, #0
 8005e24:	75fb      	strb	r3, [r7, #23]
 8005e26:	e00a      	b.n	8005e3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d002      	beq.n	8005e34 <USB_GetDevSpeed+0x32>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b06      	cmp	r3, #6
 8005e32:	d102      	bne.n	8005e3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e34:	2302      	movs	r3, #2
 8005e36:	75fb      	strb	r3, [r7, #23]
 8005e38:	e001      	b.n	8005e3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e3a:	230f      	movs	r3, #15
 8005e3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	785b      	ldrb	r3, [r3, #1]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d13a      	bne.n	8005ede <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	2101      	movs	r1, #1
 8005e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	68f9      	ldr	r1, [r7, #12]
 8005e82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e86:	4313      	orrs	r3, r2
 8005e88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d155      	bne.n	8005f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	791b      	ldrb	r3, [r3, #4]
 8005eba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ebc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	059b      	lsls	r3, r3, #22
 8005ec2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	e036      	b.n	8005f4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee4:	69da      	ldr	r2, [r3, #28]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	2101      	movs	r1, #1
 8005ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef4:	041b      	lsls	r3, r3, #16
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005efc:	4313      	orrs	r3, r2
 8005efe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d11a      	bne.n	8005f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	791b      	ldrb	r3, [r3, #4]
 8005f30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f32:	430b      	orrs	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d161      	bne.n	800603c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f8e:	d11f      	bne.n	8005fd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005faa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	68f9      	ldr	r1, [r7, #12]
 8005fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	2101      	movs	r1, #1
 8006006:	fa01 f303 	lsl.w	r3, r1, r3
 800600a:	b29b      	uxth	r3, r3
 800600c:	43db      	mvns	r3, r3
 800600e:	68f9      	ldr	r1, [r7, #12]
 8006010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006014:	4013      	ands	r3, r2
 8006016:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	0159      	lsls	r1, r3, #5
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	440b      	add	r3, r1
 800602e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006032:	4619      	mov	r1, r3
 8006034:	4b35      	ldr	r3, [pc, #212]	@ (800610c <USB_DeactivateEndpoint+0x1b0>)
 8006036:	4013      	ands	r3, r2
 8006038:	600b      	str	r3, [r1, #0]
 800603a:	e060      	b.n	80060fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800604e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006052:	d11f      	bne.n	8006094 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800606e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006072:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	440a      	add	r2, r1
 800608a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800608e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006092:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800609a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	2101      	movs	r1, #1
 80060a6:	fa01 f303 	lsl.w	r3, r1, r3
 80060aa:	041b      	lsls	r3, r3, #16
 80060ac:	43db      	mvns	r3, r3
 80060ae:	68f9      	ldr	r1, [r7, #12]
 80060b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060b4:	4013      	ands	r3, r2
 80060b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060be:	69da      	ldr	r2, [r3, #28]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	2101      	movs	r1, #1
 80060ca:	fa01 f303 	lsl.w	r3, r1, r3
 80060ce:	041b      	lsls	r3, r3, #16
 80060d0:	43db      	mvns	r3, r3
 80060d2:	68f9      	ldr	r1, [r7, #12]
 80060d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060d8:	4013      	ands	r3, r2
 80060da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	0159      	lsls	r1, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	440b      	add	r3, r1
 80060f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f6:	4619      	mov	r1, r3
 80060f8:	4b05      	ldr	r3, [pc, #20]	@ (8006110 <USB_DeactivateEndpoint+0x1b4>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	ec337800 	.word	0xec337800
 8006110:	eff37800 	.word	0xeff37800

08006114 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08a      	sub	sp, #40	@ 0x28
 8006118:	af02      	add	r7, sp, #8
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b01      	cmp	r3, #1
 8006132:	f040 817a 	bne.w	800642a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d132      	bne.n	80061a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	0151      	lsls	r1, r2, #5
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	440a      	add	r2, r1
 8006154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006158:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800615c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006160:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800617c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006180:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800619c:	0cdb      	lsrs	r3, r3, #19
 800619e:	04db      	lsls	r3, r3, #19
 80061a0:	6113      	str	r3, [r2, #16]
 80061a2:	e092      	b.n	80062ca <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061be:	0cdb      	lsrs	r3, r3, #19
 80061c0:	04db      	lsls	r3, r3, #19
 80061c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d11a      	bne.n	8006224 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d903      	bls.n	8006202 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800621c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006220:	6113      	str	r3, [r2, #16]
 8006222:	e01b      	b.n	800625c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006230:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6919      	ldr	r1, [r3, #16]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	440b      	add	r3, r1
 800623c:	1e59      	subs	r1, r3, #1
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	fbb1 f3f3 	udiv	r3, r1, r3
 8006246:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006248:	4ba2      	ldr	r3, [pc, #648]	@ (80064d4 <USB_EPStartXfer+0x3c0>)
 800624a:	400b      	ands	r3, r1
 800624c:	69b9      	ldr	r1, [r7, #24]
 800624e:	0148      	lsls	r0, r1, #5
 8006250:	69f9      	ldr	r1, [r7, #28]
 8006252:	4401      	add	r1, r0
 8006254:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006258:	4313      	orrs	r3, r2
 800625a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006272:	69b9      	ldr	r1, [r7, #24]
 8006274:	0148      	lsls	r0, r1, #5
 8006276:	69f9      	ldr	r1, [r7, #28]
 8006278:	4401      	add	r1, r0
 800627a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800627e:	4313      	orrs	r3, r2
 8006280:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	791b      	ldrb	r3, [r3, #4]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d11f      	bne.n	80062ca <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062a4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80062a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d14b      	bne.n	8006368 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d009      	beq.n	80062ec <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e4:	461a      	mov	r2, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d128      	bne.n	8006346 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d110      	bne.n	8006326 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800631e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e00f      	b.n	8006346 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006344:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006360:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e165      	b.n	8006634 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006382:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006386:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	791b      	ldrb	r3, [r3, #4]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d015      	beq.n	80063bc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 814d 	beq.w	8006634 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	2101      	movs	r1, #1
 80063ac:	fa01 f303 	lsl.w	r3, r1, r3
 80063b0:	69f9      	ldr	r1, [r7, #28]
 80063b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063b6:	4313      	orrs	r3, r2
 80063b8:	634b      	str	r3, [r1, #52]	@ 0x34
 80063ba:	e13b      	b.n	8006634 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d110      	bne.n	80063ee <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e00f      	b.n	800640e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	440a      	add	r2, r1
 8006404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800640c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	68d9      	ldr	r1, [r3, #12]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	781a      	ldrb	r2, [r3, #0]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	b298      	uxth	r0, r3
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	4603      	mov	r3, r0
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f9b8 	bl	8006798 <USB_WritePacket>
 8006428:	e104      	b.n	8006634 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006444:	0cdb      	lsrs	r3, r3, #19
 8006446:	04db      	lsls	r3, r3, #19
 8006448:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006464:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006468:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800646c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d131      	bne.n	80064d8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a2:	69b9      	ldr	r1, [r7, #24]
 80064a4:	0148      	lsls	r0, r1, #5
 80064a6:	69f9      	ldr	r1, [r7, #28]
 80064a8:	4401      	add	r1, r0
 80064aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064ae:	4313      	orrs	r3, r2
 80064b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064d0:	6113      	str	r3, [r2, #16]
 80064d2:	e061      	b.n	8006598 <USB_EPStartXfer+0x484>
 80064d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d123      	bne.n	8006528 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f6:	69b9      	ldr	r1, [r7, #24]
 80064f8:	0148      	lsls	r0, r1, #5
 80064fa:	69f9      	ldr	r1, [r7, #28]
 80064fc:	4401      	add	r1, r0
 80064fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006502:	4313      	orrs	r3, r2
 8006504:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	440a      	add	r2, r1
 800651c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006520:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006524:	6113      	str	r3, [r2, #16]
 8006526:	e037      	b.n	8006598 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4413      	add	r3, r2
 8006532:	1e5a      	subs	r2, r3, #1
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	8afa      	ldrh	r2, [r7, #22]
 8006544:	fb03 f202 	mul.w	r2, r3, r2
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	8afb      	ldrh	r3, [r7, #22]
 800655c:	04d9      	lsls	r1, r3, #19
 800655e:	4b38      	ldr	r3, [pc, #224]	@ (8006640 <USB_EPStartXfer+0x52c>)
 8006560:	400b      	ands	r3, r1
 8006562:	69b9      	ldr	r1, [r7, #24]
 8006564:	0148      	lsls	r0, r1, #5
 8006566:	69f9      	ldr	r1, [r7, #28]
 8006568:	4401      	add	r1, r0
 800656a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800656e:	4313      	orrs	r3, r2
 8006570:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006588:	69b9      	ldr	r1, [r7, #24]
 800658a:	0148      	lsls	r0, r1, #5
 800658c:	69f9      	ldr	r1, [r7, #28]
 800658e:	4401      	add	r1, r0
 8006590:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006594:	4313      	orrs	r3, r2
 8006596:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d10d      	bne.n	80065ba <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	68d9      	ldr	r1, [r3, #12]
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b6:	460a      	mov	r2, r1
 80065b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	791b      	ldrb	r3, [r3, #4]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d128      	bne.n	8006614 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d110      	bne.n	80065f4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	e00f      	b.n	8006614 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	440a      	add	r2, r1
 800660a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800660e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006612:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800662e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006632:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	1ff80000 	.word	0x1ff80000

08006644 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d14a      	bne.n	80066f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800667a:	f040 8086 	bne.w	800678a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800669c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	7812      	ldrb	r2, [r2, #0]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d902      	bls.n	80066dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	75fb      	strb	r3, [r7, #23]
          break;
 80066da:	e056      	b.n	800678a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066f4:	d0e7      	beq.n	80066c6 <USB_EPStopXfer+0x82>
 80066f6:	e048      	b.n	800678a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800670c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006710:	d13b      	bne.n	800678a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	7812      	ldrb	r2, [r2, #0]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006730:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006734:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	7812      	ldrb	r2, [r2, #0]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006754:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006758:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3301      	adds	r3, #1
 800675e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006766:	4293      	cmp	r3, r2
 8006768:	d902      	bls.n	8006770 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	75fb      	strb	r3, [r7, #23]
          break;
 800676e:	e00c      	b.n	800678a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006788:	d0e7      	beq.n	800675a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
}
 800678c:	4618      	mov	r0, r3
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006798:	b480      	push	{r7}
 800679a:	b089      	sub	sp, #36	@ 0x24
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	4611      	mov	r1, r2
 80067a4:	461a      	mov	r2, r3
 80067a6:	460b      	mov	r3, r1
 80067a8:	71fb      	strb	r3, [r7, #7]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d123      	bne.n	8006806 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067be:	88bb      	ldrh	r3, [r7, #4]
 80067c0:	3303      	adds	r3, #3
 80067c2:	089b      	lsrs	r3, r3, #2
 80067c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067c6:	2300      	movs	r3, #0
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	e018      	b.n	80067fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	031a      	lsls	r2, r3, #12
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067d8:	461a      	mov	r2, r3
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	3301      	adds	r3, #1
 80067e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	3301      	adds	r3, #1
 80067ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	3301      	adds	r3, #1
 80067f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	3301      	adds	r3, #1
 80067f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	3301      	adds	r3, #1
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	429a      	cmp	r2, r3
 8006804:	d3e2      	bcc.n	80067cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3724      	adds	r7, #36	@ 0x24
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006814:	b480      	push	{r7}
 8006816:	b08b      	sub	sp, #44	@ 0x2c
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	089b      	lsrs	r3, r3, #2
 800682e:	b29b      	uxth	r3, r3
 8006830:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800683a:	2300      	movs	r3, #0
 800683c:	623b      	str	r3, [r7, #32]
 800683e:	e014      	b.n	800686a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684a:	601a      	str	r2, [r3, #0]
    pDest++;
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	3301      	adds	r3, #1
 8006850:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	3301      	adds	r3, #1
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	3301      	adds	r3, #1
 800685c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	3301      	adds	r3, #1
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	3301      	adds	r3, #1
 8006868:	623b      	str	r3, [r7, #32]
 800686a:	6a3a      	ldr	r2, [r7, #32]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	429a      	cmp	r2, r3
 8006870:	d3e6      	bcc.n	8006840 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006872:	8bfb      	ldrh	r3, [r7, #30]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01e      	beq.n	80068b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006882:	461a      	mov	r2, r3
 8006884:	f107 0310 	add.w	r3, r7, #16
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	fa22 f303 	lsr.w	r3, r2, r3
 8006898:	b2da      	uxtb	r2, r3
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	701a      	strb	r2, [r3, #0]
      i++;
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	3301      	adds	r3, #1
 80068a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	3301      	adds	r3, #1
 80068a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80068aa:	8bfb      	ldrh	r3, [r7, #30]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80068b0:	8bfb      	ldrh	r3, [r7, #30]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1ea      	bne.n	800688c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	372c      	adds	r7, #44	@ 0x2c
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d12c      	bne.n	800693a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	db12      	blt.n	8006918 <USB_EPSetStall+0x54>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00f      	beq.n	8006918 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	0151      	lsls	r1, r2, #5
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	440a      	add	r2, r1
 800690e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006916:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	e02b      	b.n	8006992 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	db12      	blt.n	8006972 <USB_EPSetStall+0xae>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00f      	beq.n	8006972 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800696c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006970:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800698c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006990:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	785b      	ldrb	r3, [r3, #1]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d128      	bne.n	8006a0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	791b      	ldrb	r3, [r3, #4]
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d003      	beq.n	80069ec <USB_EPClearStall+0x4c>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	791b      	ldrb	r3, [r3, #4]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d138      	bne.n	8006a5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	0151      	lsls	r1, r2, #5
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	440a      	add	r2, r1
 8006a02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	e027      	b.n	8006a5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	791b      	ldrb	r3, [r3, #4]
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d003      	beq.n	8006a3e <USB_EPClearStall+0x9e>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	791b      	ldrb	r3, [r3, #4]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d10f      	bne.n	8006a5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ae6:	f023 0302 	bic.w	r3, r3, #2
 8006aea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b14:	f023 0303 	bic.w	r3, r3, #3
 8006b18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b28:	f043 0302 	orr.w	r3, r3, #2
 8006b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4013      	ands	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b54:	68fb      	ldr	r3, [r7, #12]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	4013      	ands	r3, r2
 8006b84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	0c1b      	lsrs	r3, r3, #16
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	b29b      	uxth	r3, r3
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b087      	sub	sp, #28
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	fa22 f303 	lsr.w	r3, r2, r3
 8006c36:	01db      	lsls	r3, r3, #7
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4013      	ands	r3, r2
 8006c52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c54:	68bb      	ldr	r3, [r7, #8]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b085      	sub	sp, #20
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c9c:	f023 0307 	bic.w	r3, r3, #7
 8006ca0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	333c      	adds	r3, #60	@ 0x3c
 8006cda:	3304      	adds	r3, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	4a26      	ldr	r2, [pc, #152]	@ (8006d7c <USB_EP0_OutStart+0xb8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d90a      	bls.n	8006cfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cf8:	d101      	bne.n	8006cfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e037      	b.n	8006d6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d04:	461a      	mov	r2, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d2c:	f043 0318 	orr.w	r3, r3, #24
 8006d30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d40:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006d44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d46:	7afb      	ldrb	r3, [r7, #11]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d10f      	bne.n	8006d6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d66:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006d6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	4f54300a 	.word	0x4f54300a

08006d80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d98:	d901      	bls.n	8006d9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e01b      	b.n	8006dd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	daf2      	bge.n	8006d8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f043 0201 	orr.w	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3301      	adds	r3, #1
 8006dba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dc2:	d901      	bls.n	8006dc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e006      	b.n	8006dd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d0f0      	beq.n	8006db6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006df0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006df4:	f002 fc7e 	bl	80096f4 <USBD_static_malloc>
 8006df8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d109      	bne.n	8006e14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32b0      	adds	r2, #176	@ 0xb0
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e10:	2302      	movs	r3, #2
 8006e12:	e0d4      	b.n	8006fbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e14:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006e18:	2100      	movs	r1, #0
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f002 fcae 	bl	800977c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	32b0      	adds	r2, #176	@ 0xb0
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	32b0      	adds	r2, #176	@ 0xb0
 8006e3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	7c1b      	ldrb	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d138      	bne.n	8006ebe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8006fc8 <USBD_CDC_Init+0x1e4>)
 8006e4e:	7819      	ldrb	r1, [r3, #0]
 8006e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e54:	2202      	movs	r2, #2
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f002 fb29 	bl	80094ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8006fc8 <USBD_CDC_Init+0x1e4>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 020f 	and.w	r2, r3, #15
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	3324      	adds	r3, #36	@ 0x24
 8006e72:	2201      	movs	r2, #1
 8006e74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e76:	4b55      	ldr	r3, [pc, #340]	@ (8006fcc <USBD_CDC_Init+0x1e8>)
 8006e78:	7819      	ldrb	r1, [r3, #0]
 8006e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e7e:	2202      	movs	r2, #2
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f002 fb14 	bl	80094ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e86:	4b51      	ldr	r3, [pc, #324]	@ (8006fcc <USBD_CDC_Init+0x1e8>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f003 020f 	and.w	r2, r3, #15
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8006fd0 <USBD_CDC_Init+0x1ec>)
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	f003 020f 	and.w	r2, r3, #15
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	3326      	adds	r3, #38	@ 0x26
 8006eb8:	2210      	movs	r2, #16
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	e035      	b.n	8006f2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ebe:	4b42      	ldr	r3, [pc, #264]	@ (8006fc8 <USBD_CDC_Init+0x1e4>)
 8006ec0:	7819      	ldrb	r1, [r3, #0]
 8006ec2:	2340      	movs	r3, #64	@ 0x40
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f002 faf1 	bl	80094ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8006fc8 <USBD_CDC_Init+0x1e4>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3324      	adds	r3, #36	@ 0x24
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ee6:	4b39      	ldr	r3, [pc, #228]	@ (8006fcc <USBD_CDC_Init+0x1e8>)
 8006ee8:	7819      	ldrb	r1, [r3, #0]
 8006eea:	2340      	movs	r3, #64	@ 0x40
 8006eec:	2202      	movs	r2, #2
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f002 fadd 	bl	80094ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ef4:	4b35      	ldr	r3, [pc, #212]	@ (8006fcc <USBD_CDC_Init+0x1e8>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	f003 020f 	and.w	r2, r3, #15
 8006efc:	6879      	ldr	r1, [r7, #4]
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	440b      	add	r3, r1
 8006f08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f10:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd0 <USBD_CDC_Init+0x1ec>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	f003 020f 	and.w	r2, r3, #15
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	440b      	add	r3, r1
 8006f24:	3326      	adds	r3, #38	@ 0x26
 8006f26:	2210      	movs	r2, #16
 8006f28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f2a:	4b29      	ldr	r3, [pc, #164]	@ (8006fd0 <USBD_CDC_Init+0x1ec>)
 8006f2c:	7819      	ldrb	r1, [r3, #0]
 8006f2e:	2308      	movs	r3, #8
 8006f30:	2203      	movs	r2, #3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f002 fabb 	bl	80094ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f38:	4b25      	ldr	r3, [pc, #148]	@ (8006fd0 <USBD_CDC_Init+0x1ec>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	f003 020f 	and.w	r2, r3, #15
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	3324      	adds	r3, #36	@ 0x24
 8006f4e:	2201      	movs	r2, #1
 8006f50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	33b0      	adds	r3, #176	@ 0xb0
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e018      	b.n	8006fbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7c1b      	ldrb	r3, [r3, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f94:	4b0d      	ldr	r3, [pc, #52]	@ (8006fcc <USBD_CDC_Init+0x1e8>)
 8006f96:	7819      	ldrb	r1, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f002 fb72 	bl	800968c <USBD_LL_PrepareReceive>
 8006fa8:	e008      	b.n	8006fbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006faa:	4b08      	ldr	r3, [pc, #32]	@ (8006fcc <USBD_CDC_Init+0x1e8>)
 8006fac:	7819      	ldrb	r1, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006fb4:	2340      	movs	r3, #64	@ 0x40
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f002 fb68 	bl	800968c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000097 	.word	0x20000097
 8006fcc:	20000098 	.word	0x20000098
 8006fd0:	20000099 	.word	0x20000099

08006fd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80070cc <USBD_CDC_DeInit+0xf8>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f002 fa87 	bl	80094fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006fec:	4b37      	ldr	r3, [pc, #220]	@ (80070cc <USBD_CDC_DeInit+0xf8>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	f003 020f 	and.w	r2, r3, #15
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	440b      	add	r3, r1
 8007000:	3324      	adds	r3, #36	@ 0x24
 8007002:	2200      	movs	r2, #0
 8007004:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007006:	4b32      	ldr	r3, [pc, #200]	@ (80070d0 <USBD_CDC_DeInit+0xfc>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f002 fa74 	bl	80094fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007012:	4b2f      	ldr	r3, [pc, #188]	@ (80070d0 <USBD_CDC_DeInit+0xfc>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	f003 020f 	and.w	r2, r3, #15
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	4613      	mov	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800702a:	2200      	movs	r2, #0
 800702c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800702e:	4b29      	ldr	r3, [pc, #164]	@ (80070d4 <USBD_CDC_DeInit+0x100>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f002 fa60 	bl	80094fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800703a:	4b26      	ldr	r3, [pc, #152]	@ (80070d4 <USBD_CDC_DeInit+0x100>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	f003 020f 	and.w	r2, r3, #15
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	3324      	adds	r3, #36	@ 0x24
 8007050:	2200      	movs	r2, #0
 8007052:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007054:	4b1f      	ldr	r3, [pc, #124]	@ (80070d4 <USBD_CDC_DeInit+0x100>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f003 020f 	and.w	r2, r3, #15
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	3326      	adds	r3, #38	@ 0x26
 800706a:	2200      	movs	r2, #0
 800706c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	32b0      	adds	r2, #176	@ 0xb0
 8007078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01f      	beq.n	80070c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	33b0      	adds	r3, #176	@ 0xb0
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	32b0      	adds	r2, #176	@ 0xb0
 800709e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f002 fb34 	bl	8009710 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	32b0      	adds	r2, #176	@ 0xb0
 80070b2:	2100      	movs	r1, #0
 80070b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20000097 	.word	0x20000097
 80070d0:	20000098 	.word	0x20000098
 80070d4:	20000099 	.word	0x20000099

080070d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	32b0      	adds	r2, #176	@ 0xb0
 80070ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007104:	2303      	movs	r3, #3
 8007106:	e0bf      	b.n	8007288 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007110:	2b00      	cmp	r3, #0
 8007112:	d050      	beq.n	80071b6 <USBD_CDC_Setup+0xde>
 8007114:	2b20      	cmp	r3, #32
 8007116:	f040 80af 	bne.w	8007278 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	88db      	ldrh	r3, [r3, #6]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d03a      	beq.n	8007198 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b25b      	sxtb	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	da1b      	bge.n	8007164 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	33b0      	adds	r3, #176	@ 0xb0
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007142:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	88d2      	ldrh	r2, [r2, #6]
 8007148:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	88db      	ldrh	r3, [r3, #6]
 800714e:	2b07      	cmp	r3, #7
 8007150:	bf28      	it	cs
 8007152:	2307      	movcs	r3, #7
 8007154:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	89fa      	ldrh	r2, [r7, #14]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 fd87 	bl	8008c70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007162:	e090      	b.n	8007286 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	785a      	ldrb	r2, [r3, #1]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	88db      	ldrh	r3, [r3, #6]
 8007172:	2b3f      	cmp	r3, #63	@ 0x3f
 8007174:	d803      	bhi.n	800717e <USBD_CDC_Setup+0xa6>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88db      	ldrh	r3, [r3, #6]
 800717a:	b2da      	uxtb	r2, r3
 800717c:	e000      	b.n	8007180 <USBD_CDC_Setup+0xa8>
 800717e:	2240      	movs	r2, #64	@ 0x40
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007186:	6939      	ldr	r1, [r7, #16]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800718e:	461a      	mov	r2, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 fd99 	bl	8008cc8 <USBD_CtlPrepareRx>
      break;
 8007196:	e076      	b.n	8007286 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	33b0      	adds	r3, #176	@ 0xb0
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	7850      	ldrb	r0, [r2, #1]
 80071ae:	2200      	movs	r2, #0
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	4798      	blx	r3
      break;
 80071b4:	e067      	b.n	8007286 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b0b      	cmp	r3, #11
 80071bc:	d851      	bhi.n	8007262 <USBD_CDC_Setup+0x18a>
 80071be:	a201      	add	r2, pc, #4	@ (adr r2, 80071c4 <USBD_CDC_Setup+0xec>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071f5 	.word	0x080071f5
 80071c8:	08007271 	.word	0x08007271
 80071cc:	08007263 	.word	0x08007263
 80071d0:	08007263 	.word	0x08007263
 80071d4:	08007263 	.word	0x08007263
 80071d8:	08007263 	.word	0x08007263
 80071dc:	08007263 	.word	0x08007263
 80071e0:	08007263 	.word	0x08007263
 80071e4:	08007263 	.word	0x08007263
 80071e8:	08007263 	.word	0x08007263
 80071ec:	0800721f 	.word	0x0800721f
 80071f0:	08007249 	.word	0x08007249
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d107      	bne.n	8007210 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007200:	f107 030a 	add.w	r3, r7, #10
 8007204:	2202      	movs	r2, #2
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 fd31 	bl	8008c70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800720e:	e032      	b.n	8007276 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 fcbb 	bl	8008b8e <USBD_CtlError>
            ret = USBD_FAIL;
 8007218:	2303      	movs	r3, #3
 800721a:	75fb      	strb	r3, [r7, #23]
          break;
 800721c:	e02b      	b.n	8007276 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b03      	cmp	r3, #3
 8007228:	d107      	bne.n	800723a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800722a:	f107 030d 	add.w	r3, r7, #13
 800722e:	2201      	movs	r2, #1
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fd1c 	bl	8008c70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007238:	e01d      	b.n	8007276 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 fca6 	bl	8008b8e <USBD_CtlError>
            ret = USBD_FAIL;
 8007242:	2303      	movs	r3, #3
 8007244:	75fb      	strb	r3, [r7, #23]
          break;
 8007246:	e016      	b.n	8007276 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b03      	cmp	r3, #3
 8007252:	d00f      	beq.n	8007274 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 fc99 	bl	8008b8e <USBD_CtlError>
            ret = USBD_FAIL;
 800725c:	2303      	movs	r3, #3
 800725e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007260:	e008      	b.n	8007274 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 fc92 	bl	8008b8e <USBD_CtlError>
          ret = USBD_FAIL;
 800726a:	2303      	movs	r3, #3
 800726c:	75fb      	strb	r3, [r7, #23]
          break;
 800726e:	e002      	b.n	8007276 <USBD_CDC_Setup+0x19e>
          break;
 8007270:	bf00      	nop
 8007272:	e008      	b.n	8007286 <USBD_CDC_Setup+0x1ae>
          break;
 8007274:	bf00      	nop
      }
      break;
 8007276:	e006      	b.n	8007286 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 fc87 	bl	8008b8e <USBD_CtlError>
      ret = USBD_FAIL;
 8007280:	2303      	movs	r3, #3
 8007282:	75fb      	strb	r3, [r7, #23]
      break;
 8007284:	bf00      	nop
  }

  return (uint8_t)ret;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	32b0      	adds	r2, #176	@ 0xb0
 80072ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e065      	b.n	8007386 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	32b0      	adds	r2, #176	@ 0xb0
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	f003 020f 	and.w	r2, r3, #15
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	3318      	adds	r3, #24
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d02f      	beq.n	8007344 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	f003 020f 	and.w	r2, r3, #15
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	3318      	adds	r3, #24
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	f003 010f 	and.w	r1, r3, #15
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	460b      	mov	r3, r1
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	440b      	add	r3, r1
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4403      	add	r3, r0
 800730c:	331c      	adds	r3, #28
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	fbb2 f1f3 	udiv	r1, r2, r3
 8007314:	fb01 f303 	mul.w	r3, r1, r3
 8007318:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800731a:	2b00      	cmp	r3, #0
 800731c:	d112      	bne.n	8007344 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	f003 020f 	and.w	r2, r3, #15
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	3318      	adds	r3, #24
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007336:	78f9      	ldrb	r1, [r7, #3]
 8007338:	2300      	movs	r3, #0
 800733a:	2200      	movs	r2, #0
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f002 f984 	bl	800964a <USBD_LL_Transmit>
 8007342:	e01f      	b.n	8007384 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	33b0      	adds	r3, #176	@ 0xb0
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d010      	beq.n	8007384 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	33b0      	adds	r3, #176	@ 0xb0
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007380:	78fa      	ldrb	r2, [r7, #3]
 8007382:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	32b0      	adds	r2, #176	@ 0xb0
 80073a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	32b0      	adds	r2, #176	@ 0xb0
 80073b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073bc:	2303      	movs	r3, #3
 80073be:	e01a      	b.n	80073f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f002 f982 	bl	80096ce <USBD_LL_GetRxDataSize>
 80073ca:	4602      	mov	r2, r0
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	33b0      	adds	r3, #176	@ 0xb0
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80073f0:	4611      	mov	r1, r2
 80073f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	32b0      	adds	r2, #176	@ 0xb0
 8007410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007414:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800741c:	2303      	movs	r3, #3
 800741e:	e024      	b.n	800746a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	33b0      	adds	r3, #176	@ 0xb0
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d019      	beq.n	8007468 <USBD_CDC_EP0_RxReady+0x6a>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800743a:	2bff      	cmp	r3, #255	@ 0xff
 800743c:	d014      	beq.n	8007468 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	33b0      	adds	r3, #176	@ 0xb0
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007456:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800745e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	22ff      	movs	r2, #255	@ 0xff
 8007464:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800747c:	2182      	movs	r1, #130	@ 0x82
 800747e:	4818      	ldr	r0, [pc, #96]	@ (80074e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007480:	f000 fd4f 	bl	8007f22 <USBD_GetEpDesc>
 8007484:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007486:	2101      	movs	r1, #1
 8007488:	4815      	ldr	r0, [pc, #84]	@ (80074e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800748a:	f000 fd4a 	bl	8007f22 <USBD_GetEpDesc>
 800748e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007490:	2181      	movs	r1, #129	@ 0x81
 8007492:	4813      	ldr	r0, [pc, #76]	@ (80074e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007494:	f000 fd45 	bl	8007f22 <USBD_GetEpDesc>
 8007498:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2210      	movs	r2, #16
 80074a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d006      	beq.n	80074ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074b4:	711a      	strb	r2, [r3, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d006      	beq.n	80074ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074c8:	711a      	strb	r2, [r3, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2243      	movs	r2, #67	@ 0x43
 80074d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074d4:	4b02      	ldr	r3, [pc, #8]	@ (80074e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000054 	.word	0x20000054

080074e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074ec:	2182      	movs	r1, #130	@ 0x82
 80074ee:	4818      	ldr	r0, [pc, #96]	@ (8007550 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074f0:	f000 fd17 	bl	8007f22 <USBD_GetEpDesc>
 80074f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074f6:	2101      	movs	r1, #1
 80074f8:	4815      	ldr	r0, [pc, #84]	@ (8007550 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074fa:	f000 fd12 	bl	8007f22 <USBD_GetEpDesc>
 80074fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007500:	2181      	movs	r1, #129	@ 0x81
 8007502:	4813      	ldr	r0, [pc, #76]	@ (8007550 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007504:	f000 fd0d 	bl	8007f22 <USBD_GetEpDesc>
 8007508:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	2210      	movs	r2, #16
 8007514:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d006      	beq.n	800752a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2200      	movs	r2, #0
 8007520:	711a      	strb	r2, [r3, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f042 0202 	orr.w	r2, r2, #2
 8007528:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	711a      	strb	r2, [r3, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f042 0202 	orr.w	r2, r2, #2
 800753c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2243      	movs	r2, #67	@ 0x43
 8007542:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007544:	4b02      	ldr	r3, [pc, #8]	@ (8007550 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20000054 	.word	0x20000054

08007554 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800755c:	2182      	movs	r1, #130	@ 0x82
 800755e:	4818      	ldr	r0, [pc, #96]	@ (80075c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007560:	f000 fcdf 	bl	8007f22 <USBD_GetEpDesc>
 8007564:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007566:	2101      	movs	r1, #1
 8007568:	4815      	ldr	r0, [pc, #84]	@ (80075c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800756a:	f000 fcda 	bl	8007f22 <USBD_GetEpDesc>
 800756e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007570:	2181      	movs	r1, #129	@ 0x81
 8007572:	4813      	ldr	r0, [pc, #76]	@ (80075c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007574:	f000 fcd5 	bl	8007f22 <USBD_GetEpDesc>
 8007578:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2210      	movs	r2, #16
 8007584:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d006      	beq.n	800759a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2200      	movs	r2, #0
 8007590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007594:	711a      	strb	r2, [r3, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d006      	beq.n	80075ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075a8:	711a      	strb	r2, [r3, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2243      	movs	r2, #67	@ 0x43
 80075b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075b4:	4b02      	ldr	r3, [pc, #8]	@ (80075c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000054 	.word	0x20000054

080075c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	220a      	movs	r2, #10
 80075d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075d2:	4b03      	ldr	r3, [pc, #12]	@ (80075e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	20000010 	.word	0x20000010

080075e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e009      	b.n	800760c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	33b0      	adds	r3, #176	@ 0xb0
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	32b0      	adds	r2, #176	@ 0xb0
 800762e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007632:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800763a:	2303      	movs	r3, #3
 800763c:	e008      	b.n	8007650 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	371c      	adds	r7, #28
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	32b0      	adds	r2, #176	@ 0xb0
 8007670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007674:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800767c:	2303      	movs	r3, #3
 800767e:	e004      	b.n	800768a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32b0      	adds	r2, #176	@ 0xb0
 80076aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e025      	b.n	800770a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d11f      	bne.n	8007708 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80076d0:	4b10      	ldr	r3, [pc, #64]	@ (8007714 <USBD_CDC_TransmitPacket+0x7c>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	f003 020f 	and.w	r2, r3, #15
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	4613      	mov	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4403      	add	r3, r0
 80076ea:	3318      	adds	r3, #24
 80076ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80076ee:	4b09      	ldr	r3, [pc, #36]	@ (8007714 <USBD_CDC_TransmitPacket+0x7c>)
 80076f0:	7819      	ldrb	r1, [r3, #0]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 ffa3 	bl	800964a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20000097 	.word	0x20000097

08007718 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	32b0      	adds	r2, #176	@ 0xb0
 800772a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	32b0      	adds	r2, #176	@ 0xb0
 800773a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007742:	2303      	movs	r3, #3
 8007744:	e018      	b.n	8007778 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	7c1b      	ldrb	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800774e:	4b0c      	ldr	r3, [pc, #48]	@ (8007780 <USBD_CDC_ReceivePacket+0x68>)
 8007750:	7819      	ldrb	r1, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 ff95 	bl	800968c <USBD_LL_PrepareReceive>
 8007762:	e008      	b.n	8007776 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007764:	4b06      	ldr	r3, [pc, #24]	@ (8007780 <USBD_CDC_ReceivePacket+0x68>)
 8007766:	7819      	ldrb	r1, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800776e:	2340      	movs	r3, #64	@ 0x40
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 ff8b 	bl	800968c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	20000098 	.word	0x20000098

08007784 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e01f      	b.n	80077dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	79fa      	ldrb	r2, [r7, #7]
 80077ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f001 fe05 	bl	80093e0 <USBD_LL_Init>
 80077d6:	4603      	mov	r3, r0
 80077d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e025      	b.n	8007848 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32ae      	adds	r2, #174	@ 0xae
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00f      	beq.n	8007838 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32ae      	adds	r2, #174	@ 0xae
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007828:	f107 020e 	add.w	r2, r7, #14
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	4602      	mov	r2, r0
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 fe0d 	bl	8009478 <USBD_LL_Start>
 800785e:	4603      	mov	r3, r0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007870:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007872:	4618      	mov	r0, r3
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007894:	2b00      	cmp	r3, #0
 8007896:	d009      	beq.n	80078ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	78fa      	ldrb	r2, [r7, #3]
 80078a2:	4611      	mov	r1, r2
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
 80078a8:	4603      	mov	r3, r0
 80078aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	78fa      	ldrb	r2, [r7, #3]
 80078d0:	4611      	mov	r1, r2
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078dc:	2303      	movs	r3, #3
 80078de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 f90c 	bl	8008b1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	2b02      	cmp	r3, #2
 8007924:	d01a      	beq.n	800795c <USBD_LL_SetupStage+0x72>
 8007926:	2b02      	cmp	r3, #2
 8007928:	d822      	bhi.n	8007970 <USBD_LL_SetupStage+0x86>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <USBD_LL_SetupStage+0x4a>
 800792e:	2b01      	cmp	r3, #1
 8007930:	d00a      	beq.n	8007948 <USBD_LL_SetupStage+0x5e>
 8007932:	e01d      	b.n	8007970 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fb63 	bl	8008008 <USBD_StdDevReq>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	e020      	b.n	800798a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fbcb 	bl	80080ec <USBD_StdItfReq>
 8007956:	4603      	mov	r3, r0
 8007958:	73fb      	strb	r3, [r7, #15]
      break;
 800795a:	e016      	b.n	800798a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fc2d 	bl	80081c4 <USBD_StdEPReq>
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]
      break;
 800796e:	e00c      	b.n	800798a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007976:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800797a:	b2db      	uxtb	r3, r3
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 fdda 	bl	8009538 <USBD_LL_StallEP>
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]
      break;
 8007988:	bf00      	nop
  }

  return ret;
 800798a:	7bfb      	ldrb	r3, [r7, #15]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	460b      	mov	r3, r1
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d16e      	bne.n	8007a8a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80079b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	f040 8098 	bne.w	8007af0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d913      	bls.n	80079f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	1ad2      	subs	r2, r2, r3
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	68da      	ldr	r2, [r3, #12]
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	4293      	cmp	r3, r2
 80079e4:	bf28      	it	cs
 80079e6:	4613      	movcs	r3, r2
 80079e8:	461a      	mov	r2, r3
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f001 f988 	bl	8008d02 <USBD_CtlContinueRx>
 80079f2:	e07d      	b.n	8007af0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d014      	beq.n	8007a2c <USBD_LL_DataOutStage+0x98>
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d81d      	bhi.n	8007a42 <USBD_LL_DataOutStage+0xae>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <USBD_LL_DataOutStage+0x7c>
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d003      	beq.n	8007a16 <USBD_LL_DataOutStage+0x82>
 8007a0e:	e018      	b.n	8007a42 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	75bb      	strb	r3, [r7, #22]
            break;
 8007a14:	e018      	b.n	8007a48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	4619      	mov	r1, r3
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fa64 	bl	8007eee <USBD_CoreFindIF>
 8007a26:	4603      	mov	r3, r0
 8007a28:	75bb      	strb	r3, [r7, #22]
            break;
 8007a2a:	e00d      	b.n	8007a48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	4619      	mov	r1, r3
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fa66 	bl	8007f08 <USBD_CoreFindEP>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75bb      	strb	r3, [r7, #22]
            break;
 8007a40:	e002      	b.n	8007a48 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	75bb      	strb	r3, [r7, #22]
            break;
 8007a46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a48:	7dbb      	ldrb	r3, [r7, #22]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d119      	bne.n	8007a82 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d113      	bne.n	8007a82 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a5a:	7dba      	ldrb	r2, [r7, #22]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	32ae      	adds	r2, #174	@ 0xae
 8007a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00b      	beq.n	8007a82 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a6a:	7dba      	ldrb	r2, [r7, #22]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a72:	7dba      	ldrb	r2, [r7, #22]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	32ae      	adds	r2, #174	@ 0xae
 8007a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f001 f94e 	bl	8008d24 <USBD_CtlSendStatus>
 8007a88:	e032      	b.n	8007af0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	4619      	mov	r1, r3
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fa37 	bl	8007f08 <USBD_CoreFindEP>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a9e:	7dbb      	ldrb	r3, [r7, #22]
 8007aa0:	2bff      	cmp	r3, #255	@ 0xff
 8007aa2:	d025      	beq.n	8007af0 <USBD_LL_DataOutStage+0x15c>
 8007aa4:	7dbb      	ldrb	r3, [r7, #22]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d122      	bne.n	8007af0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d117      	bne.n	8007ae6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ab6:	7dba      	ldrb	r2, [r7, #22]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	32ae      	adds	r2, #174	@ 0xae
 8007abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00f      	beq.n	8007ae6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ac6:	7dba      	ldrb	r2, [r7, #22]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ace:	7dba      	ldrb	r2, [r7, #22]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	32ae      	adds	r2, #174	@ 0xae
 8007ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	7afa      	ldrb	r2, [r7, #11]
 8007adc:	4611      	mov	r1, r2
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	4798      	blx	r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	e000      	b.n	8007af2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b086      	sub	sp, #24
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	460b      	mov	r3, r1
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d16f      	bne.n	8007bee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3314      	adds	r3, #20
 8007b12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d15a      	bne.n	8007bd4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d914      	bls.n	8007b54 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f001 f8b0 	bl	8008ca6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b46:	2300      	movs	r3, #0
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f001 fd9d 	bl	800968c <USBD_LL_PrepareReceive>
 8007b52:	e03f      	b.n	8007bd4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d11c      	bne.n	8007b9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d316      	bcc.n	8007b9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d20f      	bcs.n	8007b9a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f001 f891 	bl	8008ca6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2100      	movs	r1, #0
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f001 fd7a 	bl	800968c <USBD_LL_PrepareReceive>
 8007b98:	e01c      	b.n	8007bd4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d10f      	bne.n	8007bc6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bc6:	2180      	movs	r1, #128	@ 0x80
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f001 fcb5 	bl	8009538 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f001 f8bb 	bl	8008d4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d03a      	beq.n	8007c54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7ff fe42 	bl	8007868 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007bec:	e032      	b.n	8007c54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f985 	bl	8007f08 <USBD_CoreFindEP>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	2bff      	cmp	r3, #255	@ 0xff
 8007c06:	d025      	beq.n	8007c54 <USBD_LL_DataInStage+0x15a>
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d122      	bne.n	8007c54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d11c      	bne.n	8007c54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c1a:	7dfa      	ldrb	r2, [r7, #23]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	32ae      	adds	r2, #174	@ 0xae
 8007c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d014      	beq.n	8007c54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c2a:	7dfa      	ldrb	r2, [r7, #23]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c32:	7dfa      	ldrb	r2, [r7, #23]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	32ae      	adds	r2, #174	@ 0xae
 8007c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	7afa      	ldrb	r2, [r7, #11]
 8007c40:	4611      	mov	r1, r2
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	4798      	blx	r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c4a:	7dbb      	ldrb	r3, [r7, #22]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c50:	7dbb      	ldrb	r3, [r7, #22]
 8007c52:	e000      	b.n	8007c56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d014      	beq.n	8007cc4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00e      	beq.n	8007cc4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6852      	ldr	r2, [r2, #4]
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cc4:	2340      	movs	r3, #64	@ 0x40
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 fbef 	bl	80094ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2240      	movs	r2, #64	@ 0x40
 8007cdc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ce0:	2340      	movs	r3, #64	@ 0x40
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2180      	movs	r1, #128	@ 0x80
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fbe1 	bl	80094ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2240      	movs	r2, #64	@ 0x40
 8007cf6:	621a      	str	r2, [r3, #32]

  return ret;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	78fa      	ldrb	r2, [r7, #3]
 8007d12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d006      	beq.n	8007d44 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2204      	movs	r2, #4
 8007d48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d106      	bne.n	8007d7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d110      	bne.n	8007dc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	32ae      	adds	r2, #174	@ 0xae
 8007de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e01c      	b.n	8007e26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d115      	bne.n	8007e24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	32ae      	adds	r2, #174	@ 0xae
 8007e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	32ae      	adds	r2, #174	@ 0xae
 8007e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	78fa      	ldrb	r2, [r7, #3]
 8007e1e:	4611      	mov	r1, r2
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	32ae      	adds	r2, #174	@ 0xae
 8007e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e01c      	b.n	8007e8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d115      	bne.n	8007e88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	32ae      	adds	r2, #174	@ 0xae
 8007e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	32ae      	adds	r2, #174	@ 0xae
 8007e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e80:	78fa      	ldrb	r2, [r7, #3]
 8007e82:	4611      	mov	r1, r2
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00e      	beq.n	8007ee4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6852      	ldr	r2, [r2, #4]
 8007ed2:	b2d2      	uxtb	r2, r2
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007efa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b086      	sub	sp, #24
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	885b      	ldrh	r3, [r3, #2]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	7812      	ldrb	r2, [r2, #0]
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d91f      	bls.n	8007f88 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f4e:	e013      	b.n	8007f78 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f50:	f107 030a 	add.w	r3, r7, #10
 8007f54:	4619      	mov	r1, r3
 8007f56:	6978      	ldr	r0, [r7, #20]
 8007f58:	f000 f81b 	bl	8007f92 <USBD_GetNextDesc>
 8007f5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	2b05      	cmp	r3, #5
 8007f64:	d108      	bne.n	8007f78 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	789b      	ldrb	r3, [r3, #2]
 8007f6e:	78fa      	ldrb	r2, [r7, #3]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d008      	beq.n	8007f86 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	885b      	ldrh	r3, [r3, #2]
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	897b      	ldrh	r3, [r7, #10]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d8e5      	bhi.n	8007f50 <USBD_GetEpDesc+0x2e>
 8007f84:	e000      	b.n	8007f88 <USBD_GetEpDesc+0x66>
          break;
 8007f86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f88:	693b      	ldr	r3, [r7, #16]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	7812      	ldrb	r2, [r2, #0]
 8007fa8:	4413      	add	r3, r2
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4413      	add	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b087      	sub	sp, #28
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fe8:	8a3b      	ldrh	r3, [r7, #16]
 8007fea:	021b      	lsls	r3, r3, #8
 8007fec:	b21a      	sxth	r2, r3
 8007fee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	b21b      	sxth	r3, r3
 8007ff6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ff8:	89fb      	ldrh	r3, [r7, #14]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800801e:	2b40      	cmp	r3, #64	@ 0x40
 8008020:	d005      	beq.n	800802e <USBD_StdDevReq+0x26>
 8008022:	2b40      	cmp	r3, #64	@ 0x40
 8008024:	d857      	bhi.n	80080d6 <USBD_StdDevReq+0xce>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00f      	beq.n	800804a <USBD_StdDevReq+0x42>
 800802a:	2b20      	cmp	r3, #32
 800802c:	d153      	bne.n	80080d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	32ae      	adds	r2, #174	@ 0xae
 8008038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]
      break;
 8008048:	e04a      	b.n	80080e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b09      	cmp	r3, #9
 8008050:	d83b      	bhi.n	80080ca <USBD_StdDevReq+0xc2>
 8008052:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <USBD_StdDevReq+0x50>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	080080ad 	.word	0x080080ad
 800805c:	080080c1 	.word	0x080080c1
 8008060:	080080cb 	.word	0x080080cb
 8008064:	080080b7 	.word	0x080080b7
 8008068:	080080cb 	.word	0x080080cb
 800806c:	0800808b 	.word	0x0800808b
 8008070:	08008081 	.word	0x08008081
 8008074:	080080cb 	.word	0x080080cb
 8008078:	080080a3 	.word	0x080080a3
 800807c:	08008095 	.word	0x08008095
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa3c 	bl	8008500 <USBD_GetDescriptor>
          break;
 8008088:	e024      	b.n	80080d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fba1 	bl	80087d4 <USBD_SetAddress>
          break;
 8008092:	e01f      	b.n	80080d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fbe0 	bl	800885c <USBD_SetConfig>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
          break;
 80080a0:	e018      	b.n	80080d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fc83 	bl	80089b0 <USBD_GetConfig>
          break;
 80080aa:	e013      	b.n	80080d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fcb4 	bl	8008a1c <USBD_GetStatus>
          break;
 80080b4:	e00e      	b.n	80080d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fce3 	bl	8008a84 <USBD_SetFeature>
          break;
 80080be:	e009      	b.n	80080d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fd07 	bl	8008ad6 <USBD_ClrFeature>
          break;
 80080c8:	e004      	b.n	80080d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fd5e 	bl	8008b8e <USBD_CtlError>
          break;
 80080d2:	bf00      	nop
      }
      break;
 80080d4:	e004      	b.n	80080e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fd58 	bl	8008b8e <USBD_CtlError>
      break;
 80080de:	bf00      	nop
  }

  return ret;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop

080080ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008102:	2b40      	cmp	r3, #64	@ 0x40
 8008104:	d005      	beq.n	8008112 <USBD_StdItfReq+0x26>
 8008106:	2b40      	cmp	r3, #64	@ 0x40
 8008108:	d852      	bhi.n	80081b0 <USBD_StdItfReq+0xc4>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <USBD_StdItfReq+0x26>
 800810e:	2b20      	cmp	r3, #32
 8008110:	d14e      	bne.n	80081b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008118:	b2db      	uxtb	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	2b02      	cmp	r3, #2
 800811e:	d840      	bhi.n	80081a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	889b      	ldrh	r3, [r3, #4]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b01      	cmp	r3, #1
 8008128:	d836      	bhi.n	8008198 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	889b      	ldrh	r3, [r3, #4]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff fedb 	bl	8007eee <USBD_CoreFindIF>
 8008138:	4603      	mov	r3, r0
 800813a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	2bff      	cmp	r3, #255	@ 0xff
 8008140:	d01d      	beq.n	800817e <USBD_StdItfReq+0x92>
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d11a      	bne.n	800817e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008148:	7bba      	ldrb	r2, [r7, #14]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	32ae      	adds	r2, #174	@ 0xae
 800814e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00f      	beq.n	8008178 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008158:	7bba      	ldrb	r2, [r7, #14]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008160:	7bba      	ldrb	r2, [r7, #14]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	32ae      	adds	r2, #174	@ 0xae
 8008166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008176:	e004      	b.n	8008182 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800817c:	e001      	b.n	8008182 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800817e:	2303      	movs	r3, #3
 8008180:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	88db      	ldrh	r3, [r3, #6]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d110      	bne.n	80081ac <USBD_StdItfReq+0xc0>
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10d      	bne.n	80081ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fdc7 	bl	8008d24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008196:	e009      	b.n	80081ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fcf7 	bl	8008b8e <USBD_CtlError>
          break;
 80081a0:	e004      	b.n	80081ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fcf2 	bl	8008b8e <USBD_CtlError>
          break;
 80081aa:	e000      	b.n	80081ae <USBD_StdItfReq+0xc2>
          break;
 80081ac:	bf00      	nop
      }
      break;
 80081ae:	e004      	b.n	80081ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fceb 	bl	8008b8e <USBD_CtlError>
      break;
 80081b8:	bf00      	nop
  }

  return ret;
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	889b      	ldrh	r3, [r3, #4]
 80081d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081e0:	2b40      	cmp	r3, #64	@ 0x40
 80081e2:	d007      	beq.n	80081f4 <USBD_StdEPReq+0x30>
 80081e4:	2b40      	cmp	r3, #64	@ 0x40
 80081e6:	f200 817f 	bhi.w	80084e8 <USBD_StdEPReq+0x324>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d02a      	beq.n	8008244 <USBD_StdEPReq+0x80>
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	f040 817a 	bne.w	80084e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff fe85 	bl	8007f08 <USBD_CoreFindEP>
 80081fe:	4603      	mov	r3, r0
 8008200:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008202:	7b7b      	ldrb	r3, [r7, #13]
 8008204:	2bff      	cmp	r3, #255	@ 0xff
 8008206:	f000 8174 	beq.w	80084f2 <USBD_StdEPReq+0x32e>
 800820a:	7b7b      	ldrb	r3, [r7, #13]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f040 8170 	bne.w	80084f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008212:	7b7a      	ldrb	r2, [r7, #13]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800821a:	7b7a      	ldrb	r2, [r7, #13]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	32ae      	adds	r2, #174	@ 0xae
 8008220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8163 	beq.w	80084f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800822c:	7b7a      	ldrb	r2, [r7, #13]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	32ae      	adds	r2, #174	@ 0xae
 8008232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	4798      	blx	r3
 800823e:	4603      	mov	r3, r0
 8008240:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008242:	e156      	b.n	80084f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	2b03      	cmp	r3, #3
 800824a:	d008      	beq.n	800825e <USBD_StdEPReq+0x9a>
 800824c:	2b03      	cmp	r3, #3
 800824e:	f300 8145 	bgt.w	80084dc <USBD_StdEPReq+0x318>
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 809b 	beq.w	800838e <USBD_StdEPReq+0x1ca>
 8008258:	2b01      	cmp	r3, #1
 800825a:	d03c      	beq.n	80082d6 <USBD_StdEPReq+0x112>
 800825c:	e13e      	b.n	80084dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d002      	beq.n	8008270 <USBD_StdEPReq+0xac>
 800826a:	2b03      	cmp	r3, #3
 800826c:	d016      	beq.n	800829c <USBD_StdEPReq+0xd8>
 800826e:	e02c      	b.n	80082ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00d      	beq.n	8008292 <USBD_StdEPReq+0xce>
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	2b80      	cmp	r3, #128	@ 0x80
 800827a:	d00a      	beq.n	8008292 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800827c:	7bbb      	ldrb	r3, [r7, #14]
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 f959 	bl	8009538 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008286:	2180      	movs	r1, #128	@ 0x80
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 f955 	bl	8009538 <USBD_LL_StallEP>
 800828e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008290:	e020      	b.n	80082d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fc7a 	bl	8008b8e <USBD_CtlError>
              break;
 800829a:	e01b      	b.n	80082d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	885b      	ldrh	r3, [r3, #2]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10e      	bne.n	80082c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00b      	beq.n	80082c2 <USBD_StdEPReq+0xfe>
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b80      	cmp	r3, #128	@ 0x80
 80082ae:	d008      	beq.n	80082c2 <USBD_StdEPReq+0xfe>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	88db      	ldrh	r3, [r3, #6]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d104      	bne.n	80082c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 f93b 	bl	8009538 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fd2e 	bl	8008d24 <USBD_CtlSendStatus>

              break;
 80082c8:	e004      	b.n	80082d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fc5e 	bl	8008b8e <USBD_CtlError>
              break;
 80082d2:	bf00      	nop
          }
          break;
 80082d4:	e107      	b.n	80084e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d002      	beq.n	80082e8 <USBD_StdEPReq+0x124>
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d016      	beq.n	8008314 <USBD_StdEPReq+0x150>
 80082e6:	e04b      	b.n	8008380 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00d      	beq.n	800830a <USBD_StdEPReq+0x146>
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b80      	cmp	r3, #128	@ 0x80
 80082f2:	d00a      	beq.n	800830a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f91d 	bl	8009538 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082fe:	2180      	movs	r1, #128	@ 0x80
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 f919 	bl	8009538 <USBD_LL_StallEP>
 8008306:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008308:	e040      	b.n	800838c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fc3e 	bl	8008b8e <USBD_CtlError>
              break;
 8008312:	e03b      	b.n	800838c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	885b      	ldrh	r3, [r3, #2]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d136      	bne.n	800838a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f001 f923 	bl	8009576 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fcf7 	bl	8008d24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff fde4 	bl	8007f08 <USBD_CoreFindEP>
 8008340:	4603      	mov	r3, r0
 8008342:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008344:	7b7b      	ldrb	r3, [r7, #13]
 8008346:	2bff      	cmp	r3, #255	@ 0xff
 8008348:	d01f      	beq.n	800838a <USBD_StdEPReq+0x1c6>
 800834a:	7b7b      	ldrb	r3, [r7, #13]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d11c      	bne.n	800838a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008350:	7b7a      	ldrb	r2, [r7, #13]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008358:	7b7a      	ldrb	r2, [r7, #13]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	32ae      	adds	r2, #174	@ 0xae
 800835e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d010      	beq.n	800838a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008368:	7b7a      	ldrb	r2, [r7, #13]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	32ae      	adds	r2, #174	@ 0xae
 800836e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
 800837a:	4603      	mov	r3, r0
 800837c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800837e:	e004      	b.n	800838a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fc03 	bl	8008b8e <USBD_CtlError>
              break;
 8008388:	e000      	b.n	800838c <USBD_StdEPReq+0x1c8>
              break;
 800838a:	bf00      	nop
          }
          break;
 800838c:	e0ab      	b.n	80084e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b02      	cmp	r3, #2
 8008398:	d002      	beq.n	80083a0 <USBD_StdEPReq+0x1dc>
 800839a:	2b03      	cmp	r3, #3
 800839c:	d032      	beq.n	8008404 <USBD_StdEPReq+0x240>
 800839e:	e097      	b.n	80084d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d007      	beq.n	80083b6 <USBD_StdEPReq+0x1f2>
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	2b80      	cmp	r3, #128	@ 0x80
 80083aa:	d004      	beq.n	80083b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fbed 	bl	8008b8e <USBD_CtlError>
                break;
 80083b4:	e091      	b.n	80084da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	da0b      	bge.n	80083d6 <USBD_StdEPReq+0x212>
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	3310      	adds	r3, #16
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	4413      	add	r3, r2
 80083d2:	3304      	adds	r3, #4
 80083d4:	e00b      	b.n	80083ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	4413      	add	r3, r2
 80083ec:	3304      	adds	r3, #4
 80083ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2202      	movs	r2, #2
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fc37 	bl	8008c70 <USBD_CtlSendData>
              break;
 8008402:	e06a      	b.n	80084da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008408:	2b00      	cmp	r3, #0
 800840a:	da11      	bge.n	8008430 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	f003 020f 	and.w	r2, r3, #15
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	4613      	mov	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	440b      	add	r3, r1
 800841e:	3324      	adds	r3, #36	@ 0x24
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d117      	bne.n	8008456 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fbb0 	bl	8008b8e <USBD_CtlError>
                  break;
 800842e:	e054      	b.n	80084da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	f003 020f 	and.w	r2, r3, #15
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d104      	bne.n	8008456 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fb9d 	bl	8008b8e <USBD_CtlError>
                  break;
 8008454:	e041      	b.n	80084da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800845a:	2b00      	cmp	r3, #0
 800845c:	da0b      	bge.n	8008476 <USBD_StdEPReq+0x2b2>
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	3310      	adds	r3, #16
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	3304      	adds	r3, #4
 8008474:	e00b      	b.n	800848e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	4413      	add	r3, r2
 800848c:	3304      	adds	r3, #4
 800848e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <USBD_StdEPReq+0x2d8>
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b80      	cmp	r3, #128	@ 0x80
 800849a:	d103      	bne.n	80084a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	e00e      	b.n	80084c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 f883 	bl	80095b4 <USBD_LL_IsStallEP>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2201      	movs	r2, #1
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	e002      	b.n	80084c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2202      	movs	r2, #2
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fbd1 	bl	8008c70 <USBD_CtlSendData>
              break;
 80084ce:	e004      	b.n	80084da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fb5b 	bl	8008b8e <USBD_CtlError>
              break;
 80084d8:	bf00      	nop
          }
          break;
 80084da:	e004      	b.n	80084e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fb55 	bl	8008b8e <USBD_CtlError>
          break;
 80084e4:	bf00      	nop
      }
      break;
 80084e6:	e005      	b.n	80084f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fb4f 	bl	8008b8e <USBD_CtlError>
      break;
 80084f0:	e000      	b.n	80084f4 <USBD_StdEPReq+0x330>
      break;
 80084f2:	bf00      	nop
  }

  return ret;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	885b      	ldrh	r3, [r3, #2]
 800851a:	0a1b      	lsrs	r3, r3, #8
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	2b06      	cmp	r3, #6
 8008522:	f200 8128 	bhi.w	8008776 <USBD_GetDescriptor+0x276>
 8008526:	a201      	add	r2, pc, #4	@ (adr r2, 800852c <USBD_GetDescriptor+0x2c>)
 8008528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852c:	08008549 	.word	0x08008549
 8008530:	08008561 	.word	0x08008561
 8008534:	080085a1 	.word	0x080085a1
 8008538:	08008777 	.word	0x08008777
 800853c:	08008777 	.word	0x08008777
 8008540:	08008717 	.word	0x08008717
 8008544:	08008743 	.word	0x08008743
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	7c12      	ldrb	r2, [r2, #16]
 8008554:	f107 0108 	add.w	r1, r7, #8
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	60f8      	str	r0, [r7, #12]
      break;
 800855e:	e112      	b.n	8008786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	7c1b      	ldrb	r3, [r3, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10d      	bne.n	8008584 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800856e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008570:	f107 0208 	add.w	r2, r7, #8
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3301      	adds	r3, #1
 800857e:	2202      	movs	r2, #2
 8008580:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008582:	e100      	b.n	8008786 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800858a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858c:	f107 0208 	add.w	r2, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3301      	adds	r3, #1
 800859a:	2202      	movs	r2, #2
 800859c:	701a      	strb	r2, [r3, #0]
      break;
 800859e:	e0f2      	b.n	8008786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	885b      	ldrh	r3, [r3, #2]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b05      	cmp	r3, #5
 80085a8:	f200 80ac 	bhi.w	8008704 <USBD_GetDescriptor+0x204>
 80085ac:	a201      	add	r2, pc, #4	@ (adr r2, 80085b4 <USBD_GetDescriptor+0xb4>)
 80085ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b2:	bf00      	nop
 80085b4:	080085cd 	.word	0x080085cd
 80085b8:	08008601 	.word	0x08008601
 80085bc:	08008635 	.word	0x08008635
 80085c0:	08008669 	.word	0x08008669
 80085c4:	0800869d 	.word	0x0800869d
 80085c8:	080086d1 	.word	0x080086d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	7c12      	ldrb	r2, [r2, #16]
 80085e4:	f107 0108 	add.w	r1, r7, #8
 80085e8:	4610      	mov	r0, r2
 80085ea:	4798      	blx	r3
 80085ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ee:	e091      	b.n	8008714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 facb 	bl	8008b8e <USBD_CtlError>
            err++;
 80085f8:	7afb      	ldrb	r3, [r7, #11]
 80085fa:	3301      	adds	r3, #1
 80085fc:	72fb      	strb	r3, [r7, #11]
          break;
 80085fe:	e089      	b.n	8008714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	7c12      	ldrb	r2, [r2, #16]
 8008618:	f107 0108 	add.w	r1, r7, #8
 800861c:	4610      	mov	r0, r2
 800861e:	4798      	blx	r3
 8008620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008622:	e077      	b.n	8008714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fab1 	bl	8008b8e <USBD_CtlError>
            err++;
 800862c:	7afb      	ldrb	r3, [r7, #11]
 800862e:	3301      	adds	r3, #1
 8008630:	72fb      	strb	r3, [r7, #11]
          break;
 8008632:	e06f      	b.n	8008714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00b      	beq.n	8008658 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	7c12      	ldrb	r2, [r2, #16]
 800864c:	f107 0108 	add.w	r1, r7, #8
 8008650:	4610      	mov	r0, r2
 8008652:	4798      	blx	r3
 8008654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008656:	e05d      	b.n	8008714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fa97 	bl	8008b8e <USBD_CtlError>
            err++;
 8008660:	7afb      	ldrb	r3, [r7, #11]
 8008662:	3301      	adds	r3, #1
 8008664:	72fb      	strb	r3, [r7, #11]
          break;
 8008666:	e055      	b.n	8008714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	7c12      	ldrb	r2, [r2, #16]
 8008680:	f107 0108 	add.w	r1, r7, #8
 8008684:	4610      	mov	r0, r2
 8008686:	4798      	blx	r3
 8008688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800868a:	e043      	b.n	8008714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa7d 	bl	8008b8e <USBD_CtlError>
            err++;
 8008694:	7afb      	ldrb	r3, [r7, #11]
 8008696:	3301      	adds	r3, #1
 8008698:	72fb      	strb	r3, [r7, #11]
          break;
 800869a:	e03b      	b.n	8008714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	7c12      	ldrb	r2, [r2, #16]
 80086b4:	f107 0108 	add.w	r1, r7, #8
 80086b8:	4610      	mov	r0, r2
 80086ba:	4798      	blx	r3
 80086bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086be:	e029      	b.n	8008714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa63 	bl	8008b8e <USBD_CtlError>
            err++;
 80086c8:	7afb      	ldrb	r3, [r7, #11]
 80086ca:	3301      	adds	r3, #1
 80086cc:	72fb      	strb	r3, [r7, #11]
          break;
 80086ce:	e021      	b.n	8008714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	7c12      	ldrb	r2, [r2, #16]
 80086e8:	f107 0108 	add.w	r1, r7, #8
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3
 80086f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086f2:	e00f      	b.n	8008714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fa49 	bl	8008b8e <USBD_CtlError>
            err++;
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	3301      	adds	r3, #1
 8008700:	72fb      	strb	r3, [r7, #11]
          break;
 8008702:	e007      	b.n	8008714 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fa41 	bl	8008b8e <USBD_CtlError>
          err++;
 800870c:	7afb      	ldrb	r3, [r7, #11]
 800870e:	3301      	adds	r3, #1
 8008710:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008712:	bf00      	nop
      }
      break;
 8008714:	e037      	b.n	8008786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	7c1b      	ldrb	r3, [r3, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d109      	bne.n	8008732 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008726:	f107 0208 	add.w	r2, r7, #8
 800872a:	4610      	mov	r0, r2
 800872c:	4798      	blx	r3
 800872e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008730:	e029      	b.n	8008786 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fa2a 	bl	8008b8e <USBD_CtlError>
        err++;
 800873a:	7afb      	ldrb	r3, [r7, #11]
 800873c:	3301      	adds	r3, #1
 800873e:	72fb      	strb	r3, [r7, #11]
      break;
 8008740:	e021      	b.n	8008786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	7c1b      	ldrb	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10d      	bne.n	8008766 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008752:	f107 0208 	add.w	r2, r7, #8
 8008756:	4610      	mov	r0, r2
 8008758:	4798      	blx	r3
 800875a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3301      	adds	r3, #1
 8008760:	2207      	movs	r2, #7
 8008762:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008764:	e00f      	b.n	8008786 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fa10 	bl	8008b8e <USBD_CtlError>
        err++;
 800876e:	7afb      	ldrb	r3, [r7, #11]
 8008770:	3301      	adds	r3, #1
 8008772:	72fb      	strb	r3, [r7, #11]
      break;
 8008774:	e007      	b.n	8008786 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fa08 	bl	8008b8e <USBD_CtlError>
      err++;
 800877e:	7afb      	ldrb	r3, [r7, #11]
 8008780:	3301      	adds	r3, #1
 8008782:	72fb      	strb	r3, [r7, #11]
      break;
 8008784:	bf00      	nop
  }

  if (err != 0U)
 8008786:	7afb      	ldrb	r3, [r7, #11]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d11e      	bne.n	80087ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	88db      	ldrh	r3, [r3, #6]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d016      	beq.n	80087c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008794:	893b      	ldrh	r3, [r7, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00e      	beq.n	80087b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	88da      	ldrh	r2, [r3, #6]
 800879e:	893b      	ldrh	r3, [r7, #8]
 80087a0:	4293      	cmp	r3, r2
 80087a2:	bf28      	it	cs
 80087a4:	4613      	movcs	r3, r2
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087aa:	893b      	ldrh	r3, [r7, #8]
 80087ac:	461a      	mov	r2, r3
 80087ae:	68f9      	ldr	r1, [r7, #12]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fa5d 	bl	8008c70 <USBD_CtlSendData>
 80087b6:	e009      	b.n	80087cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9e7 	bl	8008b8e <USBD_CtlError>
 80087c0:	e004      	b.n	80087cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 faae 	bl	8008d24 <USBD_CtlSendStatus>
 80087c8:	e000      	b.n	80087cc <USBD_GetDescriptor+0x2cc>
    return;
 80087ca:	bf00      	nop
  }
}
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop

080087d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	889b      	ldrh	r3, [r3, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d131      	bne.n	800884a <USBD_SetAddress+0x76>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	88db      	ldrh	r3, [r3, #6]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d12d      	bne.n	800884a <USBD_SetAddress+0x76>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	885b      	ldrh	r3, [r3, #2]
 80087f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80087f4:	d829      	bhi.n	800884a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	885b      	ldrh	r3, [r3, #2]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008800:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b03      	cmp	r3, #3
 800880c:	d104      	bne.n	8008818 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f9bc 	bl	8008b8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008816:	e01d      	b.n	8008854 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	7bfa      	ldrb	r2, [r7, #15]
 800881c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fef1 	bl	800960c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa7a 	bl	8008d24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2202      	movs	r2, #2
 800883a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883e:	e009      	b.n	8008854 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008848:	e004      	b.n	8008854 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f99e 	bl	8008b8e <USBD_CtlError>
  }
}
 8008852:	bf00      	nop
 8008854:	bf00      	nop
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	885b      	ldrh	r3, [r3, #2]
 800886e:	b2da      	uxtb	r2, r3
 8008870:	4b4e      	ldr	r3, [pc, #312]	@ (80089ac <USBD_SetConfig+0x150>)
 8008872:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008874:	4b4d      	ldr	r3, [pc, #308]	@ (80089ac <USBD_SetConfig+0x150>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d905      	bls.n	8008888 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f985 	bl	8008b8e <USBD_CtlError>
    return USBD_FAIL;
 8008884:	2303      	movs	r3, #3
 8008886:	e08c      	b.n	80089a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b02      	cmp	r3, #2
 8008892:	d002      	beq.n	800889a <USBD_SetConfig+0x3e>
 8008894:	2b03      	cmp	r3, #3
 8008896:	d029      	beq.n	80088ec <USBD_SetConfig+0x90>
 8008898:	e075      	b.n	8008986 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800889a:	4b44      	ldr	r3, [pc, #272]	@ (80089ac <USBD_SetConfig+0x150>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d020      	beq.n	80088e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80088a2:	4b42      	ldr	r3, [pc, #264]	@ (80089ac <USBD_SetConfig+0x150>)
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088ac:	4b3f      	ldr	r3, [pc, #252]	@ (80089ac <USBD_SetConfig+0x150>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fe ffe3 	bl	800787e <USBD_SetClassConfig>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d008      	beq.n	80088d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f962 	bl	8008b8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2202      	movs	r2, #2
 80088ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088d2:	e065      	b.n	80089a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fa25 	bl	8008d24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2203      	movs	r2, #3
 80088de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80088e2:	e05d      	b.n	80089a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fa1d 	bl	8008d24 <USBD_CtlSendStatus>
      break;
 80088ea:	e059      	b.n	80089a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088ec:	4b2f      	ldr	r3, [pc, #188]	@ (80089ac <USBD_SetConfig+0x150>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d112      	bne.n	800891a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80088fc:	4b2b      	ldr	r3, [pc, #172]	@ (80089ac <USBD_SetConfig+0x150>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008906:	4b29      	ldr	r3, [pc, #164]	@ (80089ac <USBD_SetConfig+0x150>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7fe ffd2 	bl	80078b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa06 	bl	8008d24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008918:	e042      	b.n	80089a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800891a:	4b24      	ldr	r3, [pc, #144]	@ (80089ac <USBD_SetConfig+0x150>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	429a      	cmp	r2, r3
 8008926:	d02a      	beq.n	800897e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7fe ffc0 	bl	80078b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008936:	4b1d      	ldr	r3, [pc, #116]	@ (80089ac <USBD_SetConfig+0x150>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008940:	4b1a      	ldr	r3, [pc, #104]	@ (80089ac <USBD_SetConfig+0x150>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7fe ff99 	bl	800787e <USBD_SetClassConfig>
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00f      	beq.n	8008976 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f918 	bl	8008b8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7fe ffa5 	bl	80078b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008974:	e014      	b.n	80089a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f9d4 	bl	8008d24 <USBD_CtlSendStatus>
      break;
 800897c:	e010      	b.n	80089a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f9d0 	bl	8008d24 <USBD_CtlSendStatus>
      break;
 8008984:	e00c      	b.n	80089a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f900 	bl	8008b8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800898e:	4b07      	ldr	r3, [pc, #28]	@ (80089ac <USBD_SetConfig+0x150>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7fe ff8e 	bl	80078b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800899a:	2303      	movs	r3, #3
 800899c:	73fb      	strb	r3, [r7, #15]
      break;
 800899e:	bf00      	nop
  }

  return ret;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	200031d0 	.word	0x200031d0

080089b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	88db      	ldrh	r3, [r3, #6]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d004      	beq.n	80089cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f8e2 	bl	8008b8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089ca:	e023      	b.n	8008a14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	dc02      	bgt.n	80089de <USBD_GetConfig+0x2e>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	dc03      	bgt.n	80089e4 <USBD_GetConfig+0x34>
 80089dc:	e015      	b.n	8008a0a <USBD_GetConfig+0x5a>
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d00b      	beq.n	80089fa <USBD_GetConfig+0x4a>
 80089e2:	e012      	b.n	8008a0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3308      	adds	r3, #8
 80089ee:	2201      	movs	r2, #1
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f93c 	bl	8008c70 <USBD_CtlSendData>
        break;
 80089f8:	e00c      	b.n	8008a14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3304      	adds	r3, #4
 80089fe:	2201      	movs	r2, #1
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f934 	bl	8008c70 <USBD_CtlSendData>
        break;
 8008a08:	e004      	b.n	8008a14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f8be 	bl	8008b8e <USBD_CtlError>
        break;
 8008a12:	bf00      	nop
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d81e      	bhi.n	8008a72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	88db      	ldrh	r3, [r3, #6]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d004      	beq.n	8008a46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f8a5 	bl	8008b8e <USBD_CtlError>
        break;
 8008a44:	e01a      	b.n	8008a7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f043 0202 	orr.w	r2, r3, #2
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	330c      	adds	r3, #12
 8008a66:	2202      	movs	r2, #2
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f900 	bl	8008c70 <USBD_CtlSendData>
      break;
 8008a70:	e004      	b.n	8008a7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f88a 	bl	8008b8e <USBD_CtlError>
      break;
 8008a7a:	bf00      	nop
  }
}
 8008a7c:	bf00      	nop
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	885b      	ldrh	r3, [r3, #2]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d107      	bne.n	8008aa6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f940 	bl	8008d24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008aa4:	e013      	b.n	8008ace <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d10b      	bne.n	8008ac6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	889b      	ldrh	r3, [r3, #4]
 8008ab2:	0a1b      	lsrs	r3, r3, #8
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f930 	bl	8008d24 <USBD_CtlSendStatus>
}
 8008ac4:	e003      	b.n	8008ace <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f860 	bl	8008b8e <USBD_CtlError>
}
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d80b      	bhi.n	8008b06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	885b      	ldrh	r3, [r3, #2]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d10c      	bne.n	8008b10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f910 	bl	8008d24 <USBD_CtlSendStatus>
      }
      break;
 8008b04:	e004      	b.n	8008b10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f840 	bl	8008b8e <USBD_CtlError>
      break;
 8008b0e:	e000      	b.n	8008b12 <USBD_ClrFeature+0x3c>
      break;
 8008b10:	bf00      	nop
  }
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3301      	adds	r3, #1
 8008b34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	781a      	ldrb	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3301      	adds	r3, #1
 8008b42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f7ff fa40 	bl	8007fca <SWAPBYTE>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3301      	adds	r3, #1
 8008b56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f7ff fa33 	bl	8007fca <SWAPBYTE>
 8008b64:	4603      	mov	r3, r0
 8008b66:	461a      	mov	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3301      	adds	r3, #1
 8008b76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7ff fa26 	bl	8007fca <SWAPBYTE>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	461a      	mov	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	80da      	strh	r2, [r3, #6]
}
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b98:	2180      	movs	r1, #128	@ 0x80
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fccc 	bl	8009538 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fcc8 	bl	8009538 <USBD_LL_StallEP>
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d036      	beq.n	8008c34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bca:	6938      	ldr	r0, [r7, #16]
 8008bcc:	f000 f836 	bl	8008c3c <USBD_GetLen>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	4413      	add	r3, r2
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	7812      	ldrb	r2, [r2, #0]
 8008be8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	3301      	adds	r3, #1
 8008bee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c00:	e013      	b.n	8008c2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	4413      	add	r3, r2
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	7812      	ldrb	r2, [r2, #0]
 8008c0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	3301      	adds	r3, #1
 8008c12:	613b      	str	r3, [r7, #16]
    idx++;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	3301      	adds	r3, #1
 8008c18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	4413      	add	r3, r2
 8008c20:	2200      	movs	r2, #0
 8008c22:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	3301      	adds	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1e7      	bne.n	8008c02 <USBD_GetString+0x52>
 8008c32:	e000      	b.n	8008c36 <USBD_GetString+0x86>
    return;
 8008c34:	bf00      	nop
  }
}
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c4c:	e005      	b.n	8008c5a <USBD_GetLen+0x1e>
  {
    len++;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
 8008c50:	3301      	adds	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	3301      	adds	r3, #1
 8008c58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1f5      	bne.n	8008c4e <USBD_GetLen+0x12>
  }

  return len;
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	2100      	movs	r1, #0
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 fcd7 	bl	800964a <USBD_LL_Transmit>

  return USBD_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	60f8      	str	r0, [r7, #12]
 8008cae:	60b9      	str	r1, [r7, #8]
 8008cb0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 fcc6 	bl	800964a <USBD_LL_Transmit>

  return USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2203      	movs	r2, #3
 8008cd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 fcca 	bl	800968c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	2100      	movs	r1, #0
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 fcb9 	bl	800968c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2204      	movs	r2, #4
 8008d30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d34:	2300      	movs	r3, #0
 8008d36:	2200      	movs	r2, #0
 8008d38:	2100      	movs	r1, #0
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fc85 	bl	800964a <USBD_LL_Transmit>

  return USBD_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2205      	movs	r2, #5
 8008d56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2100      	movs	r1, #0
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fc93 	bl	800968c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d74:	2200      	movs	r2, #0
 8008d76:	4912      	ldr	r1, [pc, #72]	@ (8008dc0 <MX_USB_DEVICE_Init+0x50>)
 8008d78:	4812      	ldr	r0, [pc, #72]	@ (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008d7a:	f7fe fd03 	bl	8007784 <USBD_Init>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d84:	f7f7 ff8a 	bl	8000c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d88:	490f      	ldr	r1, [pc, #60]	@ (8008dc8 <MX_USB_DEVICE_Init+0x58>)
 8008d8a:	480e      	ldr	r0, [pc, #56]	@ (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008d8c:	f7fe fd2a 	bl	80077e4 <USBD_RegisterClass>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d96:	f7f7 ff81 	bl	8000c9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d9a:	490c      	ldr	r1, [pc, #48]	@ (8008dcc <MX_USB_DEVICE_Init+0x5c>)
 8008d9c:	4809      	ldr	r0, [pc, #36]	@ (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008d9e:	f7fe fc21 	bl	80075e4 <USBD_CDC_RegisterInterface>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008da8:	f7f7 ff78 	bl	8000c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008dac:	4805      	ldr	r0, [pc, #20]	@ (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008dae:	f7fe fd4f 	bl	8007850 <USBD_Start>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008db8:	f7f7 ff70 	bl	8000c9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008dbc:	bf00      	nop
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	200000b0 	.word	0x200000b0
 8008dc4:	200031d4 	.word	0x200031d4
 8008dc8:	2000001c 	.word	0x2000001c
 8008dcc:	2000009c 	.word	0x2000009c

08008dd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4905      	ldr	r1, [pc, #20]	@ (8008dec <CDC_Init_FS+0x1c>)
 8008dd8:	4805      	ldr	r0, [pc, #20]	@ (8008df0 <CDC_Init_FS+0x20>)
 8008dda:	f7fe fc1d 	bl	8007618 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dde:	4905      	ldr	r1, [pc, #20]	@ (8008df4 <CDC_Init_FS+0x24>)
 8008de0:	4803      	ldr	r0, [pc, #12]	@ (8008df0 <CDC_Init_FS+0x20>)
 8008de2:	f7fe fc3b 	bl	800765c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008de6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	200038b0 	.word	0x200038b0
 8008df0:	200031d4 	.word	0x200031d4
 8008df4:	200034b0 	.word	0x200034b0

08008df8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	6039      	str	r1, [r7, #0]
 8008e12:	71fb      	strb	r3, [r7, #7]
 8008e14:	4613      	mov	r3, r2
 8008e16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	2b23      	cmp	r3, #35	@ 0x23
 8008e1c:	d84a      	bhi.n	8008eb4 <CDC_Control_FS+0xac>
 8008e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e24 <CDC_Control_FS+0x1c>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008eb5 	.word	0x08008eb5
 8008e28:	08008eb5 	.word	0x08008eb5
 8008e2c:	08008eb5 	.word	0x08008eb5
 8008e30:	08008eb5 	.word	0x08008eb5
 8008e34:	08008eb5 	.word	0x08008eb5
 8008e38:	08008eb5 	.word	0x08008eb5
 8008e3c:	08008eb5 	.word	0x08008eb5
 8008e40:	08008eb5 	.word	0x08008eb5
 8008e44:	08008eb5 	.word	0x08008eb5
 8008e48:	08008eb5 	.word	0x08008eb5
 8008e4c:	08008eb5 	.word	0x08008eb5
 8008e50:	08008eb5 	.word	0x08008eb5
 8008e54:	08008eb5 	.word	0x08008eb5
 8008e58:	08008eb5 	.word	0x08008eb5
 8008e5c:	08008eb5 	.word	0x08008eb5
 8008e60:	08008eb5 	.word	0x08008eb5
 8008e64:	08008eb5 	.word	0x08008eb5
 8008e68:	08008eb5 	.word	0x08008eb5
 8008e6c:	08008eb5 	.word	0x08008eb5
 8008e70:	08008eb5 	.word	0x08008eb5
 8008e74:	08008eb5 	.word	0x08008eb5
 8008e78:	08008eb5 	.word	0x08008eb5
 8008e7c:	08008eb5 	.word	0x08008eb5
 8008e80:	08008eb5 	.word	0x08008eb5
 8008e84:	08008eb5 	.word	0x08008eb5
 8008e88:	08008eb5 	.word	0x08008eb5
 8008e8c:	08008eb5 	.word	0x08008eb5
 8008e90:	08008eb5 	.word	0x08008eb5
 8008e94:	08008eb5 	.word	0x08008eb5
 8008e98:	08008eb5 	.word	0x08008eb5
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008eb5 	.word	0x08008eb5
 8008ea4:	08008eb5 	.word	0x08008eb5
 8008ea8:	08008eb5 	.word	0x08008eb5
 8008eac:	08008eb5 	.word	0x08008eb5
 8008eb0:	08008eb5 	.word	0x08008eb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008eb4:	bf00      	nop
  }

  return (USBD_OK);
 8008eb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	4808      	ldr	r0, [pc, #32]	@ (8008ef4 <CDC_Receive_FS+0x30>)
 8008ed2:	f7fe fbc3 	bl	800765c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ed6:	4807      	ldr	r0, [pc, #28]	@ (8008ef4 <CDC_Receive_FS+0x30>)
 8008ed8:	f7fe fc1e 	bl	8007718 <USBD_CDC_ReceivePacket>
  CDCReceiveCallback(Buf, *Len);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7f7 fea6 	bl	8000c34 <CDCReceiveCallback>
  return (USBD_OK);
 8008ee8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	200031d4 	.word	0x200031d4

08008ef8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f08:	4b0d      	ldr	r3, [pc, #52]	@ (8008f40 <CDC_Transmit_FS+0x48>)
 8008f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e00b      	b.n	8008f36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f1e:	887b      	ldrh	r3, [r7, #2]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	4806      	ldr	r0, [pc, #24]	@ (8008f40 <CDC_Transmit_FS+0x48>)
 8008f26:	f7fe fb77 	bl	8007618 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f2a:	4805      	ldr	r0, [pc, #20]	@ (8008f40 <CDC_Transmit_FS+0x48>)
 8008f2c:	f7fe fbb4 	bl	8007698 <USBD_CDC_TransmitPacket>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	200031d4 	.word	0x200031d4

08008f44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
	...

08008f68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	6039      	str	r1, [r7, #0]
 8008f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2212      	movs	r2, #18
 8008f78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f7a:	4b03      	ldr	r3, [pc, #12]	@ (8008f88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	200000cc 	.word	0x200000cc

08008f8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	6039      	str	r1, [r7, #0]
 8008f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f9e:	4b03      	ldr	r3, [pc, #12]	@ (8008fac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	200000e0 	.word	0x200000e0

08008fb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	6039      	str	r1, [r7, #0]
 8008fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d105      	bne.n	8008fce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	4907      	ldr	r1, [pc, #28]	@ (8008fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fc6:	4808      	ldr	r0, [pc, #32]	@ (8008fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fc8:	f7ff fdf2 	bl	8008bb0 <USBD_GetString>
 8008fcc:	e004      	b.n	8008fd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	4904      	ldr	r1, [pc, #16]	@ (8008fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fd2:	4805      	ldr	r0, [pc, #20]	@ (8008fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fd4:	f7ff fdec 	bl	8008bb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fd8:	4b02      	ldr	r3, [pc, #8]	@ (8008fe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20003cb0 	.word	0x20003cb0
 8008fe8:	08009828 	.word	0x08009828

08008fec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	4904      	ldr	r1, [pc, #16]	@ (800900c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ffc:	4804      	ldr	r0, [pc, #16]	@ (8009010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ffe:	f7ff fdd7 	bl	8008bb0 <USBD_GetString>
  return USBD_StrDesc;
 8009002:	4b02      	ldr	r3, [pc, #8]	@ (800900c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	20003cb0 	.word	0x20003cb0
 8009010:	08009840 	.word	0x08009840

08009014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	221a      	movs	r2, #26
 8009024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009026:	f000 f843 	bl	80090b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800902a:	4b02      	ldr	r3, [pc, #8]	@ (8009034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	200000e4 	.word	0x200000e4

08009038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	6039      	str	r1, [r7, #0]
 8009042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009044:	79fb      	ldrb	r3, [r7, #7]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d105      	bne.n	8009056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	4907      	ldr	r1, [pc, #28]	@ (800906c <USBD_FS_ConfigStrDescriptor+0x34>)
 800904e:	4808      	ldr	r0, [pc, #32]	@ (8009070 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009050:	f7ff fdae 	bl	8008bb0 <USBD_GetString>
 8009054:	e004      	b.n	8009060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	4904      	ldr	r1, [pc, #16]	@ (800906c <USBD_FS_ConfigStrDescriptor+0x34>)
 800905a:	4805      	ldr	r0, [pc, #20]	@ (8009070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800905c:	f7ff fda8 	bl	8008bb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009060:	4b02      	ldr	r3, [pc, #8]	@ (800906c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20003cb0 	.word	0x20003cb0
 8009070:	08009854 	.word	0x08009854

08009074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009080:	79fb      	ldrb	r3, [r7, #7]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d105      	bne.n	8009092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4907      	ldr	r1, [pc, #28]	@ (80090a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800908a:	4808      	ldr	r0, [pc, #32]	@ (80090ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800908c:	f7ff fd90 	bl	8008bb0 <USBD_GetString>
 8009090:	e004      	b.n	800909c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	4904      	ldr	r1, [pc, #16]	@ (80090a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009096:	4805      	ldr	r0, [pc, #20]	@ (80090ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009098:	f7ff fd8a 	bl	8008bb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800909c:	4b02      	ldr	r3, [pc, #8]	@ (80090a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20003cb0 	.word	0x20003cb0
 80090ac:	08009860 	.word	0x08009860

080090b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4413      	add	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d009      	beq.n	80090d8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090c4:	2208      	movs	r2, #8
 80090c6:	4906      	ldr	r1, [pc, #24]	@ (80090e0 <Get_SerialNum+0x30>)
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 f80d 	bl	80090e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090ce:	2204      	movs	r2, #4
 80090d0:	4904      	ldr	r1, [pc, #16]	@ (80090e4 <Get_SerialNum+0x34>)
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f808 	bl	80090e8 <IntToUnicode>
  }
}
 80090d8:	bf00      	nop
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	200000e6 	.word	0x200000e6
 80090e4:	200000f6 	.word	0x200000f6

080090e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090fa:	2300      	movs	r3, #0
 80090fc:	75fb      	strb	r3, [r7, #23]
 80090fe:	e027      	b.n	8009150 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	0f1b      	lsrs	r3, r3, #28
 8009104:	2b09      	cmp	r3, #9
 8009106:	d80b      	bhi.n	8009120 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	0f1b      	lsrs	r3, r3, #28
 800910c:	b2da      	uxtb	r2, r3
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	4619      	mov	r1, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	440b      	add	r3, r1
 8009118:	3230      	adds	r2, #48	@ 0x30
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	e00a      	b.n	8009136 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	0f1b      	lsrs	r3, r3, #28
 8009124:	b2da      	uxtb	r2, r3
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	4619      	mov	r1, r3
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	440b      	add	r3, r1
 8009130:	3237      	adds	r2, #55	@ 0x37
 8009132:	b2d2      	uxtb	r2, r2
 8009134:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	011b      	lsls	r3, r3, #4
 800913a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800913c:	7dfb      	ldrb	r3, [r7, #23]
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	3301      	adds	r3, #1
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	4413      	add	r3, r2
 8009146:	2200      	movs	r2, #0
 8009148:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	3301      	adds	r3, #1
 800914e:	75fb      	strb	r3, [r7, #23]
 8009150:	7dfa      	ldrb	r2, [r7, #23]
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	429a      	cmp	r2, r3
 8009156:	d3d3      	bcc.n	8009100 <IntToUnicode+0x18>
  }
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
	...

08009168 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08a      	sub	sp, #40	@ 0x28
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009170:	f107 0314 	add.w	r3, r7, #20
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	605a      	str	r2, [r3, #4]
 800917a:	609a      	str	r2, [r3, #8]
 800917c:	60da      	str	r2, [r3, #12]
 800917e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009188:	d13a      	bne.n	8009200 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800918a:	2300      	movs	r3, #0
 800918c:	613b      	str	r3, [r7, #16]
 800918e:	4b1e      	ldr	r3, [pc, #120]	@ (8009208 <HAL_PCD_MspInit+0xa0>)
 8009190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009192:	4a1d      	ldr	r2, [pc, #116]	@ (8009208 <HAL_PCD_MspInit+0xa0>)
 8009194:	f043 0301 	orr.w	r3, r3, #1
 8009198:	6313      	str	r3, [r2, #48]	@ 0x30
 800919a:	4b1b      	ldr	r3, [pc, #108]	@ (8009208 <HAL_PCD_MspInit+0xa0>)
 800919c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	613b      	str	r3, [r7, #16]
 80091a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80091a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80091aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ac:	2302      	movs	r3, #2
 80091ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091b0:	2300      	movs	r3, #0
 80091b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091b4:	2303      	movs	r3, #3
 80091b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091b8:	230a      	movs	r3, #10
 80091ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091bc:	f107 0314 	add.w	r3, r7, #20
 80091c0:	4619      	mov	r1, r3
 80091c2:	4812      	ldr	r0, [pc, #72]	@ (800920c <HAL_PCD_MspInit+0xa4>)
 80091c4:	f7f9 f88e 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009208 <HAL_PCD_MspInit+0xa0>)
 80091ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091cc:	4a0e      	ldr	r2, [pc, #56]	@ (8009208 <HAL_PCD_MspInit+0xa0>)
 80091ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009208 <HAL_PCD_MspInit+0xa0>)
 80091da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009208 <HAL_PCD_MspInit+0xa0>)
 80091de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80091e4:	4b08      	ldr	r3, [pc, #32]	@ (8009208 <HAL_PCD_MspInit+0xa0>)
 80091e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091f0:	2200      	movs	r2, #0
 80091f2:	2100      	movs	r1, #0
 80091f4:	2043      	movs	r0, #67	@ 0x43
 80091f6:	f7f8 fcce 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091fa:	2043      	movs	r0, #67	@ 0x43
 80091fc:	f7f8 fce7 	bl	8001bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009200:	bf00      	nop
 8009202:	3728      	adds	r7, #40	@ 0x28
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	40023800 	.word	0x40023800
 800920c:	40020000 	.word	0x40020000

08009210 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f7fe fb5f 	bl	80078ea <USBD_LL_SetupStage>
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	4613      	mov	r3, r2
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	4413      	add	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	440b      	add	r3, r1
 8009254:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	4619      	mov	r1, r3
 800925e:	f7fe fb99 	bl	8007994 <USBD_LL_DataOutStage>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	460b      	mov	r3, r1
 8009274:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800927c:	78fa      	ldrb	r2, [r7, #3]
 800927e:	6879      	ldr	r1, [r7, #4]
 8009280:	4613      	mov	r3, r2
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	3320      	adds	r3, #32
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	4619      	mov	r1, r3
 8009292:	f7fe fc32 	bl	8007afa <USBD_LL_DataInStage>
}
 8009296:	bf00      	nop
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fd6c 	bl	8007d8a <USBD_LL_SOF>
}
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092c2:	2301      	movs	r3, #1
 80092c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	79db      	ldrb	r3, [r3, #7]
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d001      	beq.n	80092d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092ce:	f7f7 fce5 	bl	8000c9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092d8:	7bfa      	ldrb	r2, [r7, #15]
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe fd10 	bl	8007d02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe fcb8 	bl	8007c5e <USBD_LL_Reset>
}
 80092ee:	bf00      	nop
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fd0b 	bl	8007d22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	7adb      	ldrb	r3, [r3, #11]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800932c:	4b04      	ldr	r3, [pc, #16]	@ (8009340 <HAL_PCD_SuspendCallback+0x48>)
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	4a03      	ldr	r2, [pc, #12]	@ (8009340 <HAL_PCD_SuspendCallback+0x48>)
 8009332:	f043 0306 	orr.w	r3, r3, #6
 8009336:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	e000ed00 	.word	0xe000ed00

08009344 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fd01 	bl	8007d5a <USBD_LL_Resume>
}
 8009358:	bf00      	nop
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009372:	78fa      	ldrb	r2, [r7, #3]
 8009374:	4611      	mov	r1, r2
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fd59 	bl	8007e2e <USBD_LL_IsoOUTIncomplete>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	4611      	mov	r1, r2
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe fd15 	bl	8007dca <USBD_LL_IsoINIncomplete>
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe fd6b 	bl	8007e92 <USBD_LL_DevConnected>
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe fd68 	bl	8007ea8 <USBD_LL_DevDisconnected>
}
 80093d8:	bf00      	nop
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d13c      	bne.n	800946a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093f0:	4a20      	ldr	r2, [pc, #128]	@ (8009474 <USBD_LL_Init+0x94>)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009474 <USBD_LL_Init+0x94>)
 80093fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009400:	4b1c      	ldr	r3, [pc, #112]	@ (8009474 <USBD_LL_Init+0x94>)
 8009402:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009406:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009408:	4b1a      	ldr	r3, [pc, #104]	@ (8009474 <USBD_LL_Init+0x94>)
 800940a:	2204      	movs	r2, #4
 800940c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800940e:	4b19      	ldr	r3, [pc, #100]	@ (8009474 <USBD_LL_Init+0x94>)
 8009410:	2202      	movs	r2, #2
 8009412:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009414:	4b17      	ldr	r3, [pc, #92]	@ (8009474 <USBD_LL_Init+0x94>)
 8009416:	2200      	movs	r2, #0
 8009418:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800941a:	4b16      	ldr	r3, [pc, #88]	@ (8009474 <USBD_LL_Init+0x94>)
 800941c:	2202      	movs	r2, #2
 800941e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009420:	4b14      	ldr	r3, [pc, #80]	@ (8009474 <USBD_LL_Init+0x94>)
 8009422:	2200      	movs	r2, #0
 8009424:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009426:	4b13      	ldr	r3, [pc, #76]	@ (8009474 <USBD_LL_Init+0x94>)
 8009428:	2200      	movs	r2, #0
 800942a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800942c:	4b11      	ldr	r3, [pc, #68]	@ (8009474 <USBD_LL_Init+0x94>)
 800942e:	2200      	movs	r2, #0
 8009430:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009432:	4b10      	ldr	r3, [pc, #64]	@ (8009474 <USBD_LL_Init+0x94>)
 8009434:	2200      	movs	r2, #0
 8009436:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009438:	4b0e      	ldr	r3, [pc, #56]	@ (8009474 <USBD_LL_Init+0x94>)
 800943a:	2200      	movs	r2, #0
 800943c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800943e:	480d      	ldr	r0, [pc, #52]	@ (8009474 <USBD_LL_Init+0x94>)
 8009440:	f7f9 f8d4 	bl	80025ec <HAL_PCD_Init>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800944a:	f7f7 fc27 	bl	8000c9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800944e:	2180      	movs	r1, #128	@ 0x80
 8009450:	4808      	ldr	r0, [pc, #32]	@ (8009474 <USBD_LL_Init+0x94>)
 8009452:	f7fa fafe 	bl	8003a52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009456:	2240      	movs	r2, #64	@ 0x40
 8009458:	2100      	movs	r1, #0
 800945a:	4806      	ldr	r0, [pc, #24]	@ (8009474 <USBD_LL_Init+0x94>)
 800945c:	f7fa fab2 	bl	80039c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009460:	2280      	movs	r2, #128	@ 0x80
 8009462:	2101      	movs	r1, #1
 8009464:	4803      	ldr	r0, [pc, #12]	@ (8009474 <USBD_LL_Init+0x94>)
 8009466:	f7fa faad 	bl	80039c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20003eb0 	.word	0x20003eb0

08009478 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800948e:	4618      	mov	r0, r3
 8009490:	f7f9 f9bb 	bl	800280a <HAL_PCD_Start>
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 f942 	bl	8009724 <USBD_Get_USB_Status>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	4608      	mov	r0, r1
 80094b8:	4611      	mov	r1, r2
 80094ba:	461a      	mov	r2, r3
 80094bc:	4603      	mov	r3, r0
 80094be:	70fb      	strb	r3, [r7, #3]
 80094c0:	460b      	mov	r3, r1
 80094c2:	70bb      	strb	r3, [r7, #2]
 80094c4:	4613      	mov	r3, r2
 80094c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80094d6:	78bb      	ldrb	r3, [r7, #2]
 80094d8:	883a      	ldrh	r2, [r7, #0]
 80094da:	78f9      	ldrb	r1, [r7, #3]
 80094dc:	f7f9 fe8f 	bl	80031fe <HAL_PCD_EP_Open>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 f91c 	bl	8009724 <USBD_Get_USB_Status>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f7f9 fed8 	bl	80032ce <HAL_PCD_EP_Close>
 800951e:	4603      	mov	r3, r0
 8009520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	4618      	mov	r0, r3
 8009526:	f000 f8fd 	bl	8009724 <USBD_Get_USB_Status>
 800952a:	4603      	mov	r3, r0
 800952c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f7f9 ff90 	bl	800347c <HAL_PCD_EP_SetStall>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	4618      	mov	r0, r3
 8009564:	f000 f8de 	bl	8009724 <USBD_Get_USB_Status>
 8009568:	4603      	mov	r3, r0
 800956a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956c:	7bbb      	ldrb	r3, [r7, #14]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	460b      	mov	r3, r1
 8009580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009590:	78fa      	ldrb	r2, [r7, #3]
 8009592:	4611      	mov	r1, r2
 8009594:	4618      	mov	r0, r3
 8009596:	f7f9 ffd4 	bl	8003542 <HAL_PCD_EP_ClrStall>
 800959a:	4603      	mov	r3, r0
 800959c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 f8bf 	bl	8009724 <USBD_Get_USB_Status>
 80095a6:	4603      	mov	r3, r0
 80095a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	da0b      	bge.n	80095e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	4613      	mov	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	3316      	adds	r3, #22
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	e00b      	b.n	8009600 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095ee:	68f9      	ldr	r1, [r7, #12]
 80095f0:	4613      	mov	r3, r2
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	440b      	add	r3, r1
 80095fa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80095fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f7f9 fdc3 	bl	80031b6 <HAL_PCD_SetAddress>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f874 	bl	8009724 <USBD_Get_USB_Status>
 800963c:	4603      	mov	r3, r0
 800963e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009640:	7bbb      	ldrb	r3, [r7, #14]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b086      	sub	sp, #24
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
 8009656:	460b      	mov	r3, r1
 8009658:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009668:	7af9      	ldrb	r1, [r7, #11]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	f7f9 fecb 	bl	8003408 <HAL_PCD_EP_Transmit>
 8009672:	4603      	mov	r3, r0
 8009674:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f853 	bl	8009724 <USBD_Get_USB_Status>
 800967e:	4603      	mov	r3, r0
 8009680:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009682:	7dbb      	ldrb	r3, [r7, #22]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	603b      	str	r3, [r7, #0]
 8009698:	460b      	mov	r3, r1
 800969a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096aa:	7af9      	ldrb	r1, [r7, #11]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	f7f9 fe57 	bl	8003362 <HAL_PCD_EP_Receive>
 80096b4:	4603      	mov	r3, r0
 80096b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f832 	bl	8009724 <USBD_Get_USB_Status>
 80096c0:	4603      	mov	r3, r0
 80096c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	460b      	mov	r3, r1
 80096d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096e0:	78fa      	ldrb	r2, [r7, #3]
 80096e2:	4611      	mov	r1, r2
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7f9 fe77 	bl	80033d8 <HAL_PCD_EP_GetRxCount>
 80096ea:	4603      	mov	r3, r0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096fc:	4b03      	ldr	r3, [pc, #12]	@ (800970c <USBD_static_malloc+0x18>)
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20004394 	.word	0x20004394

08009710 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d817      	bhi.n	8009768 <USBD_Get_USB_Status+0x44>
 8009738:	a201      	add	r2, pc, #4	@ (adr r2, 8009740 <USBD_Get_USB_Status+0x1c>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009751 	.word	0x08009751
 8009744:	08009757 	.word	0x08009757
 8009748:	0800975d 	.word	0x0800975d
 800974c:	08009763 	.word	0x08009763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
    break;
 8009754:	e00b      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009756:	2303      	movs	r3, #3
 8009758:	73fb      	strb	r3, [r7, #15]
    break;
 800975a:	e008      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800975c:	2301      	movs	r3, #1
 800975e:	73fb      	strb	r3, [r7, #15]
    break;
 8009760:	e005      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009762:	2303      	movs	r3, #3
 8009764:	73fb      	strb	r3, [r7, #15]
    break;
 8009766:	e002      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009768:	2303      	movs	r3, #3
 800976a:	73fb      	strb	r3, [r7, #15]
    break;
 800976c:	bf00      	nop
  }
  return usb_status;
 800976e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <memset>:
 800977c:	4402      	add	r2, r0
 800977e:	4603      	mov	r3, r0
 8009780:	4293      	cmp	r3, r2
 8009782:	d100      	bne.n	8009786 <memset+0xa>
 8009784:	4770      	bx	lr
 8009786:	f803 1b01 	strb.w	r1, [r3], #1
 800978a:	e7f9      	b.n	8009780 <memset+0x4>

0800978c <strncmp>:
 800978c:	b510      	push	{r4, lr}
 800978e:	b16a      	cbz	r2, 80097ac <strncmp+0x20>
 8009790:	3901      	subs	r1, #1
 8009792:	1884      	adds	r4, r0, r2
 8009794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009798:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800979c:	429a      	cmp	r2, r3
 800979e:	d103      	bne.n	80097a8 <strncmp+0x1c>
 80097a0:	42a0      	cmp	r0, r4
 80097a2:	d001      	beq.n	80097a8 <strncmp+0x1c>
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	d1f5      	bne.n	8009794 <strncmp+0x8>
 80097a8:	1ad0      	subs	r0, r2, r3
 80097aa:	bd10      	pop	{r4, pc}
 80097ac:	4610      	mov	r0, r2
 80097ae:	e7fc      	b.n	80097aa <strncmp+0x1e>

080097b0 <__libc_init_array>:
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	4d0d      	ldr	r5, [pc, #52]	@ (80097e8 <__libc_init_array+0x38>)
 80097b4:	4c0d      	ldr	r4, [pc, #52]	@ (80097ec <__libc_init_array+0x3c>)
 80097b6:	1b64      	subs	r4, r4, r5
 80097b8:	10a4      	asrs	r4, r4, #2
 80097ba:	2600      	movs	r6, #0
 80097bc:	42a6      	cmp	r6, r4
 80097be:	d109      	bne.n	80097d4 <__libc_init_array+0x24>
 80097c0:	4d0b      	ldr	r5, [pc, #44]	@ (80097f0 <__libc_init_array+0x40>)
 80097c2:	4c0c      	ldr	r4, [pc, #48]	@ (80097f4 <__libc_init_array+0x44>)
 80097c4:	f000 f818 	bl	80097f8 <_init>
 80097c8:	1b64      	subs	r4, r4, r5
 80097ca:	10a4      	asrs	r4, r4, #2
 80097cc:	2600      	movs	r6, #0
 80097ce:	42a6      	cmp	r6, r4
 80097d0:	d105      	bne.n	80097de <__libc_init_array+0x2e>
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d8:	4798      	blx	r3
 80097da:	3601      	adds	r6, #1
 80097dc:	e7ee      	b.n	80097bc <__libc_init_array+0xc>
 80097de:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e2:	4798      	blx	r3
 80097e4:	3601      	adds	r6, #1
 80097e6:	e7f2      	b.n	80097ce <__libc_init_array+0x1e>
 80097e8:	08009890 	.word	0x08009890
 80097ec:	08009890 	.word	0x08009890
 80097f0:	08009890 	.word	0x08009890
 80097f4:	08009894 	.word	0x08009894

080097f8 <_init>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr

08009804 <_fini>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr
