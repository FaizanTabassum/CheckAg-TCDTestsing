
TCDFunctionTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800a014  0800a014  0000b014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a170  0800a170  0000c17c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a170  0800a170  0000b170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a178  0800a178  0000c17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a178  0800a178  0000b178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a17c  0800a17c  0000b17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800a180  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046e8  2000017c  0800a2fc  0000c17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004864  0800a2fc  0000c864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e4b  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fd  00000000  00000000  00020ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000246f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e56  00000000  00000000  000259c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a35b  00000000  00000000  00026816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b9f  00000000  00000000  00040b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b215  00000000  00000000  00058710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  000f3968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f8cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000017c 	.word	0x2000017c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ffc 	.word	0x08009ffc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000180 	.word	0x20000180
 80001dc:	08009ffc 	.word	0x08009ffc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe7c 	bl	8001270 <HAL_Init>

  /* USER CODE BEGIN Init */
  InitializeHeaderFooter();
 8000578:	f000 fbce 	bl	8000d18 <InitializeHeaderFooter>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f82a 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 faf6 	bl	8000b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000584:	f000 fad4 	bl	8000b30 <MX_DMA_Init>
  MX_TIM2_Init();
 8000588:	f000 f8e2 	bl	8000750 <MX_TIM2_Init>
  MX_TIM3_Init();
 800058c:	f000 f958 	bl	8000840 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000590:	f000 f9cc 	bl	800092c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000594:	f000 fa3c 	bl	8000a10 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000598:	f008 fb64 	bl	8008c64 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800059c:	f000 f886 	bl	80006ac <MX_ADC1_Init>
//  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
////  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
//  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH

  if (!start_command_received) {
 80005a0:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <main+0x58>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d107      	bne.n	80005ba <main+0x4a>
  CDC_Transmit_FS("Target Ready\r\n",14);
 80005aa:	210e      	movs	r1, #14
 80005ac:	4807      	ldr	r0, [pc, #28]	@ (80005cc <main+0x5c>)
 80005ae:	f008 fc1d 	bl	8008dec <CDC_Transmit_FS>
  HAL_Delay(1000);}
 80005b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b6:	f000 fecd 	bl	8001354 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  single_capture_flag = 1;
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <main+0x60>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
  while (1)
  {

	  SingleCapture();
 80005c0:	f000 fafe 	bl	8000bc0 <SingleCapture>
 80005c4:	e7fc      	b.n	80005c0 <main+0x50>
 80005c6:	bf00      	nop
 80005c8:	20003328 	.word	0x20003328
 80005cc:	0800a014 	.word	0x0800a014
 80005d0:	2000332c 	.word	0x2000332c

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f009 f878 	bl	80096d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a28      	ldr	r2, [pc, #160]	@ (80006a4 <SystemClock_Config+0xd0>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <SystemClock_Config+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <SystemClock_Config+0xd4>)
 8000622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000648:	2319      	movs	r3, #25
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fada 	bl	8003c18 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066a:	f000 fbb1 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fd3c 	bl	8004108 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000696:	f000 fb9b 	bl	8000dd0 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006be:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006c0:	4a22      	ldr	r2, [pc, #136]	@ (800074c <MX_ADC1_Init+0xa0>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c4:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006f0:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 80006f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_ADC1_Init+0x9c>)
 8000704:	2201      	movs	r2, #1
 8000706:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_ADC1_Init+0x9c>)
 800070c:	2201      	movs	r2, #1
 800070e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000710:	480d      	ldr	r0, [pc, #52]	@ (8000748 <MX_ADC1_Init+0x9c>)
 8000712:	f000 fe43 	bl	800139c <HAL_ADC_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800071c:	f000 fb58 	bl	8000dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000720:	2303      	movs	r3, #3
 8000722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_ADC1_Init+0x9c>)
 8000732:	f000 ff7b 	bl	800162c <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800073c:	f000 fb48 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000198 	.word	0x20000198
 800074c:	40012000 	.word	0x40012000

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08e      	sub	sp, #56	@ 0x38
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000780:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <MX_TIM2_Init+0xe8>)
 8000782:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000786:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000788:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <MX_TIM2_Init+0xe8>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078e:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <MX_TIM2_Init+0xe8>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 8000794:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <MX_TIM2_Init+0xe8>)
 8000796:	4a29      	ldr	r2, [pc, #164]	@ (800083c <MX_TIM2_Init+0xec>)
 8000798:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079a:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <MX_TIM2_Init+0xe8>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <MX_TIM2_Init+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a6:	4824      	ldr	r0, [pc, #144]	@ (8000838 <MX_TIM2_Init+0xe8>)
 80007a8:	f003 fe66 	bl	8004478 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80007b2:	f000 fb0d 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c0:	4619      	mov	r1, r3
 80007c2:	481d      	ldr	r0, [pc, #116]	@ (8000838 <MX_TIM2_Init+0xe8>)
 80007c4:	f004 fa2a 	bl	8004c1c <HAL_TIM_ConfigClockSource>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007ce:	f000 faff 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007d2:	4819      	ldr	r0, [pc, #100]	@ (8000838 <MX_TIM2_Init+0xe8>)
 80007d4:	f003 ff02 	bl	80045dc <HAL_TIM_PWM_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007de:	f000 faf7 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80007e2:	2310      	movs	r3, #16
 80007e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80007e6:	2380      	movs	r3, #128	@ 0x80
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4619      	mov	r1, r3
 80007f0:	4811      	ldr	r0, [pc, #68]	@ (8000838 <MX_TIM2_Init+0xe8>)
 80007f2:	f004 fead 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007fc:	f000 fae8 	bl	8000dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000800:	2370      	movs	r3, #112	@ 0x70
 8000802:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 8000804:	f242 2373 	movw	r3, #8819	@ 0x2273
 8000808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800080a:	2302      	movs	r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_TIM2_Init+0xe8>)
 800081a:	f004 f93d 	bl	8004a98 <HAL_TIM_PWM_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000824:	f000 fad4 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <MX_TIM2_Init+0xe8>)
 800082a:	f000 fbdd 	bl	8000fe8 <HAL_TIM_MspPostInit>

}
 800082e:	bf00      	nop
 8000830:	3738      	adds	r7, #56	@ 0x38
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000240 	.word	0x20000240
 800083c:	000802c7 	.word	0x000802c7

08000840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	@ 0x38
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	615a      	str	r2, [r3, #20]
 800086e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000872:	4a2d      	ldr	r2, [pc, #180]	@ (8000928 <MX_TIM3_Init+0xe8>)
 8000874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000876:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_TIM3_Init+0xe4>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 8000882:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000884:	22a7      	movs	r2, #167	@ 0xa7
 8000886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_TIM3_Init+0xe4>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000894:	4823      	ldr	r0, [pc, #140]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000896:	f003 fdef 	bl	8004478 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80008a0:	f000 fa96 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481c      	ldr	r0, [pc, #112]	@ (8000924 <MX_TIM3_Init+0xe4>)
 80008b2:	f004 f9b3 	bl	8004c1c <HAL_TIM_ConfigClockSource>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80008bc:	f000 fa88 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008c0:	4818      	ldr	r0, [pc, #96]	@ (8000924 <MX_TIM3_Init+0xe4>)
 80008c2:	f003 fe8b 	bl	80045dc <HAL_TIM_PWM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80008cc:	f000 fa80 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4619      	mov	r1, r3
 80008de:	4811      	ldr	r0, [pc, #68]	@ (8000924 <MX_TIM3_Init+0xe4>)
 80008e0:	f004 fe36 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80008ea:	f000 fa71 	bl	8000dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ee:	2360      	movs	r3, #96	@ 0x60
 80008f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 80008f2:	2353      	movs	r3, #83	@ 0x53
 80008f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	4807      	ldr	r0, [pc, #28]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000906:	f004 f8c7 	bl	8004a98 <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000910:	f000 fa5e 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000914:	4803      	ldr	r0, [pc, #12]	@ (8000924 <MX_TIM3_Init+0xe4>)
 8000916:	f000 fb67 	bl	8000fe8 <HAL_TIM_MspPostInit>

}
 800091a:	bf00      	nop
 800091c:	3738      	adds	r7, #56	@ 0x38
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000288 	.word	0x20000288
 8000928:	40000400 	.word	0x40000400

0800092c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800095c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 800095e:	4a2b      	ldr	r2, [pc, #172]	@ (8000a0c <MX_TIM4_Init+0xe0>)
 8000960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000962:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 800096e:	4b26      	ldr	r3, [pc, #152]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 8000970:	22a7      	movs	r2, #167	@ 0xa7
 8000972:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b23      	ldr	r3, [pc, #140]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000980:	4821      	ldr	r0, [pc, #132]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 8000982:	f003 fd79 	bl	8004478 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800098c:	f000 fa20 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800099a:	4619      	mov	r1, r3
 800099c:	481a      	ldr	r0, [pc, #104]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 800099e:	f004 f93d 	bl	8004c1c <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80009a8:	f000 fa12 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009ac:	4816      	ldr	r0, [pc, #88]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 80009ae:	f003 fe15 	bl	80045dc <HAL_TIM_PWM_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80009b8:	f000 fa0a 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4619      	mov	r1, r3
 80009ca:	480f      	ldr	r0, [pc, #60]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 80009cc:	f004 fdc0 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80009d6:	f000 f9fb 	bl	8000dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009da:	2360      	movs	r3, #96	@ 0x60
 80009dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 80009de:	2329      	movs	r3, #41	@ 0x29
 80009e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	220c      	movs	r2, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_TIM4_Init+0xdc>)
 80009f2:	f004 f851 	bl	8004a98 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80009fc:	f000 f9e8 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3738      	adds	r7, #56	@ 0x38
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200002d0 	.word	0x200002d0
 8000a0c:	40000800 	.word	0x40000800

08000a10 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b092      	sub	sp, #72	@ 0x48
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	615a      	str	r2, [r3, #20]
 8000a4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a50:	4b34      	ldr	r3, [pc, #208]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a52:	4a35      	ldr	r2, [pc, #212]	@ (8000b28 <MX_TIM5_Init+0x118>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000a56:	4b33      	ldr	r3, [pc, #204]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 8000a62:	4b30      	ldr	r3, [pc, #192]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a64:	4a31      	ldr	r2, [pc, #196]	@ (8000b2c <MX_TIM5_Init+0x11c>)
 8000a66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a74:	482b      	ldr	r0, [pc, #172]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a76:	f003 fcff 	bl	8004478 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000a80:	f000 f9a6 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a88:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4824      	ldr	r0, [pc, #144]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000a92:	f004 f8c3 	bl	8004c1c <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a9c:	f000 f998 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000aa0:	4820      	ldr	r0, [pc, #128]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000aa2:	f003 fd9b 	bl	80045dc <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000aac:	f000 f990 	bl	8000dd0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4819      	ldr	r0, [pc, #100]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000ac0:	f004 f973 	bl	8004daa <HAL_TIM_SlaveConfigSynchro>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000aca:	f000 f981 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ad2:	2380      	movs	r3, #128	@ 0x80
 8000ad4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4811      	ldr	r0, [pc, #68]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000ade:	f004 fd37 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000ae8:	f000 f972 	bl	8000dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aec:	2360      	movs	r3, #96	@ 0x60
 8000aee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000af0:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000af4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	2208      	movs	r2, #8
 8000b02:	4619      	mov	r1, r3
 8000b04:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000b06:	f003 ffc7 	bl	8004a98 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000b10:	f000 f95e 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b14:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <MX_TIM5_Init+0x114>)
 8000b16:	f000 fa67 	bl	8000fe8 <HAL_TIM_MspPostInit>

}
 8000b1a:	bf00      	nop
 8000b1c:	3748      	adds	r7, #72	@ 0x48
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000318 	.word	0x20000318
 8000b28:	40000c00 	.word	0x40000c00
 8000b2c:	000802c7 	.word	0x000802c7

08000b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_DMA_Init+0x3c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b6c <MX_DMA_Init+0x3c>)
 8000b40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_DMA_Init+0x3c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2038      	movs	r0, #56	@ 0x38
 8000b58:	f001 f8e3 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b5c:	2038      	movs	r0, #56	@ 0x38
 8000b5e:	f001 f8fc 	bl	8001d5a <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <MX_GPIO_Init+0x4c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <SingleCapture>:

/* USER CODE BEGIN 4 */
void SingleCapture(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	if(single_capture_flag == 1){
 8000bc4:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <SingleCapture+0xac>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d127      	bne.n	8000c1c <SingleCapture+0x5c>
	  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay for icg
 8000bcc:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <SingleCapture+0xb0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2242      	movs	r2, #66	@ 0x42
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_COUNTER(&htim5, 0); // sh
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <SingleCapture+0xb4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_COUNTER(&htim3, 0); // fm
 8000bdc:	4b26      	ldr	r3, [pc, #152]	@ (8000c78 <SingleCapture+0xb8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8000be4:	2108      	movs	r1, #8
 8000be6:	4823      	ldr	r0, [pc, #140]	@ (8000c74 <SingleCapture+0xb4>)
 8000be8:	f003 fd52 	bl	8004690 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8000bec:	2100      	movs	r1, #0
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <SingleCapture+0xb8>)
 8000bf0:	f003 fd4e 	bl	8004690 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	481e      	ldr	r0, [pc, #120]	@ (8000c70 <SingleCapture+0xb0>)
 8000bf8:	f003 fd4a 	bl	8004690 <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim2);
 8000bfc:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <SingleCapture+0xb0>)
 8000bfe:	f003 fc8b 	bl	8004518 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 8000c02:	210c      	movs	r1, #12
 8000c04:	481d      	ldr	r0, [pc, #116]	@ (8000c7c <SingleCapture+0xbc>)
 8000c06:	f003 fd43 	bl	8004690 <HAL_TIM_PWM_Start>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000c0a:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000c0e:	491c      	ldr	r1, [pc, #112]	@ (8000c80 <SingleCapture+0xc0>)
 8000c10:	481c      	ldr	r0, [pc, #112]	@ (8000c84 <SingleCapture+0xc4>)
 8000c12:	f000 fc07 	bl	8001424 <HAL_ADC_Start_DMA>
	  single_capture_flag = 0;
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <SingleCapture+0xac>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
	}
	  if(timer_flag == 1){
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <SingleCapture+0xc8>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d108      	bne.n	8000c36 <SingleCapture+0x76>
		  count_signals++;
 8000c24:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <SingleCapture+0xcc>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <SingleCapture+0xcc>)
 8000c2e:	701a      	strb	r2, [r3, #0]
		  timer_flag = 0;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <SingleCapture+0xc8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
	  }
	  if(count_signals >= signals){
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <SingleCapture+0xcc>)
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <SingleCapture+0xd0>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d312      	bcc.n	8000c68 <SingleCapture+0xa8>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); //ICG
 8000c42:	2100      	movs	r1, #0
 8000c44:	480a      	ldr	r0, [pc, #40]	@ (8000c70 <SingleCapture+0xb0>)
 8000c46:	f003 fdd3 	bl	80047f0 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); //fM
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	480a      	ldr	r0, [pc, #40]	@ (8000c78 <SingleCapture+0xb8>)
 8000c4e:	f003 fdcf 	bl	80047f0 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //ADC
 8000c52:	210c      	movs	r1, #12
 8000c54:	4809      	ldr	r0, [pc, #36]	@ (8000c7c <SingleCapture+0xbc>)
 8000c56:	f003 fdcb 	bl	80047f0 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); //SH
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <SingleCapture+0xb4>)
 8000c5e:	f003 fdc7 	bl	80047f0 <HAL_TIM_PWM_Stop>
		  count_signals = 0;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <SingleCapture+0xcc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
	  }




}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000332c 	.word	0x2000332c
 8000c70:	20000240 	.word	0x20000240
 8000c74:	20000318 	.word	0x20000318
 8000c78:	20000288 	.word	0x20000288
 8000c7c:	200002d0 	.word	0x200002d0
 8000c80:	20000448 	.word	0x20000448
 8000c84:	20000198 	.word	0x20000198
 8000c88:	2000332b 	.word	0x2000332b
 8000c8c:	20003329 	.word	0x20003329
 8000c90:	2000002c 	.word	0x2000002c

08000c94 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	adc_flag = 1;
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
//	HAL_ADC_Stop_DMA(&hadc1);
//	CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2000332a 	.word	0x2000332a

08000cb4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cc4:	d102      	bne.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x18>
			timer_flag = 1;
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
			}
		}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	2000332b 	.word	0x2000332b

08000cdc <CDCReceiveCallback>:



//when the stm receives anything, it checks if it is the string start

void CDCReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
    // Ensure the buffer is null-terminated
    Buf[Len] = '\0';
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]

    // Check for the "start" command
    if (strncmp((char*)Buf, "start", 5) == 0) {
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	4907      	ldr	r1, [pc, #28]	@ (8000d10 <CDCReceiveCallback+0x34>)
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f008 fcf7 	bl	80096e8 <strncmp>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <CDCReceiveCallback+0x2a>
    	single_capture_flag = 1;
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <CDCReceiveCallback+0x38>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]


    }
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	0800a024 	.word	0x0800a024
 8000d14:	2000332c 	.word	0x2000332c

08000d18 <InitializeHeaderFooter>:
    // Configure the SH signal with the calculated period and pulse width
    Configure_SH_Signal(T_SH_ticks, SH_pulse_ticks);
}


void InitializeHeaderFooter(void) {
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	b093      	sub	sp, #76	@ 0x4c
 8000d1c:	af0c      	add	r7, sp, #48	@ 0x30
    // Construct the header
    snprintf(header, HEADER_SIZE,
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <InitializeHeaderFooter+0x80>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	4a1d      	ldr	r2, [pc, #116]	@ (8000d9c <InitializeHeaderFooter+0x84>)
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	491d      	ldr	r1, [pc, #116]	@ (8000da0 <InitializeHeaderFooter+0x88>)
 8000d2a:	6809      	ldr	r1, [r1, #0]
 8000d2c:	481d      	ldr	r0, [pc, #116]	@ (8000da4 <InitializeHeaderFooter+0x8c>)
 8000d2e:	6800      	ldr	r0, [r0, #0]
 8000d30:	4c1d      	ldr	r4, [pc, #116]	@ (8000da8 <InitializeHeaderFooter+0x90>)
 8000d32:	6824      	ldr	r4, [r4, #0]
 8000d34:	4d1c      	ldr	r5, [pc, #112]	@ (8000da8 <InitializeHeaderFooter+0x90>)
 8000d36:	686d      	ldr	r5, [r5, #4]
 8000d38:	4e1b      	ldr	r6, [pc, #108]	@ (8000da8 <InitializeHeaderFooter+0x90>)
 8000d3a:	68b6      	ldr	r6, [r6, #8]
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <InitializeHeaderFooter+0x90>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <InitializeHeaderFooter+0x94>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <InitializeHeaderFooter+0x98>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <InitializeHeaderFooter+0x9c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <InitializeHeaderFooter+0xa0>)
 8000d56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	9308      	str	r3, [sp, #32]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	9307      	str	r3, [sp, #28]
 8000d68:	9606      	str	r6, [sp, #24]
 8000d6a:	9505      	str	r5, [sp, #20]
 8000d6c:	9404      	str	r4, [sp, #16]
 8000d6e:	9003      	str	r0, [sp, #12]
 8000d70:	9102      	str	r1, [sp, #8]
 8000d72:	9201      	str	r2, [sp, #4]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <InitializeHeaderFooter+0xa4>)
 8000d7a:	4a11      	ldr	r2, [pc, #68]	@ (8000dc0 <InitializeHeaderFooter+0xa8>)
 8000d7c:	21c8      	movs	r1, #200	@ 0xc8
 8000d7e:	4811      	ldr	r0, [pc, #68]	@ (8000dc4 <InitializeHeaderFooter+0xac>)
 8000d80:	f008 fc76 	bl	8009670 <sniprintf>
        VersionNo, MajorVersion, FileFormatNo, CustomizationNo, CameraType,
        DataInfo[0], DataInfo[1], DataInfo[2], DataInfo[3],
        MeasureMode, SheetData, Profile, ScaleUnitChars);

    // Construct the footer (this example just uses a simple footer, customize as needed)
    snprintf(footer, FOOTER_SIZE, "\n");
 8000d84:	4a10      	ldr	r2, [pc, #64]	@ (8000dc8 <InitializeHeaderFooter+0xb0>)
 8000d86:	2102      	movs	r1, #2
 8000d88:	4810      	ldr	r0, [pc, #64]	@ (8000dcc <InitializeHeaderFooter+0xb4>)
 8000d8a:	f008 fc71 	bl	8009670 <sniprintf>
}
 8000d8e:	bf00      	nop
 8000d90:	371c      	adds	r7, #28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000004 	.word	0x20000004
 8000d9c:	20000360 	.word	0x20000360
 8000da0:	20000008 	.word	0x20000008
 8000da4:	2000000c 	.word	0x2000000c
 8000da8:	20000364 	.word	0x20000364
 8000dac:	20000010 	.word	0x20000010
 8000db0:	20000378 	.word	0x20000378
 8000db4:	20000014 	.word	0x20000014
 8000db8:	20000018 	.word	0x20000018
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	0800a02c 	.word	0x0800a02c
 8000dc4:	2000037c 	.word	0x2000037c
 8000dc8:	0800a0d8 	.word	0x0800a0d8
 8000dcc:	20000444 	.word	0x20000444

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	4a0f      	ldr	r2, [pc, #60]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	@ 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a2e      	ldr	r2, [pc, #184]	@ (8000f04 <HAL_ADC_MspInit+0xd8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d156      	bne.n	8000efc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <HAL_ADC_MspInit+0xdc>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	4a2c      	ldr	r2, [pc, #176]	@ (8000f08 <HAL_ADC_MspInit+0xdc>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <HAL_ADC_MspInit+0xdc>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <HAL_ADC_MspInit+0xdc>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a25      	ldr	r2, [pc, #148]	@ (8000f08 <HAL_ADC_MspInit+0xdc>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <HAL_ADC_MspInit+0xdc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e86:	2308      	movs	r3, #8
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	481c      	ldr	r0, [pc, #112]	@ (8000f0c <HAL_ADC_MspInit+0xe0>)
 8000e9a:	f001 fae9 	bl	8002470 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f14 <HAL_ADC_MspInit+0xe8>)
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000eb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ebc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000ec0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ec4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ec6:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000ec8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ecc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ee0:	480b      	ldr	r0, [pc, #44]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000ee2:	f000 ff55 	bl	8001d90 <HAL_DMA_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000eec:	f7ff ff70 	bl	8000dd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000ef4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ef6:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_ADC_MspInit+0xe4>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	@ 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40012000 	.word	0x40012000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	200001e0 	.word	0x200001e0
 8000f14:	40026410 	.word	0x40026410

08000f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f28:	d116      	bne.n	8000f58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	4a29      	ldr	r2, [pc, #164]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3a:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	201c      	movs	r0, #28
 8000f4c:	f000 fee9 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f50:	201c      	movs	r0, #28
 8000f52:	f000 ff02 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f56:	e03a      	b.n	8000fce <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fdc <HAL_TIM_Base_MspInit+0xc4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d10e      	bne.n	8000f80 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
}
 8000f7e:	e026      	b.n	8000fce <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <HAL_TIM_Base_MspInit+0xc8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10e      	bne.n	8000fa8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	4a11      	ldr	r2, [pc, #68]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
}
 8000fa6:	e012      	b.n	8000fce <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10d      	bne.n	8000fce <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xc0>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40000400 	.word	0x40000400
 8000fe0:	40000800 	.word	0x40000800
 8000fe4:	40000c00 	.word	0x40000c00

08000fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001008:	d11e      	bne.n	8001048 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b34      	ldr	r3, [pc, #208]	@ (80010e0 <HAL_TIM_MspPostInit+0xf8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a33      	ldr	r2, [pc, #204]	@ (80010e0 <HAL_TIM_MspPostInit+0xf8>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b31      	ldr	r3, [pc, #196]	@ (80010e0 <HAL_TIM_MspPostInit+0xf8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001036:	2301      	movs	r3, #1
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4828      	ldr	r0, [pc, #160]	@ (80010e4 <HAL_TIM_MspPostInit+0xfc>)
 8001042:	f001 fa15 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001046:	e046      	b.n	80010d6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a26      	ldr	r2, [pc, #152]	@ (80010e8 <HAL_TIM_MspPostInit+0x100>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d11e      	bne.n	8001090 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <HAL_TIM_MspPostInit+0xf8>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <HAL_TIM_MspPostInit+0xf8>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <HAL_TIM_MspPostInit+0xf8>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800106e:	2340      	movs	r3, #64	@ 0x40
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800107e:	2302      	movs	r3, #2
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4816      	ldr	r0, [pc, #88]	@ (80010e4 <HAL_TIM_MspPostInit+0xfc>)
 800108a:	f001 f9f1 	bl	8002470 <HAL_GPIO_Init>
}
 800108e:	e022      	b.n	80010d6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a15      	ldr	r2, [pc, #84]	@ (80010ec <HAL_TIM_MspPostInit+0x104>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d11d      	bne.n	80010d6 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <HAL_TIM_MspPostInit+0xf8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <HAL_TIM_MspPostInit+0xf8>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <HAL_TIM_MspPostInit+0xf8>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b6:	2304      	movs	r3, #4
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010c6:	2302      	movs	r3, #2
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <HAL_TIM_MspPostInit+0xfc>)
 80010d2:	f001 f9cd 	bl	8002470 <HAL_GPIO_Init>
}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	@ 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40000400 	.word	0x40000400
 80010ec:	40000c00 	.word	0x40000c00

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001146:	f000 f8e5 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <TIM2_IRQHandler+0x10>)
 8001156:	f003 fbaf 	bl	80048b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000240 	.word	0x20000240

08001164 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <DMA2_Stream0_IRQHandler+0x10>)
 800116a:	f000 ff17 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001e0 	.word	0x200001e0

08001178 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800117c:	4802      	ldr	r0, [pc, #8]	@ (8001188 <OTG_FS_IRQHandler+0x10>)
 800117e:	f001 fc3f 	bl	8002a00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20004018 	.word	0x20004018

0800118c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001194:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <_sbrk+0x5c>)
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <_sbrk+0x60>)
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <_sbrk+0x64>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <_sbrk+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d207      	bcs.n	80011cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011bc:	f008 faa6 	bl	800970c <__errno>
 80011c0:	4603      	mov	r3, r0
 80011c2:	220c      	movs	r2, #12
 80011c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	e009      	b.n	80011e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <_sbrk+0x64>)
 80011dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20010000 	.word	0x20010000
 80011ec:	00000400 	.word	0x00000400
 80011f0:	20003330 	.word	0x20003330
 80011f4:	20004868 	.word	0x20004868

080011f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <SystemInit+0x20>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001202:	4a05      	ldr	r2, [pc, #20]	@ (8001218 <SystemInit+0x20>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001254 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001220:	f7ff ffea 	bl	80011f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001224:	480c      	ldr	r0, [pc, #48]	@ (8001258 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001226:	490d      	ldr	r1, [pc, #52]	@ (800125c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001228:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800123c:	4c0a      	ldr	r4, [pc, #40]	@ (8001268 <LoopFillZerobss+0x22>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f008 fa65 	bl	8009718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff f98f 	bl	8000570 <main>
  bx  lr    
 8001252:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001254:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001260:	0800a180 	.word	0x0800a180
  ldr r2, =_sbss
 8001264:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001268:	20004864 	.word	0x20004864

0800126c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001274:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <HAL_Init+0x40>)
 800127a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800127e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <HAL_Init+0x40>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800128a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	@ (80012b0 <HAL_Init+0x40>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 fd37 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	200f      	movs	r0, #15
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fd9a 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023c00 	.word	0x40023c00

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fd4f 	bl	8001d76 <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 fd17 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000030 	.word	0x20000030
 800130c:	20000038 	.word	0x20000038
 8001310:	20000034 	.word	0x20000034

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000038 	.word	0x20000038
 8001338:	20003334 	.word	0x20003334

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20003334 	.word	0x20003334

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000038 	.word	0x20000038

0800139c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e033      	b.n	800141a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fd36 	bl	8000e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d118      	bne.n	800140c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013e2:	f023 0302 	bic.w	r3, r3, #2
 80013e6:	f043 0202 	orr.w	r2, r3, #2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fa3e 	bl	8001870 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f023 0303 	bic.w	r3, r3, #3
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	@ 0x40
 800140a:	e001      	b.n	8001410 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_ADC_Start_DMA+0x1e>
 800143e:	2302      	movs	r3, #2
 8001440:	e0ce      	b.n	80015e0 <HAL_ADC_Start_DMA+0x1bc>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b01      	cmp	r3, #1
 8001456:	d018      	beq.n	800148a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001468:	4b5f      	ldr	r3, [pc, #380]	@ (80015e8 <HAL_ADC_Start_DMA+0x1c4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a5f      	ldr	r2, [pc, #380]	@ (80015ec <HAL_ADC_Start_DMA+0x1c8>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9a      	lsrs	r2, r3, #18
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800147c:	e002      	b.n	8001484 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	3b01      	subs	r3, #1
 8001482:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f9      	bne.n	800147e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001498:	d107      	bne.n	80014aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014a8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	f040 8086 	bne.w	80015c6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014f8:	d106      	bne.n	8001508 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f023 0206 	bic.w	r2, r3, #6
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	645a      	str	r2, [r3, #68]	@ 0x44
 8001506:	e002      	b.n	800150e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001516:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <HAL_ADC_Start_DMA+0x1cc>)
 8001518:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151e:	4a35      	ldr	r2, [pc, #212]	@ (80015f4 <HAL_ADC_Start_DMA+0x1d0>)
 8001520:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001526:	4a34      	ldr	r2, [pc, #208]	@ (80015f8 <HAL_ADC_Start_DMA+0x1d4>)
 8001528:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152e:	4a33      	ldr	r2, [pc, #204]	@ (80015fc <HAL_ADC_Start_DMA+0x1d8>)
 8001530:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800153a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800154a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800155a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	334c      	adds	r3, #76	@ 0x4c
 8001566:	4619      	mov	r1, r3
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f000 fcbe 	bl	8001eec <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10f      	bne.n	800159c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d129      	bne.n	80015de <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	e020      	b.n	80015de <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a17      	ldr	r2, [pc, #92]	@ (8001600 <HAL_ADC_Start_DMA+0x1dc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d11b      	bne.n	80015de <HAL_ADC_Start_DMA+0x1ba>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d114      	bne.n	80015de <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	e00b      	b.n	80015de <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f043 0210 	orr.w	r2, r3, #16
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000030 	.word	0x20000030
 80015ec:	431bde83 	.word	0x431bde83
 80015f0:	40012300 	.word	0x40012300
 80015f4:	08001a69 	.word	0x08001a69
 80015f8:	08001b23 	.word	0x08001b23
 80015fc:	08001b3f 	.word	0x08001b3f
 8001600:	40012000 	.word	0x40012000

08001604 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x1c>
 8001644:	2302      	movs	r3, #2
 8001646:	e105      	b.n	8001854 <HAL_ADC_ConfigChannel+0x228>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b09      	cmp	r3, #9
 8001656:	d925      	bls.n	80016a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68d9      	ldr	r1, [r3, #12]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	3b1e      	subs	r3, #30
 800166e:	2207      	movs	r2, #7
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43da      	mvns	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	400a      	ands	r2, r1
 800167c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68d9      	ldr	r1, [r3, #12]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	4603      	mov	r3, r0
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4403      	add	r3, r0
 8001696:	3b1e      	subs	r3, #30
 8001698:	409a      	lsls	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	e022      	b.n	80016ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6919      	ldr	r1, [r3, #16]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	2207      	movs	r2, #7
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	400a      	ands	r2, r1
 80016c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6919      	ldr	r1, [r3, #16]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4403      	add	r3, r0
 80016e0:	409a      	lsls	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d824      	bhi.n	800173c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b05      	subs	r3, #5
 8001704:	221f      	movs	r2, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	400a      	ands	r2, r1
 8001712:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	3b05      	subs	r3, #5
 800172e:	fa00 f203 	lsl.w	r2, r0, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	635a      	str	r2, [r3, #52]	@ 0x34
 800173a:	e04c      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d824      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b23      	subs	r3, #35	@ 0x23
 8001756:	221f      	movs	r2, #31
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43da      	mvns	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	400a      	ands	r2, r1
 8001764:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b23      	subs	r3, #35	@ 0x23
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	631a      	str	r2, [r3, #48]	@ 0x30
 800178c:	e023      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b41      	subs	r3, #65	@ 0x41
 80017a0:	221f      	movs	r2, #31
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	400a      	ands	r2, r1
 80017ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b41      	subs	r3, #65	@ 0x41
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_ADC_ConfigChannel+0x234>)
 80017d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <HAL_ADC_ConfigChannel+0x238>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d109      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x1cc>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b12      	cmp	r3, #18
 80017ea:	d105      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a19      	ldr	r2, [pc, #100]	@ (8001864 <HAL_ADC_ConfigChannel+0x238>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d123      	bne.n	800184a <HAL_ADC_ConfigChannel+0x21e>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b10      	cmp	r3, #16
 8001808:	d003      	beq.n	8001812 <HAL_ADC_ConfigChannel+0x1e6>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b11      	cmp	r3, #17
 8001810:	d11b      	bne.n	800184a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b10      	cmp	r3, #16
 8001824:	d111      	bne.n	800184a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <HAL_ADC_ConfigChannel+0x23c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a10      	ldr	r2, [pc, #64]	@ (800186c <HAL_ADC_ConfigChannel+0x240>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9a      	lsrs	r2, r3, #18
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800183c:	e002      	b.n	8001844 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40012300 	.word	0x40012300
 8001864:	40012000 	.word	0x40012000
 8001868:	20000030 	.word	0x20000030
 800186c:	431bde83 	.word	0x431bde83

08001870 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001878:	4b79      	ldr	r3, [pc, #484]	@ (8001a60 <ADC_Init+0x1f0>)
 800187a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	431a      	orrs	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	021a      	lsls	r2, r3, #8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6899      	ldr	r1, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	4a58      	ldr	r2, [pc, #352]	@ (8001a64 <ADC_Init+0x1f4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d022      	beq.n	800194e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001916:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6899      	ldr	r1, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6899      	ldr	r1, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	e00f      	b.n	800196e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800195c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800196c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0202 	bic.w	r2, r2, #2
 800197c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6899      	ldr	r1, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7e1b      	ldrb	r3, [r3, #24]
 8001988:	005a      	lsls	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01b      	beq.n	80019d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	3b01      	subs	r3, #1
 80019c8:	035a      	lsls	r2, r3, #13
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	e007      	b.n	80019e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	051a      	lsls	r2, r3, #20
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6899      	ldr	r1, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a26:	025a      	lsls	r2, r3, #9
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6899      	ldr	r1, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	029a      	lsls	r2, r3, #10
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	609a      	str	r2, [r3, #8]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40012300 	.word	0x40012300
 8001a64:	0f000001 	.word	0x0f000001

08001a68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d13c      	bne.n	8001afc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d12b      	bne.n	8001af4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d127      	bne.n	8001af4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d119      	bne.n	8001af4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0220 	bic.w	r2, r2, #32
 8001ace:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d105      	bne.n	8001af4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff f8cd 	bl	8000c94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001afa:	e00e      	b.n	8001b1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f7ff fd85 	bl	8001618 <HAL_ADC_ErrorCallback>
}
 8001b0e:	e004      	b.n	8001b1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff fd67 	bl	8001604 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2240      	movs	r2, #64	@ 0x40
 8001b50:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	f043 0204 	orr.w	r2, r3, #4
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff fd5a 	bl	8001618 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0b      	blt.n	8001bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	@ (8001c08 <__NVIC_EnableIRQ+0x38>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	@ (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	@ (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	@ 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff8e 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff29 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff3e 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff8e 	bl	8001c60 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff31 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff face 	bl	800133c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e099      	b.n	8001ee0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dcc:	e00f      	b.n	8001dee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dce:	f7ff fab5 	bl	800133c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d908      	bls.n	8001dee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2203      	movs	r2, #3
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e078      	b.n	8001ee0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e8      	bne.n	8001dce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4b38      	ldr	r3, [pc, #224]	@ (8001ee8 <HAL_DMA_Init+0x158>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d107      	bne.n	8001e58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	4313      	orrs	r3, r2
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f023 0307 	bic.w	r3, r3, #7
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d117      	bne.n	8001eb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00e      	beq.n	8001eb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fa6f 	bl	8002378 <DMA_CheckFifoParam>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2240      	movs	r2, #64	@ 0x40
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e016      	b.n	8001ee0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fa26 	bl	800230c <DMA_CalcBaseAndBitshift>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec8:	223f      	movs	r2, #63	@ 0x3f
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	f010803f 	.word	0xf010803f

08001eec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Start_IT+0x26>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e040      	b.n	8001f94 <HAL_DMA_Start_IT+0xa8>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d12f      	bne.n	8001f86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f9b8 	bl	80022b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f44:	223f      	movs	r2, #63	@ 0x3f
 8001f46:	409a      	lsls	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0216 	orr.w	r2, r2, #22
 8001f5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0208 	orr.w	r2, r2, #8
 8001f72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e005      	b.n	8001f92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fa8:	4b8e      	ldr	r3, [pc, #568]	@ (80021e4 <HAL_DMA_IRQHandler+0x248>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a8e      	ldr	r2, [pc, #568]	@ (80021e8 <HAL_DMA_IRQHandler+0x24c>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0a9b      	lsrs	r3, r3, #10
 8001fb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01a      	beq.n	8002008 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0204 	bic.w	r2, r2, #4
 8001fee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200c:	2201      	movs	r2, #1
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202a:	2201      	movs	r2, #1
 800202c:	409a      	lsls	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002036:	f043 0202 	orr.w	r2, r3, #2
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	2204      	movs	r2, #4
 8002044:	409a      	lsls	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	2204      	movs	r2, #4
 8002062:	409a      	lsls	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	2210      	movs	r2, #16
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d043      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d03c      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002096:	2210      	movs	r2, #16
 8002098:	409a      	lsls	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d018      	beq.n	80020de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d108      	bne.n	80020cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d024      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
 80020ca:	e01f      	b.n	800210c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01b      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
 80020dc:	e016      	b.n	800210c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d107      	bne.n	80020fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0208 	bic.w	r2, r2, #8
 80020fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	2220      	movs	r2, #32
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 808f 	beq.w	800223c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8087 	beq.w	800223c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002132:	2220      	movs	r2, #32
 8002134:	409a      	lsls	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b05      	cmp	r3, #5
 8002144:	d136      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0216 	bic.w	r2, r2, #22
 8002154:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002164:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <HAL_DMA_IRQHandler+0x1da>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0208 	bic.w	r2, r2, #8
 8002184:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218a:	223f      	movs	r2, #63	@ 0x3f
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d07e      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	4798      	blx	r3
        }
        return;
 80021b2:	e079      	b.n	80022a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01d      	beq.n	80021fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10d      	bne.n	80021ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d031      	beq.n	800223c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e02c      	b.n	800223c <HAL_DMA_IRQHandler+0x2a0>
 80021e2:	bf00      	nop
 80021e4:	20000030 	.word	0x20000030
 80021e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d023      	beq.n	800223c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
 80021fc:	e01e      	b.n	800223c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10f      	bne.n	800222c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0210 	bic.w	r2, r2, #16
 800221a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002240:	2b00      	cmp	r3, #0
 8002242:	d032      	beq.n	80022aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d022      	beq.n	8002296 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2205      	movs	r2, #5
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	3301      	adds	r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	d307      	bcc.n	8002284 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f2      	bne.n	8002268 <HAL_DMA_IRQHandler+0x2cc>
 8002282:	e000      	b.n	8002286 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002284:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
 80022a6:	e000      	b.n	80022aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80022a8:	bf00      	nop
    }
  }
}
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b40      	cmp	r3, #64	@ 0x40
 80022dc:	d108      	bne.n	80022f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ee:	e007      	b.n	8002300 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	3b10      	subs	r3, #16
 800231c:	4a14      	ldr	r2, [pc, #80]	@ (8002370 <DMA_CalcBaseAndBitshift+0x64>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002326:	4a13      	ldr	r2, [pc, #76]	@ (8002374 <DMA_CalcBaseAndBitshift+0x68>)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d909      	bls.n	800234e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	1d1a      	adds	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	659a      	str	r2, [r3, #88]	@ 0x58
 800234c:	e007      	b.n	800235e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	aaaaaaab 	.word	0xaaaaaaab
 8002374:	0800a134 	.word	0x0800a134

08002378 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d11f      	bne.n	80023d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d856      	bhi.n	8002446 <DMA_CheckFifoParam+0xce>
 8002398:	a201      	add	r2, pc, #4	@ (adr r2, 80023a0 <DMA_CheckFifoParam+0x28>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023b1 	.word	0x080023b1
 80023a4:	080023c3 	.word	0x080023c3
 80023a8:	080023b1 	.word	0x080023b1
 80023ac:	08002447 	.word	0x08002447
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d046      	beq.n	800244a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c0:	e043      	b.n	800244a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ca:	d140      	bne.n	800244e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e03d      	b.n	800244e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023da:	d121      	bne.n	8002420 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d837      	bhi.n	8002452 <DMA_CheckFifoParam+0xda>
 80023e2:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <DMA_CheckFifoParam+0x70>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	080023ff 	.word	0x080023ff
 80023f0:	080023f9 	.word	0x080023f9
 80023f4:	08002411 	.word	0x08002411
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      break;
 80023fc:	e030      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d025      	beq.n	8002456 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800240e:	e022      	b.n	8002456 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002418:	d11f      	bne.n	800245a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800241e:	e01c      	b.n	800245a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d903      	bls.n	800242e <DMA_CheckFifoParam+0xb6>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d003      	beq.n	8002434 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800242c:	e018      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
      break;
 8002432:	e015      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      break;
 8002444:	e00b      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      break;
 8002446:	bf00      	nop
 8002448:	e00a      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e008      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 800244e:	bf00      	nop
 8002450:	e006      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 8002452:	bf00      	nop
 8002454:	e004      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 8002456:	bf00      	nop
 8002458:	e002      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;   
 800245a:	bf00      	nop
 800245c:	e000      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 800245e:	bf00      	nop
    }
  } 
  
  return status; 
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	@ 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	e159      	b.n	8002740 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	f040 8148 	bne.w	800273a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d005      	beq.n	80024c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d130      	bne.n	8002524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 0201 	and.w	r2, r3, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b03      	cmp	r3, #3
 800252e:	d017      	beq.n	8002560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d123      	bne.n	80025b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	220f      	movs	r2, #15
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	69b9      	ldr	r1, [r7, #24]
 80025b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2203      	movs	r2, #3
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0203 	and.w	r2, r3, #3
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a2 	beq.w	800273a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b57      	ldr	r3, [pc, #348]	@ (8002758 <HAL_GPIO_Init+0x2e8>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	4a56      	ldr	r2, [pc, #344]	@ (8002758 <HAL_GPIO_Init+0x2e8>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002604:	6453      	str	r3, [r2, #68]	@ 0x44
 8002606:	4b54      	ldr	r3, [pc, #336]	@ (8002758 <HAL_GPIO_Init+0x2e8>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002612:	4a52      	ldr	r2, [pc, #328]	@ (800275c <HAL_GPIO_Init+0x2ec>)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a49      	ldr	r2, [pc, #292]	@ (8002760 <HAL_GPIO_Init+0x2f0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d019      	beq.n	8002672 <HAL_GPIO_Init+0x202>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a48      	ldr	r2, [pc, #288]	@ (8002764 <HAL_GPIO_Init+0x2f4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_GPIO_Init+0x1fe>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a47      	ldr	r2, [pc, #284]	@ (8002768 <HAL_GPIO_Init+0x2f8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00d      	beq.n	800266a <HAL_GPIO_Init+0x1fa>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a46      	ldr	r2, [pc, #280]	@ (800276c <HAL_GPIO_Init+0x2fc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <HAL_GPIO_Init+0x1f6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a45      	ldr	r2, [pc, #276]	@ (8002770 <HAL_GPIO_Init+0x300>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_GPIO_Init+0x1f2>
 800265e:	2304      	movs	r3, #4
 8002660:	e008      	b.n	8002674 <HAL_GPIO_Init+0x204>
 8002662:	2307      	movs	r3, #7
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x204>
 8002666:	2303      	movs	r3, #3
 8002668:	e004      	b.n	8002674 <HAL_GPIO_Init+0x204>
 800266a:	2302      	movs	r3, #2
 800266c:	e002      	b.n	8002674 <HAL_GPIO_Init+0x204>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x204>
 8002672:	2300      	movs	r3, #0
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	f002 0203 	and.w	r2, r2, #3
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	4093      	lsls	r3, r2
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002684:	4935      	ldr	r1, [pc, #212]	@ (800275c <HAL_GPIO_Init+0x2ec>)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002692:	4b38      	ldr	r3, [pc, #224]	@ (8002774 <HAL_GPIO_Init+0x304>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002774 <HAL_GPIO_Init+0x304>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002774 <HAL_GPIO_Init+0x304>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e0:	4a24      	ldr	r2, [pc, #144]	@ (8002774 <HAL_GPIO_Init+0x304>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026e6:	4b23      	ldr	r3, [pc, #140]	@ (8002774 <HAL_GPIO_Init+0x304>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800270a:	4a1a      	ldr	r2, [pc, #104]	@ (8002774 <HAL_GPIO_Init+0x304>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002710:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <HAL_GPIO_Init+0x304>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002734:	4a0f      	ldr	r2, [pc, #60]	@ (8002774 <HAL_GPIO_Init+0x304>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	f67f aea2 	bls.w	800248c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3724      	adds	r7, #36	@ 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40013800 	.word	0x40013800
 8002760:	40020000 	.word	0x40020000
 8002764:	40020400 	.word	0x40020400
 8002768:	40020800 	.word	0x40020800
 800276c:	40020c00 	.word	0x40020c00
 8002770:	40021000 	.word	0x40021000
 8002774:	40013c00 	.word	0x40013c00

08002778 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af02      	add	r7, sp, #8
 800277e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e101      	b.n	800298e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f006 fc59 	bl	800905c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2203      	movs	r2, #3
 80027ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027b8:	d102      	bne.n	80027c0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 f85c 	bl	8005882 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	7c1a      	ldrb	r2, [r3, #16]
 80027d2:	f88d 2000 	strb.w	r2, [sp]
 80027d6:	3304      	adds	r3, #4
 80027d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027da:	f002 ff3b 	bl	8005654 <USB_CoreInit>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0ce      	b.n	800298e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 f854 	bl	80058a4 <USB_SetCurrentMode>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0bf      	b.n	800298e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
 8002812:	e04a      	b.n	80028aa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3315      	adds	r3, #21
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3314      	adds	r3, #20
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	b298      	uxth	r0, r3
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	332e      	adds	r3, #46	@ 0x2e
 8002850:	4602      	mov	r2, r0
 8002852:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	3318      	adds	r3, #24
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	331c      	adds	r3, #28
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	3320      	adds	r3, #32
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	3324      	adds	r3, #36	@ 0x24
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	3301      	adds	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	791b      	ldrb	r3, [r3, #4]
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d3af      	bcc.n	8002814 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	e044      	b.n	8002944 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	3301      	adds	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	791b      	ldrb	r3, [r3, #4]
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	429a      	cmp	r2, r3
 800294c:	d3b5      	bcc.n	80028ba <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7c1a      	ldrb	r2, [r3, #16]
 8002956:	f88d 2000 	strb.w	r2, [sp]
 800295a:	3304      	adds	r3, #4
 800295c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800295e:	f002 ffed 	bl	800593c <USB_DevInit>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e00c      	b.n	800298e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f004 f831 	bl	80069ee <USB_DevDisconnect>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_PCD_Start+0x1c>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e022      	b.n	80029f8 <HAL_PCD_Start+0x62>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d105      	bne.n	80029da <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f002 ff3e 	bl	8005860 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 ffdf 	bl	80069ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b08d      	sub	sp, #52	@ 0x34
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 f89d 	bl	8006b56 <USB_GetMode>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 848c 	bne.w	800333c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 f801 	bl	8006a30 <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8482 	beq.w	800333a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 ffee 	bl	8006a30 <USB_ReadInterrupts>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d107      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f002 0202 	and.w	r2, r2, #2
 8002a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 ffdc 	bl	8006a30 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b10      	cmp	r3, #16
 8002a80:	d161      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0210 	bic.w	r2, r2, #16
 8002a90:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	0c5b      	lsrs	r3, r3, #17
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d124      	bne.n	8002b08 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d035      	beq.n	8002b36 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	6a38      	ldr	r0, [r7, #32]
 8002ade:	f003 fe13 	bl	8006708 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aee:	441a      	add	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b00:	441a      	add	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	615a      	str	r2, [r3, #20]
 8002b06:	e016      	b.n	8002b36 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	0c5b      	lsrs	r3, r3, #17
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d110      	bne.n	8002b36 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	6a38      	ldr	r0, [r7, #32]
 8002b20:	f003 fdf2 	bl	8006708 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b30:	441a      	add	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0210 	orr.w	r2, r2, #16
 8002b44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 ff70 	bl	8006a30 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b56:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b5a:	f040 80a7 	bne.w	8002cac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 ff75 	bl	8006a56 <USB_ReadDevAllOutEpInterrupt>
 8002b6c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b6e:	e099      	b.n	8002ca4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 808e 	beq.w	8002c98 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 ff99 	bl	8006abe <USB_ReadDevOutEPInterrupt>
 8002b8c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00c      	beq.n	8002bb2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002baa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fea1 	bl	80038f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00c      	beq.n	8002bd6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2308      	movs	r3, #8
 8002bcc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 ff77 	bl	8003ac4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bec:	461a      	mov	r2, r3
 8002bee:	2310      	movs	r3, #16
 8002bf0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d030      	beq.n	8002c5e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c04:	2b80      	cmp	r3, #128	@ 0x80
 8002c06:	d109      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c1a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3304      	adds	r3, #4
 8002c30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	78db      	ldrb	r3, [r3, #3]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d108      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f006 fb04 	bl	8009254 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c74:	461a      	mov	r2, r3
 8002c76:	2320      	movs	r3, #32
 8002c78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c90:	461a      	mov	r2, r3
 8002c92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c96:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f47f af62 	bne.w	8002b70 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 febd 	bl	8006a30 <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cc0:	f040 80db 	bne.w	8002e7a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 fede 	bl	8006a8a <USB_ReadDevAllInEpInterrupt>
 8002cce:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002cd4:	e0cd      	b.n	8002e72 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80c2 	beq.w	8002e66 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 ff04 	bl	8006afa <USB_ReadDevInEPInterrupt>
 8002cf2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d057      	beq.n	8002dae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	2201      	movs	r2, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69f9      	ldr	r1, [r7, #28]
 8002d1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d1e:	4013      	ands	r3, r2
 8002d20:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2301      	movs	r3, #1
 8002d32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	799b      	ldrb	r3, [r3, #6]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d132      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3320      	adds	r3, #32
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4403      	add	r3, r0
 8002d5c:	331c      	adds	r3, #28
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4419      	add	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4403      	add	r3, r0
 8002d70:	3320      	adds	r3, #32
 8002d72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d113      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x3a2>
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	3324      	adds	r3, #36	@ 0x24
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d108      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	f003 ff0b 	bl	8006bb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4619      	mov	r1, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f006 f9d8 	bl	800915e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002de0:	461a      	mov	r2, r3
 8002de2:	2310      	movs	r3, #16
 8002de4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2340      	movs	r3, #64	@ 0x40
 8002e00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d023      	beq.n	8002e54 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e0e:	6a38      	ldr	r0, [r7, #32]
 8002e10:	f002 fef8 	bl	8005c04 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	3310      	adds	r3, #16
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	4413      	add	r3, r2
 8002e24:	3304      	adds	r3, #4
 8002e26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	78db      	ldrb	r3, [r3, #3]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d108      	bne.n	8002e42 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2200      	movs	r2, #0
 8002e34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f006 fa1b 	bl	8009278 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2302      	movs	r3, #2
 8002e52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fcbb 	bl	80037dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	3301      	adds	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f47f af2e 	bne.w	8002cd6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 fdd6 	bl	8006a30 <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e8e:	d122      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d108      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fea1 	bl	8003c00 <HAL_PCDEx_LPM_Callback>
 8002ebe:	e002      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f006 f9b9 	bl	8009238 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 fda8 	bl	8006a30 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ee6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eea:	d112      	bne.n	8002f12 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d102      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f006 f975 	bl	80091ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f10:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fd8a 	bl	8006a30 <USB_ReadInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f26:	f040 80b7 	bne.w	8003098 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2110      	movs	r1, #16
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 fe5d 	bl	8005c04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f4e:	e046      	b.n	8002fde <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f74:	0151      	lsls	r1, r2, #5
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	440a      	add	r2, r1
 8002f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f90:	461a      	mov	r2, r3
 8002f92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f96:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fa8:	0151      	lsls	r1, r2, #5
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	440a      	add	r2, r1
 8002fae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fb6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc8:	0151      	lsls	r1, r2, #5
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	440a      	add	r2, r1
 8002fce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fd6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fda:	3301      	adds	r3, #1
 8002fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	791b      	ldrb	r3, [r3, #4]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d3b2      	bcc.n	8002f50 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ff8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ffc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7bdb      	ldrb	r3, [r3, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003016:	f043 030b 	orr.w	r3, r3, #11
 800301a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800302c:	f043 030b 	orr.w	r3, r3, #11
 8003030:	6453      	str	r3, [r2, #68]	@ 0x44
 8003032:	e015      	b.n	8003060 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003042:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003046:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800304a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800305a:	f043 030b 	orr.w	r3, r3, #11
 800305e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800306e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003072:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003082:	461a      	mov	r2, r3
 8003084:	f003 fd98 	bl	8006bb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003096:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fcc7 	bl	8006a30 <USB_ReadInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ac:	d123      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fd5d 	bl	8006b72 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f002 fe1a 	bl	8005cf6 <USB_GetDevSpeed>
 80030c2:	4603      	mov	r3, r0
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681c      	ldr	r4, [r3, #0]
 80030ce:	f001 f9c7 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80030d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030d8:	461a      	mov	r2, r3
 80030da:	4620      	mov	r0, r4
 80030dc:	f002 fb1e 	bl	800571c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f006 f864 	bl	80091ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80030f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fc98 	bl	8006a30 <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b08      	cmp	r3, #8
 8003108:	d10a      	bne.n	8003120 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f006 f841 	bl	8009192 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f002 0208 	and.w	r2, r2, #8
 800311e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f003 fc83 	bl	8006a30 <USB_ReadInterrupts>
 800312a:	4603      	mov	r3, r0
 800312c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003130:	2b80      	cmp	r3, #128	@ 0x80
 8003132:	d123      	bne.n	800317c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003140:	2301      	movs	r3, #1
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
 8003144:	e014      	b.n	8003170 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d105      	bne.n	800316a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	b2db      	uxtb	r3, r3
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fb08 	bl	800377a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	3301      	adds	r3, #1
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	791b      	ldrb	r3, [r3, #4]
 8003174:	461a      	mov	r2, r3
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	4293      	cmp	r3, r2
 800317a:	d3e4      	bcc.n	8003146 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fc55 	bl	8006a30 <USB_ReadInterrupts>
 8003186:	4603      	mov	r3, r0
 8003188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800318c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003190:	d13c      	bne.n	800320c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003192:	2301      	movs	r3, #1
 8003194:	627b      	str	r3, [r7, #36]	@ 0x24
 8003196:	e02b      	b.n	80031f0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	3318      	adds	r3, #24
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d115      	bne.n	80031ea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	da12      	bge.n	80031ea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3317      	adds	r3, #23
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	4619      	mov	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fac8 	bl	800377a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	3301      	adds	r3, #1
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	791b      	ldrb	r3, [r3, #4]
 80031f4:	461a      	mov	r2, r3
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d3cd      	bcc.n	8003198 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800320a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f003 fc0d 	bl	8006a30 <USB_ReadInterrupts>
 8003216:	4603      	mov	r3, r0
 8003218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800321c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003220:	d156      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003222:	2301      	movs	r3, #1
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
 8003226:	e045      	b.n	80032b4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d12e      	bne.n	80032ae <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003250:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003252:	2b00      	cmp	r3, #0
 8003254:	da2b      	bge.n	80032ae <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003262:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003266:	429a      	cmp	r2, r3
 8003268:	d121      	bne.n	80032ae <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800327c:	2201      	movs	r2, #1
 800327e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032aa:	6053      	str	r3, [r2, #4]
            break;
 80032ac:	e008      	b.n	80032c0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	3301      	adds	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	791b      	ldrb	r3, [r3, #4]
 80032b8:	461a      	mov	r2, r3
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	4293      	cmp	r3, r2
 80032be:	d3b3      	bcc.n	8003228 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80032ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 fbab 	bl	8006a30 <USB_ReadInterrupts>
 80032da:	4603      	mov	r3, r0
 80032dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e4:	d10a      	bne.n	80032fc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f005 ffd8 	bl	800929c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f003 fb95 	bl	8006a30 <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b04      	cmp	r3, #4
 800330e:	d115      	bne.n	800333c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f005 ffc8 	bl	80092b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	e000      	b.n	800333c <HAL_PCD_IRQHandler+0x93c>
      return;
 800333a:	bf00      	nop
    }
  }
}
 800333c:	3734      	adds	r7, #52	@ 0x34
 800333e:	46bd      	mov	sp, r7
 8003340:	bd90      	pop	{r4, r7, pc}

08003342 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_PCD_SetAddress+0x1a>
 8003358:	2302      	movs	r3, #2
 800335a:	e012      	b.n	8003382 <HAL_PCD_SetAddress+0x40>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f003 faf4 	bl	8006960 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	4608      	mov	r0, r1
 8003394:	4611      	mov	r1, r2
 8003396:	461a      	mov	r2, r3
 8003398:	4603      	mov	r3, r0
 800339a:	70fb      	strb	r3, [r7, #3]
 800339c:	460b      	mov	r3, r1
 800339e:	803b      	strh	r3, [r7, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	da0f      	bge.n	80033d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	3310      	adds	r3, #16
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	3304      	adds	r3, #4
 80033c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	705a      	strb	r2, [r3, #1]
 80033ce:	e00f      	b.n	80033f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	3304      	adds	r3, #4
 80033e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033fc:	883a      	ldrh	r2, [r7, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	78ba      	ldrb	r2, [r7, #2]
 8003406:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	785b      	ldrb	r3, [r3, #1]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d004      	beq.n	800341a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800341a:	78bb      	ldrb	r3, [r7, #2]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d102      	bne.n	8003426 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_PCD_EP_Open+0xaa>
 8003430:	2302      	movs	r3, #2
 8003432:	e00e      	b.n	8003452 <HAL_PCD_EP_Open+0xc8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68f9      	ldr	r1, [r7, #12]
 8003442:	4618      	mov	r0, r3
 8003444:	f002 fc7c 	bl	8005d40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003450:	7afb      	ldrb	r3, [r7, #11]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	460b      	mov	r3, r1
 8003464:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800346a:	2b00      	cmp	r3, #0
 800346c:	da0f      	bge.n	800348e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	f003 020f 	and.w	r2, r3, #15
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	3310      	adds	r3, #16
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	3304      	adds	r3, #4
 8003484:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	705a      	strb	r2, [r3, #1]
 800348c:	e00f      	b.n	80034ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_PCD_EP_Close+0x6e>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e00e      	b.n	80034e6 <HAL_PCD_EP_Close+0x8c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68f9      	ldr	r1, [r7, #12]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f002 fcba 	bl	8005e50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	460b      	mov	r3, r1
 80034fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034fe:	7afb      	ldrb	r3, [r7, #11]
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2200      	movs	r2, #0
 8003528:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003530:	7afb      	ldrb	r3, [r7, #11]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	b2da      	uxtb	r2, r3
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	799b      	ldrb	r3, [r3, #6]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d102      	bne.n	800354a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	799b      	ldrb	r3, [r3, #6]
 8003552:	461a      	mov	r2, r3
 8003554:	6979      	ldr	r1, [r7, #20]
 8003556:	f002 fd57 	bl	8006008 <USB_EPStartXfer>

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	460b      	mov	r3, r1
 80035a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a4:	7afb      	ldrb	r3, [r7, #11]
 80035a6:	f003 020f 	and.w	r2, r3, #15
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	3310      	adds	r3, #16
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2200      	movs	r2, #0
 80035cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2201      	movs	r2, #1
 80035d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d4:	7afb      	ldrb	r3, [r7, #11]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	799b      	ldrb	r3, [r3, #6]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d102      	bne.n	80035ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	799b      	ldrb	r3, [r3, #6]
 80035f6:	461a      	mov	r2, r3
 80035f8:	6979      	ldr	r1, [r7, #20]
 80035fa:	f002 fd05 	bl	8006008 <USB_EPStartXfer>

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	7912      	ldrb	r2, [r2, #4]
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e04f      	b.n	80036c6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800362a:	2b00      	cmp	r3, #0
 800362c:	da0f      	bge.n	800364e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 020f 	and.w	r2, r3, #15
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	3310      	adds	r3, #16
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	3304      	adds	r3, #4
 8003644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	705a      	strb	r2, [r3, #1]
 800364c:	e00d      	b.n	800366a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4413      	add	r3, r2
 8003660:	3304      	adds	r3, #4
 8003662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	b2da      	uxtb	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_PCD_EP_SetStall+0x82>
 8003686:	2302      	movs	r3, #2
 8003688:	e01d      	b.n	80036c6 <HAL_PCD_EP_SetStall+0xbe>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	4618      	mov	r0, r3
 800369a:	f003 f88d 	bl	80067b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d109      	bne.n	80036bc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	7999      	ldrb	r1, [r3, #6]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036b6:	461a      	mov	r2, r3
 80036b8:	f003 fa7e 	bl	8006bb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	7912      	ldrb	r2, [r2, #4]
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e042      	b.n	8003772 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	da0f      	bge.n	8003714 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 020f 	and.w	r2, r3, #15
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	3310      	adds	r3, #16
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	3304      	adds	r3, #4
 800370a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	705a      	strb	r2, [r3, #1]
 8003712:	e00f      	b.n	8003734 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	f003 020f 	and.w	r2, r3, #15
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	3304      	adds	r3, #4
 800372c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_PCD_EP_ClrStall+0x86>
 8003750:	2302      	movs	r3, #2
 8003752:	e00e      	b.n	8003772 <HAL_PCD_EP_ClrStall+0xa4>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68f9      	ldr	r1, [r7, #12]
 8003762:	4618      	mov	r0, r3
 8003764:	f003 f896 	bl	8006894 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	460b      	mov	r3, r1
 8003784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800378a:	2b00      	cmp	r3, #0
 800378c:	da0c      	bge.n	80037a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	3310      	adds	r3, #16
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	3304      	adds	r3, #4
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e00c      	b.n	80037c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	f003 020f 	and.w	r2, r3, #15
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	3304      	adds	r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68f9      	ldr	r1, [r7, #12]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f002 feb5 	bl	8006538 <USB_EPStopXfer>
 80037ce:	4603      	mov	r3, r0
 80037d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80037d2:	7afb      	ldrb	r3, [r7, #11]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	@ 0x28
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	3310      	adds	r3, #16
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	3304      	adds	r3, #4
 8003802:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d901      	bls.n	8003814 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e06b      	b.n	80038ec <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	429a      	cmp	r2, r3
 8003828:	d902      	bls.n	8003830 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	3303      	adds	r3, #3
 8003834:	089b      	lsrs	r3, r3, #2
 8003836:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003838:	e02a      	b.n	8003890 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	429a      	cmp	r2, r3
 800384e:	d902      	bls.n	8003856 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3303      	adds	r3, #3
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	68d9      	ldr	r1, [r3, #12]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	4603      	mov	r3, r0
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f002 ff0a 	bl	800668c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	441a      	add	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	441a      	add	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d809      	bhi.n	80038ba <PCD_WriteEmptyTxFifo+0xde>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d203      	bcs.n	80038ba <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1bf      	bne.n	800383a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d811      	bhi.n	80038ea <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	2201      	movs	r2, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	43db      	mvns	r3, r3
 80038e0:	6939      	ldr	r1, [r7, #16]
 80038e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038e6:	4013      	ands	r3, r2
 80038e8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	333c      	adds	r3, #60	@ 0x3c
 800390c:	3304      	adds	r3, #4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	799b      	ldrb	r3, [r3, #6]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d17b      	bne.n	8003a22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d015      	beq.n	8003960 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4a61      	ldr	r2, [pc, #388]	@ (8003abc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	f240 80b9 	bls.w	8003ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80b3 	beq.w	8003ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003956:	461a      	mov	r2, r3
 8003958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800395c:	6093      	str	r3, [r2, #8]
 800395e:	e0a7      	b.n	8003ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003976:	461a      	mov	r2, r3
 8003978:	2320      	movs	r3, #32
 800397a:	6093      	str	r3, [r2, #8]
 800397c:	e098      	b.n	8003ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 8093 	bne.w	8003ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	4a4b      	ldr	r2, [pc, #300]	@ (8003abc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d90f      	bls.n	80039b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a8:	461a      	mov	r2, r3
 80039aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ae:	6093      	str	r3, [r2, #8]
 80039b0:	e07e      	b.n	8003ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	3304      	adds	r3, #4
 80039c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	0159      	lsls	r1, r3, #5
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	440b      	add	r3, r1
 80039d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039de:	1ad2      	subs	r2, r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d114      	bne.n	8003a14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039fc:	461a      	mov	r2, r3
 80039fe:	2101      	movs	r1, #1
 8003a00:	f003 f8da 	bl	8006bb8 <USB_EP0_OutStart>
 8003a04:	e006      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	441a      	add	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	4619      	mov	r1, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f005 fb84 	bl	8009128 <HAL_PCD_DataOutStageCallback>
 8003a20:	e046      	b.n	8003ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	4a26      	ldr	r2, [pc, #152]	@ (8003ac0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d124      	bne.n	8003a74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a40:	461a      	mov	r2, r3
 8003a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a46:	6093      	str	r3, [r2, #8]
 8003a48:	e032      	b.n	8003ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a60:	461a      	mov	r2, r3
 8003a62:	2320      	movs	r3, #32
 8003a64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f005 fb5b 	bl	8009128 <HAL_PCD_DataOutStageCallback>
 8003a72:	e01d      	b.n	8003ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d114      	bne.n	8003aa4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d108      	bne.n	8003aa4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	f003 f88a 	bl	8006bb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f005 fb3c 	bl	8009128 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	4f54300a 	.word	0x4f54300a
 8003ac0:	4f54310a 	.word	0x4f54310a

08003ac4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	333c      	adds	r3, #60	@ 0x3c
 8003adc:	3304      	adds	r3, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a15      	ldr	r2, [pc, #84]	@ (8003b4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d90e      	bls.n	8003b18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d009      	beq.n	8003b18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b10:	461a      	mov	r2, r3
 8003b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f005 faf3 	bl	8009104 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a0a      	ldr	r2, [pc, #40]	@ (8003b4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d90c      	bls.n	8003b40 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	799b      	ldrb	r3, [r3, #6]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d108      	bne.n	8003b40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	f003 f83c 	bl	8006bb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	4f54300a 	.word	0x4f54300a

08003b50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70fb      	strb	r3, [r7, #3]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d107      	bne.n	8003b7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b6e:	883b      	ldrh	r3, [r7, #0]
 8003b70:	0419      	lsls	r1, r3, #16
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b7c:	e028      	b.n	8003bd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	4413      	add	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]
 8003b90:	e00d      	b.n	8003bae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	3340      	adds	r3, #64	@ 0x40
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	3301      	adds	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d3ec      	bcc.n	8003b92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003bb8:	883b      	ldrh	r3, [r7, #0]
 8003bba:	0418      	lsls	r0, r3, #16
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6819      	ldr	r1, [r3, #0]
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	4302      	orrs	r2, r0
 8003bc8:	3340      	adds	r3, #64	@ 0x40
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e267      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d075      	beq.n	8003d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c36:	4b88      	ldr	r3, [pc, #544]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d00c      	beq.n	8003c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c42:	4b85      	ldr	r3, [pc, #532]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d112      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c4e:	4b82      	ldr	r3, [pc, #520]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c5a:	d10b      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d05b      	beq.n	8003d20 <HAL_RCC_OscConfig+0x108>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d157      	bne.n	8003d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e242      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c7c:	d106      	bne.n	8003c8c <HAL_RCC_OscConfig+0x74>
 8003c7e:	4b76      	ldr	r3, [pc, #472]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a75      	ldr	r2, [pc, #468]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e01d      	b.n	8003cc8 <HAL_RCC_OscConfig+0xb0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x98>
 8003c96:	4b70      	ldr	r3, [pc, #448]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a6f      	ldr	r2, [pc, #444]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6c      	ldr	r2, [pc, #432]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCC_OscConfig+0xb0>
 8003cb0:	4b69      	ldr	r3, [pc, #420]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a68      	ldr	r2, [pc, #416]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4b66      	ldr	r3, [pc, #408]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a65      	ldr	r2, [pc, #404]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fd fb34 	bl	800133c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd8:	f7fd fb30 	bl	800133c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	@ 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e207      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	4b5b      	ldr	r3, [pc, #364]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xc0>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fb20 	bl	800133c <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fd fb1c 	bl	800133c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	@ 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e1f3      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	4b51      	ldr	r3, [pc, #324]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0xe8>
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d063      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3a:	4b47      	ldr	r3, [pc, #284]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d11c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d46:	4b44      	ldr	r3, [pc, #272]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	4b41      	ldr	r3, [pc, #260]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_RCC_OscConfig+0x152>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e1c7      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4937      	ldr	r1, [pc, #220]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	e03a      	b.n	8003df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d88:	4b34      	ldr	r3, [pc, #208]	@ (8003e5c <HAL_RCC_OscConfig+0x244>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fd fad5 	bl	800133c <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d96:	f7fd fad1 	bl	800133c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e1a8      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b28      	ldr	r3, [pc, #160]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4925      	ldr	r1, [pc, #148]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
 8003dc8:	e015      	b.n	8003df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dca:	4b24      	ldr	r3, [pc, #144]	@ (8003e5c <HAL_RCC_OscConfig+0x244>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fab4 	bl	800133c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7fd fab0 	bl	800133c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e187      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d036      	beq.n	8003e70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0a:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <HAL_RCC_OscConfig+0x248>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fd fa94 	bl	800133c <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e18:	f7fd fa90 	bl	800133c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e167      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x200>
 8003e36:	e01b      	b.n	8003e70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e38:	4b09      	ldr	r3, [pc, #36]	@ (8003e60 <HAL_RCC_OscConfig+0x248>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3e:	f7fd fa7d 	bl	800133c <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	e00e      	b.n	8003e64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e46:	f7fd fa79 	bl	800133c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d907      	bls.n	8003e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e150      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	42470000 	.word	0x42470000
 8003e60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e64:	4b88      	ldr	r3, [pc, #544]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ea      	bne.n	8003e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8097 	beq.w	8003fac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e82:	4b81      	ldr	r3, [pc, #516]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10f      	bne.n	8003eae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	4b7d      	ldr	r3, [pc, #500]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	4a7c      	ldr	r2, [pc, #496]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b77      	ldr	r3, [pc, #476]	@ (800408c <HAL_RCC_OscConfig+0x474>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eba:	4b74      	ldr	r3, [pc, #464]	@ (800408c <HAL_RCC_OscConfig+0x474>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a73      	ldr	r2, [pc, #460]	@ (800408c <HAL_RCC_OscConfig+0x474>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fd fa39 	bl	800133c <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fd fa35 	bl	800133c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e10c      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800408c <HAL_RCC_OscConfig+0x474>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCC_OscConfig+0x2ea>
 8003ef4:	4b64      	ldr	r3, [pc, #400]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef8:	4a63      	ldr	r2, [pc, #396]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f00:	e01c      	b.n	8003f3c <HAL_RCC_OscConfig+0x324>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x30c>
 8003f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f10:	f043 0304 	orr.w	r3, r3, #4
 8003f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f16:	4b5c      	ldr	r3, [pc, #368]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f22:	e00b      	b.n	8003f3c <HAL_RCC_OscConfig+0x324>
 8003f24:	4b58      	ldr	r3, [pc, #352]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	4a57      	ldr	r2, [pc, #348]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f30:	4b55      	ldr	r3, [pc, #340]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f34:	4a54      	ldr	r2, [pc, #336]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f36:	f023 0304 	bic.w	r3, r3, #4
 8003f3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d015      	beq.n	8003f70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7fd f9fa 	bl	800133c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7fd f9f6 	bl	800133c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0cb      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	4b49      	ldr	r3, [pc, #292]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0ee      	beq.n	8003f4c <HAL_RCC_OscConfig+0x334>
 8003f6e:	e014      	b.n	8003f9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f70:	f7fd f9e4 	bl	800133c <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7fd f9e0 	bl	800133c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e0b5      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ee      	bne.n	8003f78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d105      	bne.n	8003fac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa0:	4b39      	ldr	r3, [pc, #228]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	4a38      	ldr	r2, [pc, #224]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80a1 	beq.w	80040f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fb6:	4b34      	ldr	r3, [pc, #208]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d05c      	beq.n	800407c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d141      	bne.n	800404e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <HAL_RCC_OscConfig+0x478>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd f9b4 	bl	800133c <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd f9b0 	bl	800133c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e087      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	4b27      	ldr	r3, [pc, #156]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	019b      	lsls	r3, r3, #6
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400c:	085b      	lsrs	r3, r3, #1
 800400e:	3b01      	subs	r3, #1
 8004010:	041b      	lsls	r3, r3, #16
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	491b      	ldr	r1, [pc, #108]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004020:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <HAL_RCC_OscConfig+0x478>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7fd f989 	bl	800133c <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402e:	f7fd f985 	bl	800133c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e05c      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004040:	4b11      	ldr	r3, [pc, #68]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x416>
 800404c:	e054      	b.n	80040f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <HAL_RCC_OscConfig+0x478>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fd f972 	bl	800133c <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405c:	f7fd f96e 	bl	800133c <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e045      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <HAL_RCC_OscConfig+0x470>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x444>
 800407a:	e03d      	b.n	80040f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d107      	bne.n	8004094 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e038      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
 8004088:	40023800 	.word	0x40023800
 800408c:	40007000 	.word	0x40007000
 8004090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004094:	4b1b      	ldr	r3, [pc, #108]	@ (8004104 <HAL_RCC_OscConfig+0x4ec>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d028      	beq.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d121      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d11a      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040c4:	4013      	ands	r3, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d111      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	3b01      	subs	r3, #1
 80040de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800

08004108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0cc      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800411c:	4b68      	ldr	r3, [pc, #416]	@ (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d90c      	bls.n	8004144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b65      	ldr	r3, [pc, #404]	@ (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b63      	ldr	r3, [pc, #396]	@ (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0b8      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d020      	beq.n	8004192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800415c:	4b59      	ldr	r3, [pc, #356]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a58      	ldr	r2, [pc, #352]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004174:	4b53      	ldr	r3, [pc, #332]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a52      	ldr	r2, [pc, #328]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800417e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004180:	4b50      	ldr	r3, [pc, #320]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	494d      	ldr	r1, [pc, #308]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d044      	beq.n	8004228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	4b47      	ldr	r3, [pc, #284]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d119      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e07f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c6:	4b3f      	ldr	r3, [pc, #252]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e06f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d6:	4b3b      	ldr	r3, [pc, #236]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e067      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e6:	4b37      	ldr	r3, [pc, #220]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 0203 	bic.w	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4934      	ldr	r1, [pc, #208]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f8:	f7fd f8a0 	bl	800133c <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004200:	f7fd f89c 	bl	800133c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e04f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	4b2b      	ldr	r3, [pc, #172]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 020c 	and.w	r2, r3, #12
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	429a      	cmp	r2, r3
 8004226:	d1eb      	bne.n	8004200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004228:	4b25      	ldr	r3, [pc, #148]	@ (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d20c      	bcs.n	8004250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b22      	ldr	r3, [pc, #136]	@ (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b20      	ldr	r3, [pc, #128]	@ (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e032      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800425c:	4b19      	ldr	r3, [pc, #100]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4916      	ldr	r1, [pc, #88]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427a:	4b12      	ldr	r3, [pc, #72]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	490e      	ldr	r1, [pc, #56]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800428e:	f000 f821 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8004292:	4602      	mov	r2, r0
 8004294:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	490a      	ldr	r1, [pc, #40]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	5ccb      	ldrb	r3, [r1, r3]
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	4a09      	ldr	r2, [pc, #36]	@ (80042cc <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042aa:	4b09      	ldr	r3, [pc, #36]	@ (80042d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fd f800 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40023c00 	.word	0x40023c00
 80042c4:	40023800 	.word	0x40023800
 80042c8:	0800a124 	.word	0x0800a124
 80042cc:	20000030 	.word	0x20000030
 80042d0:	20000034 	.word	0x20000034

080042d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d8:	b090      	sub	sp, #64	@ 0x40
 80042da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e0:	2300      	movs	r3, #0
 80042e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e4:	2300      	movs	r3, #0
 80042e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ec:	4b59      	ldr	r3, [pc, #356]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d00d      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x40>
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	f200 80a1 	bhi.w	8004440 <HAL_RCC_GetSysClockFreq+0x16c>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x34>
 8004302:	2b04      	cmp	r3, #4
 8004304:	d003      	beq.n	800430e <HAL_RCC_GetSysClockFreq+0x3a>
 8004306:	e09b      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004308:	4b53      	ldr	r3, [pc, #332]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x184>)
 800430a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800430c:	e09b      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800430e:	4b53      	ldr	r3, [pc, #332]	@ (800445c <HAL_RCC_GetSysClockFreq+0x188>)
 8004310:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004312:	e098      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004314:	4b4f      	ldr	r3, [pc, #316]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800431c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800431e:	4b4d      	ldr	r3, [pc, #308]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d028      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432a:	4b4a      	ldr	r3, [pc, #296]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	2200      	movs	r2, #0
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	627a      	str	r2, [r7, #36]	@ 0x24
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800433c:	2100      	movs	r1, #0
 800433e:	4b47      	ldr	r3, [pc, #284]	@ (800445c <HAL_RCC_GetSysClockFreq+0x188>)
 8004340:	fb03 f201 	mul.w	r2, r3, r1
 8004344:	2300      	movs	r3, #0
 8004346:	fb00 f303 	mul.w	r3, r0, r3
 800434a:	4413      	add	r3, r2
 800434c:	4a43      	ldr	r2, [pc, #268]	@ (800445c <HAL_RCC_GetSysClockFreq+0x188>)
 800434e:	fba0 1202 	umull	r1, r2, r0, r2
 8004352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004354:	460a      	mov	r2, r1
 8004356:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800435a:	4413      	add	r3, r2
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800435e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004360:	2200      	movs	r2, #0
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	61fa      	str	r2, [r7, #28]
 8004366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800436a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800436e:	f7fb ff87 	bl	8000280 <__aeabi_uldivmod>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4613      	mov	r3, r2
 8004378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800437a:	e053      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800437c:	4b35      	ldr	r3, [pc, #212]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	099b      	lsrs	r3, r3, #6
 8004382:	2200      	movs	r2, #0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	617a      	str	r2, [r7, #20]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800438e:	f04f 0b00 	mov.w	fp, #0
 8004392:	4652      	mov	r2, sl
 8004394:	465b      	mov	r3, fp
 8004396:	f04f 0000 	mov.w	r0, #0
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	0159      	lsls	r1, r3, #5
 80043a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a4:	0150      	lsls	r0, r2, #5
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	ebb2 080a 	subs.w	r8, r2, sl
 80043ae:	eb63 090b 	sbc.w	r9, r3, fp
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043c6:	ebb2 0408 	subs.w	r4, r2, r8
 80043ca:	eb63 0509 	sbc.w	r5, r3, r9
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	00eb      	lsls	r3, r5, #3
 80043d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043dc:	00e2      	lsls	r2, r4, #3
 80043de:	4614      	mov	r4, r2
 80043e0:	461d      	mov	r5, r3
 80043e2:	eb14 030a 	adds.w	r3, r4, sl
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	eb45 030b 	adc.w	r3, r5, fp
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043fa:	4629      	mov	r1, r5
 80043fc:	028b      	lsls	r3, r1, #10
 80043fe:	4621      	mov	r1, r4
 8004400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004404:	4621      	mov	r1, r4
 8004406:	028a      	lsls	r2, r1, #10
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440e:	2200      	movs	r2, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	60fa      	str	r2, [r7, #12]
 8004414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004418:	f7fb ff32 	bl	8000280 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4613      	mov	r3, r2
 8004422:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004424:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	3301      	adds	r3, #1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004434:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800443e:	e002      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x184>)
 8004442:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004448:	4618      	mov	r0, r3
 800444a:	3740      	adds	r7, #64	@ 0x40
 800444c:	46bd      	mov	sp, r7
 800444e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	00f42400 	.word	0x00f42400
 800445c:	017d7840 	.word	0x017d7840

08004460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004464:	4b03      	ldr	r3, [pc, #12]	@ (8004474 <HAL_RCC_GetHCLKFreq+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000030 	.word	0x20000030

08004478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e041      	b.n	800450e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc fd3a 	bl	8000f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f000 fce2 	bl	8004e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d001      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e044      	b.n	80045ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1e      	ldr	r2, [pc, #120]	@ (80045c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d018      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x6c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455a:	d013      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x6c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1a      	ldr	r2, [pc, #104]	@ (80045cc <HAL_TIM_Base_Start_IT+0xb4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00e      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x6c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a19      	ldr	r2, [pc, #100]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d009      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x6c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a17      	ldr	r2, [pc, #92]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x6c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a16      	ldr	r2, [pc, #88]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d111      	bne.n	80045a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b06      	cmp	r3, #6
 8004594:	d010      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a6:	e007      	b.n	80045b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00
 80045d8:	40014000 	.word	0x40014000

080045dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e041      	b.n	8004672 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f839 	bl	800467a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f000 fc30 	bl	8004e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_TIM_PWM_Start+0x24>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e022      	b.n	80046fa <HAL_TIM_PWM_Start+0x6a>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d109      	bne.n	80046ce <HAL_TIM_PWM_Start+0x3e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	bf14      	ite	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	2300      	moveq	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	e015      	b.n	80046fa <HAL_TIM_PWM_Start+0x6a>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d109      	bne.n	80046e8 <HAL_TIM_PWM_Start+0x58>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e008      	b.n	80046fa <HAL_TIM_PWM_Start+0x6a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e068      	b.n	80047d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0x82>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004710:	e013      	b.n	800473a <HAL_TIM_PWM_Start+0xaa>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start+0x92>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004720:	e00b      	b.n	800473a <HAL_TIM_PWM_Start+0xaa>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d104      	bne.n	8004732 <HAL_TIM_PWM_Start+0xa2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004730:	e003      	b.n	800473a <HAL_TIM_PWM_Start+0xaa>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2201      	movs	r2, #1
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fedf 	bl	8005506 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a23      	ldr	r2, [pc, #140]	@ (80047dc <HAL_TIM_PWM_Start+0x14c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d107      	bne.n	8004762 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <HAL_TIM_PWM_Start+0x14c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d018      	beq.n	800479e <HAL_TIM_PWM_Start+0x10e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004774:	d013      	beq.n	800479e <HAL_TIM_PWM_Start+0x10e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a19      	ldr	r2, [pc, #100]	@ (80047e0 <HAL_TIM_PWM_Start+0x150>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <HAL_TIM_PWM_Start+0x10e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a17      	ldr	r2, [pc, #92]	@ (80047e4 <HAL_TIM_PWM_Start+0x154>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_TIM_PWM_Start+0x10e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a16      	ldr	r2, [pc, #88]	@ (80047e8 <HAL_TIM_PWM_Start+0x158>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <HAL_TIM_PWM_Start+0x10e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a14      	ldr	r2, [pc, #80]	@ (80047ec <HAL_TIM_PWM_Start+0x15c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d111      	bne.n	80047c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b06      	cmp	r3, #6
 80047ae:	d010      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c0:	e007      	b.n	80047d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0201 	orr.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40014000 	.word	0x40014000

080047f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fe7f 	bl	8005506 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a29      	ldr	r2, [pc, #164]	@ (80048b4 <HAL_TIM_PWM_Stop+0xc4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d117      	bne.n	8004842 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a1a      	ldr	r2, [r3, #32]
 8004818:	f241 1311 	movw	r3, #4369	@ 0x1111
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10f      	bne.n	8004842 <HAL_TIM_PWM_Stop+0x52>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a1a      	ldr	r2, [r3, #32]
 8004828:	f240 4344 	movw	r3, #1092	@ 0x444
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d107      	bne.n	8004842 <HAL_TIM_PWM_Stop+0x52>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004840:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a1a      	ldr	r2, [r3, #32]
 8004848:	f241 1311 	movw	r3, #4369	@ 0x1111
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <HAL_TIM_PWM_Stop+0x82>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a1a      	ldr	r2, [r3, #32]
 8004858:	f240 4344 	movw	r3, #1092	@ 0x444
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <HAL_TIM_PWM_Stop+0x82>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <HAL_TIM_PWM_Stop+0x92>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004880:	e013      	b.n	80048aa <HAL_TIM_PWM_Stop+0xba>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b04      	cmp	r3, #4
 8004886:	d104      	bne.n	8004892 <HAL_TIM_PWM_Stop+0xa2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004890:	e00b      	b.n	80048aa <HAL_TIM_PWM_Stop+0xba>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d104      	bne.n	80048a2 <HAL_TIM_PWM_Stop+0xb2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a0:	e003      	b.n	80048aa <HAL_TIM_PWM_Stop+0xba>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40010000 	.word	0x40010000

080048b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d020      	beq.n	800491c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01b      	beq.n	800491c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0202 	mvn.w	r2, #2
 80048ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa9d 	bl	8004e42 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa8f 	bl	8004e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 faa0 	bl	8004e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0204 	mvn.w	r2, #4
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa77 	bl	8004e42 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa69 	bl	8004e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa7a 	bl	8004e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d020      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01b      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0208 	mvn.w	r2, #8
 8004984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2204      	movs	r2, #4
 800498a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa51 	bl	8004e42 <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa43 	bl	8004e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fa54 	bl	8004e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d020      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01b      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0210 	mvn.w	r2, #16
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2208      	movs	r2, #8
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa2b 	bl	8004e42 <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa1d 	bl	8004e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fa2e 	bl	8004e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00c      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0201 	mvn.w	r2, #1
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc f948 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00c      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fdfc 	bl	8005640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00c      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9ff 	bl	8004e6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00c      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0220 	mvn.w	r2, #32
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fdce 	bl	800562c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0ae      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	f200 809f 	bhi.w	8004c04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8004acc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004b01 	.word	0x08004b01
 8004ad0:	08004c05 	.word	0x08004c05
 8004ad4:	08004c05 	.word	0x08004c05
 8004ad8:	08004c05 	.word	0x08004c05
 8004adc:	08004b41 	.word	0x08004b41
 8004ae0:	08004c05 	.word	0x08004c05
 8004ae4:	08004c05 	.word	0x08004c05
 8004ae8:	08004c05 	.word	0x08004c05
 8004aec:	08004b83 	.word	0x08004b83
 8004af0:	08004c05 	.word	0x08004c05
 8004af4:	08004c05 	.word	0x08004c05
 8004af8:	08004c05 	.word	0x08004c05
 8004afc:	08004bc3 	.word	0x08004bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fa46 	bl	8004f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0208 	orr.w	r2, r2, #8
 8004b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0204 	bic.w	r2, r2, #4
 8004b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6999      	ldr	r1, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	619a      	str	r2, [r3, #24]
      break;
 8004b3e:	e064      	b.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fa8c 	bl	8005064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6999      	ldr	r1, [r3, #24]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	021a      	lsls	r2, r3, #8
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	619a      	str	r2, [r3, #24]
      break;
 8004b80:	e043      	b.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fad7 	bl	800513c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0208 	orr.w	r2, r2, #8
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0204 	bic.w	r2, r2, #4
 8004bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	61da      	str	r2, [r3, #28]
      break;
 8004bc0:	e023      	b.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fb21 	bl	8005210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69d9      	ldr	r1, [r3, #28]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	021a      	lsls	r2, r3, #8
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	61da      	str	r2, [r3, #28]
      break;
 8004c02:	e002      	b.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	75fb      	strb	r3, [r7, #23]
      break;
 8004c08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_TIM_ConfigClockSource+0x1c>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e0b4      	b.n	8004da2 <HAL_TIM_ConfigClockSource+0x186>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c70:	d03e      	beq.n	8004cf0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c76:	f200 8087 	bhi.w	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7e:	f000 8086 	beq.w	8004d8e <HAL_TIM_ConfigClockSource+0x172>
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c86:	d87f      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b70      	cmp	r3, #112	@ 0x70
 8004c8a:	d01a      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0xa6>
 8004c8c:	2b70      	cmp	r3, #112	@ 0x70
 8004c8e:	d87b      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b60      	cmp	r3, #96	@ 0x60
 8004c92:	d050      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x11a>
 8004c94:	2b60      	cmp	r3, #96	@ 0x60
 8004c96:	d877      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b50      	cmp	r3, #80	@ 0x50
 8004c9a:	d03c      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0xfa>
 8004c9c:	2b50      	cmp	r3, #80	@ 0x50
 8004c9e:	d873      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b40      	cmp	r3, #64	@ 0x40
 8004ca2:	d058      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x13a>
 8004ca4:	2b40      	cmp	r3, #64	@ 0x40
 8004ca6:	d86f      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b30      	cmp	r3, #48	@ 0x30
 8004caa:	d064      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15a>
 8004cac:	2b30      	cmp	r3, #48	@ 0x30
 8004cae:	d86b      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d060      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15a>
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d867      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d05c      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15a>
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d05a      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	e062      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd2:	f000 fbf8 	bl	80054c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	609a      	str	r2, [r3, #8]
      break;
 8004cee:	e04f      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d00:	f000 fbe1 	bl	80054c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d12:	609a      	str	r2, [r3, #8]
      break;
 8004d14:	e03c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	461a      	mov	r2, r3
 8004d24:	f000 fb55 	bl	80053d2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2150      	movs	r1, #80	@ 0x50
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fbae 	bl	8005490 <TIM_ITRx_SetConfig>
      break;
 8004d34:	e02c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d42:	461a      	mov	r2, r3
 8004d44:	f000 fb74 	bl	8005430 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2160      	movs	r1, #96	@ 0x60
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fb9e 	bl	8005490 <TIM_ITRx_SetConfig>
      break;
 8004d54:	e01c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d62:	461a      	mov	r2, r3
 8004d64:	f000 fb35 	bl	80053d2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2140      	movs	r1, #64	@ 0x40
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fb8e 	bl	8005490 <TIM_ITRx_SetConfig>
      break;
 8004d74:	e00c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 fb85 	bl	8005490 <TIM_ITRx_SetConfig>
      break;
 8004d86:	e003      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d8c:	e000      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e031      	b.n	8004e26 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fa6b 	bl	80052b0 <TIM_SlaveTimer_SetConfig>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e018      	b.n	8004e26 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e02:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e12:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a3a      	ldr	r2, [pc, #232]	@ (8004f7c <TIM_Base_SetConfig+0xfc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00f      	beq.n	8004eb8 <TIM_Base_SetConfig+0x38>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e9e:	d00b      	beq.n	8004eb8 <TIM_Base_SetConfig+0x38>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a37      	ldr	r2, [pc, #220]	@ (8004f80 <TIM_Base_SetConfig+0x100>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d007      	beq.n	8004eb8 <TIM_Base_SetConfig+0x38>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a36      	ldr	r2, [pc, #216]	@ (8004f84 <TIM_Base_SetConfig+0x104>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_Base_SetConfig+0x38>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a35      	ldr	r2, [pc, #212]	@ (8004f88 <TIM_Base_SetConfig+0x108>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d108      	bne.n	8004eca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8004f7c <TIM_Base_SetConfig+0xfc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d01b      	beq.n	8004f0a <TIM_Base_SetConfig+0x8a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed8:	d017      	beq.n	8004f0a <TIM_Base_SetConfig+0x8a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a28      	ldr	r2, [pc, #160]	@ (8004f80 <TIM_Base_SetConfig+0x100>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <TIM_Base_SetConfig+0x8a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a27      	ldr	r2, [pc, #156]	@ (8004f84 <TIM_Base_SetConfig+0x104>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <TIM_Base_SetConfig+0x8a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a26      	ldr	r2, [pc, #152]	@ (8004f88 <TIM_Base_SetConfig+0x108>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <TIM_Base_SetConfig+0x8a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a25      	ldr	r2, [pc, #148]	@ (8004f8c <TIM_Base_SetConfig+0x10c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_Base_SetConfig+0x8a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a24      	ldr	r2, [pc, #144]	@ (8004f90 <TIM_Base_SetConfig+0x110>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_Base_SetConfig+0x8a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a23      	ldr	r2, [pc, #140]	@ (8004f94 <TIM_Base_SetConfig+0x114>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d108      	bne.n	8004f1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0e      	ldr	r2, [pc, #56]	@ (8004f7c <TIM_Base_SetConfig+0xfc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d105      	bne.n	8004f6e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]
  }
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800

08004f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f023 0201 	bic.w	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 0302 	bic.w	r3, r3, #2
 8004fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <TIM_OC1_SetConfig+0xc8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10c      	bne.n	800500e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0308 	bic.w	r3, r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a13      	ldr	r2, [pc, #76]	@ (8005060 <TIM_OC1_SetConfig+0xc8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d111      	bne.n	800503a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	621a      	str	r2, [r3, #32]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40010000 	.word	0x40010000

08005064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f023 0210 	bic.w	r2, r3, #16
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800509a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 0320 	bic.w	r3, r3, #32
 80050ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1e      	ldr	r2, [pc, #120]	@ (8005138 <TIM_OC2_SetConfig+0xd4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10d      	bne.n	80050e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a15      	ldr	r2, [pc, #84]	@ (8005138 <TIM_OC2_SetConfig+0xd4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d113      	bne.n	8005110 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000

0800513c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1d      	ldr	r2, [pc, #116]	@ (800520c <TIM_OC3_SetConfig+0xd0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d10d      	bne.n	80051b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a14      	ldr	r2, [pc, #80]	@ (800520c <TIM_OC3_SetConfig+0xd0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d113      	bne.n	80051e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	621a      	str	r2, [r3, #32]
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40010000 	.word	0x40010000

08005210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800523e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800525a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	031b      	lsls	r3, r3, #12
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a10      	ldr	r2, [pc, #64]	@ (80052ac <TIM_OC4_SetConfig+0x9c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d109      	bne.n	8005284 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40010000 	.word	0x40010000

080052b0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052cc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b70      	cmp	r3, #112	@ 0x70
 80052f8:	d01a      	beq.n	8005330 <TIM_SlaveTimer_SetConfig+0x80>
 80052fa:	2b70      	cmp	r3, #112	@ 0x70
 80052fc:	d860      	bhi.n	80053c0 <TIM_SlaveTimer_SetConfig+0x110>
 80052fe:	2b60      	cmp	r3, #96	@ 0x60
 8005300:	d054      	beq.n	80053ac <TIM_SlaveTimer_SetConfig+0xfc>
 8005302:	2b60      	cmp	r3, #96	@ 0x60
 8005304:	d85c      	bhi.n	80053c0 <TIM_SlaveTimer_SetConfig+0x110>
 8005306:	2b50      	cmp	r3, #80	@ 0x50
 8005308:	d046      	beq.n	8005398 <TIM_SlaveTimer_SetConfig+0xe8>
 800530a:	2b50      	cmp	r3, #80	@ 0x50
 800530c:	d858      	bhi.n	80053c0 <TIM_SlaveTimer_SetConfig+0x110>
 800530e:	2b40      	cmp	r3, #64	@ 0x40
 8005310:	d019      	beq.n	8005346 <TIM_SlaveTimer_SetConfig+0x96>
 8005312:	2b40      	cmp	r3, #64	@ 0x40
 8005314:	d854      	bhi.n	80053c0 <TIM_SlaveTimer_SetConfig+0x110>
 8005316:	2b30      	cmp	r3, #48	@ 0x30
 8005318:	d055      	beq.n	80053c6 <TIM_SlaveTimer_SetConfig+0x116>
 800531a:	2b30      	cmp	r3, #48	@ 0x30
 800531c:	d850      	bhi.n	80053c0 <TIM_SlaveTimer_SetConfig+0x110>
 800531e:	2b20      	cmp	r3, #32
 8005320:	d051      	beq.n	80053c6 <TIM_SlaveTimer_SetConfig+0x116>
 8005322:	2b20      	cmp	r3, #32
 8005324:	d84c      	bhi.n	80053c0 <TIM_SlaveTimer_SetConfig+0x110>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d04d      	beq.n	80053c6 <TIM_SlaveTimer_SetConfig+0x116>
 800532a:	2b10      	cmp	r3, #16
 800532c:	d04b      	beq.n	80053c6 <TIM_SlaveTimer_SetConfig+0x116>
 800532e:	e047      	b.n	80053c0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005340:	f000 f8c1 	bl	80054c6 <TIM_ETR_SetConfig>
      break;
 8005344:	e040      	b.n	80053c8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b05      	cmp	r3, #5
 800534c:	d101      	bne.n	8005352 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e03b      	b.n	80053ca <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005378:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	4313      	orrs	r3, r2
 8005384:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	621a      	str	r2, [r3, #32]
      break;
 8005396:	e017      	b.n	80053c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a4:	461a      	mov	r2, r3
 80053a6:	f000 f814 	bl	80053d2 <TIM_TI1_ConfigInputStage>
      break;
 80053aa:	e00d      	b.n	80053c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b8:	461a      	mov	r2, r3
 80053ba:	f000 f839 	bl	8005430 <TIM_TI2_ConfigInputStage>
      break;
 80053be:	e003      	b.n	80053c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	75fb      	strb	r3, [r7, #23]
      break;
 80053c4:	e000      	b.n	80053c8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80053c6:	bf00      	nop
  }

  return status;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b087      	sub	sp, #28
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f023 0201 	bic.w	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 030a 	bic.w	r3, r3, #10
 800540e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f023 0210 	bic.w	r2, r3, #16
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800545a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	031b      	lsls	r3, r3, #12
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800546c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	621a      	str	r2, [r3, #32]
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f043 0307 	orr.w	r3, r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	609a      	str	r2, [r3, #8]
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	021a      	lsls	r2, r3, #8
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	609a      	str	r2, [r3, #8]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005506:	b480      	push	{r7}
 8005508:	b087      	sub	sp, #28
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	2201      	movs	r2, #1
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	43db      	mvns	r3, r3
 8005528:	401a      	ands	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f003 031f 	and.w	r3, r3, #31
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	fa01 f303 	lsl.w	r3, r1, r3
 800553e:	431a      	orrs	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	621a      	str	r2, [r3, #32]
}
 8005544:	bf00      	nop
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005564:	2302      	movs	r3, #2
 8005566:	e050      	b.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800558e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b4:	d013      	beq.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a18      	ldr	r2, [pc, #96]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a16      	ldr	r2, [pc, #88]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a15      	ldr	r2, [pc, #84]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a13      	ldr	r2, [pc, #76]	@ (8005628 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d10c      	bne.n	80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40010000 	.word	0x40010000
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	40000c00 	.word	0x40000c00
 8005628:	40014000 	.word	0x40014000

0800562c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005654:	b084      	sub	sp, #16
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	f107 001c 	add.w	r0, r7, #28
 8005662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005666:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800566a:	2b01      	cmp	r3, #1
 800566c:	d123      	bne.n	80056b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005672:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005696:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800569a:	2b01      	cmp	r3, #1
 800569c:	d105      	bne.n	80056aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f001 fae2 	bl	8006c74 <USB_CoreReset>
 80056b0:	4603      	mov	r3, r0
 80056b2:	73fb      	strb	r3, [r7, #15]
 80056b4:	e01b      	b.n	80056ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 fad6 	bl	8006c74 <USB_CoreReset>
 80056c8:	4603      	mov	r3, r0
 80056ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	@ 0x38
 80056e0:	e005      	b.n	80056ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056ee:	7fbb      	ldrb	r3, [r7, #30]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d10b      	bne.n	800570c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f043 0206 	orr.w	r2, r3, #6
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005718:	b004      	add	sp, #16
 800571a:	4770      	bx	lr

0800571c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d165      	bne.n	80057fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4a41      	ldr	r2, [pc, #260]	@ (8005838 <USB_SetTurnaroundTime+0x11c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d906      	bls.n	8005746 <USB_SetTurnaroundTime+0x2a>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4a40      	ldr	r2, [pc, #256]	@ (800583c <USB_SetTurnaroundTime+0x120>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d202      	bcs.n	8005746 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005740:	230f      	movs	r3, #15
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e062      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4a3c      	ldr	r2, [pc, #240]	@ (800583c <USB_SetTurnaroundTime+0x120>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d306      	bcc.n	800575c <USB_SetTurnaroundTime+0x40>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4a3b      	ldr	r2, [pc, #236]	@ (8005840 <USB_SetTurnaroundTime+0x124>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d202      	bcs.n	800575c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005756:	230e      	movs	r3, #14
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e057      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4a38      	ldr	r2, [pc, #224]	@ (8005840 <USB_SetTurnaroundTime+0x124>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d306      	bcc.n	8005772 <USB_SetTurnaroundTime+0x56>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4a37      	ldr	r2, [pc, #220]	@ (8005844 <USB_SetTurnaroundTime+0x128>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d202      	bcs.n	8005772 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800576c:	230d      	movs	r3, #13
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e04c      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4a33      	ldr	r2, [pc, #204]	@ (8005844 <USB_SetTurnaroundTime+0x128>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d306      	bcc.n	8005788 <USB_SetTurnaroundTime+0x6c>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4a32      	ldr	r2, [pc, #200]	@ (8005848 <USB_SetTurnaroundTime+0x12c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d802      	bhi.n	8005788 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005782:	230c      	movs	r3, #12
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	e041      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4a2f      	ldr	r2, [pc, #188]	@ (8005848 <USB_SetTurnaroundTime+0x12c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d906      	bls.n	800579e <USB_SetTurnaroundTime+0x82>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4a2e      	ldr	r2, [pc, #184]	@ (800584c <USB_SetTurnaroundTime+0x130>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d802      	bhi.n	800579e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005798:	230b      	movs	r3, #11
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e036      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4a2a      	ldr	r2, [pc, #168]	@ (800584c <USB_SetTurnaroundTime+0x130>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d906      	bls.n	80057b4 <USB_SetTurnaroundTime+0x98>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4a29      	ldr	r2, [pc, #164]	@ (8005850 <USB_SetTurnaroundTime+0x134>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d802      	bhi.n	80057b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057ae:	230a      	movs	r3, #10
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e02b      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4a26      	ldr	r2, [pc, #152]	@ (8005850 <USB_SetTurnaroundTime+0x134>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d906      	bls.n	80057ca <USB_SetTurnaroundTime+0xae>
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4a25      	ldr	r2, [pc, #148]	@ (8005854 <USB_SetTurnaroundTime+0x138>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d202      	bcs.n	80057ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80057c4:	2309      	movs	r3, #9
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	e020      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4a21      	ldr	r2, [pc, #132]	@ (8005854 <USB_SetTurnaroundTime+0x138>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d306      	bcc.n	80057e0 <USB_SetTurnaroundTime+0xc4>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4a20      	ldr	r2, [pc, #128]	@ (8005858 <USB_SetTurnaroundTime+0x13c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d802      	bhi.n	80057e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80057da:	2308      	movs	r3, #8
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e015      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005858 <USB_SetTurnaroundTime+0x13c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d906      	bls.n	80057f6 <USB_SetTurnaroundTime+0xda>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	@ (800585c <USB_SetTurnaroundTime+0x140>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d202      	bcs.n	80057f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80057f0:	2307      	movs	r3, #7
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e00a      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80057f6:	2306      	movs	r3, #6
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e007      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d102      	bne.n	8005808 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005802:	2309      	movs	r3, #9
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e001      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005808:	2309      	movs	r3, #9
 800580a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	029b      	lsls	r3, r3, #10
 8005820:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	00d8acbf 	.word	0x00d8acbf
 800583c:	00e4e1c0 	.word	0x00e4e1c0
 8005840:	00f42400 	.word	0x00f42400
 8005844:	01067380 	.word	0x01067380
 8005848:	011a499f 	.word	0x011a499f
 800584c:	01312cff 	.word	0x01312cff
 8005850:	014ca43f 	.word	0x014ca43f
 8005854:	016e3600 	.word	0x016e3600
 8005858:	01a6ab1f 	.word	0x01a6ab1f
 800585c:	01e84800 	.word	0x01e84800

08005860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f043 0201 	orr.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f023 0201 	bic.w	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d115      	bne.n	80058f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058d2:	200a      	movs	r0, #10
 80058d4:	f7fb fd3e 	bl	8001354 <HAL_Delay>
      ms += 10U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	330a      	adds	r3, #10
 80058dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 f939 	bl	8006b56 <USB_GetMode>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d01e      	beq.n	8005928 <USB_SetCurrentMode+0x84>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80058ee:	d9f0      	bls.n	80058d2 <USB_SetCurrentMode+0x2e>
 80058f0:	e01a      	b.n	8005928 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d115      	bne.n	8005924 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005904:	200a      	movs	r0, #10
 8005906:	f7fb fd25 	bl	8001354 <HAL_Delay>
      ms += 10U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	330a      	adds	r3, #10
 800590e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 f920 	bl	8006b56 <USB_GetMode>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <USB_SetCurrentMode+0x84>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005920:	d9f0      	bls.n	8005904 <USB_SetCurrentMode+0x60>
 8005922:	e001      	b.n	8005928 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e005      	b.n	8005934 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2bc8      	cmp	r3, #200	@ 0xc8
 800592c:	d101      	bne.n	8005932 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800593c:	b084      	sub	sp, #16
 800593e:	b580      	push	{r7, lr}
 8005940:	b086      	sub	sp, #24
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800594a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	e009      	b.n	8005970 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3340      	adds	r3, #64	@ 0x40
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	2200      	movs	r2, #0
 8005968:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	3301      	adds	r3, #1
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b0e      	cmp	r3, #14
 8005974:	d9f2      	bls.n	800595c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005976:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800597a:	2b00      	cmp	r3, #0
 800597c:	d11c      	bne.n	80059b8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800598c:	f043 0302 	orr.w	r3, r3, #2
 8005990:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80059b6:	e00b      	b.n	80059d0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059d6:	461a      	mov	r2, r3
 80059d8:	2300      	movs	r3, #0
 80059da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d10d      	bne.n	8005a00 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059ec:	2100      	movs	r1, #0
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f968 	bl	8005cc4 <USB_SetDevSpeed>
 80059f4:	e008      	b.n	8005a08 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059f6:	2101      	movs	r1, #1
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f963 	bl	8005cc4 <USB_SetDevSpeed>
 80059fe:	e003      	b.n	8005a08 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a00:	2103      	movs	r1, #3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f95e 	bl	8005cc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a08:	2110      	movs	r1, #16
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8fa 	bl	8005c04 <USB_FlushTxFifo>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f924 	bl	8005c68 <USB_FlushRxFifo>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a30:	461a      	mov	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	2300      	movs	r3, #0
 8005a40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	e043      	b.n	8005adc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a6a:	d118      	bne.n	8005a9e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	e013      	b.n	8005ab0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a94:	461a      	mov	r2, r3
 8005a96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	e008      	b.n	8005ab0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aaa:	461a      	mov	r2, r3
 8005aac:	2300      	movs	r3, #0
 8005aae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005abc:	461a      	mov	r2, r3
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ad4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d3b5      	bcc.n	8005a54 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	e043      	b.n	8005b76 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b04:	d118      	bne.n	8005b38 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e013      	b.n	8005b4a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e008      	b.n	8005b4a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b44:	461a      	mov	r2, r3
 8005b46:	2300      	movs	r3, #0
 8005b48:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b56:	461a      	mov	r2, r3
 8005b58:	2300      	movs	r3, #0
 8005b5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	3301      	adds	r3, #1
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d3b5      	bcc.n	8005aee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b94:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005ba2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d105      	bne.n	8005bb8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	f043 0210 	orr.w	r2, r3, #16
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	4b10      	ldr	r3, [pc, #64]	@ (8005c00 <USB_DevInit+0x2c4>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f043 0208 	orr.w	r2, r3, #8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bd8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d107      	bne.n	8005bf0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005be8:	f043 0304 	orr.w	r3, r3, #4
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bfc:	b004      	add	sp, #16
 8005bfe:	4770      	bx	lr
 8005c00:	803c3800 	.word	0x803c3800

08005c04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3301      	adds	r3, #1
 8005c16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c1e:	d901      	bls.n	8005c24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e01b      	b.n	8005c5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	daf2      	bge.n	8005c12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	019b      	lsls	r3, r3, #6
 8005c34:	f043 0220 	orr.w	r2, r3, #32
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c48:	d901      	bls.n	8005c4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e006      	b.n	8005c5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d0f0      	beq.n	8005c3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c80:	d901      	bls.n	8005c86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e018      	b.n	8005cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	daf2      	bge.n	8005c74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2210      	movs	r2, #16
 8005c96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ca4:	d901      	bls.n	8005caa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e006      	b.n	8005cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d0f0      	beq.n	8005c98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b087      	sub	sp, #28
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0306 	and.w	r3, r3, #6
 8005d0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]
 8005d1a:	e00a      	b.n	8005d32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d002      	beq.n	8005d28 <USB_GetDevSpeed+0x32>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b06      	cmp	r3, #6
 8005d26:	d102      	bne.n	8005d2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	75fb      	strb	r3, [r7, #23]
 8005d2c:	e001      	b.n	8005d32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d2e:	230f      	movs	r3, #15
 8005d30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d13a      	bne.n	8005dd2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	68f9      	ldr	r1, [r7, #12]
 8005d76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d155      	bne.n	8005e40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	791b      	ldrb	r3, [r3, #4]
 8005dae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005db0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	059b      	lsls	r3, r3, #22
 8005db6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005db8:	4313      	orrs	r3, r2
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	e036      	b.n	8005e40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dd8:	69da      	ldr	r2, [r3, #28]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	2101      	movs	r1, #1
 8005de4:	fa01 f303 	lsl.w	r3, r1, r3
 8005de8:	041b      	lsls	r3, r3, #16
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d11a      	bne.n	8005e40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	791b      	ldrb	r3, [r3, #4]
 8005e24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e26:	430b      	orrs	r3, r1
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	785b      	ldrb	r3, [r3, #1]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d161      	bne.n	8005f30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e82:	d11f      	bne.n	8005ec4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ea2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	43db      	mvns	r3, r3
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	2101      	movs	r1, #1
 8005efa:	fa01 f303 	lsl.w	r3, r1, r3
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	43db      	mvns	r3, r3
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f08:	4013      	ands	r3, r2
 8005f0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	0159      	lsls	r1, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	440b      	add	r3, r1
 8005f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f26:	4619      	mov	r1, r3
 8005f28:	4b35      	ldr	r3, [pc, #212]	@ (8006000 <USB_DeactivateEndpoint+0x1b0>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	600b      	str	r3, [r1, #0]
 8005f2e:	e060      	b.n	8005ff2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f46:	d11f      	bne.n	8005f88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9e:	041b      	lsls	r3, r3, #16
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fa8:	4013      	ands	r3, r2
 8005faa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	0159      	lsls	r1, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	440b      	add	r3, r1
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fea:	4619      	mov	r1, r3
 8005fec:	4b05      	ldr	r3, [pc, #20]	@ (8006004 <USB_DeactivateEndpoint+0x1b4>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	ec337800 	.word	0xec337800
 8006004:	eff37800 	.word	0xeff37800

08006008 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	@ 0x28
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2b01      	cmp	r3, #1
 8006026:	f040 817a 	bne.w	800631e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d132      	bne.n	8006098 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800604c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006050:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006070:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006074:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006090:	0cdb      	lsrs	r3, r3, #19
 8006092:	04db      	lsls	r3, r3, #19
 8006094:	6113      	str	r3, [r2, #16]
 8006096:	e092      	b.n	80061be <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060b2:	0cdb      	lsrs	r3, r3, #19
 80060b4:	04db      	lsls	r3, r3, #19
 80060b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060da:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d11a      	bne.n	8006118 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d903      	bls.n	80060f6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006110:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006114:	6113      	str	r3, [r2, #16]
 8006116:	e01b      	b.n	8006150 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006124:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6919      	ldr	r1, [r3, #16]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	440b      	add	r3, r1
 8006130:	1e59      	subs	r1, r3, #1
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	fbb1 f3f3 	udiv	r3, r1, r3
 800613a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800613c:	4ba2      	ldr	r3, [pc, #648]	@ (80063c8 <USB_EPStartXfer+0x3c0>)
 800613e:	400b      	ands	r3, r1
 8006140:	69b9      	ldr	r1, [r7, #24]
 8006142:	0148      	lsls	r0, r1, #5
 8006144:	69f9      	ldr	r1, [r7, #28]
 8006146:	4401      	add	r1, r0
 8006148:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800614c:	4313      	orrs	r3, r2
 800614e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006166:	69b9      	ldr	r1, [r7, #24]
 8006168:	0148      	lsls	r0, r1, #5
 800616a:	69f9      	ldr	r1, [r7, #28]
 800616c:	4401      	add	r1, r0
 800616e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006172:	4313      	orrs	r3, r2
 8006174:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	791b      	ldrb	r3, [r3, #4]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d11f      	bne.n	80061be <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006198:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800619c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d14b      	bne.n	800625c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d009      	beq.n	80061e0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d8:	461a      	mov	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	791b      	ldrb	r3, [r3, #4]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d128      	bne.n	800623a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d110      	bne.n	800621a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006212:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	e00f      	b.n	800623a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006238:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006254:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e165      	b.n	8006528 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	440a      	add	r2, r1
 8006272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006276:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800627a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	791b      	ldrb	r3, [r3, #4]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d015      	beq.n	80062b0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 814d 	beq.w	8006528 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	2101      	movs	r1, #1
 80062a0:	fa01 f303 	lsl.w	r3, r1, r3
 80062a4:	69f9      	ldr	r1, [r7, #28]
 80062a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062aa:	4313      	orrs	r3, r2
 80062ac:	634b      	str	r3, [r1, #52]	@ 0x34
 80062ae:	e13b      	b.n	8006528 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d110      	bne.n	80062e2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	e00f      	b.n	8006302 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006300:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	68d9      	ldr	r1, [r3, #12]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	b298      	uxth	r0, r3
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	4603      	mov	r3, r0
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f9b8 	bl	800668c <USB_WritePacket>
 800631c:	e104      	b.n	8006528 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006338:	0cdb      	lsrs	r3, r3, #19
 800633a:	04db      	lsls	r3, r3, #19
 800633c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006358:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800635c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006360:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d131      	bne.n	80063cc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	0148      	lsls	r0, r1, #5
 800639a:	69f9      	ldr	r1, [r7, #28]
 800639c:	4401      	add	r1, r0
 800639e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063a2:	4313      	orrs	r3, r2
 80063a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063c4:	6113      	str	r3, [r2, #16]
 80063c6:	e061      	b.n	800648c <USB_EPStartXfer+0x484>
 80063c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d123      	bne.n	800641c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ea:	69b9      	ldr	r1, [r7, #24]
 80063ec:	0148      	lsls	r0, r1, #5
 80063ee:	69f9      	ldr	r1, [r7, #28]
 80063f0:	4401      	add	r1, r0
 80063f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063f6:	4313      	orrs	r3, r2
 80063f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	440a      	add	r2, r1
 8006410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006414:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006418:	6113      	str	r3, [r2, #16]
 800641a:	e037      	b.n	800648c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	4413      	add	r3, r2
 8006426:	1e5a      	subs	r2, r3, #1
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006430:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	8afa      	ldrh	r2, [r7, #22]
 8006438:	fb03 f202 	mul.w	r2, r3, r2
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	8afb      	ldrh	r3, [r7, #22]
 8006450:	04d9      	lsls	r1, r3, #19
 8006452:	4b38      	ldr	r3, [pc, #224]	@ (8006534 <USB_EPStartXfer+0x52c>)
 8006454:	400b      	ands	r3, r1
 8006456:	69b9      	ldr	r1, [r7, #24]
 8006458:	0148      	lsls	r0, r1, #5
 800645a:	69f9      	ldr	r1, [r7, #28]
 800645c:	4401      	add	r1, r0
 800645e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006462:	4313      	orrs	r3, r2
 8006464:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	0148      	lsls	r0, r1, #5
 8006480:	69f9      	ldr	r1, [r7, #28]
 8006482:	4401      	add	r1, r0
 8006484:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006488:	4313      	orrs	r3, r2
 800648a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10d      	bne.n	80064ae <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	68d9      	ldr	r1, [r3, #12]
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064aa:	460a      	mov	r2, r1
 80064ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	791b      	ldrb	r3, [r3, #4]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d128      	bne.n	8006508 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d110      	bne.n	80064e8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	e00f      	b.n	8006508 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006506:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006522:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006526:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3720      	adds	r7, #32
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	1ff80000 	.word	0x1ff80000

08006538 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d14a      	bne.n	80065ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800656a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800656e:	f040 8086 	bne.w	800667e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	7812      	ldrb	r2, [r2, #0]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	440a      	add	r2, r1
 800658c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006590:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006594:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	7812      	ldrb	r2, [r2, #0]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3301      	adds	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d902      	bls.n	80065d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	75fb      	strb	r3, [r7, #23]
          break;
 80065ce:	e056      	b.n	800667e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065e8:	d0e7      	beq.n	80065ba <USB_EPStopXfer+0x82>
 80065ea:	e048      	b.n	800667e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006604:	d13b      	bne.n	800667e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	0151      	lsls	r1, r2, #5
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	440a      	add	r2, r1
 8006620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006624:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006628:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	7812      	ldrb	r2, [r2, #0]
 800663e:	0151      	lsls	r1, r2, #5
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	440a      	add	r2, r1
 8006644:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006648:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800664c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f242 7210 	movw	r2, #10000	@ 0x2710
 800665a:	4293      	cmp	r3, r2
 800665c:	d902      	bls.n	8006664 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
          break;
 8006662:	e00c      	b.n	800667e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800667c:	d0e7      	beq.n	800664e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006680:	4618      	mov	r0, r3
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800668c:	b480      	push	{r7}
 800668e:	b089      	sub	sp, #36	@ 0x24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	460b      	mov	r3, r1
 800669c:	71fb      	strb	r3, [r7, #7]
 800669e:	4613      	mov	r3, r2
 80066a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d123      	bne.n	80066fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066b2:	88bb      	ldrh	r3, [r7, #4]
 80066b4:	3303      	adds	r3, #3
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066ba:	2300      	movs	r3, #0
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	e018      	b.n	80066f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	031a      	lsls	r2, r3, #12
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066cc:	461a      	mov	r2, r3
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	3301      	adds	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	3301      	adds	r3, #1
 80066de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	3301      	adds	r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	3301      	adds	r3, #1
 80066ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d3e2      	bcc.n	80066c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3724      	adds	r7, #36	@ 0x24
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006708:	b480      	push	{r7}
 800670a:	b08b      	sub	sp, #44	@ 0x2c
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	089b      	lsrs	r3, r3, #2
 8006722:	b29b      	uxth	r3, r3
 8006724:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800672e:	2300      	movs	r3, #0
 8006730:	623b      	str	r3, [r7, #32]
 8006732:	e014      	b.n	800675e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	3301      	adds	r3, #1
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	3301      	adds	r3, #1
 800674a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	3301      	adds	r3, #1
 8006750:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	3301      	adds	r3, #1
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	3301      	adds	r3, #1
 800675c:	623b      	str	r3, [r7, #32]
 800675e:	6a3a      	ldr	r2, [r7, #32]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	429a      	cmp	r2, r3
 8006764:	d3e6      	bcc.n	8006734 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006766:	8bfb      	ldrh	r3, [r7, #30]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01e      	beq.n	80067aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006776:	461a      	mov	r2, r3
 8006778:	f107 0310 	add.w	r3, r7, #16
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	fa22 f303 	lsr.w	r3, r2, r3
 800678c:	b2da      	uxtb	r2, r3
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	701a      	strb	r2, [r3, #0]
      i++;
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	3301      	adds	r3, #1
 8006796:	623b      	str	r3, [r7, #32]
      pDest++;
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	3301      	adds	r3, #1
 800679c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800679e:	8bfb      	ldrh	r3, [r7, #30]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067a4:	8bfb      	ldrh	r3, [r7, #30]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1ea      	bne.n	8006780 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	372c      	adds	r7, #44	@ 0x2c
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d12c      	bne.n	800682e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	db12      	blt.n	800680c <USB_EPSetStall+0x54>
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00f      	beq.n	800680c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	440a      	add	r2, r1
 8006802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006806:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800680a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	0151      	lsls	r1, r2, #5
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	440a      	add	r2, r1
 8006822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006826:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	e02b      	b.n	8006886 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	db12      	blt.n	8006866 <USB_EPSetStall+0xae>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00f      	beq.n	8006866 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	0151      	lsls	r1, r2, #5
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	440a      	add	r2, r1
 800685c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006860:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006864:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	440a      	add	r2, r1
 800687c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006884:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d128      	bne.n	8006902 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	0151      	lsls	r1, r2, #5
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	440a      	add	r2, r1
 80068c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	791b      	ldrb	r3, [r3, #4]
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d003      	beq.n	80068e0 <USB_EPClearStall+0x4c>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	791b      	ldrb	r3, [r3, #4]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d138      	bne.n	8006952 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e027      	b.n	8006952 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800691c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006920:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	791b      	ldrb	r3, [r3, #4]
 8006926:	2b03      	cmp	r3, #3
 8006928:	d003      	beq.n	8006932 <USB_EPClearStall+0x9e>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	791b      	ldrb	r3, [r3, #4]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d10f      	bne.n	8006952 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	440a      	add	r2, r1
 8006948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800694c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006950:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800697e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006982:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006994:	68f9      	ldr	r1, [r7, #12]
 8006996:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800699a:	4313      	orrs	r3, r2
 800699c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069da:	f023 0302 	bic.w	r3, r3, #2
 80069de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a08:	f023 0303 	bic.w	r3, r3, #3
 8006a0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a1c:	f043 0302 	orr.w	r3, r3, #2
 8006a20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4013      	ands	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a48:	68fb      	ldr	r3, [r7, #12]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	4013      	ands	r3, r2
 8006a78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	0c1b      	lsrs	r3, r3, #16
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	b29b      	uxth	r3, r3
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006aec:	68bb      	ldr	r3, [r7, #8]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b087      	sub	sp, #28
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2a:	01db      	lsls	r3, r3, #7
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4013      	ands	r3, r2
 8006b46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b48:	68bb      	ldr	r3, [r7, #8]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	f003 0301 	and.w	r3, r3, #1
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b8c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b90:	f023 0307 	bic.w	r3, r3, #7
 8006b94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	333c      	adds	r3, #60	@ 0x3c
 8006bce:	3304      	adds	r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4a26      	ldr	r2, [pc, #152]	@ (8006c70 <USB_EP0_OutStart+0xb8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d90a      	bls.n	8006bf2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006be8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bec:	d101      	bne.n	8006bf2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e037      	b.n	8006c62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c20:	f043 0318 	orr.w	r3, r3, #24
 8006c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c34:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006c38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d10f      	bne.n	8006c60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c5a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006c5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	4f54300a 	.word	0x4f54300a

08006c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3301      	adds	r3, #1
 8006c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c8c:	d901      	bls.n	8006c92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e01b      	b.n	8006cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	daf2      	bge.n	8006c80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f043 0201 	orr.w	r2, r3, #1
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cb6:	d901      	bls.n	8006cbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e006      	b.n	8006cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d0f0      	beq.n	8006caa <USB_CoreReset+0x36>

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
	...

08006cd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ce4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006ce8:	f002 fc7e 	bl	80095e8 <USBD_static_malloc>
 8006cec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	32b0      	adds	r2, #176	@ 0xb0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d04:	2302      	movs	r3, #2
 8006d06:	e0d4      	b.n	8006eb2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d08:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f002 fce2 	bl	80096d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	32b0      	adds	r2, #176	@ 0xb0
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	32b0      	adds	r2, #176	@ 0xb0
 8006d2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	7c1b      	ldrb	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d138      	bne.n	8006db2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d40:	4b5e      	ldr	r3, [pc, #376]	@ (8006ebc <USBD_CDC_Init+0x1e4>)
 8006d42:	7819      	ldrb	r1, [r3, #0]
 8006d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d48:	2202      	movs	r2, #2
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f002 fb29 	bl	80093a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d50:	4b5a      	ldr	r3, [pc, #360]	@ (8006ebc <USBD_CDC_Init+0x1e4>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	f003 020f 	and.w	r2, r3, #15
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	3324      	adds	r3, #36	@ 0x24
 8006d66:	2201      	movs	r2, #1
 8006d68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d6a:	4b55      	ldr	r3, [pc, #340]	@ (8006ec0 <USBD_CDC_Init+0x1e8>)
 8006d6c:	7819      	ldrb	r1, [r3, #0]
 8006d6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d72:	2202      	movs	r2, #2
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f002 fb14 	bl	80093a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d7a:	4b51      	ldr	r3, [pc, #324]	@ (8006ec0 <USBD_CDC_Init+0x1e8>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d92:	2201      	movs	r2, #1
 8006d94:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d96:	4b4b      	ldr	r3, [pc, #300]	@ (8006ec4 <USBD_CDC_Init+0x1ec>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	f003 020f 	and.w	r2, r3, #15
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	3326      	adds	r3, #38	@ 0x26
 8006dac:	2210      	movs	r2, #16
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	e035      	b.n	8006e1e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006db2:	4b42      	ldr	r3, [pc, #264]	@ (8006ebc <USBD_CDC_Init+0x1e4>)
 8006db4:	7819      	ldrb	r1, [r3, #0]
 8006db6:	2340      	movs	r3, #64	@ 0x40
 8006db8:	2202      	movs	r2, #2
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f002 faf1 	bl	80093a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8006ebc <USBD_CDC_Init+0x1e4>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 020f 	and.w	r2, r3, #15
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	3324      	adds	r3, #36	@ 0x24
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dda:	4b39      	ldr	r3, [pc, #228]	@ (8006ec0 <USBD_CDC_Init+0x1e8>)
 8006ddc:	7819      	ldrb	r1, [r3, #0]
 8006dde:	2340      	movs	r3, #64	@ 0x40
 8006de0:	2202      	movs	r2, #2
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f002 fadd 	bl	80093a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006de8:	4b35      	ldr	r3, [pc, #212]	@ (8006ec0 <USBD_CDC_Init+0x1e8>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 020f 	and.w	r2, r3, #15
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e00:	2201      	movs	r2, #1
 8006e02:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e04:	4b2f      	ldr	r3, [pc, #188]	@ (8006ec4 <USBD_CDC_Init+0x1ec>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	f003 020f 	and.w	r2, r3, #15
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	440b      	add	r3, r1
 8006e18:	3326      	adds	r3, #38	@ 0x26
 8006e1a:	2210      	movs	r2, #16
 8006e1c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e1e:	4b29      	ldr	r3, [pc, #164]	@ (8006ec4 <USBD_CDC_Init+0x1ec>)
 8006e20:	7819      	ldrb	r1, [r3, #0]
 8006e22:	2308      	movs	r3, #8
 8006e24:	2203      	movs	r2, #3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f002 fabb 	bl	80093a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e2c:	4b25      	ldr	r3, [pc, #148]	@ (8006ec4 <USBD_CDC_Init+0x1ec>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f003 020f 	and.w	r2, r3, #15
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	3324      	adds	r3, #36	@ 0x24
 8006e42:	2201      	movs	r2, #1
 8006e44:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	33b0      	adds	r3, #176	@ 0xb0
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e018      	b.n	8006eb2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7c1b      	ldrb	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e88:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec0 <USBD_CDC_Init+0x1e8>)
 8006e8a:	7819      	ldrb	r1, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f002 fb72 	bl	8009580 <USBD_LL_PrepareReceive>
 8006e9c:	e008      	b.n	8006eb0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e9e:	4b08      	ldr	r3, [pc, #32]	@ (8006ec0 <USBD_CDC_Init+0x1e8>)
 8006ea0:	7819      	ldrb	r1, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ea8:	2340      	movs	r3, #64	@ 0x40
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f002 fb68 	bl	8009580 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	200000c3 	.word	0x200000c3
 8006ec0:	200000c4 	.word	0x200000c4
 8006ec4:	200000c5 	.word	0x200000c5

08006ec8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8006fc0 <USBD_CDC_DeInit+0xf8>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f002 fa87 	bl	80093ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ee0:	4b37      	ldr	r3, [pc, #220]	@ (8006fc0 <USBD_CDC_DeInit+0xf8>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	f003 020f 	and.w	r2, r3, #15
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3324      	adds	r3, #36	@ 0x24
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006efa:	4b32      	ldr	r3, [pc, #200]	@ (8006fc4 <USBD_CDC_DeInit+0xfc>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f002 fa74 	bl	80093ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f06:	4b2f      	ldr	r3, [pc, #188]	@ (8006fc4 <USBD_CDC_DeInit+0xfc>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	f003 020f 	and.w	r2, r3, #15
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f1e:	2200      	movs	r2, #0
 8006f20:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f22:	4b29      	ldr	r3, [pc, #164]	@ (8006fc8 <USBD_CDC_DeInit+0x100>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f002 fa60 	bl	80093ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f2e:	4b26      	ldr	r3, [pc, #152]	@ (8006fc8 <USBD_CDC_DeInit+0x100>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	f003 020f 	and.w	r2, r3, #15
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	3324      	adds	r3, #36	@ 0x24
 8006f44:	2200      	movs	r2, #0
 8006f46:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f48:	4b1f      	ldr	r3, [pc, #124]	@ (8006fc8 <USBD_CDC_DeInit+0x100>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 020f 	and.w	r2, r3, #15
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3326      	adds	r3, #38	@ 0x26
 8006f5e:	2200      	movs	r2, #0
 8006f60:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	32b0      	adds	r2, #176	@ 0xb0
 8006f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01f      	beq.n	8006fb4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	33b0      	adds	r3, #176	@ 0xb0
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	32b0      	adds	r2, #176	@ 0xb0
 8006f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f002 fb34 	bl	8009604 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	32b0      	adds	r2, #176	@ 0xb0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	200000c3 	.word	0x200000c3
 8006fc4:	200000c4 	.word	0x200000c4
 8006fc8:	200000c5 	.word	0x200000c5

08006fcc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	32b0      	adds	r2, #176	@ 0xb0
 8006fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e0bf      	b.n	800717c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007004:	2b00      	cmp	r3, #0
 8007006:	d050      	beq.n	80070aa <USBD_CDC_Setup+0xde>
 8007008:	2b20      	cmp	r3, #32
 800700a:	f040 80af 	bne.w	800716c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	88db      	ldrh	r3, [r3, #6]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d03a      	beq.n	800708c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	b25b      	sxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	da1b      	bge.n	8007058 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	33b0      	adds	r3, #176	@ 0xb0
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007036:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	88d2      	ldrh	r2, [r2, #6]
 800703c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	88db      	ldrh	r3, [r3, #6]
 8007042:	2b07      	cmp	r3, #7
 8007044:	bf28      	it	cs
 8007046:	2307      	movcs	r3, #7
 8007048:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	89fa      	ldrh	r2, [r7, #14]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 fd87 	bl	8008b64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007056:	e090      	b.n	800717a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	785a      	ldrb	r2, [r3, #1]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	88db      	ldrh	r3, [r3, #6]
 8007066:	2b3f      	cmp	r3, #63	@ 0x3f
 8007068:	d803      	bhi.n	8007072 <USBD_CDC_Setup+0xa6>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	88db      	ldrh	r3, [r3, #6]
 800706e:	b2da      	uxtb	r2, r3
 8007070:	e000      	b.n	8007074 <USBD_CDC_Setup+0xa8>
 8007072:	2240      	movs	r2, #64	@ 0x40
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800707a:	6939      	ldr	r1, [r7, #16]
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007082:	461a      	mov	r2, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 fd99 	bl	8008bbc <USBD_CtlPrepareRx>
      break;
 800708a:	e076      	b.n	800717a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	33b0      	adds	r3, #176	@ 0xb0
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	7850      	ldrb	r0, [r2, #1]
 80070a2:	2200      	movs	r2, #0
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	4798      	blx	r3
      break;
 80070a8:	e067      	b.n	800717a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	2b0b      	cmp	r3, #11
 80070b0:	d851      	bhi.n	8007156 <USBD_CDC_Setup+0x18a>
 80070b2:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <USBD_CDC_Setup+0xec>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070e9 	.word	0x080070e9
 80070bc:	08007165 	.word	0x08007165
 80070c0:	08007157 	.word	0x08007157
 80070c4:	08007157 	.word	0x08007157
 80070c8:	08007157 	.word	0x08007157
 80070cc:	08007157 	.word	0x08007157
 80070d0:	08007157 	.word	0x08007157
 80070d4:	08007157 	.word	0x08007157
 80070d8:	08007157 	.word	0x08007157
 80070dc:	08007157 	.word	0x08007157
 80070e0:	08007113 	.word	0x08007113
 80070e4:	0800713d 	.word	0x0800713d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d107      	bne.n	8007104 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070f4:	f107 030a 	add.w	r3, r7, #10
 80070f8:	2202      	movs	r2, #2
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 fd31 	bl	8008b64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007102:	e032      	b.n	800716a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fcbb 	bl	8008a82 <USBD_CtlError>
            ret = USBD_FAIL;
 800710c:	2303      	movs	r3, #3
 800710e:	75fb      	strb	r3, [r7, #23]
          break;
 8007110:	e02b      	b.n	800716a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b03      	cmp	r3, #3
 800711c:	d107      	bne.n	800712e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800711e:	f107 030d 	add.w	r3, r7, #13
 8007122:	2201      	movs	r2, #1
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fd1c 	bl	8008b64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800712c:	e01d      	b.n	800716a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 fca6 	bl	8008a82 <USBD_CtlError>
            ret = USBD_FAIL;
 8007136:	2303      	movs	r3, #3
 8007138:	75fb      	strb	r3, [r7, #23]
          break;
 800713a:	e016      	b.n	800716a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b03      	cmp	r3, #3
 8007146:	d00f      	beq.n	8007168 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 fc99 	bl	8008a82 <USBD_CtlError>
            ret = USBD_FAIL;
 8007150:	2303      	movs	r3, #3
 8007152:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007154:	e008      	b.n	8007168 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 fc92 	bl	8008a82 <USBD_CtlError>
          ret = USBD_FAIL;
 800715e:	2303      	movs	r3, #3
 8007160:	75fb      	strb	r3, [r7, #23]
          break;
 8007162:	e002      	b.n	800716a <USBD_CDC_Setup+0x19e>
          break;
 8007164:	bf00      	nop
 8007166:	e008      	b.n	800717a <USBD_CDC_Setup+0x1ae>
          break;
 8007168:	bf00      	nop
      }
      break;
 800716a:	e006      	b.n	800717a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fc87 	bl	8008a82 <USBD_CtlError>
      ret = USBD_FAIL;
 8007174:	2303      	movs	r3, #3
 8007176:	75fb      	strb	r3, [r7, #23]
      break;
 8007178:	bf00      	nop
  }

  return (uint8_t)ret;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007196:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	32b0      	adds	r2, #176	@ 0xb0
 80071a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e065      	b.n	800727a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	32b0      	adds	r2, #176	@ 0xb0
 80071b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	f003 020f 	and.w	r2, r3, #15
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	3318      	adds	r3, #24
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d02f      	beq.n	8007238 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	f003 020f 	and.w	r2, r3, #15
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	3318      	adds	r3, #24
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	f003 010f 	and.w	r1, r3, #15
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	460b      	mov	r3, r1
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	440b      	add	r3, r1
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4403      	add	r3, r0
 8007200:	331c      	adds	r3, #28
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	fbb2 f1f3 	udiv	r1, r2, r3
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800720e:	2b00      	cmp	r3, #0
 8007210:	d112      	bne.n	8007238 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	f003 020f 	and.w	r2, r3, #15
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	440b      	add	r3, r1
 8007224:	3318      	adds	r3, #24
 8007226:	2200      	movs	r2, #0
 8007228:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800722a:	78f9      	ldrb	r1, [r7, #3]
 800722c:	2300      	movs	r3, #0
 800722e:	2200      	movs	r2, #0
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f002 f984 	bl	800953e <USBD_LL_Transmit>
 8007236:	e01f      	b.n	8007278 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2200      	movs	r2, #0
 800723c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	33b0      	adds	r3, #176	@ 0xb0
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d010      	beq.n	8007278 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	33b0      	adds	r3, #176	@ 0xb0
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007274:	78fa      	ldrb	r2, [r7, #3]
 8007276:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	32b0      	adds	r2, #176	@ 0xb0
 8007298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	32b0      	adds	r2, #176	@ 0xb0
 80072a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e01a      	b.n	80072ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f002 f982 	bl	80095c2 <USBD_LL_GetRxDataSize>
 80072be:	4602      	mov	r2, r0
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	33b0      	adds	r3, #176	@ 0xb0
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80072e4:	4611      	mov	r1, r2
 80072e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	32b0      	adds	r2, #176	@ 0xb0
 8007304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007308:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007310:	2303      	movs	r3, #3
 8007312:	e024      	b.n	800735e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	33b0      	adds	r3, #176	@ 0xb0
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d019      	beq.n	800735c <USBD_CDC_EP0_RxReady+0x6a>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800732e:	2bff      	cmp	r3, #255	@ 0xff
 8007330:	d014      	beq.n	800735c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	33b0      	adds	r3, #176	@ 0xb0
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800734a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007352:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	22ff      	movs	r2, #255	@ 0xff
 8007358:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007370:	2182      	movs	r1, #130	@ 0x82
 8007372:	4818      	ldr	r0, [pc, #96]	@ (80073d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007374:	f000 fd4f 	bl	8007e16 <USBD_GetEpDesc>
 8007378:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800737a:	2101      	movs	r1, #1
 800737c:	4815      	ldr	r0, [pc, #84]	@ (80073d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800737e:	f000 fd4a 	bl	8007e16 <USBD_GetEpDesc>
 8007382:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007384:	2181      	movs	r1, #129	@ 0x81
 8007386:	4813      	ldr	r0, [pc, #76]	@ (80073d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007388:	f000 fd45 	bl	8007e16 <USBD_GetEpDesc>
 800738c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2210      	movs	r2, #16
 8007398:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d006      	beq.n	80073ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073a8:	711a      	strb	r2, [r3, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d006      	beq.n	80073c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073bc:	711a      	strb	r2, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2243      	movs	r2, #67	@ 0x43
 80073c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073c8:	4b02      	ldr	r3, [pc, #8]	@ (80073d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000080 	.word	0x20000080

080073d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073e0:	2182      	movs	r1, #130	@ 0x82
 80073e2:	4818      	ldr	r0, [pc, #96]	@ (8007444 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073e4:	f000 fd17 	bl	8007e16 <USBD_GetEpDesc>
 80073e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073ea:	2101      	movs	r1, #1
 80073ec:	4815      	ldr	r0, [pc, #84]	@ (8007444 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073ee:	f000 fd12 	bl	8007e16 <USBD_GetEpDesc>
 80073f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073f4:	2181      	movs	r1, #129	@ 0x81
 80073f6:	4813      	ldr	r0, [pc, #76]	@ (8007444 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073f8:	f000 fd0d 	bl	8007e16 <USBD_GetEpDesc>
 80073fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2210      	movs	r2, #16
 8007408:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d006      	beq.n	800741e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2200      	movs	r2, #0
 8007414:	711a      	strb	r2, [r3, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f042 0202 	orr.w	r2, r2, #2
 800741c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d006      	beq.n	8007432 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	711a      	strb	r2, [r3, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f042 0202 	orr.w	r2, r2, #2
 8007430:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2243      	movs	r2, #67	@ 0x43
 8007436:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007438:	4b02      	ldr	r3, [pc, #8]	@ (8007444 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20000080 	.word	0x20000080

08007448 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007450:	2182      	movs	r1, #130	@ 0x82
 8007452:	4818      	ldr	r0, [pc, #96]	@ (80074b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007454:	f000 fcdf 	bl	8007e16 <USBD_GetEpDesc>
 8007458:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800745a:	2101      	movs	r1, #1
 800745c:	4815      	ldr	r0, [pc, #84]	@ (80074b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800745e:	f000 fcda 	bl	8007e16 <USBD_GetEpDesc>
 8007462:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007464:	2181      	movs	r1, #129	@ 0x81
 8007466:	4813      	ldr	r0, [pc, #76]	@ (80074b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007468:	f000 fcd5 	bl	8007e16 <USBD_GetEpDesc>
 800746c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2210      	movs	r2, #16
 8007478:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d006      	beq.n	800748e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2200      	movs	r2, #0
 8007484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007488:	711a      	strb	r2, [r3, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d006      	beq.n	80074a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800749c:	711a      	strb	r2, [r3, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2243      	movs	r2, #67	@ 0x43
 80074a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074a8:	4b02      	ldr	r3, [pc, #8]	@ (80074b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20000080 	.word	0x20000080

080074b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	220a      	movs	r2, #10
 80074c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074c6:	4b03      	ldr	r3, [pc, #12]	@ (80074d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	2000003c 	.word	0x2000003c

080074d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e009      	b.n	8007500 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	33b0      	adds	r3, #176	@ 0xb0
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	32b0      	adds	r2, #176	@ 0xb0
 8007522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007526:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800752e:	2303      	movs	r3, #3
 8007530:	e008      	b.n	8007544 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	32b0      	adds	r2, #176	@ 0xb0
 8007564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007568:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	e004      	b.n	800757e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	32b0      	adds	r2, #176	@ 0xb0
 800759e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80075a4:	2301      	movs	r3, #1
 80075a6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e025      	b.n	80075fe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d11f      	bne.n	80075fc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2201      	movs	r2, #1
 80075c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80075c4:	4b10      	ldr	r3, [pc, #64]	@ (8007608 <USBD_CDC_TransmitPacket+0x7c>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f003 020f 	and.w	r2, r3, #15
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4403      	add	r3, r0
 80075de:	3318      	adds	r3, #24
 80075e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80075e2:	4b09      	ldr	r3, [pc, #36]	@ (8007608 <USBD_CDC_TransmitPacket+0x7c>)
 80075e4:	7819      	ldrb	r1, [r3, #0]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f001 ffa3 	bl	800953e <USBD_LL_Transmit>

    ret = USBD_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	200000c3 	.word	0x200000c3

0800760c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	32b0      	adds	r2, #176	@ 0xb0
 800761e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007622:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	32b0      	adds	r2, #176	@ 0xb0
 800762e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007636:	2303      	movs	r3, #3
 8007638:	e018      	b.n	800766c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7c1b      	ldrb	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007642:	4b0c      	ldr	r3, [pc, #48]	@ (8007674 <USBD_CDC_ReceivePacket+0x68>)
 8007644:	7819      	ldrb	r1, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800764c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 ff95 	bl	8009580 <USBD_LL_PrepareReceive>
 8007656:	e008      	b.n	800766a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007658:	4b06      	ldr	r3, [pc, #24]	@ (8007674 <USBD_CDC_ReceivePacket+0x68>)
 800765a:	7819      	ldrb	r1, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007662:	2340      	movs	r3, #64	@ 0x40
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 ff8b 	bl	8009580 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	200000c4 	.word	0x200000c4

08007678 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	4613      	mov	r3, r2
 8007684:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	e01f      	b.n	80076d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	79fa      	ldrb	r2, [r7, #7]
 80076c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f001 fe05 	bl	80092d4 <USBD_LL_Init>
 80076ca:	4603      	mov	r3, r0
 80076cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e025      	b.n	800773c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	32ae      	adds	r2, #174	@ 0xae
 8007702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00f      	beq.n	800772c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	32ae      	adds	r2, #174	@ 0xae
 8007716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771c:	f107 020e 	add.w	r2, r7, #14
 8007720:	4610      	mov	r0, r2
 8007722:	4798      	blx	r3
 8007724:	4602      	mov	r2, r0
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 fe0d 	bl	800936c <USBD_LL_Start>
 8007752:	4603      	mov	r3, r0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007764:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007788:	2b00      	cmp	r3, #0
 800778a:	d009      	beq.n	80077a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	78fa      	ldrb	r2, [r7, #3]
 8007796:	4611      	mov	r1, r2
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
 800779c:	4603      	mov	r3, r0
 800779e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	4611      	mov	r1, r2
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	4798      	blx	r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80077d0:	2303      	movs	r3, #3
 80077d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 f90c 	bl	8008a0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007804:	461a      	mov	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007812:	f003 031f 	and.w	r3, r3, #31
 8007816:	2b02      	cmp	r3, #2
 8007818:	d01a      	beq.n	8007850 <USBD_LL_SetupStage+0x72>
 800781a:	2b02      	cmp	r3, #2
 800781c:	d822      	bhi.n	8007864 <USBD_LL_SetupStage+0x86>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <USBD_LL_SetupStage+0x4a>
 8007822:	2b01      	cmp	r3, #1
 8007824:	d00a      	beq.n	800783c <USBD_LL_SetupStage+0x5e>
 8007826:	e01d      	b.n	8007864 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fb63 	bl	8007efc <USBD_StdDevReq>
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]
      break;
 800783a:	e020      	b.n	800787e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fbcb 	bl	8007fe0 <USBD_StdItfReq>
 800784a:	4603      	mov	r3, r0
 800784c:	73fb      	strb	r3, [r7, #15]
      break;
 800784e:	e016      	b.n	800787e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fc2d 	bl	80080b8 <USBD_StdEPReq>
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
      break;
 8007862:	e00c      	b.n	800787e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800786a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800786e:	b2db      	uxtb	r3, r3
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 fdda 	bl	800942c <USBD_LL_StallEP>
 8007878:	4603      	mov	r3, r0
 800787a:	73fb      	strb	r3, [r7, #15]
      break;
 800787c:	bf00      	nop
  }

  return ret;
 800787e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	460b      	mov	r3, r1
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800789a:	7afb      	ldrb	r3, [r7, #11]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d16e      	bne.n	800797e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80078a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	f040 8098 	bne.w	80079e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d913      	bls.n	80078e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	1ad2      	subs	r2, r2, r3
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	4293      	cmp	r3, r2
 80078d8:	bf28      	it	cs
 80078da:	4613      	movcs	r3, r2
 80078dc:	461a      	mov	r2, r3
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f001 f988 	bl	8008bf6 <USBD_CtlContinueRx>
 80078e6:	e07d      	b.n	80079e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078ee:	f003 031f 	and.w	r3, r3, #31
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d014      	beq.n	8007920 <USBD_LL_DataOutStage+0x98>
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d81d      	bhi.n	8007936 <USBD_LL_DataOutStage+0xae>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <USBD_LL_DataOutStage+0x7c>
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d003      	beq.n	800790a <USBD_LL_DataOutStage+0x82>
 8007902:	e018      	b.n	8007936 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	75bb      	strb	r3, [r7, #22]
            break;
 8007908:	e018      	b.n	800793c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007910:	b2db      	uxtb	r3, r3
 8007912:	4619      	mov	r1, r3
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 fa64 	bl	8007de2 <USBD_CoreFindIF>
 800791a:	4603      	mov	r3, r0
 800791c:	75bb      	strb	r3, [r7, #22]
            break;
 800791e:	e00d      	b.n	800793c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007926:	b2db      	uxtb	r3, r3
 8007928:	4619      	mov	r1, r3
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fa66 	bl	8007dfc <USBD_CoreFindEP>
 8007930:	4603      	mov	r3, r0
 8007932:	75bb      	strb	r3, [r7, #22]
            break;
 8007934:	e002      	b.n	800793c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	75bb      	strb	r3, [r7, #22]
            break;
 800793a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800793c:	7dbb      	ldrb	r3, [r7, #22]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d119      	bne.n	8007976 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b03      	cmp	r3, #3
 800794c:	d113      	bne.n	8007976 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800794e:	7dba      	ldrb	r2, [r7, #22]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	32ae      	adds	r2, #174	@ 0xae
 8007954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800795e:	7dba      	ldrb	r2, [r7, #22]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007966:	7dba      	ldrb	r2, [r7, #22]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	32ae      	adds	r2, #174	@ 0xae
 800796c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f001 f94e 	bl	8008c18 <USBD_CtlSendStatus>
 800797c:	e032      	b.n	80079e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007984:	b2db      	uxtb	r3, r3
 8007986:	4619      	mov	r1, r3
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fa37 	bl	8007dfc <USBD_CoreFindEP>
 800798e:	4603      	mov	r3, r0
 8007990:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007992:	7dbb      	ldrb	r3, [r7, #22]
 8007994:	2bff      	cmp	r3, #255	@ 0xff
 8007996:	d025      	beq.n	80079e4 <USBD_LL_DataOutStage+0x15c>
 8007998:	7dbb      	ldrb	r3, [r7, #22]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d122      	bne.n	80079e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d117      	bne.n	80079da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80079aa:	7dba      	ldrb	r2, [r7, #22]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	32ae      	adds	r2, #174	@ 0xae
 80079b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00f      	beq.n	80079da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80079ba:	7dba      	ldrb	r2, [r7, #22]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80079c2:	7dba      	ldrb	r2, [r7, #22]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	32ae      	adds	r2, #174	@ 0xae
 80079c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	7afa      	ldrb	r2, [r7, #11]
 80079d0:	4611      	mov	r1, r2
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	4798      	blx	r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	e000      	b.n	80079e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b086      	sub	sp, #24
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	460b      	mov	r3, r1
 80079f8:	607a      	str	r2, [r7, #4]
 80079fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80079fc:	7afb      	ldrb	r3, [r7, #11]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d16f      	bne.n	8007ae2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3314      	adds	r3, #20
 8007a06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d15a      	bne.n	8007ac8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d914      	bls.n	8007a48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	1ad2      	subs	r2, r2, r3
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	461a      	mov	r2, r3
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f001 f8b0 	bl	8008b9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2100      	movs	r1, #0
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f001 fd9d 	bl	8009580 <USBD_LL_PrepareReceive>
 8007a46:	e03f      	b.n	8007ac8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d11c      	bne.n	8007a8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d316      	bcc.n	8007a8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d20f      	bcs.n	8007a8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2100      	movs	r1, #0
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f001 f891 	bl	8008b9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a80:	2300      	movs	r3, #0
 8007a82:	2200      	movs	r2, #0
 8007a84:	2100      	movs	r1, #0
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f001 fd7a 	bl	8009580 <USBD_LL_PrepareReceive>
 8007a8c:	e01c      	b.n	8007ac8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d10f      	bne.n	8007aba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d009      	beq.n	8007aba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aba:	2180      	movs	r1, #128	@ 0x80
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f001 fcb5 	bl	800942c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f001 f8bb 	bl	8008c3e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d03a      	beq.n	8007b48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff fe42 	bl	800775c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007ae0:	e032      	b.n	8007b48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ae2:	7afb      	ldrb	r3, [r7, #11]
 8007ae4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	4619      	mov	r1, r3
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f985 	bl	8007dfc <USBD_CoreFindEP>
 8007af2:	4603      	mov	r3, r0
 8007af4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	2bff      	cmp	r3, #255	@ 0xff
 8007afa:	d025      	beq.n	8007b48 <USBD_LL_DataInStage+0x15a>
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d122      	bne.n	8007b48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d11c      	bne.n	8007b48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b0e:	7dfa      	ldrb	r2, [r7, #23]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	32ae      	adds	r2, #174	@ 0xae
 8007b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d014      	beq.n	8007b48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b1e:	7dfa      	ldrb	r2, [r7, #23]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b26:	7dfa      	ldrb	r2, [r7, #23]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	32ae      	adds	r2, #174	@ 0xae
 8007b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	7afa      	ldrb	r2, [r7, #11]
 8007b34:	4611      	mov	r1, r2
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	4798      	blx	r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b3e:	7dbb      	ldrb	r3, [r7, #22]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b44:	7dbb      	ldrb	r3, [r7, #22]
 8007b46:	e000      	b.n	8007b4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d014      	beq.n	8007bb8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00e      	beq.n	8007bb8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6852      	ldr	r2, [r2, #4]
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	4611      	mov	r1, r2
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	4798      	blx	r3
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bb8:	2340      	movs	r3, #64	@ 0x40
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 fbef 	bl	80093a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2240      	movs	r2, #64	@ 0x40
 8007bd0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bd4:	2340      	movs	r3, #64	@ 0x40
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2180      	movs	r1, #128	@ 0x80
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 fbe1 	bl	80093a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2240      	movs	r2, #64	@ 0x40
 8007bea:	621a      	str	r2, [r3, #32]

  return ret;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	78fa      	ldrb	r2, [r7, #3]
 8007c06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d006      	beq.n	8007c38 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2204      	movs	r2, #4
 8007c3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d106      	bne.n	8007c70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d110      	bne.n	8007cb4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	32ae      	adds	r2, #174	@ 0xae
 8007cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e01c      	b.n	8007d1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d115      	bne.n	8007d18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	32ae      	adds	r2, #174	@ 0xae
 8007cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	32ae      	adds	r2, #174	@ 0xae
 8007d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	78fa      	ldrb	r2, [r7, #3]
 8007d12:	4611      	mov	r1, r2
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	32ae      	adds	r2, #174	@ 0xae
 8007d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e01c      	b.n	8007d7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d115      	bne.n	8007d7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32ae      	adds	r2, #174	@ 0xae
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	32ae      	adds	r2, #174	@ 0xae
 8007d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d74:	78fa      	ldrb	r2, [r7, #3]
 8007d76:	4611      	mov	r1, r2
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00e      	beq.n	8007dd8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	6852      	ldr	r2, [r2, #4]
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	4611      	mov	r1, r2
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	4798      	blx	r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	460b      	mov	r3, r1
 8007dec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007dee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b086      	sub	sp, #24
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	885b      	ldrh	r3, [r3, #2]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	7812      	ldrb	r2, [r2, #0]
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d91f      	bls.n	8007e7c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007e42:	e013      	b.n	8007e6c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007e44:	f107 030a 	add.w	r3, r7, #10
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6978      	ldr	r0, [r7, #20]
 8007e4c:	f000 f81b 	bl	8007e86 <USBD_GetNextDesc>
 8007e50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	785b      	ldrb	r3, [r3, #1]
 8007e56:	2b05      	cmp	r3, #5
 8007e58:	d108      	bne.n	8007e6c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	789b      	ldrb	r3, [r3, #2]
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d008      	beq.n	8007e7a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	885b      	ldrh	r3, [r3, #2]
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	897b      	ldrh	r3, [r7, #10]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d8e5      	bhi.n	8007e44 <USBD_GetEpDesc+0x2e>
 8007e78:	e000      	b.n	8007e7c <USBD_GetEpDesc+0x66>
          break;
 8007e7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007e7c:	693b      	ldr	r3, [r7, #16]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b085      	sub	sp, #20
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	7812      	ldrb	r2, [r2, #0]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4413      	add	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b087      	sub	sp, #28
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007edc:	8a3b      	ldrh	r3, [r7, #16]
 8007ede:	021b      	lsls	r3, r3, #8
 8007ee0:	b21a      	sxth	r2, r3
 8007ee2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	b21b      	sxth	r3, r3
 8007eea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007eec:	89fb      	ldrh	r3, [r7, #14]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	371c      	adds	r7, #28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f12:	2b40      	cmp	r3, #64	@ 0x40
 8007f14:	d005      	beq.n	8007f22 <USBD_StdDevReq+0x26>
 8007f16:	2b40      	cmp	r3, #64	@ 0x40
 8007f18:	d857      	bhi.n	8007fca <USBD_StdDevReq+0xce>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00f      	beq.n	8007f3e <USBD_StdDevReq+0x42>
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	d153      	bne.n	8007fca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	32ae      	adds	r2, #174	@ 0xae
 8007f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	4798      	blx	r3
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f3c:	e04a      	b.n	8007fd4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	2b09      	cmp	r3, #9
 8007f44:	d83b      	bhi.n	8007fbe <USBD_StdDevReq+0xc2>
 8007f46:	a201      	add	r2, pc, #4	@ (adr r2, 8007f4c <USBD_StdDevReq+0x50>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007fa1 	.word	0x08007fa1
 8007f50:	08007fb5 	.word	0x08007fb5
 8007f54:	08007fbf 	.word	0x08007fbf
 8007f58:	08007fab 	.word	0x08007fab
 8007f5c:	08007fbf 	.word	0x08007fbf
 8007f60:	08007f7f 	.word	0x08007f7f
 8007f64:	08007f75 	.word	0x08007f75
 8007f68:	08007fbf 	.word	0x08007fbf
 8007f6c:	08007f97 	.word	0x08007f97
 8007f70:	08007f89 	.word	0x08007f89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa3c 	bl	80083f4 <USBD_GetDescriptor>
          break;
 8007f7c:	e024      	b.n	8007fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fba1 	bl	80086c8 <USBD_SetAddress>
          break;
 8007f86:	e01f      	b.n	8007fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fbe0 	bl	8008750 <USBD_SetConfig>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]
          break;
 8007f94:	e018      	b.n	8007fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fc83 	bl	80088a4 <USBD_GetConfig>
          break;
 8007f9e:	e013      	b.n	8007fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fcb4 	bl	8008910 <USBD_GetStatus>
          break;
 8007fa8:	e00e      	b.n	8007fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fce3 	bl	8008978 <USBD_SetFeature>
          break;
 8007fb2:	e009      	b.n	8007fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fd07 	bl	80089ca <USBD_ClrFeature>
          break;
 8007fbc:	e004      	b.n	8007fc8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fd5e 	bl	8008a82 <USBD_CtlError>
          break;
 8007fc6:	bf00      	nop
      }
      break;
 8007fc8:	e004      	b.n	8007fd4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fd58 	bl	8008a82 <USBD_CtlError>
      break;
 8007fd2:	bf00      	nop
  }

  return ret;
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop

08007fe0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ff6:	2b40      	cmp	r3, #64	@ 0x40
 8007ff8:	d005      	beq.n	8008006 <USBD_StdItfReq+0x26>
 8007ffa:	2b40      	cmp	r3, #64	@ 0x40
 8007ffc:	d852      	bhi.n	80080a4 <USBD_StdItfReq+0xc4>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <USBD_StdItfReq+0x26>
 8008002:	2b20      	cmp	r3, #32
 8008004:	d14e      	bne.n	80080a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800800c:	b2db      	uxtb	r3, r3
 800800e:	3b01      	subs	r3, #1
 8008010:	2b02      	cmp	r3, #2
 8008012:	d840      	bhi.n	8008096 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	889b      	ldrh	r3, [r3, #4]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b01      	cmp	r3, #1
 800801c:	d836      	bhi.n	800808c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	889b      	ldrh	r3, [r3, #4]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff fedb 	bl	8007de2 <USBD_CoreFindIF>
 800802c:	4603      	mov	r3, r0
 800802e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2bff      	cmp	r3, #255	@ 0xff
 8008034:	d01d      	beq.n	8008072 <USBD_StdItfReq+0x92>
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d11a      	bne.n	8008072 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800803c:	7bba      	ldrb	r2, [r7, #14]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	32ae      	adds	r2, #174	@ 0xae
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00f      	beq.n	800806c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800804c:	7bba      	ldrb	r2, [r7, #14]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008054:	7bba      	ldrb	r2, [r7, #14]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	32ae      	adds	r2, #174	@ 0xae
 800805a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	4798      	blx	r3
 8008066:	4603      	mov	r3, r0
 8008068:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800806a:	e004      	b.n	8008076 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800806c:	2303      	movs	r3, #3
 800806e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008070:	e001      	b.n	8008076 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008072:	2303      	movs	r3, #3
 8008074:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	88db      	ldrh	r3, [r3, #6]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d110      	bne.n	80080a0 <USBD_StdItfReq+0xc0>
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10d      	bne.n	80080a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fdc7 	bl	8008c18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800808a:	e009      	b.n	80080a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fcf7 	bl	8008a82 <USBD_CtlError>
          break;
 8008094:	e004      	b.n	80080a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fcf2 	bl	8008a82 <USBD_CtlError>
          break;
 800809e:	e000      	b.n	80080a2 <USBD_StdItfReq+0xc2>
          break;
 80080a0:	bf00      	nop
      }
      break;
 80080a2:	e004      	b.n	80080ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fceb 	bl	8008a82 <USBD_CtlError>
      break;
 80080ac:	bf00      	nop
  }

  return ret;
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	889b      	ldrh	r3, [r3, #4]
 80080ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080d4:	2b40      	cmp	r3, #64	@ 0x40
 80080d6:	d007      	beq.n	80080e8 <USBD_StdEPReq+0x30>
 80080d8:	2b40      	cmp	r3, #64	@ 0x40
 80080da:	f200 817f 	bhi.w	80083dc <USBD_StdEPReq+0x324>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d02a      	beq.n	8008138 <USBD_StdEPReq+0x80>
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	f040 817a 	bne.w	80083dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff fe85 	bl	8007dfc <USBD_CoreFindEP>
 80080f2:	4603      	mov	r3, r0
 80080f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080f6:	7b7b      	ldrb	r3, [r7, #13]
 80080f8:	2bff      	cmp	r3, #255	@ 0xff
 80080fa:	f000 8174 	beq.w	80083e6 <USBD_StdEPReq+0x32e>
 80080fe:	7b7b      	ldrb	r3, [r7, #13]
 8008100:	2b00      	cmp	r3, #0
 8008102:	f040 8170 	bne.w	80083e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008106:	7b7a      	ldrb	r2, [r7, #13]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800810e:	7b7a      	ldrb	r2, [r7, #13]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	32ae      	adds	r2, #174	@ 0xae
 8008114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 8163 	beq.w	80083e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008120:	7b7a      	ldrb	r2, [r7, #13]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	32ae      	adds	r2, #174	@ 0xae
 8008126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	4798      	blx	r3
 8008132:	4603      	mov	r3, r0
 8008134:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008136:	e156      	b.n	80083e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	785b      	ldrb	r3, [r3, #1]
 800813c:	2b03      	cmp	r3, #3
 800813e:	d008      	beq.n	8008152 <USBD_StdEPReq+0x9a>
 8008140:	2b03      	cmp	r3, #3
 8008142:	f300 8145 	bgt.w	80083d0 <USBD_StdEPReq+0x318>
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 809b 	beq.w	8008282 <USBD_StdEPReq+0x1ca>
 800814c:	2b01      	cmp	r3, #1
 800814e:	d03c      	beq.n	80081ca <USBD_StdEPReq+0x112>
 8008150:	e13e      	b.n	80083d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b02      	cmp	r3, #2
 800815c:	d002      	beq.n	8008164 <USBD_StdEPReq+0xac>
 800815e:	2b03      	cmp	r3, #3
 8008160:	d016      	beq.n	8008190 <USBD_StdEPReq+0xd8>
 8008162:	e02c      	b.n	80081be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00d      	beq.n	8008186 <USBD_StdEPReq+0xce>
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	2b80      	cmp	r3, #128	@ 0x80
 800816e:	d00a      	beq.n	8008186 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 f959 	bl	800942c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800817a:	2180      	movs	r1, #128	@ 0x80
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 f955 	bl	800942c <USBD_LL_StallEP>
 8008182:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008184:	e020      	b.n	80081c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fc7a 	bl	8008a82 <USBD_CtlError>
              break;
 800818e:	e01b      	b.n	80081c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	885b      	ldrh	r3, [r3, #2]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10e      	bne.n	80081b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <USBD_StdEPReq+0xfe>
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	2b80      	cmp	r3, #128	@ 0x80
 80081a2:	d008      	beq.n	80081b6 <USBD_StdEPReq+0xfe>
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	88db      	ldrh	r3, [r3, #6]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f93b 	bl	800942c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fd2e 	bl	8008c18 <USBD_CtlSendStatus>

              break;
 80081bc:	e004      	b.n	80081c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fc5e 	bl	8008a82 <USBD_CtlError>
              break;
 80081c6:	bf00      	nop
          }
          break;
 80081c8:	e107      	b.n	80083da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d002      	beq.n	80081dc <USBD_StdEPReq+0x124>
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d016      	beq.n	8008208 <USBD_StdEPReq+0x150>
 80081da:	e04b      	b.n	8008274 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00d      	beq.n	80081fe <USBD_StdEPReq+0x146>
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b80      	cmp	r3, #128	@ 0x80
 80081e6:	d00a      	beq.n	80081fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 f91d 	bl	800942c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081f2:	2180      	movs	r1, #128	@ 0x80
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 f919 	bl	800942c <USBD_LL_StallEP>
 80081fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081fc:	e040      	b.n	8008280 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fc3e 	bl	8008a82 <USBD_CtlError>
              break;
 8008206:	e03b      	b.n	8008280 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	885b      	ldrh	r3, [r3, #2]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d136      	bne.n	800827e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 f923 	bl	800946a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fcf7 	bl	8008c18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fde4 	bl	8007dfc <USBD_CoreFindEP>
 8008234:	4603      	mov	r3, r0
 8008236:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008238:	7b7b      	ldrb	r3, [r7, #13]
 800823a:	2bff      	cmp	r3, #255	@ 0xff
 800823c:	d01f      	beq.n	800827e <USBD_StdEPReq+0x1c6>
 800823e:	7b7b      	ldrb	r3, [r7, #13]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d11c      	bne.n	800827e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008244:	7b7a      	ldrb	r2, [r7, #13]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800824c:	7b7a      	ldrb	r2, [r7, #13]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	32ae      	adds	r2, #174	@ 0xae
 8008252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d010      	beq.n	800827e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800825c:	7b7a      	ldrb	r2, [r7, #13]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	32ae      	adds	r2, #174	@ 0xae
 8008262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	4798      	blx	r3
 800826e:	4603      	mov	r3, r0
 8008270:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008272:	e004      	b.n	800827e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fc03 	bl	8008a82 <USBD_CtlError>
              break;
 800827c:	e000      	b.n	8008280 <USBD_StdEPReq+0x1c8>
              break;
 800827e:	bf00      	nop
          }
          break;
 8008280:	e0ab      	b.n	80083da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d002      	beq.n	8008294 <USBD_StdEPReq+0x1dc>
 800828e:	2b03      	cmp	r3, #3
 8008290:	d032      	beq.n	80082f8 <USBD_StdEPReq+0x240>
 8008292:	e097      	b.n	80083c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <USBD_StdEPReq+0x1f2>
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b80      	cmp	r3, #128	@ 0x80
 800829e:	d004      	beq.n	80082aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fbed 	bl	8008a82 <USBD_CtlError>
                break;
 80082a8:	e091      	b.n	80083ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	da0b      	bge.n	80082ca <USBD_StdEPReq+0x212>
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	3310      	adds	r3, #16
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	4413      	add	r3, r2
 80082c6:	3304      	adds	r3, #4
 80082c8:	e00b      	b.n	80082e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	4413      	add	r3, r2
 80082e0:	3304      	adds	r3, #4
 80082e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2202      	movs	r2, #2
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fc37 	bl	8008b64 <USBD_CtlSendData>
              break;
 80082f6:	e06a      	b.n	80083ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	da11      	bge.n	8008324 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	f003 020f 	and.w	r2, r3, #15
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	4613      	mov	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	3324      	adds	r3, #36	@ 0x24
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d117      	bne.n	800834a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fbb0 	bl	8008a82 <USBD_CtlError>
                  break;
 8008322:	e054      	b.n	80083ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	f003 020f 	and.w	r2, r3, #15
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d104      	bne.n	800834a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fb9d 	bl	8008a82 <USBD_CtlError>
                  break;
 8008348:	e041      	b.n	80083ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800834a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800834e:	2b00      	cmp	r3, #0
 8008350:	da0b      	bge.n	800836a <USBD_StdEPReq+0x2b2>
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008358:	4613      	mov	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	3310      	adds	r3, #16
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	4413      	add	r3, r2
 8008366:	3304      	adds	r3, #4
 8008368:	e00b      	b.n	8008382 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	4413      	add	r3, r2
 8008380:	3304      	adds	r3, #4
 8008382:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <USBD_StdEPReq+0x2d8>
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b80      	cmp	r3, #128	@ 0x80
 800838e:	d103      	bne.n	8008398 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	e00e      	b.n	80083b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f001 f883 	bl	80094a8 <USBD_LL_IsStallEP>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2201      	movs	r2, #1
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	e002      	b.n	80083b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2202      	movs	r2, #2
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fbd1 	bl	8008b64 <USBD_CtlSendData>
              break;
 80083c2:	e004      	b.n	80083ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fb5b 	bl	8008a82 <USBD_CtlError>
              break;
 80083cc:	bf00      	nop
          }
          break;
 80083ce:	e004      	b.n	80083da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fb55 	bl	8008a82 <USBD_CtlError>
          break;
 80083d8:	bf00      	nop
      }
      break;
 80083da:	e005      	b.n	80083e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fb4f 	bl	8008a82 <USBD_CtlError>
      break;
 80083e4:	e000      	b.n	80083e8 <USBD_StdEPReq+0x330>
      break;
 80083e6:	bf00      	nop
  }

  return ret;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	885b      	ldrh	r3, [r3, #2]
 800840e:	0a1b      	lsrs	r3, r3, #8
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	2b06      	cmp	r3, #6
 8008416:	f200 8128 	bhi.w	800866a <USBD_GetDescriptor+0x276>
 800841a:	a201      	add	r2, pc, #4	@ (adr r2, 8008420 <USBD_GetDescriptor+0x2c>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	0800843d 	.word	0x0800843d
 8008424:	08008455 	.word	0x08008455
 8008428:	08008495 	.word	0x08008495
 800842c:	0800866b 	.word	0x0800866b
 8008430:	0800866b 	.word	0x0800866b
 8008434:	0800860b 	.word	0x0800860b
 8008438:	08008637 	.word	0x08008637
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	7c12      	ldrb	r2, [r2, #16]
 8008448:	f107 0108 	add.w	r1, r7, #8
 800844c:	4610      	mov	r0, r2
 800844e:	4798      	blx	r3
 8008450:	60f8      	str	r0, [r7, #12]
      break;
 8008452:	e112      	b.n	800867a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7c1b      	ldrb	r3, [r3, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10d      	bne.n	8008478 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008464:	f107 0208 	add.w	r2, r7, #8
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3301      	adds	r3, #1
 8008472:	2202      	movs	r2, #2
 8008474:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008476:	e100      	b.n	800867a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800847e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008480:	f107 0208 	add.w	r2, r7, #8
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
 8008488:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	2202      	movs	r2, #2
 8008490:	701a      	strb	r2, [r3, #0]
      break;
 8008492:	e0f2      	b.n	800867a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	885b      	ldrh	r3, [r3, #2]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b05      	cmp	r3, #5
 800849c:	f200 80ac 	bhi.w	80085f8 <USBD_GetDescriptor+0x204>
 80084a0:	a201      	add	r2, pc, #4	@ (adr r2, 80084a8 <USBD_GetDescriptor+0xb4>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084c1 	.word	0x080084c1
 80084ac:	080084f5 	.word	0x080084f5
 80084b0:	08008529 	.word	0x08008529
 80084b4:	0800855d 	.word	0x0800855d
 80084b8:	08008591 	.word	0x08008591
 80084bc:	080085c5 	.word	0x080085c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00b      	beq.n	80084e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	7c12      	ldrb	r2, [r2, #16]
 80084d8:	f107 0108 	add.w	r1, r7, #8
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084e2:	e091      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 facb 	bl	8008a82 <USBD_CtlError>
            err++;
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	3301      	adds	r3, #1
 80084f0:	72fb      	strb	r3, [r7, #11]
          break;
 80084f2:	e089      	b.n	8008608 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00b      	beq.n	8008518 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	7c12      	ldrb	r2, [r2, #16]
 800850c:	f107 0108 	add.w	r1, r7, #8
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
 8008514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008516:	e077      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fab1 	bl	8008a82 <USBD_CtlError>
            err++;
 8008520:	7afb      	ldrb	r3, [r7, #11]
 8008522:	3301      	adds	r3, #1
 8008524:	72fb      	strb	r3, [r7, #11]
          break;
 8008526:	e06f      	b.n	8008608 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	7c12      	ldrb	r2, [r2, #16]
 8008540:	f107 0108 	add.w	r1, r7, #8
 8008544:	4610      	mov	r0, r2
 8008546:	4798      	blx	r3
 8008548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800854a:	e05d      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa97 	bl	8008a82 <USBD_CtlError>
            err++;
 8008554:	7afb      	ldrb	r3, [r7, #11]
 8008556:	3301      	adds	r3, #1
 8008558:	72fb      	strb	r3, [r7, #11]
          break;
 800855a:	e055      	b.n	8008608 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	7c12      	ldrb	r2, [r2, #16]
 8008574:	f107 0108 	add.w	r1, r7, #8
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800857e:	e043      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fa7d 	bl	8008a82 <USBD_CtlError>
            err++;
 8008588:	7afb      	ldrb	r3, [r7, #11]
 800858a:	3301      	adds	r3, #1
 800858c:	72fb      	strb	r3, [r7, #11]
          break;
 800858e:	e03b      	b.n	8008608 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	7c12      	ldrb	r2, [r2, #16]
 80085a8:	f107 0108 	add.w	r1, r7, #8
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085b2:	e029      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa63 	bl	8008a82 <USBD_CtlError>
            err++;
 80085bc:	7afb      	ldrb	r3, [r7, #11]
 80085be:	3301      	adds	r3, #1
 80085c0:	72fb      	strb	r3, [r7, #11]
          break;
 80085c2:	e021      	b.n	8008608 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00b      	beq.n	80085e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	7c12      	ldrb	r2, [r2, #16]
 80085dc:	f107 0108 	add.w	r1, r7, #8
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085e6:	e00f      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa49 	bl	8008a82 <USBD_CtlError>
            err++;
 80085f0:	7afb      	ldrb	r3, [r7, #11]
 80085f2:	3301      	adds	r3, #1
 80085f4:	72fb      	strb	r3, [r7, #11]
          break;
 80085f6:	e007      	b.n	8008608 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa41 	bl	8008a82 <USBD_CtlError>
          err++;
 8008600:	7afb      	ldrb	r3, [r7, #11]
 8008602:	3301      	adds	r3, #1
 8008604:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008606:	bf00      	nop
      }
      break;
 8008608:	e037      	b.n	800867a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	7c1b      	ldrb	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d109      	bne.n	8008626 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800861a:	f107 0208 	add.w	r2, r7, #8
 800861e:	4610      	mov	r0, r2
 8008620:	4798      	blx	r3
 8008622:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008624:	e029      	b.n	800867a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fa2a 	bl	8008a82 <USBD_CtlError>
        err++;
 800862e:	7afb      	ldrb	r3, [r7, #11]
 8008630:	3301      	adds	r3, #1
 8008632:	72fb      	strb	r3, [r7, #11]
      break;
 8008634:	e021      	b.n	800867a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7c1b      	ldrb	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10d      	bne.n	800865a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008646:	f107 0208 	add.w	r2, r7, #8
 800864a:	4610      	mov	r0, r2
 800864c:	4798      	blx	r3
 800864e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	2207      	movs	r2, #7
 8008656:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008658:	e00f      	b.n	800867a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fa10 	bl	8008a82 <USBD_CtlError>
        err++;
 8008662:	7afb      	ldrb	r3, [r7, #11]
 8008664:	3301      	adds	r3, #1
 8008666:	72fb      	strb	r3, [r7, #11]
      break;
 8008668:	e007      	b.n	800867a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fa08 	bl	8008a82 <USBD_CtlError>
      err++;
 8008672:	7afb      	ldrb	r3, [r7, #11]
 8008674:	3301      	adds	r3, #1
 8008676:	72fb      	strb	r3, [r7, #11]
      break;
 8008678:	bf00      	nop
  }

  if (err != 0U)
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d11e      	bne.n	80086be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	88db      	ldrh	r3, [r3, #6]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d016      	beq.n	80086b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008688:	893b      	ldrh	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	88da      	ldrh	r2, [r3, #6]
 8008692:	893b      	ldrh	r3, [r7, #8]
 8008694:	4293      	cmp	r3, r2
 8008696:	bf28      	it	cs
 8008698:	4613      	movcs	r3, r2
 800869a:	b29b      	uxth	r3, r3
 800869c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800869e:	893b      	ldrh	r3, [r7, #8]
 80086a0:	461a      	mov	r2, r3
 80086a2:	68f9      	ldr	r1, [r7, #12]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fa5d 	bl	8008b64 <USBD_CtlSendData>
 80086aa:	e009      	b.n	80086c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f9e7 	bl	8008a82 <USBD_CtlError>
 80086b4:	e004      	b.n	80086c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 faae 	bl	8008c18 <USBD_CtlSendStatus>
 80086bc:	e000      	b.n	80086c0 <USBD_GetDescriptor+0x2cc>
    return;
 80086be:	bf00      	nop
  }
}
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop

080086c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	889b      	ldrh	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d131      	bne.n	800873e <USBD_SetAddress+0x76>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	88db      	ldrh	r3, [r3, #6]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d12d      	bne.n	800873e <USBD_SetAddress+0x76>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	885b      	ldrh	r3, [r3, #2]
 80086e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80086e8:	d829      	bhi.n	800873e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	885b      	ldrh	r3, [r3, #2]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d104      	bne.n	800870c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f9bc 	bl	8008a82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	e01d      	b.n	8008748 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7bfa      	ldrb	r2, [r7, #15]
 8008710:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fef1 	bl	8009500 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa7a 	bl	8008c18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d004      	beq.n	8008734 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2202      	movs	r2, #2
 800872e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008732:	e009      	b.n	8008748 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873c:	e004      	b.n	8008748 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f99e 	bl	8008a82 <USBD_CtlError>
  }
}
 8008746:	bf00      	nop
 8008748:	bf00      	nop
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	4b4e      	ldr	r3, [pc, #312]	@ (80088a0 <USBD_SetConfig+0x150>)
 8008766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008768:	4b4d      	ldr	r3, [pc, #308]	@ (80088a0 <USBD_SetConfig+0x150>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d905      	bls.n	800877c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f985 	bl	8008a82 <USBD_CtlError>
    return USBD_FAIL;
 8008778:	2303      	movs	r3, #3
 800877a:	e08c      	b.n	8008896 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d002      	beq.n	800878e <USBD_SetConfig+0x3e>
 8008788:	2b03      	cmp	r3, #3
 800878a:	d029      	beq.n	80087e0 <USBD_SetConfig+0x90>
 800878c:	e075      	b.n	800887a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800878e:	4b44      	ldr	r3, [pc, #272]	@ (80088a0 <USBD_SetConfig+0x150>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d020      	beq.n	80087d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008796:	4b42      	ldr	r3, [pc, #264]	@ (80088a0 <USBD_SetConfig+0x150>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087a0:	4b3f      	ldr	r3, [pc, #252]	@ (80088a0 <USBD_SetConfig+0x150>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7fe ffe3 	bl	8007772 <USBD_SetClassConfig>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d008      	beq.n	80087c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f962 	bl	8008a82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2202      	movs	r2, #2
 80087c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087c6:	e065      	b.n	8008894 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fa25 	bl	8008c18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2203      	movs	r2, #3
 80087d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80087d6:	e05d      	b.n	8008894 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fa1d 	bl	8008c18 <USBD_CtlSendStatus>
      break;
 80087de:	e059      	b.n	8008894 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087e0:	4b2f      	ldr	r3, [pc, #188]	@ (80088a0 <USBD_SetConfig+0x150>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d112      	bne.n	800880e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80087f0:	4b2b      	ldr	r3, [pc, #172]	@ (80088a0 <USBD_SetConfig+0x150>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087fa:	4b29      	ldr	r3, [pc, #164]	@ (80088a0 <USBD_SetConfig+0x150>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7fe ffd2 	bl	80077aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa06 	bl	8008c18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800880c:	e042      	b.n	8008894 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800880e:	4b24      	ldr	r3, [pc, #144]	@ (80088a0 <USBD_SetConfig+0x150>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d02a      	beq.n	8008872 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	b2db      	uxtb	r3, r3
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7fe ffc0 	bl	80077aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800882a:	4b1d      	ldr	r3, [pc, #116]	@ (80088a0 <USBD_SetConfig+0x150>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008834:	4b1a      	ldr	r3, [pc, #104]	@ (80088a0 <USBD_SetConfig+0x150>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7fe ff99 	bl	8007772 <USBD_SetClassConfig>
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00f      	beq.n	800886a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f918 	bl	8008a82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7fe ffa5 	bl	80077aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008868:	e014      	b.n	8008894 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f9d4 	bl	8008c18 <USBD_CtlSendStatus>
      break;
 8008870:	e010      	b.n	8008894 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f9d0 	bl	8008c18 <USBD_CtlSendStatus>
      break;
 8008878:	e00c      	b.n	8008894 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f900 	bl	8008a82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008882:	4b07      	ldr	r3, [pc, #28]	@ (80088a0 <USBD_SetConfig+0x150>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7fe ff8e 	bl	80077aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800888e:	2303      	movs	r3, #3
 8008890:	73fb      	strb	r3, [r7, #15]
      break;
 8008892:	bf00      	nop
  }

  return ret;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	20003338 	.word	0x20003338

080088a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	88db      	ldrh	r3, [r3, #6]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d004      	beq.n	80088c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f8e2 	bl	8008a82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088be:	e023      	b.n	8008908 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	dc02      	bgt.n	80088d2 <USBD_GetConfig+0x2e>
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dc03      	bgt.n	80088d8 <USBD_GetConfig+0x34>
 80088d0:	e015      	b.n	80088fe <USBD_GetConfig+0x5a>
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d00b      	beq.n	80088ee <USBD_GetConfig+0x4a>
 80088d6:	e012      	b.n	80088fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3308      	adds	r3, #8
 80088e2:	2201      	movs	r2, #1
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f93c 	bl	8008b64 <USBD_CtlSendData>
        break;
 80088ec:	e00c      	b.n	8008908 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	3304      	adds	r3, #4
 80088f2:	2201      	movs	r2, #1
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f934 	bl	8008b64 <USBD_CtlSendData>
        break;
 80088fc:	e004      	b.n	8008908 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f8be 	bl	8008a82 <USBD_CtlError>
        break;
 8008906:	bf00      	nop
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008920:	b2db      	uxtb	r3, r3
 8008922:	3b01      	subs	r3, #1
 8008924:	2b02      	cmp	r3, #2
 8008926:	d81e      	bhi.n	8008966 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	88db      	ldrh	r3, [r3, #6]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d004      	beq.n	800893a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f8a5 	bl	8008a82 <USBD_CtlError>
        break;
 8008938:	e01a      	b.n	8008970 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008946:	2b00      	cmp	r3, #0
 8008948:	d005      	beq.n	8008956 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f043 0202 	orr.w	r2, r3, #2
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	330c      	adds	r3, #12
 800895a:	2202      	movs	r2, #2
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f900 	bl	8008b64 <USBD_CtlSendData>
      break;
 8008964:	e004      	b.n	8008970 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f88a 	bl	8008a82 <USBD_CtlError>
      break;
 800896e:	bf00      	nop
  }
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	885b      	ldrh	r3, [r3, #2]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d107      	bne.n	800899a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f940 	bl	8008c18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008998:	e013      	b.n	80089c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	885b      	ldrh	r3, [r3, #2]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d10b      	bne.n	80089ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	889b      	ldrh	r3, [r3, #4]
 80089a6:	0a1b      	lsrs	r3, r3, #8
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f930 	bl	8008c18 <USBD_CtlSendStatus>
}
 80089b8:	e003      	b.n	80089c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f860 	bl	8008a82 <USBD_CtlError>
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	3b01      	subs	r3, #1
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d80b      	bhi.n	80089fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	885b      	ldrh	r3, [r3, #2]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d10c      	bne.n	8008a04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f910 	bl	8008c18 <USBD_CtlSendStatus>
      }
      break;
 80089f8:	e004      	b.n	8008a04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f840 	bl	8008a82 <USBD_CtlError>
      break;
 8008a02:	e000      	b.n	8008a06 <USBD_ClrFeature+0x3c>
      break;
 8008a04:	bf00      	nop
  }
}
 8008a06:	bf00      	nop
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	781a      	ldrb	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	781a      	ldrb	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3301      	adds	r3, #1
 8008a36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f7ff fa40 	bl	8007ebe <SWAPBYTE>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	461a      	mov	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7ff fa33 	bl	8007ebe <SWAPBYTE>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3301      	adds	r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f7ff fa26 	bl	8007ebe <SWAPBYTE>
 8008a72:	4603      	mov	r3, r0
 8008a74:	461a      	mov	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	80da      	strh	r2, [r3, #6]
}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a8c:	2180      	movs	r1, #128	@ 0x80
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fccc 	bl	800942c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a94:	2100      	movs	r1, #0
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fcc8 	bl	800942c <USBD_LL_StallEP>
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d036      	beq.n	8008b28 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008abe:	6938      	ldr	r0, [r7, #16]
 8008ac0:	f000 f836 	bl	8008b30 <USBD_GetLen>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	7812      	ldrb	r2, [r2, #0]
 8008adc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	4413      	add	r3, r2
 8008aea:	2203      	movs	r2, #3
 8008aec:	701a      	strb	r2, [r3, #0]
  idx++;
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	3301      	adds	r3, #1
 8008af2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008af4:	e013      	b.n	8008b1e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008af6:	7dfb      	ldrb	r3, [r7, #23]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	4413      	add	r3, r2
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	7812      	ldrb	r2, [r2, #0]
 8008b00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	3301      	adds	r3, #1
 8008b06:	613b      	str	r3, [r7, #16]
    idx++;
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	4413      	add	r3, r2
 8008b14:	2200      	movs	r2, #0
 8008b16:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e7      	bne.n	8008af6 <USBD_GetString+0x52>
 8008b26:	e000      	b.n	8008b2a <USBD_GetString+0x86>
    return;
 8008b28:	bf00      	nop
  }
}
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b40:	e005      	b.n	8008b4e <USBD_GetLen+0x1e>
  {
    len++;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	3301      	adds	r3, #1
 8008b46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1f5      	bne.n	8008b42 <USBD_GetLen+0x12>
  }

  return len;
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	2100      	movs	r1, #0
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f000 fcd7 	bl	800953e <USBD_LL_Transmit>

  return USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	2100      	movs	r1, #0
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 fcc6 	bl	800953e <USBD_LL_Transmit>

  return USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2203      	movs	r2, #3
 8008bcc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	2100      	movs	r1, #0
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 fcca 	bl	8009580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	2100      	movs	r1, #0
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 fcb9 	bl	8009580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2204      	movs	r2, #4
 8008c24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c28:	2300      	movs	r3, #0
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fc85 	bl	800953e <USBD_LL_Transmit>

  return USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2205      	movs	r2, #5
 8008c4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2200      	movs	r2, #0
 8008c52:	2100      	movs	r1, #0
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fc93 	bl	8009580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	4912      	ldr	r1, [pc, #72]	@ (8008cb4 <MX_USB_DEVICE_Init+0x50>)
 8008c6c:	4812      	ldr	r0, [pc, #72]	@ (8008cb8 <MX_USB_DEVICE_Init+0x54>)
 8008c6e:	f7fe fd03 	bl	8007678 <USBD_Init>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c78:	f7f8 f8aa 	bl	8000dd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c7c:	490f      	ldr	r1, [pc, #60]	@ (8008cbc <MX_USB_DEVICE_Init+0x58>)
 8008c7e:	480e      	ldr	r0, [pc, #56]	@ (8008cb8 <MX_USB_DEVICE_Init+0x54>)
 8008c80:	f7fe fd2a 	bl	80076d8 <USBD_RegisterClass>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c8a:	f7f8 f8a1 	bl	8000dd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c8e:	490c      	ldr	r1, [pc, #48]	@ (8008cc0 <MX_USB_DEVICE_Init+0x5c>)
 8008c90:	4809      	ldr	r0, [pc, #36]	@ (8008cb8 <MX_USB_DEVICE_Init+0x54>)
 8008c92:	f7fe fc21 	bl	80074d8 <USBD_CDC_RegisterInterface>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c9c:	f7f8 f898 	bl	8000dd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ca0:	4805      	ldr	r0, [pc, #20]	@ (8008cb8 <MX_USB_DEVICE_Init+0x54>)
 8008ca2:	f7fe fd4f 	bl	8007744 <USBD_Start>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cac:	f7f8 f890 	bl	8000dd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cb0:	bf00      	nop
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	200000dc 	.word	0x200000dc
 8008cb8:	2000333c 	.word	0x2000333c
 8008cbc:	20000048 	.word	0x20000048
 8008cc0:	200000c8 	.word	0x200000c8

08008cc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4905      	ldr	r1, [pc, #20]	@ (8008ce0 <CDC_Init_FS+0x1c>)
 8008ccc:	4805      	ldr	r0, [pc, #20]	@ (8008ce4 <CDC_Init_FS+0x20>)
 8008cce:	f7fe fc1d 	bl	800750c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008cd2:	4905      	ldr	r1, [pc, #20]	@ (8008ce8 <CDC_Init_FS+0x24>)
 8008cd4:	4803      	ldr	r0, [pc, #12]	@ (8008ce4 <CDC_Init_FS+0x20>)
 8008cd6:	f7fe fc3b 	bl	8007550 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008cda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20003a18 	.word	0x20003a18
 8008ce4:	2000333c 	.word	0x2000333c
 8008ce8:	20003618 	.word	0x20003618

08008cec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008cf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d0c:	79fb      	ldrb	r3, [r7, #7]
 8008d0e:	2b23      	cmp	r3, #35	@ 0x23
 8008d10:	d84a      	bhi.n	8008da8 <CDC_Control_FS+0xac>
 8008d12:	a201      	add	r2, pc, #4	@ (adr r2, 8008d18 <CDC_Control_FS+0x1c>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008da9 	.word	0x08008da9
 8008d1c:	08008da9 	.word	0x08008da9
 8008d20:	08008da9 	.word	0x08008da9
 8008d24:	08008da9 	.word	0x08008da9
 8008d28:	08008da9 	.word	0x08008da9
 8008d2c:	08008da9 	.word	0x08008da9
 8008d30:	08008da9 	.word	0x08008da9
 8008d34:	08008da9 	.word	0x08008da9
 8008d38:	08008da9 	.word	0x08008da9
 8008d3c:	08008da9 	.word	0x08008da9
 8008d40:	08008da9 	.word	0x08008da9
 8008d44:	08008da9 	.word	0x08008da9
 8008d48:	08008da9 	.word	0x08008da9
 8008d4c:	08008da9 	.word	0x08008da9
 8008d50:	08008da9 	.word	0x08008da9
 8008d54:	08008da9 	.word	0x08008da9
 8008d58:	08008da9 	.word	0x08008da9
 8008d5c:	08008da9 	.word	0x08008da9
 8008d60:	08008da9 	.word	0x08008da9
 8008d64:	08008da9 	.word	0x08008da9
 8008d68:	08008da9 	.word	0x08008da9
 8008d6c:	08008da9 	.word	0x08008da9
 8008d70:	08008da9 	.word	0x08008da9
 8008d74:	08008da9 	.word	0x08008da9
 8008d78:	08008da9 	.word	0x08008da9
 8008d7c:	08008da9 	.word	0x08008da9
 8008d80:	08008da9 	.word	0x08008da9
 8008d84:	08008da9 	.word	0x08008da9
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	08008da9 	.word	0x08008da9
 8008d90:	08008da9 	.word	0x08008da9
 8008d94:	08008da9 	.word	0x08008da9
 8008d98:	08008da9 	.word	0x08008da9
 8008d9c:	08008da9 	.word	0x08008da9
 8008da0:	08008da9 	.word	0x08008da9
 8008da4:	08008da9 	.word	0x08008da9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008da8:	bf00      	nop
  }

  return (USBD_OK);
 8008daa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	4808      	ldr	r0, [pc, #32]	@ (8008de8 <CDC_Receive_FS+0x30>)
 8008dc6:	f7fe fbc3 	bl	8007550 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008dca:	4807      	ldr	r0, [pc, #28]	@ (8008de8 <CDC_Receive_FS+0x30>)
 8008dcc:	f7fe fc1e 	bl	800760c <USBD_CDC_ReceivePacket>
  CDCReceiveCallback(Buf, *Len);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7f7 ff80 	bl	8000cdc <CDCReceiveCallback>
  return (USBD_OK);
 8008ddc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	2000333c 	.word	0x2000333c

08008dec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e34 <CDC_Transmit_FS+0x48>)
 8008dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e00b      	b.n	8008e2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e12:	887b      	ldrh	r3, [r7, #2]
 8008e14:	461a      	mov	r2, r3
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	4806      	ldr	r0, [pc, #24]	@ (8008e34 <CDC_Transmit_FS+0x48>)
 8008e1a:	f7fe fb77 	bl	800750c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e1e:	4805      	ldr	r0, [pc, #20]	@ (8008e34 <CDC_Transmit_FS+0x48>)
 8008e20:	f7fe fbb4 	bl	800758c <USBD_CDC_TransmitPacket>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	2000333c 	.word	0x2000333c

08008e38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	4613      	mov	r3, r2
 8008e44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	371c      	adds	r7, #28
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
	...

08008e5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	4603      	mov	r3, r0
 8008e64:	6039      	str	r1, [r7, #0]
 8008e66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2212      	movs	r2, #18
 8008e6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e6e:	4b03      	ldr	r3, [pc, #12]	@ (8008e7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	200000f8 	.word	0x200000f8

08008e80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	6039      	str	r1, [r7, #0]
 8008e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e92:	4b03      	ldr	r3, [pc, #12]	@ (8008ea0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	2000010c 	.word	0x2000010c

08008ea4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d105      	bne.n	8008ec2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	4907      	ldr	r1, [pc, #28]	@ (8008ed8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008eba:	4808      	ldr	r0, [pc, #32]	@ (8008edc <USBD_FS_ProductStrDescriptor+0x38>)
 8008ebc:	f7ff fdf2 	bl	8008aa4 <USBD_GetString>
 8008ec0:	e004      	b.n	8008ecc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	4904      	ldr	r1, [pc, #16]	@ (8008ed8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ec6:	4805      	ldr	r0, [pc, #20]	@ (8008edc <USBD_FS_ProductStrDescriptor+0x38>)
 8008ec8:	f7ff fdec 	bl	8008aa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ecc:	4b02      	ldr	r3, [pc, #8]	@ (8008ed8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20003e18 	.word	0x20003e18
 8008edc:	0800a0dc 	.word	0x0800a0dc

08008ee0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	4904      	ldr	r1, [pc, #16]	@ (8008f00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ef0:	4804      	ldr	r0, [pc, #16]	@ (8008f04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ef2:	f7ff fdd7 	bl	8008aa4 <USBD_GetString>
  return USBD_StrDesc;
 8008ef6:	4b02      	ldr	r3, [pc, #8]	@ (8008f00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20003e18 	.word	0x20003e18
 8008f04:	0800a0f4 	.word	0x0800a0f4

08008f08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	6039      	str	r1, [r7, #0]
 8008f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	221a      	movs	r2, #26
 8008f18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f1a:	f000 f843 	bl	8008fa4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f1e:	4b02      	ldr	r3, [pc, #8]	@ (8008f28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20000110 	.word	0x20000110

08008f2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	6039      	str	r1, [r7, #0]
 8008f36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d105      	bne.n	8008f4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	4907      	ldr	r1, [pc, #28]	@ (8008f60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f42:	4808      	ldr	r0, [pc, #32]	@ (8008f64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f44:	f7ff fdae 	bl	8008aa4 <USBD_GetString>
 8008f48:	e004      	b.n	8008f54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	4904      	ldr	r1, [pc, #16]	@ (8008f60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f4e:	4805      	ldr	r0, [pc, #20]	@ (8008f64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f50:	f7ff fda8 	bl	8008aa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f54:	4b02      	ldr	r3, [pc, #8]	@ (8008f60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20003e18 	.word	0x20003e18
 8008f64:	0800a108 	.word	0x0800a108

08008f68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	6039      	str	r1, [r7, #0]
 8008f72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d105      	bne.n	8008f86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	4907      	ldr	r1, [pc, #28]	@ (8008f9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f7e:	4808      	ldr	r0, [pc, #32]	@ (8008fa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f80:	f7ff fd90 	bl	8008aa4 <USBD_GetString>
 8008f84:	e004      	b.n	8008f90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	4904      	ldr	r1, [pc, #16]	@ (8008f9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f8a:	4805      	ldr	r0, [pc, #20]	@ (8008fa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f8c:	f7ff fd8a 	bl	8008aa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f90:	4b02      	ldr	r3, [pc, #8]	@ (8008f9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20003e18 	.word	0x20003e18
 8008fa0:	0800a114 	.word	0x0800a114

08008fa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4413      	add	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fb8:	2208      	movs	r2, #8
 8008fba:	4906      	ldr	r1, [pc, #24]	@ (8008fd4 <Get_SerialNum+0x30>)
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f80d 	bl	8008fdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fc2:	2204      	movs	r2, #4
 8008fc4:	4904      	ldr	r1, [pc, #16]	@ (8008fd8 <Get_SerialNum+0x34>)
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f808 	bl	8008fdc <IntToUnicode>
  }
}
 8008fcc:	bf00      	nop
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	20000112 	.word	0x20000112
 8008fd8:	20000122 	.word	0x20000122

08008fdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fee:	2300      	movs	r3, #0
 8008ff0:	75fb      	strb	r3, [r7, #23]
 8008ff2:	e027      	b.n	8009044 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	0f1b      	lsrs	r3, r3, #28
 8008ff8:	2b09      	cmp	r3, #9
 8008ffa:	d80b      	bhi.n	8009014 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	0f1b      	lsrs	r3, r3, #28
 8009000:	b2da      	uxtb	r2, r3
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	4619      	mov	r1, r3
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	440b      	add	r3, r1
 800900c:	3230      	adds	r2, #48	@ 0x30
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	701a      	strb	r2, [r3, #0]
 8009012:	e00a      	b.n	800902a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	0f1b      	lsrs	r3, r3, #28
 8009018:	b2da      	uxtb	r2, r3
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	4619      	mov	r1, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	440b      	add	r3, r1
 8009024:	3237      	adds	r2, #55	@ 0x37
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	3301      	adds	r3, #1
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	4413      	add	r3, r2
 800903a:	2200      	movs	r2, #0
 800903c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	3301      	adds	r3, #1
 8009042:	75fb      	strb	r3, [r7, #23]
 8009044:	7dfa      	ldrb	r2, [r7, #23]
 8009046:	79fb      	ldrb	r3, [r7, #7]
 8009048:	429a      	cmp	r2, r3
 800904a:	d3d3      	bcc.n	8008ff4 <IntToUnicode+0x18>
  }
}
 800904c:	bf00      	nop
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
	...

0800905c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08a      	sub	sp, #40	@ 0x28
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009064:	f107 0314 	add.w	r3, r7, #20
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	605a      	str	r2, [r3, #4]
 800906e:	609a      	str	r2, [r3, #8]
 8009070:	60da      	str	r2, [r3, #12]
 8009072:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800907c:	d13a      	bne.n	80090f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800907e:	2300      	movs	r3, #0
 8009080:	613b      	str	r3, [r7, #16]
 8009082:	4b1e      	ldr	r3, [pc, #120]	@ (80090fc <HAL_PCD_MspInit+0xa0>)
 8009084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009086:	4a1d      	ldr	r2, [pc, #116]	@ (80090fc <HAL_PCD_MspInit+0xa0>)
 8009088:	f043 0301 	orr.w	r3, r3, #1
 800908c:	6313      	str	r3, [r2, #48]	@ 0x30
 800908e:	4b1b      	ldr	r3, [pc, #108]	@ (80090fc <HAL_PCD_MspInit+0xa0>)
 8009090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	613b      	str	r3, [r7, #16]
 8009098:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800909a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800909e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090a0:	2302      	movs	r3, #2
 80090a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090a8:	2303      	movs	r3, #3
 80090aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80090ac:	230a      	movs	r3, #10
 80090ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090b0:	f107 0314 	add.w	r3, r7, #20
 80090b4:	4619      	mov	r1, r3
 80090b6:	4812      	ldr	r0, [pc, #72]	@ (8009100 <HAL_PCD_MspInit+0xa4>)
 80090b8:	f7f9 f9da 	bl	8002470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80090bc:	4b0f      	ldr	r3, [pc, #60]	@ (80090fc <HAL_PCD_MspInit+0xa0>)
 80090be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c0:	4a0e      	ldr	r2, [pc, #56]	@ (80090fc <HAL_PCD_MspInit+0xa0>)
 80090c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	4b0b      	ldr	r3, [pc, #44]	@ (80090fc <HAL_PCD_MspInit+0xa0>)
 80090ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d0:	4a0a      	ldr	r2, [pc, #40]	@ (80090fc <HAL_PCD_MspInit+0xa0>)
 80090d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80090d8:	4b08      	ldr	r3, [pc, #32]	@ (80090fc <HAL_PCD_MspInit+0xa0>)
 80090da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090e4:	2200      	movs	r2, #0
 80090e6:	2100      	movs	r1, #0
 80090e8:	2043      	movs	r0, #67	@ 0x43
 80090ea:	f7f8 fe1a 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090ee:	2043      	movs	r0, #67	@ 0x43
 80090f0:	f7f8 fe33 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090f4:	bf00      	nop
 80090f6:	3728      	adds	r7, #40	@ 0x28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	40023800 	.word	0x40023800
 8009100:	40020000 	.word	0x40020000

08009104 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7fe fb5f 	bl	80077de <USBD_LL_SetupStage>
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800913a:	78fa      	ldrb	r2, [r7, #3]
 800913c:	6879      	ldr	r1, [r7, #4]
 800913e:	4613      	mov	r3, r2
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	4413      	add	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	440b      	add	r3, r1
 8009148:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	4619      	mov	r1, r3
 8009152:	f7fe fb99 	bl	8007888 <USBD_LL_DataOutStage>
}
 8009156:	bf00      	nop
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009170:	78fa      	ldrb	r2, [r7, #3]
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4613      	mov	r3, r2
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	3320      	adds	r3, #32
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	78fb      	ldrb	r3, [r7, #3]
 8009184:	4619      	mov	r1, r3
 8009186:	f7fe fc32 	bl	80079ee <USBD_LL_DataInStage>
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe fd6c 	bl	8007c7e <USBD_LL_SOF>
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091b6:	2301      	movs	r3, #1
 80091b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	79db      	ldrb	r3, [r3, #7]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d001      	beq.n	80091c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091c2:	f7f7 fe05 	bl	8000dd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091cc:	7bfa      	ldrb	r2, [r7, #15]
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe fd10 	bl	8007bf6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fcb8 	bl	8007b52 <USBD_LL_Reset>
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fd0b 	bl	8007c16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6812      	ldr	r2, [r2, #0]
 800920e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009212:	f043 0301 	orr.w	r3, r3, #1
 8009216:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	7adb      	ldrb	r3, [r3, #11]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009220:	4b04      	ldr	r3, [pc, #16]	@ (8009234 <HAL_PCD_SuspendCallback+0x48>)
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	4a03      	ldr	r2, [pc, #12]	@ (8009234 <HAL_PCD_SuspendCallback+0x48>)
 8009226:	f043 0306 	orr.w	r3, r3, #6
 800922a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	e000ed00 	.word	0xe000ed00

08009238 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe fd01 	bl	8007c4e <USBD_LL_Resume>
}
 800924c:	bf00      	nop
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009266:	78fa      	ldrb	r2, [r7, #3]
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe fd59 	bl	8007d22 <USBD_LL_IsoOUTIncomplete>
}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fd15 	bl	8007cbe <USBD_LL_IsoINIncomplete>
}
 8009294:	bf00      	nop
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe fd6b 	bl	8007d86 <USBD_LL_DevConnected>
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fd68 	bl	8007d9c <USBD_LL_DevDisconnected>
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d13c      	bne.n	800935e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092e4:	4a20      	ldr	r2, [pc, #128]	@ (8009368 <USBD_LL_Init+0x94>)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009368 <USBD_LL_Init+0x94>)
 80092f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009368 <USBD_LL_Init+0x94>)
 80092f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80092fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80092fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009368 <USBD_LL_Init+0x94>)
 80092fe:	2204      	movs	r2, #4
 8009300:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009302:	4b19      	ldr	r3, [pc, #100]	@ (8009368 <USBD_LL_Init+0x94>)
 8009304:	2202      	movs	r2, #2
 8009306:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009308:	4b17      	ldr	r3, [pc, #92]	@ (8009368 <USBD_LL_Init+0x94>)
 800930a:	2200      	movs	r2, #0
 800930c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800930e:	4b16      	ldr	r3, [pc, #88]	@ (8009368 <USBD_LL_Init+0x94>)
 8009310:	2202      	movs	r2, #2
 8009312:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009314:	4b14      	ldr	r3, [pc, #80]	@ (8009368 <USBD_LL_Init+0x94>)
 8009316:	2200      	movs	r2, #0
 8009318:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800931a:	4b13      	ldr	r3, [pc, #76]	@ (8009368 <USBD_LL_Init+0x94>)
 800931c:	2200      	movs	r2, #0
 800931e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009320:	4b11      	ldr	r3, [pc, #68]	@ (8009368 <USBD_LL_Init+0x94>)
 8009322:	2200      	movs	r2, #0
 8009324:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009326:	4b10      	ldr	r3, [pc, #64]	@ (8009368 <USBD_LL_Init+0x94>)
 8009328:	2200      	movs	r2, #0
 800932a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800932c:	4b0e      	ldr	r3, [pc, #56]	@ (8009368 <USBD_LL_Init+0x94>)
 800932e:	2200      	movs	r2, #0
 8009330:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009332:	480d      	ldr	r0, [pc, #52]	@ (8009368 <USBD_LL_Init+0x94>)
 8009334:	f7f9 fa20 	bl	8002778 <HAL_PCD_Init>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800933e:	f7f7 fd47 	bl	8000dd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009342:	2180      	movs	r1, #128	@ 0x80
 8009344:	4808      	ldr	r0, [pc, #32]	@ (8009368 <USBD_LL_Init+0x94>)
 8009346:	f7fa fc4a 	bl	8003bde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800934a:	2240      	movs	r2, #64	@ 0x40
 800934c:	2100      	movs	r1, #0
 800934e:	4806      	ldr	r0, [pc, #24]	@ (8009368 <USBD_LL_Init+0x94>)
 8009350:	f7fa fbfe 	bl	8003b50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009354:	2280      	movs	r2, #128	@ 0x80
 8009356:	2101      	movs	r1, #1
 8009358:	4803      	ldr	r0, [pc, #12]	@ (8009368 <USBD_LL_Init+0x94>)
 800935a:	f7fa fbf9 	bl	8003b50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20004018 	.word	0x20004018

0800936c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009382:	4618      	mov	r0, r3
 8009384:	f7f9 fb07 	bl	8002996 <HAL_PCD_Start>
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 f942 	bl	8009618 <USBD_Get_USB_Status>
 8009394:	4603      	mov	r3, r0
 8009396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009398:	7bbb      	ldrb	r3, [r7, #14]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	4608      	mov	r0, r1
 80093ac:	4611      	mov	r1, r2
 80093ae:	461a      	mov	r2, r3
 80093b0:	4603      	mov	r3, r0
 80093b2:	70fb      	strb	r3, [r7, #3]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70bb      	strb	r3, [r7, #2]
 80093b8:	4613      	mov	r3, r2
 80093ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80093ca:	78bb      	ldrb	r3, [r7, #2]
 80093cc:	883a      	ldrh	r2, [r7, #0]
 80093ce:	78f9      	ldrb	r1, [r7, #3]
 80093d0:	f7f9 ffdb 	bl	800338a <HAL_PCD_EP_Open>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 f91c 	bl	8009618 <USBD_Get_USB_Status>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	460b      	mov	r3, r1
 80093f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	4611      	mov	r1, r2
 800940c:	4618      	mov	r0, r3
 800940e:	f7fa f824 	bl	800345a <HAL_PCD_EP_Close>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	4618      	mov	r0, r3
 800941a:	f000 f8fd 	bl	8009618 <USBD_Get_USB_Status>
 800941e:	4603      	mov	r3, r0
 8009420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009422:	7bbb      	ldrb	r3, [r7, #14]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009446:	78fa      	ldrb	r2, [r7, #3]
 8009448:	4611      	mov	r1, r2
 800944a:	4618      	mov	r0, r3
 800944c:	f7fa f8dc 	bl	8003608 <HAL_PCD_EP_SetStall>
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	4618      	mov	r0, r3
 8009458:	f000 f8de 	bl	8009618 <USBD_Get_USB_Status>
 800945c:	4603      	mov	r3, r0
 800945e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009460:	7bbb      	ldrb	r3, [r7, #14]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009484:	78fa      	ldrb	r2, [r7, #3]
 8009486:	4611      	mov	r1, r2
 8009488:	4618      	mov	r0, r3
 800948a:	f7fa f920 	bl	80036ce <HAL_PCD_EP_ClrStall>
 800948e:	4603      	mov	r3, r0
 8009490:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	4618      	mov	r0, r3
 8009496:	f000 f8bf 	bl	8009618 <USBD_Get_USB_Status>
 800949a:	4603      	mov	r3, r0
 800949c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800949e:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	da0b      	bge.n	80094dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094ca:	68f9      	ldr	r1, [r7, #12]
 80094cc:	4613      	mov	r3, r2
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	440b      	add	r3, r1
 80094d6:	3316      	adds	r3, #22
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	e00b      	b.n	80094f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094dc:	78fb      	ldrb	r3, [r7, #3]
 80094de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094e2:	68f9      	ldr	r1, [r7, #12]
 80094e4:	4613      	mov	r3, r2
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80094f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800951a:	78fa      	ldrb	r2, [r7, #3]
 800951c:	4611      	mov	r1, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f7f9 ff0f 	bl	8003342 <HAL_PCD_SetAddress>
 8009524:	4603      	mov	r3, r0
 8009526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f874 	bl	8009618 <USBD_Get_USB_Status>
 8009530:	4603      	mov	r3, r0
 8009532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009534:	7bbb      	ldrb	r3, [r7, #14]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b086      	sub	sp, #24
 8009542:	af00      	add	r7, sp, #0
 8009544:	60f8      	str	r0, [r7, #12]
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	603b      	str	r3, [r7, #0]
 800954a:	460b      	mov	r3, r1
 800954c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800955c:	7af9      	ldrb	r1, [r7, #11]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	f7fa f817 	bl	8003594 <HAL_PCD_EP_Transmit>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	4618      	mov	r0, r3
 800956e:	f000 f853 	bl	8009618 <USBD_Get_USB_Status>
 8009572:	4603      	mov	r3, r0
 8009574:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009576:	7dbb      	ldrb	r3, [r7, #22]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	607a      	str	r2, [r7, #4]
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	460b      	mov	r3, r1
 800958e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800959e:	7af9      	ldrb	r1, [r7, #11]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	f7f9 ffa3 	bl	80034ee <HAL_PCD_EP_Receive>
 80095a8:	4603      	mov	r3, r0
 80095aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 f832 	bl	8009618 <USBD_Get_USB_Status>
 80095b4:	4603      	mov	r3, r0
 80095b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3718      	adds	r7, #24
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	460b      	mov	r3, r1
 80095cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095d4:	78fa      	ldrb	r2, [r7, #3]
 80095d6:	4611      	mov	r1, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	f7f9 ffc3 	bl	8003564 <HAL_PCD_EP_GetRxCount>
 80095de:	4603      	mov	r3, r0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095f0:	4b03      	ldr	r3, [pc, #12]	@ (8009600 <USBD_static_malloc+0x18>)
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	200044fc 	.word	0x200044fc

08009604 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]

}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009626:	79fb      	ldrb	r3, [r7, #7]
 8009628:	2b03      	cmp	r3, #3
 800962a:	d817      	bhi.n	800965c <USBD_Get_USB_Status+0x44>
 800962c:	a201      	add	r2, pc, #4	@ (adr r2, 8009634 <USBD_Get_USB_Status+0x1c>)
 800962e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009632:	bf00      	nop
 8009634:	08009645 	.word	0x08009645
 8009638:	0800964b 	.word	0x0800964b
 800963c:	08009651 	.word	0x08009651
 8009640:	08009657 	.word	0x08009657
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
    break;
 8009648:	e00b      	b.n	8009662 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800964a:	2303      	movs	r3, #3
 800964c:	73fb      	strb	r3, [r7, #15]
    break;
 800964e:	e008      	b.n	8009662 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009650:	2301      	movs	r3, #1
 8009652:	73fb      	strb	r3, [r7, #15]
    break;
 8009654:	e005      	b.n	8009662 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009656:	2303      	movs	r3, #3
 8009658:	73fb      	strb	r3, [r7, #15]
    break;
 800965a:	e002      	b.n	8009662 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800965c:	2303      	movs	r3, #3
 800965e:	73fb      	strb	r3, [r7, #15]
    break;
 8009660:	bf00      	nop
  }
  return usb_status;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <sniprintf>:
 8009670:	b40c      	push	{r2, r3}
 8009672:	b530      	push	{r4, r5, lr}
 8009674:	4b17      	ldr	r3, [pc, #92]	@ (80096d4 <sniprintf+0x64>)
 8009676:	1e0c      	subs	r4, r1, #0
 8009678:	681d      	ldr	r5, [r3, #0]
 800967a:	b09d      	sub	sp, #116	@ 0x74
 800967c:	da08      	bge.n	8009690 <sniprintf+0x20>
 800967e:	238b      	movs	r3, #139	@ 0x8b
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	f04f 30ff 	mov.w	r0, #4294967295
 8009686:	b01d      	add	sp, #116	@ 0x74
 8009688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800968c:	b002      	add	sp, #8
 800968e:	4770      	bx	lr
 8009690:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009694:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009698:	bf14      	ite	ne
 800969a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800969e:	4623      	moveq	r3, r4
 80096a0:	9304      	str	r3, [sp, #16]
 80096a2:	9307      	str	r3, [sp, #28]
 80096a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80096a8:	9002      	str	r0, [sp, #8]
 80096aa:	9006      	str	r0, [sp, #24]
 80096ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80096b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80096b2:	ab21      	add	r3, sp, #132	@ 0x84
 80096b4:	a902      	add	r1, sp, #8
 80096b6:	4628      	mov	r0, r5
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	f000 f9b5 	bl	8009a28 <_svfiprintf_r>
 80096be:	1c43      	adds	r3, r0, #1
 80096c0:	bfbc      	itt	lt
 80096c2:	238b      	movlt	r3, #139	@ 0x8b
 80096c4:	602b      	strlt	r3, [r5, #0]
 80096c6:	2c00      	cmp	r4, #0
 80096c8:	d0dd      	beq.n	8009686 <sniprintf+0x16>
 80096ca:	9b02      	ldr	r3, [sp, #8]
 80096cc:	2200      	movs	r2, #0
 80096ce:	701a      	strb	r2, [r3, #0]
 80096d0:	e7d9      	b.n	8009686 <sniprintf+0x16>
 80096d2:	bf00      	nop
 80096d4:	2000012c 	.word	0x2000012c

080096d8 <memset>:
 80096d8:	4402      	add	r2, r0
 80096da:	4603      	mov	r3, r0
 80096dc:	4293      	cmp	r3, r2
 80096de:	d100      	bne.n	80096e2 <memset+0xa>
 80096e0:	4770      	bx	lr
 80096e2:	f803 1b01 	strb.w	r1, [r3], #1
 80096e6:	e7f9      	b.n	80096dc <memset+0x4>

080096e8 <strncmp>:
 80096e8:	b510      	push	{r4, lr}
 80096ea:	b16a      	cbz	r2, 8009708 <strncmp+0x20>
 80096ec:	3901      	subs	r1, #1
 80096ee:	1884      	adds	r4, r0, r2
 80096f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d103      	bne.n	8009704 <strncmp+0x1c>
 80096fc:	42a0      	cmp	r0, r4
 80096fe:	d001      	beq.n	8009704 <strncmp+0x1c>
 8009700:	2a00      	cmp	r2, #0
 8009702:	d1f5      	bne.n	80096f0 <strncmp+0x8>
 8009704:	1ad0      	subs	r0, r2, r3
 8009706:	bd10      	pop	{r4, pc}
 8009708:	4610      	mov	r0, r2
 800970a:	e7fc      	b.n	8009706 <strncmp+0x1e>

0800970c <__errno>:
 800970c:	4b01      	ldr	r3, [pc, #4]	@ (8009714 <__errno+0x8>)
 800970e:	6818      	ldr	r0, [r3, #0]
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	2000012c 	.word	0x2000012c

08009718 <__libc_init_array>:
 8009718:	b570      	push	{r4, r5, r6, lr}
 800971a:	4d0d      	ldr	r5, [pc, #52]	@ (8009750 <__libc_init_array+0x38>)
 800971c:	4c0d      	ldr	r4, [pc, #52]	@ (8009754 <__libc_init_array+0x3c>)
 800971e:	1b64      	subs	r4, r4, r5
 8009720:	10a4      	asrs	r4, r4, #2
 8009722:	2600      	movs	r6, #0
 8009724:	42a6      	cmp	r6, r4
 8009726:	d109      	bne.n	800973c <__libc_init_array+0x24>
 8009728:	4d0b      	ldr	r5, [pc, #44]	@ (8009758 <__libc_init_array+0x40>)
 800972a:	4c0c      	ldr	r4, [pc, #48]	@ (800975c <__libc_init_array+0x44>)
 800972c:	f000 fc66 	bl	8009ffc <_init>
 8009730:	1b64      	subs	r4, r4, r5
 8009732:	10a4      	asrs	r4, r4, #2
 8009734:	2600      	movs	r6, #0
 8009736:	42a6      	cmp	r6, r4
 8009738:	d105      	bne.n	8009746 <__libc_init_array+0x2e>
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009740:	4798      	blx	r3
 8009742:	3601      	adds	r6, #1
 8009744:	e7ee      	b.n	8009724 <__libc_init_array+0xc>
 8009746:	f855 3b04 	ldr.w	r3, [r5], #4
 800974a:	4798      	blx	r3
 800974c:	3601      	adds	r6, #1
 800974e:	e7f2      	b.n	8009736 <__libc_init_array+0x1e>
 8009750:	0800a178 	.word	0x0800a178
 8009754:	0800a178 	.word	0x0800a178
 8009758:	0800a178 	.word	0x0800a178
 800975c:	0800a17c 	.word	0x0800a17c

08009760 <__retarget_lock_acquire_recursive>:
 8009760:	4770      	bx	lr

08009762 <__retarget_lock_release_recursive>:
 8009762:	4770      	bx	lr

08009764 <memcpy>:
 8009764:	440a      	add	r2, r1
 8009766:	4291      	cmp	r1, r2
 8009768:	f100 33ff 	add.w	r3, r0, #4294967295
 800976c:	d100      	bne.n	8009770 <memcpy+0xc>
 800976e:	4770      	bx	lr
 8009770:	b510      	push	{r4, lr}
 8009772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800977a:	4291      	cmp	r1, r2
 800977c:	d1f9      	bne.n	8009772 <memcpy+0xe>
 800977e:	bd10      	pop	{r4, pc}

08009780 <_free_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4605      	mov	r5, r0
 8009784:	2900      	cmp	r1, #0
 8009786:	d041      	beq.n	800980c <_free_r+0x8c>
 8009788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800978c:	1f0c      	subs	r4, r1, #4
 800978e:	2b00      	cmp	r3, #0
 8009790:	bfb8      	it	lt
 8009792:	18e4      	addlt	r4, r4, r3
 8009794:	f000 f8e0 	bl	8009958 <__malloc_lock>
 8009798:	4a1d      	ldr	r2, [pc, #116]	@ (8009810 <_free_r+0x90>)
 800979a:	6813      	ldr	r3, [r2, #0]
 800979c:	b933      	cbnz	r3, 80097ac <_free_r+0x2c>
 800979e:	6063      	str	r3, [r4, #4]
 80097a0:	6014      	str	r4, [r2, #0]
 80097a2:	4628      	mov	r0, r5
 80097a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097a8:	f000 b8dc 	b.w	8009964 <__malloc_unlock>
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d908      	bls.n	80097c2 <_free_r+0x42>
 80097b0:	6820      	ldr	r0, [r4, #0]
 80097b2:	1821      	adds	r1, r4, r0
 80097b4:	428b      	cmp	r3, r1
 80097b6:	bf01      	itttt	eq
 80097b8:	6819      	ldreq	r1, [r3, #0]
 80097ba:	685b      	ldreq	r3, [r3, #4]
 80097bc:	1809      	addeq	r1, r1, r0
 80097be:	6021      	streq	r1, [r4, #0]
 80097c0:	e7ed      	b.n	800979e <_free_r+0x1e>
 80097c2:	461a      	mov	r2, r3
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	b10b      	cbz	r3, 80097cc <_free_r+0x4c>
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d9fa      	bls.n	80097c2 <_free_r+0x42>
 80097cc:	6811      	ldr	r1, [r2, #0]
 80097ce:	1850      	adds	r0, r2, r1
 80097d0:	42a0      	cmp	r0, r4
 80097d2:	d10b      	bne.n	80097ec <_free_r+0x6c>
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	4401      	add	r1, r0
 80097d8:	1850      	adds	r0, r2, r1
 80097da:	4283      	cmp	r3, r0
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	d1e0      	bne.n	80097a2 <_free_r+0x22>
 80097e0:	6818      	ldr	r0, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	6053      	str	r3, [r2, #4]
 80097e6:	4408      	add	r0, r1
 80097e8:	6010      	str	r0, [r2, #0]
 80097ea:	e7da      	b.n	80097a2 <_free_r+0x22>
 80097ec:	d902      	bls.n	80097f4 <_free_r+0x74>
 80097ee:	230c      	movs	r3, #12
 80097f0:	602b      	str	r3, [r5, #0]
 80097f2:	e7d6      	b.n	80097a2 <_free_r+0x22>
 80097f4:	6820      	ldr	r0, [r4, #0]
 80097f6:	1821      	adds	r1, r4, r0
 80097f8:	428b      	cmp	r3, r1
 80097fa:	bf04      	itt	eq
 80097fc:	6819      	ldreq	r1, [r3, #0]
 80097fe:	685b      	ldreq	r3, [r3, #4]
 8009800:	6063      	str	r3, [r4, #4]
 8009802:	bf04      	itt	eq
 8009804:	1809      	addeq	r1, r1, r0
 8009806:	6021      	streq	r1, [r4, #0]
 8009808:	6054      	str	r4, [r2, #4]
 800980a:	e7ca      	b.n	80097a2 <_free_r+0x22>
 800980c:	bd38      	pop	{r3, r4, r5, pc}
 800980e:	bf00      	nop
 8009810:	20004860 	.word	0x20004860

08009814 <sbrk_aligned>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	4e0f      	ldr	r6, [pc, #60]	@ (8009854 <sbrk_aligned+0x40>)
 8009818:	460c      	mov	r4, r1
 800981a:	6831      	ldr	r1, [r6, #0]
 800981c:	4605      	mov	r5, r0
 800981e:	b911      	cbnz	r1, 8009826 <sbrk_aligned+0x12>
 8009820:	f000 fba6 	bl	8009f70 <_sbrk_r>
 8009824:	6030      	str	r0, [r6, #0]
 8009826:	4621      	mov	r1, r4
 8009828:	4628      	mov	r0, r5
 800982a:	f000 fba1 	bl	8009f70 <_sbrk_r>
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	d103      	bne.n	800983a <sbrk_aligned+0x26>
 8009832:	f04f 34ff 	mov.w	r4, #4294967295
 8009836:	4620      	mov	r0, r4
 8009838:	bd70      	pop	{r4, r5, r6, pc}
 800983a:	1cc4      	adds	r4, r0, #3
 800983c:	f024 0403 	bic.w	r4, r4, #3
 8009840:	42a0      	cmp	r0, r4
 8009842:	d0f8      	beq.n	8009836 <sbrk_aligned+0x22>
 8009844:	1a21      	subs	r1, r4, r0
 8009846:	4628      	mov	r0, r5
 8009848:	f000 fb92 	bl	8009f70 <_sbrk_r>
 800984c:	3001      	adds	r0, #1
 800984e:	d1f2      	bne.n	8009836 <sbrk_aligned+0x22>
 8009850:	e7ef      	b.n	8009832 <sbrk_aligned+0x1e>
 8009852:	bf00      	nop
 8009854:	2000485c 	.word	0x2000485c

08009858 <_malloc_r>:
 8009858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800985c:	1ccd      	adds	r5, r1, #3
 800985e:	f025 0503 	bic.w	r5, r5, #3
 8009862:	3508      	adds	r5, #8
 8009864:	2d0c      	cmp	r5, #12
 8009866:	bf38      	it	cc
 8009868:	250c      	movcc	r5, #12
 800986a:	2d00      	cmp	r5, #0
 800986c:	4606      	mov	r6, r0
 800986e:	db01      	blt.n	8009874 <_malloc_r+0x1c>
 8009870:	42a9      	cmp	r1, r5
 8009872:	d904      	bls.n	800987e <_malloc_r+0x26>
 8009874:	230c      	movs	r3, #12
 8009876:	6033      	str	r3, [r6, #0]
 8009878:	2000      	movs	r0, #0
 800987a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009954 <_malloc_r+0xfc>
 8009882:	f000 f869 	bl	8009958 <__malloc_lock>
 8009886:	f8d8 3000 	ldr.w	r3, [r8]
 800988a:	461c      	mov	r4, r3
 800988c:	bb44      	cbnz	r4, 80098e0 <_malloc_r+0x88>
 800988e:	4629      	mov	r1, r5
 8009890:	4630      	mov	r0, r6
 8009892:	f7ff ffbf 	bl	8009814 <sbrk_aligned>
 8009896:	1c43      	adds	r3, r0, #1
 8009898:	4604      	mov	r4, r0
 800989a:	d158      	bne.n	800994e <_malloc_r+0xf6>
 800989c:	f8d8 4000 	ldr.w	r4, [r8]
 80098a0:	4627      	mov	r7, r4
 80098a2:	2f00      	cmp	r7, #0
 80098a4:	d143      	bne.n	800992e <_malloc_r+0xd6>
 80098a6:	2c00      	cmp	r4, #0
 80098a8:	d04b      	beq.n	8009942 <_malloc_r+0xea>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	4639      	mov	r1, r7
 80098ae:	4630      	mov	r0, r6
 80098b0:	eb04 0903 	add.w	r9, r4, r3
 80098b4:	f000 fb5c 	bl	8009f70 <_sbrk_r>
 80098b8:	4581      	cmp	r9, r0
 80098ba:	d142      	bne.n	8009942 <_malloc_r+0xea>
 80098bc:	6821      	ldr	r1, [r4, #0]
 80098be:	1a6d      	subs	r5, r5, r1
 80098c0:	4629      	mov	r1, r5
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7ff ffa6 	bl	8009814 <sbrk_aligned>
 80098c8:	3001      	adds	r0, #1
 80098ca:	d03a      	beq.n	8009942 <_malloc_r+0xea>
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	442b      	add	r3, r5
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	f8d8 3000 	ldr.w	r3, [r8]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	bb62      	cbnz	r2, 8009934 <_malloc_r+0xdc>
 80098da:	f8c8 7000 	str.w	r7, [r8]
 80098de:	e00f      	b.n	8009900 <_malloc_r+0xa8>
 80098e0:	6822      	ldr	r2, [r4, #0]
 80098e2:	1b52      	subs	r2, r2, r5
 80098e4:	d420      	bmi.n	8009928 <_malloc_r+0xd0>
 80098e6:	2a0b      	cmp	r2, #11
 80098e8:	d917      	bls.n	800991a <_malloc_r+0xc2>
 80098ea:	1961      	adds	r1, r4, r5
 80098ec:	42a3      	cmp	r3, r4
 80098ee:	6025      	str	r5, [r4, #0]
 80098f0:	bf18      	it	ne
 80098f2:	6059      	strne	r1, [r3, #4]
 80098f4:	6863      	ldr	r3, [r4, #4]
 80098f6:	bf08      	it	eq
 80098f8:	f8c8 1000 	streq.w	r1, [r8]
 80098fc:	5162      	str	r2, [r4, r5]
 80098fe:	604b      	str	r3, [r1, #4]
 8009900:	4630      	mov	r0, r6
 8009902:	f000 f82f 	bl	8009964 <__malloc_unlock>
 8009906:	f104 000b 	add.w	r0, r4, #11
 800990a:	1d23      	adds	r3, r4, #4
 800990c:	f020 0007 	bic.w	r0, r0, #7
 8009910:	1ac2      	subs	r2, r0, r3
 8009912:	bf1c      	itt	ne
 8009914:	1a1b      	subne	r3, r3, r0
 8009916:	50a3      	strne	r3, [r4, r2]
 8009918:	e7af      	b.n	800987a <_malloc_r+0x22>
 800991a:	6862      	ldr	r2, [r4, #4]
 800991c:	42a3      	cmp	r3, r4
 800991e:	bf0c      	ite	eq
 8009920:	f8c8 2000 	streq.w	r2, [r8]
 8009924:	605a      	strne	r2, [r3, #4]
 8009926:	e7eb      	b.n	8009900 <_malloc_r+0xa8>
 8009928:	4623      	mov	r3, r4
 800992a:	6864      	ldr	r4, [r4, #4]
 800992c:	e7ae      	b.n	800988c <_malloc_r+0x34>
 800992e:	463c      	mov	r4, r7
 8009930:	687f      	ldr	r7, [r7, #4]
 8009932:	e7b6      	b.n	80098a2 <_malloc_r+0x4a>
 8009934:	461a      	mov	r2, r3
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	42a3      	cmp	r3, r4
 800993a:	d1fb      	bne.n	8009934 <_malloc_r+0xdc>
 800993c:	2300      	movs	r3, #0
 800993e:	6053      	str	r3, [r2, #4]
 8009940:	e7de      	b.n	8009900 <_malloc_r+0xa8>
 8009942:	230c      	movs	r3, #12
 8009944:	6033      	str	r3, [r6, #0]
 8009946:	4630      	mov	r0, r6
 8009948:	f000 f80c 	bl	8009964 <__malloc_unlock>
 800994c:	e794      	b.n	8009878 <_malloc_r+0x20>
 800994e:	6005      	str	r5, [r0, #0]
 8009950:	e7d6      	b.n	8009900 <_malloc_r+0xa8>
 8009952:	bf00      	nop
 8009954:	20004860 	.word	0x20004860

08009958 <__malloc_lock>:
 8009958:	4801      	ldr	r0, [pc, #4]	@ (8009960 <__malloc_lock+0x8>)
 800995a:	f7ff bf01 	b.w	8009760 <__retarget_lock_acquire_recursive>
 800995e:	bf00      	nop
 8009960:	20004858 	.word	0x20004858

08009964 <__malloc_unlock>:
 8009964:	4801      	ldr	r0, [pc, #4]	@ (800996c <__malloc_unlock+0x8>)
 8009966:	f7ff befc 	b.w	8009762 <__retarget_lock_release_recursive>
 800996a:	bf00      	nop
 800996c:	20004858 	.word	0x20004858

08009970 <__ssputs_r>:
 8009970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009974:	688e      	ldr	r6, [r1, #8]
 8009976:	461f      	mov	r7, r3
 8009978:	42be      	cmp	r6, r7
 800997a:	680b      	ldr	r3, [r1, #0]
 800997c:	4682      	mov	sl, r0
 800997e:	460c      	mov	r4, r1
 8009980:	4690      	mov	r8, r2
 8009982:	d82d      	bhi.n	80099e0 <__ssputs_r+0x70>
 8009984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009988:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800998c:	d026      	beq.n	80099dc <__ssputs_r+0x6c>
 800998e:	6965      	ldr	r5, [r4, #20]
 8009990:	6909      	ldr	r1, [r1, #16]
 8009992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009996:	eba3 0901 	sub.w	r9, r3, r1
 800999a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800999e:	1c7b      	adds	r3, r7, #1
 80099a0:	444b      	add	r3, r9
 80099a2:	106d      	asrs	r5, r5, #1
 80099a4:	429d      	cmp	r5, r3
 80099a6:	bf38      	it	cc
 80099a8:	461d      	movcc	r5, r3
 80099aa:	0553      	lsls	r3, r2, #21
 80099ac:	d527      	bpl.n	80099fe <__ssputs_r+0x8e>
 80099ae:	4629      	mov	r1, r5
 80099b0:	f7ff ff52 	bl	8009858 <_malloc_r>
 80099b4:	4606      	mov	r6, r0
 80099b6:	b360      	cbz	r0, 8009a12 <__ssputs_r+0xa2>
 80099b8:	6921      	ldr	r1, [r4, #16]
 80099ba:	464a      	mov	r2, r9
 80099bc:	f7ff fed2 	bl	8009764 <memcpy>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ca:	81a3      	strh	r3, [r4, #12]
 80099cc:	6126      	str	r6, [r4, #16]
 80099ce:	6165      	str	r5, [r4, #20]
 80099d0:	444e      	add	r6, r9
 80099d2:	eba5 0509 	sub.w	r5, r5, r9
 80099d6:	6026      	str	r6, [r4, #0]
 80099d8:	60a5      	str	r5, [r4, #8]
 80099da:	463e      	mov	r6, r7
 80099dc:	42be      	cmp	r6, r7
 80099de:	d900      	bls.n	80099e2 <__ssputs_r+0x72>
 80099e0:	463e      	mov	r6, r7
 80099e2:	6820      	ldr	r0, [r4, #0]
 80099e4:	4632      	mov	r2, r6
 80099e6:	4641      	mov	r1, r8
 80099e8:	f000 faa8 	bl	8009f3c <memmove>
 80099ec:	68a3      	ldr	r3, [r4, #8]
 80099ee:	1b9b      	subs	r3, r3, r6
 80099f0:	60a3      	str	r3, [r4, #8]
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	4433      	add	r3, r6
 80099f6:	6023      	str	r3, [r4, #0]
 80099f8:	2000      	movs	r0, #0
 80099fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fe:	462a      	mov	r2, r5
 8009a00:	f000 fac6 	bl	8009f90 <_realloc_r>
 8009a04:	4606      	mov	r6, r0
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d1e0      	bne.n	80099cc <__ssputs_r+0x5c>
 8009a0a:	6921      	ldr	r1, [r4, #16]
 8009a0c:	4650      	mov	r0, sl
 8009a0e:	f7ff feb7 	bl	8009780 <_free_r>
 8009a12:	230c      	movs	r3, #12
 8009a14:	f8ca 3000 	str.w	r3, [sl]
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a1e:	81a3      	strh	r3, [r4, #12]
 8009a20:	f04f 30ff 	mov.w	r0, #4294967295
 8009a24:	e7e9      	b.n	80099fa <__ssputs_r+0x8a>
	...

08009a28 <_svfiprintf_r>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	4698      	mov	r8, r3
 8009a2e:	898b      	ldrh	r3, [r1, #12]
 8009a30:	061b      	lsls	r3, r3, #24
 8009a32:	b09d      	sub	sp, #116	@ 0x74
 8009a34:	4607      	mov	r7, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	4614      	mov	r4, r2
 8009a3a:	d510      	bpl.n	8009a5e <_svfiprintf_r+0x36>
 8009a3c:	690b      	ldr	r3, [r1, #16]
 8009a3e:	b973      	cbnz	r3, 8009a5e <_svfiprintf_r+0x36>
 8009a40:	2140      	movs	r1, #64	@ 0x40
 8009a42:	f7ff ff09 	bl	8009858 <_malloc_r>
 8009a46:	6028      	str	r0, [r5, #0]
 8009a48:	6128      	str	r0, [r5, #16]
 8009a4a:	b930      	cbnz	r0, 8009a5a <_svfiprintf_r+0x32>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	b01d      	add	sp, #116	@ 0x74
 8009a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5a:	2340      	movs	r3, #64	@ 0x40
 8009a5c:	616b      	str	r3, [r5, #20]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a62:	2320      	movs	r3, #32
 8009a64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a6c:	2330      	movs	r3, #48	@ 0x30
 8009a6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c0c <_svfiprintf_r+0x1e4>
 8009a72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a76:	f04f 0901 	mov.w	r9, #1
 8009a7a:	4623      	mov	r3, r4
 8009a7c:	469a      	mov	sl, r3
 8009a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a82:	b10a      	cbz	r2, 8009a88 <_svfiprintf_r+0x60>
 8009a84:	2a25      	cmp	r2, #37	@ 0x25
 8009a86:	d1f9      	bne.n	8009a7c <_svfiprintf_r+0x54>
 8009a88:	ebba 0b04 	subs.w	fp, sl, r4
 8009a8c:	d00b      	beq.n	8009aa6 <_svfiprintf_r+0x7e>
 8009a8e:	465b      	mov	r3, fp
 8009a90:	4622      	mov	r2, r4
 8009a92:	4629      	mov	r1, r5
 8009a94:	4638      	mov	r0, r7
 8009a96:	f7ff ff6b 	bl	8009970 <__ssputs_r>
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	f000 80a7 	beq.w	8009bee <_svfiprintf_r+0x1c6>
 8009aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aa2:	445a      	add	r2, fp
 8009aa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 809f 	beq.w	8009bee <_svfiprintf_r+0x1c6>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aba:	f10a 0a01 	add.w	sl, sl, #1
 8009abe:	9304      	str	r3, [sp, #16]
 8009ac0:	9307      	str	r3, [sp, #28]
 8009ac2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ac6:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ac8:	4654      	mov	r4, sl
 8009aca:	2205      	movs	r2, #5
 8009acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ad0:	484e      	ldr	r0, [pc, #312]	@ (8009c0c <_svfiprintf_r+0x1e4>)
 8009ad2:	f7f6 fb85 	bl	80001e0 <memchr>
 8009ad6:	9a04      	ldr	r2, [sp, #16]
 8009ad8:	b9d8      	cbnz	r0, 8009b12 <_svfiprintf_r+0xea>
 8009ada:	06d0      	lsls	r0, r2, #27
 8009adc:	bf44      	itt	mi
 8009ade:	2320      	movmi	r3, #32
 8009ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ae4:	0711      	lsls	r1, r2, #28
 8009ae6:	bf44      	itt	mi
 8009ae8:	232b      	movmi	r3, #43	@ 0x2b
 8009aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aee:	f89a 3000 	ldrb.w	r3, [sl]
 8009af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009af4:	d015      	beq.n	8009b22 <_svfiprintf_r+0xfa>
 8009af6:	9a07      	ldr	r2, [sp, #28]
 8009af8:	4654      	mov	r4, sl
 8009afa:	2000      	movs	r0, #0
 8009afc:	f04f 0c0a 	mov.w	ip, #10
 8009b00:	4621      	mov	r1, r4
 8009b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b06:	3b30      	subs	r3, #48	@ 0x30
 8009b08:	2b09      	cmp	r3, #9
 8009b0a:	d94b      	bls.n	8009ba4 <_svfiprintf_r+0x17c>
 8009b0c:	b1b0      	cbz	r0, 8009b3c <_svfiprintf_r+0x114>
 8009b0e:	9207      	str	r2, [sp, #28]
 8009b10:	e014      	b.n	8009b3c <_svfiprintf_r+0x114>
 8009b12:	eba0 0308 	sub.w	r3, r0, r8
 8009b16:	fa09 f303 	lsl.w	r3, r9, r3
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	46a2      	mov	sl, r4
 8009b20:	e7d2      	b.n	8009ac8 <_svfiprintf_r+0xa0>
 8009b22:	9b03      	ldr	r3, [sp, #12]
 8009b24:	1d19      	adds	r1, r3, #4
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	9103      	str	r1, [sp, #12]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	bfbb      	ittet	lt
 8009b2e:	425b      	neglt	r3, r3
 8009b30:	f042 0202 	orrlt.w	r2, r2, #2
 8009b34:	9307      	strge	r3, [sp, #28]
 8009b36:	9307      	strlt	r3, [sp, #28]
 8009b38:	bfb8      	it	lt
 8009b3a:	9204      	strlt	r2, [sp, #16]
 8009b3c:	7823      	ldrb	r3, [r4, #0]
 8009b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b40:	d10a      	bne.n	8009b58 <_svfiprintf_r+0x130>
 8009b42:	7863      	ldrb	r3, [r4, #1]
 8009b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b46:	d132      	bne.n	8009bae <_svfiprintf_r+0x186>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	1d1a      	adds	r2, r3, #4
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	9203      	str	r2, [sp, #12]
 8009b50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b54:	3402      	adds	r4, #2
 8009b56:	9305      	str	r3, [sp, #20]
 8009b58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c1c <_svfiprintf_r+0x1f4>
 8009b5c:	7821      	ldrb	r1, [r4, #0]
 8009b5e:	2203      	movs	r2, #3
 8009b60:	4650      	mov	r0, sl
 8009b62:	f7f6 fb3d 	bl	80001e0 <memchr>
 8009b66:	b138      	cbz	r0, 8009b78 <_svfiprintf_r+0x150>
 8009b68:	9b04      	ldr	r3, [sp, #16]
 8009b6a:	eba0 000a 	sub.w	r0, r0, sl
 8009b6e:	2240      	movs	r2, #64	@ 0x40
 8009b70:	4082      	lsls	r2, r0
 8009b72:	4313      	orrs	r3, r2
 8009b74:	3401      	adds	r4, #1
 8009b76:	9304      	str	r3, [sp, #16]
 8009b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b7c:	4824      	ldr	r0, [pc, #144]	@ (8009c10 <_svfiprintf_r+0x1e8>)
 8009b7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b82:	2206      	movs	r2, #6
 8009b84:	f7f6 fb2c 	bl	80001e0 <memchr>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d036      	beq.n	8009bfa <_svfiprintf_r+0x1d2>
 8009b8c:	4b21      	ldr	r3, [pc, #132]	@ (8009c14 <_svfiprintf_r+0x1ec>)
 8009b8e:	bb1b      	cbnz	r3, 8009bd8 <_svfiprintf_r+0x1b0>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	3307      	adds	r3, #7
 8009b94:	f023 0307 	bic.w	r3, r3, #7
 8009b98:	3308      	adds	r3, #8
 8009b9a:	9303      	str	r3, [sp, #12]
 8009b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b9e:	4433      	add	r3, r6
 8009ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ba2:	e76a      	b.n	8009a7a <_svfiprintf_r+0x52>
 8009ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ba8:	460c      	mov	r4, r1
 8009baa:	2001      	movs	r0, #1
 8009bac:	e7a8      	b.n	8009b00 <_svfiprintf_r+0xd8>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	3401      	adds	r4, #1
 8009bb2:	9305      	str	r3, [sp, #20]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f04f 0c0a 	mov.w	ip, #10
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bc0:	3a30      	subs	r2, #48	@ 0x30
 8009bc2:	2a09      	cmp	r2, #9
 8009bc4:	d903      	bls.n	8009bce <_svfiprintf_r+0x1a6>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d0c6      	beq.n	8009b58 <_svfiprintf_r+0x130>
 8009bca:	9105      	str	r1, [sp, #20]
 8009bcc:	e7c4      	b.n	8009b58 <_svfiprintf_r+0x130>
 8009bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e7f0      	b.n	8009bba <_svfiprintf_r+0x192>
 8009bd8:	ab03      	add	r3, sp, #12
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	462a      	mov	r2, r5
 8009bde:	4b0e      	ldr	r3, [pc, #56]	@ (8009c18 <_svfiprintf_r+0x1f0>)
 8009be0:	a904      	add	r1, sp, #16
 8009be2:	4638      	mov	r0, r7
 8009be4:	f3af 8000 	nop.w
 8009be8:	1c42      	adds	r2, r0, #1
 8009bea:	4606      	mov	r6, r0
 8009bec:	d1d6      	bne.n	8009b9c <_svfiprintf_r+0x174>
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	065b      	lsls	r3, r3, #25
 8009bf2:	f53f af2d 	bmi.w	8009a50 <_svfiprintf_r+0x28>
 8009bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bf8:	e72c      	b.n	8009a54 <_svfiprintf_r+0x2c>
 8009bfa:	ab03      	add	r3, sp, #12
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	462a      	mov	r2, r5
 8009c00:	4b05      	ldr	r3, [pc, #20]	@ (8009c18 <_svfiprintf_r+0x1f0>)
 8009c02:	a904      	add	r1, sp, #16
 8009c04:	4638      	mov	r0, r7
 8009c06:	f000 f879 	bl	8009cfc <_printf_i>
 8009c0a:	e7ed      	b.n	8009be8 <_svfiprintf_r+0x1c0>
 8009c0c:	0800a13c 	.word	0x0800a13c
 8009c10:	0800a146 	.word	0x0800a146
 8009c14:	00000000 	.word	0x00000000
 8009c18:	08009971 	.word	0x08009971
 8009c1c:	0800a142 	.word	0x0800a142

08009c20 <_printf_common>:
 8009c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c24:	4616      	mov	r6, r2
 8009c26:	4698      	mov	r8, r3
 8009c28:	688a      	ldr	r2, [r1, #8]
 8009c2a:	690b      	ldr	r3, [r1, #16]
 8009c2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c30:	4293      	cmp	r3, r2
 8009c32:	bfb8      	it	lt
 8009c34:	4613      	movlt	r3, r2
 8009c36:	6033      	str	r3, [r6, #0]
 8009c38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c3c:	4607      	mov	r7, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	b10a      	cbz	r2, 8009c46 <_printf_common+0x26>
 8009c42:	3301      	adds	r3, #1
 8009c44:	6033      	str	r3, [r6, #0]
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	0699      	lsls	r1, r3, #26
 8009c4a:	bf42      	ittt	mi
 8009c4c:	6833      	ldrmi	r3, [r6, #0]
 8009c4e:	3302      	addmi	r3, #2
 8009c50:	6033      	strmi	r3, [r6, #0]
 8009c52:	6825      	ldr	r5, [r4, #0]
 8009c54:	f015 0506 	ands.w	r5, r5, #6
 8009c58:	d106      	bne.n	8009c68 <_printf_common+0x48>
 8009c5a:	f104 0a19 	add.w	sl, r4, #25
 8009c5e:	68e3      	ldr	r3, [r4, #12]
 8009c60:	6832      	ldr	r2, [r6, #0]
 8009c62:	1a9b      	subs	r3, r3, r2
 8009c64:	42ab      	cmp	r3, r5
 8009c66:	dc26      	bgt.n	8009cb6 <_printf_common+0x96>
 8009c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c6c:	6822      	ldr	r2, [r4, #0]
 8009c6e:	3b00      	subs	r3, #0
 8009c70:	bf18      	it	ne
 8009c72:	2301      	movne	r3, #1
 8009c74:	0692      	lsls	r2, r2, #26
 8009c76:	d42b      	bmi.n	8009cd0 <_printf_common+0xb0>
 8009c78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c7c:	4641      	mov	r1, r8
 8009c7e:	4638      	mov	r0, r7
 8009c80:	47c8      	blx	r9
 8009c82:	3001      	adds	r0, #1
 8009c84:	d01e      	beq.n	8009cc4 <_printf_common+0xa4>
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	6922      	ldr	r2, [r4, #16]
 8009c8a:	f003 0306 	and.w	r3, r3, #6
 8009c8e:	2b04      	cmp	r3, #4
 8009c90:	bf02      	ittt	eq
 8009c92:	68e5      	ldreq	r5, [r4, #12]
 8009c94:	6833      	ldreq	r3, [r6, #0]
 8009c96:	1aed      	subeq	r5, r5, r3
 8009c98:	68a3      	ldr	r3, [r4, #8]
 8009c9a:	bf0c      	ite	eq
 8009c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ca0:	2500      	movne	r5, #0
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	bfc4      	itt	gt
 8009ca6:	1a9b      	subgt	r3, r3, r2
 8009ca8:	18ed      	addgt	r5, r5, r3
 8009caa:	2600      	movs	r6, #0
 8009cac:	341a      	adds	r4, #26
 8009cae:	42b5      	cmp	r5, r6
 8009cb0:	d11a      	bne.n	8009ce8 <_printf_common+0xc8>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	e008      	b.n	8009cc8 <_printf_common+0xa8>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4652      	mov	r2, sl
 8009cba:	4641      	mov	r1, r8
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	47c8      	blx	r9
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d103      	bne.n	8009ccc <_printf_common+0xac>
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ccc:	3501      	adds	r5, #1
 8009cce:	e7c6      	b.n	8009c5e <_printf_common+0x3e>
 8009cd0:	18e1      	adds	r1, r4, r3
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	2030      	movs	r0, #48	@ 0x30
 8009cd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cda:	4422      	add	r2, r4
 8009cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ce0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ce4:	3302      	adds	r3, #2
 8009ce6:	e7c7      	b.n	8009c78 <_printf_common+0x58>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	4622      	mov	r2, r4
 8009cec:	4641      	mov	r1, r8
 8009cee:	4638      	mov	r0, r7
 8009cf0:	47c8      	blx	r9
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	d0e6      	beq.n	8009cc4 <_printf_common+0xa4>
 8009cf6:	3601      	adds	r6, #1
 8009cf8:	e7d9      	b.n	8009cae <_printf_common+0x8e>
	...

08009cfc <_printf_i>:
 8009cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	7e0f      	ldrb	r7, [r1, #24]
 8009d02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d04:	2f78      	cmp	r7, #120	@ 0x78
 8009d06:	4691      	mov	r9, r2
 8009d08:	4680      	mov	r8, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	469a      	mov	sl, r3
 8009d0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d12:	d807      	bhi.n	8009d24 <_printf_i+0x28>
 8009d14:	2f62      	cmp	r7, #98	@ 0x62
 8009d16:	d80a      	bhi.n	8009d2e <_printf_i+0x32>
 8009d18:	2f00      	cmp	r7, #0
 8009d1a:	f000 80d2 	beq.w	8009ec2 <_printf_i+0x1c6>
 8009d1e:	2f58      	cmp	r7, #88	@ 0x58
 8009d20:	f000 80b9 	beq.w	8009e96 <_printf_i+0x19a>
 8009d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d2c:	e03a      	b.n	8009da4 <_printf_i+0xa8>
 8009d2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d32:	2b15      	cmp	r3, #21
 8009d34:	d8f6      	bhi.n	8009d24 <_printf_i+0x28>
 8009d36:	a101      	add	r1, pc, #4	@ (adr r1, 8009d3c <_printf_i+0x40>)
 8009d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d3c:	08009d95 	.word	0x08009d95
 8009d40:	08009da9 	.word	0x08009da9
 8009d44:	08009d25 	.word	0x08009d25
 8009d48:	08009d25 	.word	0x08009d25
 8009d4c:	08009d25 	.word	0x08009d25
 8009d50:	08009d25 	.word	0x08009d25
 8009d54:	08009da9 	.word	0x08009da9
 8009d58:	08009d25 	.word	0x08009d25
 8009d5c:	08009d25 	.word	0x08009d25
 8009d60:	08009d25 	.word	0x08009d25
 8009d64:	08009d25 	.word	0x08009d25
 8009d68:	08009ea9 	.word	0x08009ea9
 8009d6c:	08009dd3 	.word	0x08009dd3
 8009d70:	08009e63 	.word	0x08009e63
 8009d74:	08009d25 	.word	0x08009d25
 8009d78:	08009d25 	.word	0x08009d25
 8009d7c:	08009ecb 	.word	0x08009ecb
 8009d80:	08009d25 	.word	0x08009d25
 8009d84:	08009dd3 	.word	0x08009dd3
 8009d88:	08009d25 	.word	0x08009d25
 8009d8c:	08009d25 	.word	0x08009d25
 8009d90:	08009e6b 	.word	0x08009e6b
 8009d94:	6833      	ldr	r3, [r6, #0]
 8009d96:	1d1a      	adds	r2, r3, #4
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6032      	str	r2, [r6, #0]
 8009d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009da0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009da4:	2301      	movs	r3, #1
 8009da6:	e09d      	b.n	8009ee4 <_printf_i+0x1e8>
 8009da8:	6833      	ldr	r3, [r6, #0]
 8009daa:	6820      	ldr	r0, [r4, #0]
 8009dac:	1d19      	adds	r1, r3, #4
 8009dae:	6031      	str	r1, [r6, #0]
 8009db0:	0606      	lsls	r6, r0, #24
 8009db2:	d501      	bpl.n	8009db8 <_printf_i+0xbc>
 8009db4:	681d      	ldr	r5, [r3, #0]
 8009db6:	e003      	b.n	8009dc0 <_printf_i+0xc4>
 8009db8:	0645      	lsls	r5, r0, #25
 8009dba:	d5fb      	bpl.n	8009db4 <_printf_i+0xb8>
 8009dbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dc0:	2d00      	cmp	r5, #0
 8009dc2:	da03      	bge.n	8009dcc <_printf_i+0xd0>
 8009dc4:	232d      	movs	r3, #45	@ 0x2d
 8009dc6:	426d      	negs	r5, r5
 8009dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dcc:	4859      	ldr	r0, [pc, #356]	@ (8009f34 <_printf_i+0x238>)
 8009dce:	230a      	movs	r3, #10
 8009dd0:	e011      	b.n	8009df6 <_printf_i+0xfa>
 8009dd2:	6821      	ldr	r1, [r4, #0]
 8009dd4:	6833      	ldr	r3, [r6, #0]
 8009dd6:	0608      	lsls	r0, r1, #24
 8009dd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ddc:	d402      	bmi.n	8009de4 <_printf_i+0xe8>
 8009dde:	0649      	lsls	r1, r1, #25
 8009de0:	bf48      	it	mi
 8009de2:	b2ad      	uxthmi	r5, r5
 8009de4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009de6:	4853      	ldr	r0, [pc, #332]	@ (8009f34 <_printf_i+0x238>)
 8009de8:	6033      	str	r3, [r6, #0]
 8009dea:	bf14      	ite	ne
 8009dec:	230a      	movne	r3, #10
 8009dee:	2308      	moveq	r3, #8
 8009df0:	2100      	movs	r1, #0
 8009df2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009df6:	6866      	ldr	r6, [r4, #4]
 8009df8:	60a6      	str	r6, [r4, #8]
 8009dfa:	2e00      	cmp	r6, #0
 8009dfc:	bfa2      	ittt	ge
 8009dfe:	6821      	ldrge	r1, [r4, #0]
 8009e00:	f021 0104 	bicge.w	r1, r1, #4
 8009e04:	6021      	strge	r1, [r4, #0]
 8009e06:	b90d      	cbnz	r5, 8009e0c <_printf_i+0x110>
 8009e08:	2e00      	cmp	r6, #0
 8009e0a:	d04b      	beq.n	8009ea4 <_printf_i+0x1a8>
 8009e0c:	4616      	mov	r6, r2
 8009e0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e12:	fb03 5711 	mls	r7, r3, r1, r5
 8009e16:	5dc7      	ldrb	r7, [r0, r7]
 8009e18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e1c:	462f      	mov	r7, r5
 8009e1e:	42bb      	cmp	r3, r7
 8009e20:	460d      	mov	r5, r1
 8009e22:	d9f4      	bls.n	8009e0e <_printf_i+0x112>
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d10b      	bne.n	8009e40 <_printf_i+0x144>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	07df      	lsls	r7, r3, #31
 8009e2c:	d508      	bpl.n	8009e40 <_printf_i+0x144>
 8009e2e:	6923      	ldr	r3, [r4, #16]
 8009e30:	6861      	ldr	r1, [r4, #4]
 8009e32:	4299      	cmp	r1, r3
 8009e34:	bfde      	ittt	le
 8009e36:	2330      	movle	r3, #48	@ 0x30
 8009e38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e40:	1b92      	subs	r2, r2, r6
 8009e42:	6122      	str	r2, [r4, #16]
 8009e44:	f8cd a000 	str.w	sl, [sp]
 8009e48:	464b      	mov	r3, r9
 8009e4a:	aa03      	add	r2, sp, #12
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4640      	mov	r0, r8
 8009e50:	f7ff fee6 	bl	8009c20 <_printf_common>
 8009e54:	3001      	adds	r0, #1
 8009e56:	d14a      	bne.n	8009eee <_printf_i+0x1f2>
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	b004      	add	sp, #16
 8009e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	f043 0320 	orr.w	r3, r3, #32
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	4833      	ldr	r0, [pc, #204]	@ (8009f38 <_printf_i+0x23c>)
 8009e6c:	2778      	movs	r7, #120	@ 0x78
 8009e6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	6831      	ldr	r1, [r6, #0]
 8009e76:	061f      	lsls	r7, r3, #24
 8009e78:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e7c:	d402      	bmi.n	8009e84 <_printf_i+0x188>
 8009e7e:	065f      	lsls	r7, r3, #25
 8009e80:	bf48      	it	mi
 8009e82:	b2ad      	uxthmi	r5, r5
 8009e84:	6031      	str	r1, [r6, #0]
 8009e86:	07d9      	lsls	r1, r3, #31
 8009e88:	bf44      	itt	mi
 8009e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8009e8e:	6023      	strmi	r3, [r4, #0]
 8009e90:	b11d      	cbz	r5, 8009e9a <_printf_i+0x19e>
 8009e92:	2310      	movs	r3, #16
 8009e94:	e7ac      	b.n	8009df0 <_printf_i+0xf4>
 8009e96:	4827      	ldr	r0, [pc, #156]	@ (8009f34 <_printf_i+0x238>)
 8009e98:	e7e9      	b.n	8009e6e <_printf_i+0x172>
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	f023 0320 	bic.w	r3, r3, #32
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	e7f6      	b.n	8009e92 <_printf_i+0x196>
 8009ea4:	4616      	mov	r6, r2
 8009ea6:	e7bd      	b.n	8009e24 <_printf_i+0x128>
 8009ea8:	6833      	ldr	r3, [r6, #0]
 8009eaa:	6825      	ldr	r5, [r4, #0]
 8009eac:	6961      	ldr	r1, [r4, #20]
 8009eae:	1d18      	adds	r0, r3, #4
 8009eb0:	6030      	str	r0, [r6, #0]
 8009eb2:	062e      	lsls	r6, r5, #24
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	d501      	bpl.n	8009ebc <_printf_i+0x1c0>
 8009eb8:	6019      	str	r1, [r3, #0]
 8009eba:	e002      	b.n	8009ec2 <_printf_i+0x1c6>
 8009ebc:	0668      	lsls	r0, r5, #25
 8009ebe:	d5fb      	bpl.n	8009eb8 <_printf_i+0x1bc>
 8009ec0:	8019      	strh	r1, [r3, #0]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	6123      	str	r3, [r4, #16]
 8009ec6:	4616      	mov	r6, r2
 8009ec8:	e7bc      	b.n	8009e44 <_printf_i+0x148>
 8009eca:	6833      	ldr	r3, [r6, #0]
 8009ecc:	1d1a      	adds	r2, r3, #4
 8009ece:	6032      	str	r2, [r6, #0]
 8009ed0:	681e      	ldr	r6, [r3, #0]
 8009ed2:	6862      	ldr	r2, [r4, #4]
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7f6 f982 	bl	80001e0 <memchr>
 8009edc:	b108      	cbz	r0, 8009ee2 <_printf_i+0x1e6>
 8009ede:	1b80      	subs	r0, r0, r6
 8009ee0:	6060      	str	r0, [r4, #4]
 8009ee2:	6863      	ldr	r3, [r4, #4]
 8009ee4:	6123      	str	r3, [r4, #16]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009eec:	e7aa      	b.n	8009e44 <_printf_i+0x148>
 8009eee:	6923      	ldr	r3, [r4, #16]
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	47d0      	blx	sl
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d0ad      	beq.n	8009e58 <_printf_i+0x15c>
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	079b      	lsls	r3, r3, #30
 8009f00:	d413      	bmi.n	8009f2a <_printf_i+0x22e>
 8009f02:	68e0      	ldr	r0, [r4, #12]
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	4298      	cmp	r0, r3
 8009f08:	bfb8      	it	lt
 8009f0a:	4618      	movlt	r0, r3
 8009f0c:	e7a6      	b.n	8009e5c <_printf_i+0x160>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4632      	mov	r2, r6
 8009f12:	4649      	mov	r1, r9
 8009f14:	4640      	mov	r0, r8
 8009f16:	47d0      	blx	sl
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d09d      	beq.n	8009e58 <_printf_i+0x15c>
 8009f1c:	3501      	adds	r5, #1
 8009f1e:	68e3      	ldr	r3, [r4, #12]
 8009f20:	9903      	ldr	r1, [sp, #12]
 8009f22:	1a5b      	subs	r3, r3, r1
 8009f24:	42ab      	cmp	r3, r5
 8009f26:	dcf2      	bgt.n	8009f0e <_printf_i+0x212>
 8009f28:	e7eb      	b.n	8009f02 <_printf_i+0x206>
 8009f2a:	2500      	movs	r5, #0
 8009f2c:	f104 0619 	add.w	r6, r4, #25
 8009f30:	e7f5      	b.n	8009f1e <_printf_i+0x222>
 8009f32:	bf00      	nop
 8009f34:	0800a14d 	.word	0x0800a14d
 8009f38:	0800a15e 	.word	0x0800a15e

08009f3c <memmove>:
 8009f3c:	4288      	cmp	r0, r1
 8009f3e:	b510      	push	{r4, lr}
 8009f40:	eb01 0402 	add.w	r4, r1, r2
 8009f44:	d902      	bls.n	8009f4c <memmove+0x10>
 8009f46:	4284      	cmp	r4, r0
 8009f48:	4623      	mov	r3, r4
 8009f4a:	d807      	bhi.n	8009f5c <memmove+0x20>
 8009f4c:	1e43      	subs	r3, r0, #1
 8009f4e:	42a1      	cmp	r1, r4
 8009f50:	d008      	beq.n	8009f64 <memmove+0x28>
 8009f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f5a:	e7f8      	b.n	8009f4e <memmove+0x12>
 8009f5c:	4402      	add	r2, r0
 8009f5e:	4601      	mov	r1, r0
 8009f60:	428a      	cmp	r2, r1
 8009f62:	d100      	bne.n	8009f66 <memmove+0x2a>
 8009f64:	bd10      	pop	{r4, pc}
 8009f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f6e:	e7f7      	b.n	8009f60 <memmove+0x24>

08009f70 <_sbrk_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d06      	ldr	r5, [pc, #24]	@ (8009f8c <_sbrk_r+0x1c>)
 8009f74:	2300      	movs	r3, #0
 8009f76:	4604      	mov	r4, r0
 8009f78:	4608      	mov	r0, r1
 8009f7a:	602b      	str	r3, [r5, #0]
 8009f7c:	f7f7 f906 	bl	800118c <_sbrk>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_sbrk_r+0x1a>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_sbrk_r+0x1a>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20004854 	.word	0x20004854

08009f90 <_realloc_r>:
 8009f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f94:	4680      	mov	r8, r0
 8009f96:	4615      	mov	r5, r2
 8009f98:	460c      	mov	r4, r1
 8009f9a:	b921      	cbnz	r1, 8009fa6 <_realloc_r+0x16>
 8009f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	f7ff bc59 	b.w	8009858 <_malloc_r>
 8009fa6:	b92a      	cbnz	r2, 8009fb4 <_realloc_r+0x24>
 8009fa8:	f7ff fbea 	bl	8009780 <_free_r>
 8009fac:	2400      	movs	r4, #0
 8009fae:	4620      	mov	r0, r4
 8009fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb4:	f000 f81a 	bl	8009fec <_malloc_usable_size_r>
 8009fb8:	4285      	cmp	r5, r0
 8009fba:	4606      	mov	r6, r0
 8009fbc:	d802      	bhi.n	8009fc4 <_realloc_r+0x34>
 8009fbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009fc2:	d8f4      	bhi.n	8009fae <_realloc_r+0x1e>
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	f7ff fc46 	bl	8009858 <_malloc_r>
 8009fcc:	4607      	mov	r7, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d0ec      	beq.n	8009fac <_realloc_r+0x1c>
 8009fd2:	42b5      	cmp	r5, r6
 8009fd4:	462a      	mov	r2, r5
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	bf28      	it	cs
 8009fda:	4632      	movcs	r2, r6
 8009fdc:	f7ff fbc2 	bl	8009764 <memcpy>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	f7ff fbcc 	bl	8009780 <_free_r>
 8009fe8:	463c      	mov	r4, r7
 8009fea:	e7e0      	b.n	8009fae <_realloc_r+0x1e>

08009fec <_malloc_usable_size_r>:
 8009fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ff0:	1f18      	subs	r0, r3, #4
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	bfbc      	itt	lt
 8009ff6:	580b      	ldrlt	r3, [r1, r0]
 8009ff8:	18c0      	addlt	r0, r0, r3
 8009ffa:	4770      	bx	lr

08009ffc <_init>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	bf00      	nop
 800a000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a002:	bc08      	pop	{r3}
 800a004:	469e      	mov	lr, r3
 800a006:	4770      	bx	lr

0800a008 <_fini>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	bf00      	nop
 800a00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00e:	bc08      	pop	{r3}
 800a010:	469e      	mov	lr, r3
 800a012:	4770      	bx	lr
