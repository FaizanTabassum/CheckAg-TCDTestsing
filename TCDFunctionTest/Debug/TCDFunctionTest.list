
TCDFunctionTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009820  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080099b4  080099b4  0000a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a2c  08009a2c  0000b100  2**0
                  CONTENTS
  4 .ARM          00000008  08009a2c  08009a2c  0000aa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a34  08009a34  0000b100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a34  08009a34  0000aa34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a38  08009a38  0000aa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08009a3c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044b4  20000100  08009b3c  0000b100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045b4  08009b3c  0000b5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b56  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f7  00000000  00000000  0001fc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00023280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e15  00000000  00000000  000244f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a06a  00000000  00000000  00025305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017569  00000000  00000000  0003f36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac5e  00000000  00000000  000568d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1536  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d10  00000000  00000000  000f157c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f628c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000100 	.word	0x20000100
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800999c 	.word	0x0800999c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000104 	.word	0x20000104
 80001d0:	0800999c 	.word	0x0800999c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fe0a 	bl	80010e0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f82a 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fb04 	bl	8000adc <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 fae2 	bl	8000a9c <MX_DMA_Init>
  MX_TIM2_Init();
 80004d8:	f000 f8e2 	bl	80006a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004dc:	f000 f966 	bl	80007ac <MX_TIM3_Init>
  MX_TIM4_Init();
 80004e0:	f000 f9da 	bl	8000898 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004e4:	f000 fa4a 	bl	800097c <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f008 fd14 	bl	8008f14 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004ec:	f000 f886 	bl	80005fc <MX_ADC1_Init>
//  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
////  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
//  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH

  if (!start_command_received) {
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <main+0x54>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d107      	bne.n	800050a <main+0x46>
  CDC_Transmit_FS((uint8_t *)"Target Ready\r\n",14);
 80004fa:	210e      	movs	r1, #14
 80004fc:	4807      	ldr	r0, [pc, #28]	@ (800051c <main+0x58>)
 80004fe:	f008 fdcd 	bl	800909c <CDC_Transmit_FS>
  HAL_Delay(1000);}
 8000502:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000506:	f000 fe5d 	bl	80011c4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  single_capture_flag = 1;
 800050a:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <main+0x5c>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]



  while (1)
  {
	  SingleCapture();
 8000510:	f000 fb0c 	bl	8000b2c <SingleCapture>
 8000514:	e7fc      	b.n	8000510 <main+0x4c>
 8000516:	bf00      	nop
 8000518:	200031c4 	.word	0x200031c4
 800051c:	080099b4 	.word	0x080099b4
 8000520:	200031c8 	.word	0x200031c8

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	@ 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	@ 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f009 f9f4 	bl	8009920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b29      	ldr	r3, [pc, #164]	@ (80005f4 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	4a28      	ldr	r2, [pc, #160]	@ (80005f4 <SystemClock_Config+0xd0>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	@ 0x40
 8000558:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000570:	4a21      	ldr	r2, [pc, #132]	@ (80005f8 <SystemClock_Config+0xd4>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000598:	2319      	movs	r3, #25
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fb3e 	bl	8003c30 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ba:	f000 fb77 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fda0 	bl	8004120 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e6:	f000 fb61 	bl	8000cac <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	@ 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000610:	4a22      	ldr	r2, [pc, #136]	@ (800069c <MX_ADC1_Init+0xa0>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000616:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_ADC1_Init+0x9c>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_ADC1_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000636:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800063e:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000640:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_ADC1_Init+0x9c>)
 800064e:	2201      	movs	r2, #1
 8000650:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000654:	2201      	movs	r2, #1
 8000656:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_ADC1_Init+0x9c>)
 800065c:	2201      	movs	r2, #1
 800065e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000662:	f000 fdd3 	bl	800120c <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800066c:	f000 fb1e 	bl	8000cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000670:	2303      	movs	r3, #3
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000682:	f000 ff6f 	bl	8001564 <HAL_ADC_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800068c:	f000 fb0e 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000011c 	.word	0x2000011c
 800069c:	40012000 	.word	0x40012000

080006a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	@ 0x38
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]
 80006ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d0:	4b34      	ldr	r3, [pc, #208]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006d8:	4b32      	ldr	r3, [pc, #200]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b31      	ldr	r3, [pc, #196]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 80006e4:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006e6:	4a30      	ldr	r2, [pc, #192]	@ (80007a8 <MX_TIM2_Init+0x108>)
 80006e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f0:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f6:	482b      	ldr	r0, [pc, #172]	@ (80007a4 <MX_TIM2_Init+0x104>)
 80006f8:	f003 feca 	bl	8004490 <HAL_TIM_Base_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000702:	f000 fad3 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800070c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000710:	4619      	mov	r1, r3
 8000712:	4824      	ldr	r0, [pc, #144]	@ (80007a4 <MX_TIM2_Init+0x104>)
 8000714:	f004 fbda 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800071e:	f000 fac5 	bl	8000cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000722:	4820      	ldr	r0, [pc, #128]	@ (80007a4 <MX_TIM2_Init+0x104>)
 8000724:	f003 ff03 	bl	800452e <HAL_TIM_PWM_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800072e:	f000 fabd 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000732:	2310      	movs	r3, #16
 8000734:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000736:	2380      	movs	r3, #128	@ 0x80
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4619      	mov	r1, r3
 8000740:	4818      	ldr	r0, [pc, #96]	@ (80007a4 <MX_TIM2_Init+0x104>)
 8000742:	f005 f85d 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800074c:	f000 faae 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000750:	2370      	movs	r3, #112	@ 0x70
 8000752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 8000754:	f242 2373 	movw	r3, #8819	@ 0x2273
 8000758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800075a:	2302      	movs	r3, #2
 800075c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <MX_TIM2_Init+0x104>)
 800076a:	f004 faed 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000774:	f000 fa9a 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000778:	2360      	movs	r3, #96	@ 0x60
 800077a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2204      	movs	r2, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <MX_TIM2_Init+0x104>)
 8000788:	f004 fade 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000792:	f000 fa8b 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000796:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <MX_TIM2_Init+0x104>)
 8000798:	f000 fb94 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 800079c:	bf00      	nop
 800079e:	3738      	adds	r7, #56	@ 0x38
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200001c4 	.word	0x200001c4
 80007a8:	000802c7 	.word	0x000802c7

080007ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	@ 0x38
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007de:	4a2d      	ldr	r2, [pc, #180]	@ (8000894 <MX_TIM3_Init+0xe8>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 80007ee:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007f0:	22a7      	movs	r2, #167	@ 0xa7
 80007f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000800:	4823      	ldr	r0, [pc, #140]	@ (8000890 <MX_TIM3_Init+0xe4>)
 8000802:	f003 fe45 	bl	8004490 <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800080c:	f000 fa4e 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081a:	4619      	mov	r1, r3
 800081c:	481c      	ldr	r0, [pc, #112]	@ (8000890 <MX_TIM3_Init+0xe4>)
 800081e:	f004 fb55 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000828:	f000 fa40 	bl	8000cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800082c:	4818      	ldr	r0, [pc, #96]	@ (8000890 <MX_TIM3_Init+0xe4>)
 800082e:	f003 fe7e 	bl	800452e <HAL_TIM_PWM_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000838:	f000 fa38 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	@ (8000890 <MX_TIM3_Init+0xe4>)
 800084c:	f004 ffd8 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000856:	f000 fa29 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085a:	2360      	movs	r3, #96	@ 0x60
 800085c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 800085e:	2353      	movs	r3, #83	@ 0x53
 8000860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	4807      	ldr	r0, [pc, #28]	@ (8000890 <MX_TIM3_Init+0xe4>)
 8000872:	f004 fa69 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800087c:	f000 fa16 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <MX_TIM3_Init+0xe4>)
 8000882:	f000 fb1f 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 8000886:	bf00      	nop
 8000888:	3738      	adds	r7, #56	@ 0x38
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000020c 	.word	0x2000020c
 8000894:	40000400 	.word	0x40000400

08000898 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	@ 0x38
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000978 <MX_TIM4_Init+0xe0>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008ce:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 80008da:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008dc:	22a7      	movs	r2, #167	@ 0xa7
 80008de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008ec:	4821      	ldr	r0, [pc, #132]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008ee:	f003 fdcf 	bl	8004490 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80008f8:	f000 f9d8 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000906:	4619      	mov	r1, r3
 8000908:	481a      	ldr	r0, [pc, #104]	@ (8000974 <MX_TIM4_Init+0xdc>)
 800090a:	f004 fadf 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000914:	f000 f9ca 	bl	8000cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000918:	4816      	ldr	r0, [pc, #88]	@ (8000974 <MX_TIM4_Init+0xdc>)
 800091a:	f003 fe08 	bl	800452e <HAL_TIM_PWM_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000924:	f000 f9c2 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000930:	f107 0320 	add.w	r3, r7, #32
 8000934:	4619      	mov	r1, r3
 8000936:	480f      	ldr	r0, [pc, #60]	@ (8000974 <MX_TIM4_Init+0xdc>)
 8000938:	f004 ff62 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000942:	f000 f9b3 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000946:	2360      	movs	r3, #96	@ 0x60
 8000948:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 800094a:	2329      	movs	r3, #41	@ 0x29
 800094c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	220c      	movs	r2, #12
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_TIM4_Init+0xdc>)
 800095e:	f004 f9f3 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000968:	f000 f9a0 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3738      	adds	r7, #56	@ 0x38
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000254 	.word	0x20000254
 8000978:	40000800 	.word	0x40000800

0800097c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b092      	sub	sp, #72	@ 0x48
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009bc:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009be:	4a35      	ldr	r2, [pc, #212]	@ (8000a94 <MX_TIM5_Init+0x118>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009c2:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b31      	ldr	r3, [pc, #196]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009d0:	4a31      	ldr	r2, [pc, #196]	@ (8000a98 <MX_TIM5_Init+0x11c>)
 80009d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009e0:	482b      	ldr	r0, [pc, #172]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009e2:	f003 fd55 	bl	8004490 <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80009ec:	f000 f95e 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009fa:	4619      	mov	r1, r3
 80009fc:	4824      	ldr	r0, [pc, #144]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009fe:	f004 fa65 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a08:	f000 f950 	bl	8000cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a0c:	4820      	ldr	r0, [pc, #128]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a0e:	f003 fd8e 	bl	800452e <HAL_TIM_PWM_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000a18:	f000 f948 	bl	8000cac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4819      	ldr	r0, [pc, #100]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a2c:	f004 fb15 	bl	800505a <HAL_TIM_SlaveConfigSynchro>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000a36:	f000 f939 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a4a:	f004 fed9 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000a54:	f000 f92a 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a58:	2360      	movs	r3, #96	@ 0x60
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000a5c:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000a60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a72:	f004 f969 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000a7c:	f000 f916 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a80:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a82:	f000 fa1f 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 8000a86:	bf00      	nop
 8000a88:	3748      	adds	r7, #72	@ 0x48
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000029c 	.word	0x2000029c
 8000a94:	40000c00 	.word	0x40000c00
 8000a98:	000802c7 	.word	0x000802c7

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_DMA_Init+0x3c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad8 <MX_DMA_Init+0x3c>)
 8000aac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_DMA_Init+0x3c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2038      	movs	r0, #56	@ 0x38
 8000ac4:	f001 f8c9 	bl	8001c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ac8:	2038      	movs	r0, #56	@ 0x38
 8000aca:	f001 f8e2 	bl	8001c92 <HAL_NVIC_EnableIRQ>

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a0f      	ldr	r2, [pc, #60]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <SingleCapture>:

/* USER CODE BEGIN 4 */
void SingleCapture(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	if(timer_flag == 1){
 8000b30:	4b30      	ldr	r3, [pc, #192]	@ (8000bf4 <SingleCapture+0xc8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <SingleCapture+0x1e>
		count_signals++;
 8000b38:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <SingleCapture+0xcc>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <SingleCapture+0xcc>)
 8000b42:	701a      	strb	r2, [r3, #0]
		timer_flag = 0;
 8000b44:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf4 <SingleCapture+0xc8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
	}
	if(single_capture_flag == 1){
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bfc <SingleCapture+0xd0>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d128      	bne.n	8000ba4 <SingleCapture+0x78>
	  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay for icg
 8000b52:	4b2b      	ldr	r3, [pc, #172]	@ (8000c00 <SingleCapture+0xd4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2242      	movs	r2, #66	@ 0x42
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_COUNTER(&htim5, 0); // sh
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <SingleCapture+0xd8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_COUNTER(&htim3, 0); // fm
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <SingleCapture+0xdc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4824      	ldr	r0, [pc, #144]	@ (8000c00 <SingleCapture+0xd4>)
 8000b6e:	f003 fe4b 	bl	8004808 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 8000b72:	2100      	movs	r1, #0
 8000b74:	4822      	ldr	r0, [pc, #136]	@ (8000c00 <SingleCapture+0xd4>)
 8000b76:	f003 fd33 	bl	80045e0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	4821      	ldr	r0, [pc, #132]	@ (8000c04 <SingleCapture+0xd8>)
 8000b7e:	f003 fd2f 	bl	80045e0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8000b82:	2100      	movs	r1, #0
 8000b84:	4820      	ldr	r0, [pc, #128]	@ (8000c08 <SingleCapture+0xdc>)
 8000b86:	f003 fd2b 	bl	80045e0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 8000b8a:	210c      	movs	r1, #12
 8000b8c:	481f      	ldr	r0, [pc, #124]	@ (8000c0c <SingleCapture+0xe0>)
 8000b8e:	f003 fd27 	bl	80045e0 <HAL_TIM_PWM_Start>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000b92:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000b96:	491e      	ldr	r1, [pc, #120]	@ (8000c10 <SingleCapture+0xe4>)
 8000b98:	481e      	ldr	r0, [pc, #120]	@ (8000c14 <SingleCapture+0xe8>)
 8000b9a:	f000 fb7b 	bl	8001294 <HAL_ADC_Start_DMA>
	  single_capture_flag = 0;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <SingleCapture+0xd0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
	}

	  if(count_signals >= signals){
 8000ba4:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <SingleCapture+0xcc>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <SingleCapture+0xec>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d31e      	bcc.n	8000bee <SingleCapture+0xc2>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); //ICG
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4813      	ldr	r0, [pc, #76]	@ (8000c00 <SingleCapture+0xd4>)
 8000bb4:	f003 fdc4 	bl	8004740 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); //SH
 8000bb8:	2108      	movs	r1, #8
 8000bba:	4812      	ldr	r0, [pc, #72]	@ (8000c04 <SingleCapture+0xd8>)
 8000bbc:	f003 fdc0 	bl	8004740 <HAL_TIM_PWM_Stop>
  		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); //fM
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <SingleCapture+0xdc>)
 8000bc4:	f003 fdbc 	bl	8004740 <HAL_TIM_PWM_Stop>
  		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //ADC
 8000bc8:	210c      	movs	r1, #12
 8000bca:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <SingleCapture+0xe0>)
 8000bcc:	f003 fdb8 	bl	8004740 <HAL_TIM_PWM_Stop>
  	   	  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	480b      	ldr	r0, [pc, #44]	@ (8000c00 <SingleCapture+0xd4>)
 8000bd4:	f003 ff16 	bl	8004a04 <HAL_TIM_PWM_Stop_IT>
  	      HAL_ADC_Stop_DMA(&hadc1);
 8000bd8:	480e      	ldr	r0, [pc, #56]	@ (8000c14 <SingleCapture+0xe8>)
 8000bda:	f000 fc4b 	bl	8001474 <HAL_ADC_Stop_DMA>
  	      CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000bde:	f241 7170 	movw	r1, #6000	@ 0x1770
 8000be2:	480b      	ldr	r0, [pc, #44]	@ (8000c10 <SingleCapture+0xe4>)
 8000be4:	f008 fa5a 	bl	800909c <CDC_Transmit_FS>
  		  count_signals = 0;
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <SingleCapture+0xcc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]

	  }

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200031c7 	.word	0x200031c7
 8000bf8:	200031c5 	.word	0x200031c5
 8000bfc:	200031c8 	.word	0x200031c8
 8000c00:	200001c4 	.word	0x200001c4
 8000c04:	2000029c 	.word	0x2000029c
 8000c08:	2000020c 	.word	0x2000020c
 8000c0c:	20000254 	.word	0x20000254
 8000c10:	200002e4 	.word	0x200002e4
 8000c14:	2000011c 	.word	0x2000011c
 8000c18:	20000000 	.word	0x20000000

08000c1c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c2c:	d102      	bne.n	8000c34 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
			timer_flag = 1;
 8000c2e:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
			}
		}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	200031c7 	.word	0x200031c7

08000c44 <CDCReceiveCallback>:



//when the stm receives anything, it checks if it is the string start

void CDCReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
    // Ensure the buffer is null-terminated
    Buf[Len] = '\0';
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]

    // Check for the "start" command
    if (strncmp((char*)Buf, "start", 5) == 0) {
 8000c58:	2205      	movs	r2, #5
 8000c5a:	490e      	ldr	r1, [pc, #56]	@ (8000c94 <CDCReceiveCallback+0x50>)
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f008 fe67 	bl	8009930 <strncmp>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d111      	bne.n	8000c8c <CDCReceiveCallback+0x48>
    	signals = 2;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <CDCReceiveCallback+0x54>)
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	701a      	strb	r2, [r3, #0]
    	count_signals = 0;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <CDCReceiveCallback+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
    	adc_flag = 0;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <CDCReceiveCallback+0x5c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
    	timer_flag = 0;
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <CDCReceiveCallback+0x60>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
    	single_capture_flag = 0;
 8000c80:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <CDCReceiveCallback+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
    	single_capture_flag = 1;
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <CDCReceiveCallback+0x64>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]


    }
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	080099c4 	.word	0x080099c4
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	200031c5 	.word	0x200031c5
 8000ca0:	200031c6 	.word	0x200031c6
 8000ca4:	200031c7 	.word	0x200031c7
 8000ca8:	200031c8 	.word	0x200031c8

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a2e      	ldr	r2, [pc, #184]	@ (8000de0 <HAL_ADC_MspInit+0xd8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d156      	bne.n	8000dd8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a2c      	ldr	r2, [pc, #176]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a25      	ldr	r2, [pc, #148]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d62:	2308      	movs	r3, #8
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	481c      	ldr	r0, [pc, #112]	@ (8000de8 <HAL_ADC_MspInit+0xe0>)
 8000d76:	f001 fb87 	bl	8002488 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000d7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000da0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da2:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000da4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000da8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dbc:	480b      	ldr	r0, [pc, #44]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000dbe:	f000 ff83 	bl	8001cc8 <HAL_DMA_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000dc8:	f7ff ff70 	bl	8000cac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000dd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dd2:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	@ 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40012000 	.word	0x40012000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	20000164 	.word	0x20000164
 8000df0:	40026410 	.word	0x40026410

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e04:	d116      	bne.n	8000e34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	4a29      	ldr	r2, [pc, #164]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e16:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	201c      	movs	r0, #28
 8000e28:	f000 ff17 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e2c:	201c      	movs	r0, #28
 8000e2e:	f000 ff30 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000e32:	e03a      	b.n	8000eaa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d10e      	bne.n	8000e5c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4e:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
}
 8000e5a:	e026      	b.n	8000eaa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <HAL_TIM_Base_MspInit+0xc8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10e      	bne.n	8000e84 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
}
 8000e82:	e012      	b.n	8000eaa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_TIM_Base_MspInit+0xcc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d10d      	bne.n	8000eaa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9e:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40000400 	.word	0x40000400
 8000ebc:	40000800 	.word	0x40000800
 8000ec0:	40000c00 	.word	0x40000c00

08000ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ee4:	d11e      	bne.n	8000f24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b34      	ldr	r3, [pc, #208]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a33      	ldr	r2, [pc, #204]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f12:	2301      	movs	r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4828      	ldr	r0, [pc, #160]	@ (8000fc0 <HAL_TIM_MspPostInit+0xfc>)
 8000f1e:	f001 fab3 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000f22:	e046      	b.n	8000fb2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a26      	ldr	r2, [pc, #152]	@ (8000fc4 <HAL_TIM_MspPostInit+0x100>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d11e      	bne.n	8000f6c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a21      	ldr	r2, [pc, #132]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f4a:	2340      	movs	r3, #64	@ 0x40
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4816      	ldr	r0, [pc, #88]	@ (8000fc0 <HAL_TIM_MspPostInit+0xfc>)
 8000f66:	f001 fa8f 	bl	8002488 <HAL_GPIO_Init>
}
 8000f6a:	e022      	b.n	8000fb2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a15      	ldr	r2, [pc, #84]	@ (8000fc8 <HAL_TIM_MspPostInit+0x104>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d11d      	bne.n	8000fb2 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f92:	2304      	movs	r3, #4
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <HAL_TIM_MspPostInit+0xfc>)
 8000fae:	f001 fa6b 	bl	8002488 <HAL_GPIO_Init>
}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	@ 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40000400 	.word	0x40000400
 8000fc8:	40000c00 	.word	0x40000c00

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f000 f8af 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <TIM2_IRQHandler+0x10>)
 8001032:	f003 fd99 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200001c4 	.word	0x200001c4

08001040 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <DMA2_Stream0_IRQHandler+0x10>)
 8001046:	f000 ffb5 	bl	8001fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000164 	.word	0x20000164

08001054 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <OTG_FS_IRQHandler+0x10>)
 800105a:	f001 fcdd 	bl	8002a18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20003eb0 	.word	0x20003eb0

08001068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <SystemInit+0x20>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <SystemInit+0x20>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001090:	f7ff ffea 	bl	8001068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	@ (80010cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	@ (80010d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f008 fc4b 	bl	8009954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fa01 	bl	80004c4 <main>
  bx  lr    
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80010d0:	08009a3c 	.word	0x08009a3c
  ldr r2, =_sbss
 80010d4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80010d8:	200045b4 	.word	0x200045b4

080010dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001120 <HAL_Init+0x40>)
 80010ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <HAL_Init+0x40>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	@ (8001120 <HAL_Init+0x40>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 fd9b 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	200f      	movs	r0, #15
 8001110:	f000 f808 	bl	8001124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fdd0 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023c00 	.word	0x40023c00

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_InitTick+0x54>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <HAL_InitTick+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fdb3 	bl	8001cae <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 fd7b 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	@ (8001180 <HAL_InitTick+0x5c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000004 	.word	0x20000004
 800117c:	2000000c 	.word	0x2000000c
 8001180:	20000008 	.word	0x20000008

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_IncTick+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_IncTick+0x24>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <HAL_IncTick+0x24>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2000000c 	.word	0x2000000c
 80011a8:	200031cc 	.word	0x200031cc

080011ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <HAL_GetTick+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	200031cc 	.word	0x200031cc

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff ffee 	bl	80011ac <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <HAL_Delay+0x44>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffde 	bl	80011ac <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000000c 	.word	0x2000000c

0800120c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e033      	b.n	800128a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fd6c 	bl	8000d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	2b00      	cmp	r3, #0
 8001248:	d118      	bne.n	800127c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001252:	f023 0302 	bic.w	r3, r3, #2
 8001256:	f043 0202 	orr.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 faa2 	bl	80017a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	@ 0x40
 800127a:	e001      	b.n	8001280 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_ADC_Start_DMA+0x1e>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e0ce      	b.n	8001450 <HAL_ADC_Start_DMA+0x1bc>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d018      	beq.n	80012fa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001458 <HAL_ADC_Start_DMA+0x1c4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a5f      	ldr	r2, [pc, #380]	@ (800145c <HAL_ADC_Start_DMA+0x1c8>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9a      	lsrs	r2, r3, #18
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012ec:	e002      	b.n	80012f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001308:	d107      	bne.n	800131a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001318:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b01      	cmp	r3, #1
 8001326:	f040 8086 	bne.w	8001436 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001354:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001368:	d106      	bne.n	8001378 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f023 0206 	bic.w	r2, r3, #6
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	645a      	str	r2, [r3, #68]	@ 0x44
 8001376:	e002      	b.n	800137e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001386:	4b36      	ldr	r3, [pc, #216]	@ (8001460 <HAL_ADC_Start_DMA+0x1cc>)
 8001388:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800138e:	4a35      	ldr	r2, [pc, #212]	@ (8001464 <HAL_ADC_Start_DMA+0x1d0>)
 8001390:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001396:	4a34      	ldr	r2, [pc, #208]	@ (8001468 <HAL_ADC_Start_DMA+0x1d4>)
 8001398:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800139e:	4a33      	ldr	r2, [pc, #204]	@ (800146c <HAL_ADC_Start_DMA+0x1d8>)
 80013a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80013ba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013ca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	334c      	adds	r3, #76	@ 0x4c
 80013d6:	4619      	mov	r1, r3
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f000 fd22 	bl	8001e24 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10f      	bne.n	800140c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d129      	bne.n	800144e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	e020      	b.n	800144e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a17      	ldr	r2, [pc, #92]	@ (8001470 <HAL_ADC_Start_DMA+0x1dc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d11b      	bne.n	800144e <HAL_ADC_Start_DMA+0x1ba>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d114      	bne.n	800144e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	e00b      	b.n	800144e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f043 0210 	orr.w	r2, r3, #16
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f043 0201 	orr.w	r2, r3, #1
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000004 	.word	0x20000004
 800145c:	431bde83 	.word	0x431bde83
 8001460:	40012300 	.word	0x40012300
 8001464:	080019a1 	.word	0x080019a1
 8001468:	08001a5b 	.word	0x08001a5b
 800146c:	08001a77 	.word	0x08001a77
 8001470:	40012000 	.word	0x40012000

08001474 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_ADC_Stop_DMA+0x1a>
 800148a:	2302      	movs	r3, #2
 800148c:	e048      	b.n	8001520 <HAL_ADC_Stop_DMA+0xac>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d130      	bne.n	8001516 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014c2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d10f      	bne.n	80014f2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fcfc 	bl	8001ed4 <HAL_DMA_Abort>
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001500:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1c>
 800157c:	2302      	movs	r3, #2
 800157e:	e105      	b.n	800178c <HAL_ADC_ConfigChannel+0x228>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b09      	cmp	r3, #9
 800158e:	d925      	bls.n	80015dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d9      	ldr	r1, [r3, #12]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	3b1e      	subs	r3, #30
 80015a6:	2207      	movs	r2, #7
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43da      	mvns	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	400a      	ands	r2, r1
 80015b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68d9      	ldr	r1, [r3, #12]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	4603      	mov	r3, r0
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4403      	add	r3, r0
 80015ce:	3b1e      	subs	r3, #30
 80015d0:	409a      	lsls	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	e022      	b.n	8001622 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6919      	ldr	r1, [r3, #16]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	2207      	movs	r2, #7
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	400a      	ands	r2, r1
 80015fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6919      	ldr	r1, [r3, #16]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	4603      	mov	r3, r0
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4403      	add	r3, r0
 8001618:	409a      	lsls	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b06      	cmp	r3, #6
 8001628:	d824      	bhi.n	8001674 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	3b05      	subs	r3, #5
 800163c:	221f      	movs	r2, #31
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	400a      	ands	r2, r1
 800164a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	4618      	mov	r0, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	3b05      	subs	r3, #5
 8001666:	fa00 f203 	lsl.w	r2, r0, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34
 8001672:	e04c      	b.n	800170e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b0c      	cmp	r3, #12
 800167a:	d824      	bhi.n	80016c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	3b23      	subs	r3, #35	@ 0x23
 800168e:	221f      	movs	r2, #31
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43da      	mvns	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	400a      	ands	r2, r1
 800169c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	3b23      	subs	r3, #35	@ 0x23
 80016b8:	fa00 f203 	lsl.w	r2, r0, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80016c4:	e023      	b.n	800170e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	3b41      	subs	r3, #65	@ 0x41
 80016d8:	221f      	movs	r2, #31
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	400a      	ands	r2, r1
 80016e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3b41      	subs	r3, #65	@ 0x41
 8001702:	fa00 f203 	lsl.w	r2, r0, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800170e:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <HAL_ADC_ConfigChannel+0x234>)
 8001710:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a21      	ldr	r2, [pc, #132]	@ (800179c <HAL_ADC_ConfigChannel+0x238>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d109      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1cc>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b12      	cmp	r3, #18
 8001722:	d105      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	@ (800179c <HAL_ADC_ConfigChannel+0x238>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d123      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x21e>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b10      	cmp	r3, #16
 8001740:	d003      	beq.n	800174a <HAL_ADC_ConfigChannel+0x1e6>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b11      	cmp	r3, #17
 8001748:	d11b      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b10      	cmp	r3, #16
 800175c:	d111      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <HAL_ADC_ConfigChannel+0x23c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a10      	ldr	r2, [pc, #64]	@ (80017a4 <HAL_ADC_ConfigChannel+0x240>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	0c9a      	lsrs	r2, r3, #18
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001774:	e002      	b.n	800177c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3b01      	subs	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40012300 	.word	0x40012300
 800179c:	40012000 	.word	0x40012000
 80017a0:	20000004 	.word	0x20000004
 80017a4:	431bde83 	.word	0x431bde83

080017a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b0:	4b79      	ldr	r3, [pc, #484]	@ (8001998 <ADC_Init+0x1f0>)
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	021a      	lsls	r2, r3, #8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183a:	4a58      	ldr	r2, [pc, #352]	@ (800199c <ADC_Init+0x1f4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d022      	beq.n	8001886 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800184e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6899      	ldr	r1, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e00f      	b.n	80018a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0202 	bic.w	r2, r2, #2
 80018b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6899      	ldr	r1, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7e1b      	ldrb	r3, [r3, #24]
 80018c0:	005a      	lsls	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01b      	beq.n	800190c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6859      	ldr	r1, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	3b01      	subs	r3, #1
 8001900:	035a      	lsls	r2, r3, #13
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	e007      	b.n	800191c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	3b01      	subs	r3, #1
 8001938:	051a      	lsls	r2, r3, #20
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6899      	ldr	r1, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800195e:	025a      	lsls	r2, r3, #9
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6899      	ldr	r1, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	029a      	lsls	r2, r3, #10
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40012300 	.word	0x40012300
 800199c:	0f000001 	.word	0x0f000001

080019a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d13c      	bne.n	8001a34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d12b      	bne.n	8001a2c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d127      	bne.n	8001a2c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d119      	bne.n	8001a2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0220 	bic.w	r2, r2, #32
 8001a06:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff fd7b 	bl	8001528 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a32:	e00e      	b.n	8001a52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff fd85 	bl	8001550 <HAL_ADC_ErrorCallback>
}
 8001a46:	e004      	b.n	8001a52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a66:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff fd67 	bl	800153c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a82:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2240      	movs	r2, #64	@ 0x40
 8001a88:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f043 0204 	orr.w	r2, r3, #4
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff fd5a 	bl	8001550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	@ (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	@ (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	@ (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	@ 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	@ 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff8e 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff29 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6c:	f7ff ff3e 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff ff8e 	bl	8001b98 <NVIC_EncodePriority>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff5d 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff31 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffa2 	bl	8001c00 <SysTick_Config>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff fa6a 	bl	80011ac <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e099      	b.n	8001e18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d04:	e00f      	b.n	8001d26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d06:	f7ff fa51 	bl	80011ac <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d908      	bls.n	8001d26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e078      	b.n	8001e18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e8      	bne.n	8001d06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4b38      	ldr	r3, [pc, #224]	@ (8001e20 <HAL_DMA_Init+0x158>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d107      	bne.n	8001d90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f023 0307 	bic.w	r3, r3, #7
 8001da6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d117      	bne.n	8001dea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00e      	beq.n	8001dea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fadf 	bl	8002390 <DMA_CheckFifoParam>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2240      	movs	r2, #64	@ 0x40
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001de6:	2301      	movs	r3, #1
 8001de8:	e016      	b.n	8001e18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fa96 	bl	8002324 <DMA_CalcBaseAndBitshift>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e00:	223f      	movs	r2, #63	@ 0x3f
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	f010803f 	.word	0xf010803f

08001e24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_DMA_Start_IT+0x26>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e040      	b.n	8001ecc <HAL_DMA_Start_IT+0xa8>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d12f      	bne.n	8001ebe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2202      	movs	r2, #2
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fa28 	bl	80022c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	223f      	movs	r2, #63	@ 0x3f
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0216 	orr.w	r2, r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0208 	orr.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e005      	b.n	8001eca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ee2:	f7ff f963 	bl	80011ac <HAL_GetTick>
 8001ee6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d008      	beq.n	8001f06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e052      	b.n	8001fac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0216 	bic.w	r2, r2, #22
 8001f14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d103      	bne.n	8001f36 <HAL_DMA_Abort+0x62>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0208 	bic.w	r2, r2, #8
 8001f44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f56:	e013      	b.n	8001f80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f58:	f7ff f928 	bl	80011ac <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d90c      	bls.n	8001f80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e015      	b.n	8001fac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1e4      	bne.n	8001f58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f92:	223f      	movs	r2, #63	@ 0x3f
 8001f94:	409a      	lsls	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fc0:	4b8e      	ldr	r3, [pc, #568]	@ (80021fc <HAL_DMA_IRQHandler+0x248>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a8e      	ldr	r2, [pc, #568]	@ (8002200 <HAL_DMA_IRQHandler+0x24c>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0a9b      	lsrs	r3, r3, #10
 8001fcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fde:	2208      	movs	r2, #8
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01a      	beq.n	8002020 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d013      	beq.n	8002020 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0204 	bic.w	r2, r2, #4
 8002006:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200c:	2208      	movs	r2, #8
 800200e:	409a      	lsls	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002024:	2201      	movs	r2, #1
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d012      	beq.n	8002056 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	2201      	movs	r2, #1
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204e:	f043 0202 	orr.w	r2, r3, #2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205a:	2204      	movs	r2, #4
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d012      	beq.n	800208c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00b      	beq.n	800208c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	2204      	movs	r2, #4
 800207a:	409a      	lsls	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f043 0204 	orr.w	r2, r3, #4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	2210      	movs	r2, #16
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d043      	beq.n	8002124 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d03c      	beq.n	8002124 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	2210      	movs	r2, #16
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d018      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d108      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d024      	beq.n	8002124 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
 80020e2:	e01f      	b.n	8002124 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01b      	beq.n	8002124 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
 80020f4:	e016      	b.n	8002124 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d107      	bne.n	8002114 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0208 	bic.w	r2, r2, #8
 8002112:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002128:	2220      	movs	r2, #32
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 808f 	beq.w	8002254 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8087 	beq.w	8002254 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214a:	2220      	movs	r2, #32
 800214c:	409a      	lsls	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b05      	cmp	r3, #5
 800215c:	d136      	bne.n	80021cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0216 	bic.w	r2, r2, #22
 800216c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800217c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <HAL_DMA_IRQHandler+0x1da>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0208 	bic.w	r2, r2, #8
 800219c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a2:	223f      	movs	r2, #63	@ 0x3f
 80021a4:	409a      	lsls	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d07e      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
        }
        return;
 80021ca:	e079      	b.n	80022c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01d      	beq.n	8002216 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10d      	bne.n	8002204 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d031      	beq.n	8002254 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
 80021f8:	e02c      	b.n	8002254 <HAL_DMA_IRQHandler+0x2a0>
 80021fa:	bf00      	nop
 80021fc:	20000004 	.word	0x20000004
 8002200:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d023      	beq.n	8002254 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
 8002214:	e01e      	b.n	8002254 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10f      	bne.n	8002244 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0210 	bic.w	r2, r2, #16
 8002232:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	2b00      	cmp	r3, #0
 800225a:	d032      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d022      	beq.n	80022ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2205      	movs	r2, #5
 800226c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	3301      	adds	r3, #1
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	429a      	cmp	r2, r3
 800228a:	d307      	bcc.n	800229c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f2      	bne.n	8002280 <HAL_DMA_IRQHandler+0x2cc>
 800229a:	e000      	b.n	800229e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800229c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4798      	blx	r3
 80022be:	e000      	b.n	80022c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022c0:	bf00      	nop
    }
  }
}
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b40      	cmp	r3, #64	@ 0x40
 80022f4:	d108      	bne.n	8002308 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002306:	e007      	b.n	8002318 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	60da      	str	r2, [r3, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	3b10      	subs	r3, #16
 8002334:	4a14      	ldr	r2, [pc, #80]	@ (8002388 <DMA_CalcBaseAndBitshift+0x64>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800233e:	4a13      	ldr	r2, [pc, #76]	@ (800238c <DMA_CalcBaseAndBitshift+0x68>)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b03      	cmp	r3, #3
 8002350:	d909      	bls.n	8002366 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	1d1a      	adds	r2, r3, #4
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	659a      	str	r2, [r3, #88]	@ 0x58
 8002364:	e007      	b.n	8002376 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	aaaaaaab 	.word	0xaaaaaaab
 800238c:	08009a24 	.word	0x08009a24

08002390 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11f      	bne.n	80023ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d856      	bhi.n	800245e <DMA_CheckFifoParam+0xce>
 80023b0:	a201      	add	r2, pc, #4	@ (adr r2, 80023b8 <DMA_CheckFifoParam+0x28>)
 80023b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b6:	bf00      	nop
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023db 	.word	0x080023db
 80023c0:	080023c9 	.word	0x080023c9
 80023c4:	0800245f 	.word	0x0800245f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d046      	beq.n	8002462 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d8:	e043      	b.n	8002462 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023e2:	d140      	bne.n	8002466 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e8:	e03d      	b.n	8002466 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023f2:	d121      	bne.n	8002438 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d837      	bhi.n	800246a <DMA_CheckFifoParam+0xda>
 80023fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002400 <DMA_CheckFifoParam+0x70>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002411 	.word	0x08002411
 8002404:	08002417 	.word	0x08002417
 8002408:	08002411 	.word	0x08002411
 800240c:	08002429 	.word	0x08002429
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e030      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d025      	beq.n	800246e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002426:	e022      	b.n	800246e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002430:	d11f      	bne.n	8002472 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002436:	e01c      	b.n	8002472 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d903      	bls.n	8002446 <DMA_CheckFifoParam+0xb6>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d003      	beq.n	800244c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002444:	e018      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
      break;
 800244a:	e015      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00e      	beq.n	8002476 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      break;
 800245c:	e00b      	b.n	8002476 <DMA_CheckFifoParam+0xe6>
      break;
 800245e:	bf00      	nop
 8002460:	e00a      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;
 8002462:	bf00      	nop
 8002464:	e008      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;
 8002466:	bf00      	nop
 8002468:	e006      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;
 800246a:	bf00      	nop
 800246c:	e004      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
 8002470:	e002      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;   
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
    }
  } 
  
  return status; 
 8002478:	7bfb      	ldrb	r3, [r7, #15]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	@ 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e159      	b.n	8002758 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	429a      	cmp	r2, r3
 80024be:	f040 8148 	bne.w	8002752 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d005      	beq.n	80024da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d130      	bne.n	800253c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002510:	2201      	movs	r2, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 0201 	and.w	r2, r3, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b03      	cmp	r3, #3
 8002546:	d017      	beq.n	8002578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d123      	bne.n	80025cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	08da      	lsrs	r2, r3, #3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3208      	adds	r2, #8
 800258c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0203 	and.w	r2, r3, #3
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a2 	beq.w	8002752 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b57      	ldr	r3, [pc, #348]	@ (8002770 <HAL_GPIO_Init+0x2e8>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	4a56      	ldr	r2, [pc, #344]	@ (8002770 <HAL_GPIO_Init+0x2e8>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261c:	6453      	str	r3, [r2, #68]	@ 0x44
 800261e:	4b54      	ldr	r3, [pc, #336]	@ (8002770 <HAL_GPIO_Init+0x2e8>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262a:	4a52      	ldr	r2, [pc, #328]	@ (8002774 <HAL_GPIO_Init+0x2ec>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a49      	ldr	r2, [pc, #292]	@ (8002778 <HAL_GPIO_Init+0x2f0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d019      	beq.n	800268a <HAL_GPIO_Init+0x202>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a48      	ldr	r2, [pc, #288]	@ (800277c <HAL_GPIO_Init+0x2f4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_GPIO_Init+0x1fe>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a47      	ldr	r2, [pc, #284]	@ (8002780 <HAL_GPIO_Init+0x2f8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00d      	beq.n	8002682 <HAL_GPIO_Init+0x1fa>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a46      	ldr	r2, [pc, #280]	@ (8002784 <HAL_GPIO_Init+0x2fc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <HAL_GPIO_Init+0x1f6>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a45      	ldr	r2, [pc, #276]	@ (8002788 <HAL_GPIO_Init+0x300>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_GPIO_Init+0x1f2>
 8002676:	2304      	movs	r3, #4
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x204>
 800267a:	2307      	movs	r3, #7
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x204>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x204>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x204>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x204>
 800268a:	2300      	movs	r3, #0
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	f002 0203 	and.w	r2, r2, #3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800269c:	4935      	ldr	r1, [pc, #212]	@ (8002774 <HAL_GPIO_Init+0x2ec>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026aa:	4b38      	ldr	r3, [pc, #224]	@ (800278c <HAL_GPIO_Init+0x304>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ce:	4a2f      	ldr	r2, [pc, #188]	@ (800278c <HAL_GPIO_Init+0x304>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d4:	4b2d      	ldr	r3, [pc, #180]	@ (800278c <HAL_GPIO_Init+0x304>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f8:	4a24      	ldr	r2, [pc, #144]	@ (800278c <HAL_GPIO_Init+0x304>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026fe:	4b23      	ldr	r3, [pc, #140]	@ (800278c <HAL_GPIO_Init+0x304>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002722:	4a1a      	ldr	r2, [pc, #104]	@ (800278c <HAL_GPIO_Init+0x304>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002728:	4b18      	ldr	r3, [pc, #96]	@ (800278c <HAL_GPIO_Init+0x304>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800274c:	4a0f      	ldr	r2, [pc, #60]	@ (800278c <HAL_GPIO_Init+0x304>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3301      	adds	r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	f67f aea2 	bls.w	80024a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40013800 	.word	0x40013800
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40013c00 	.word	0x40013c00

08002790 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af02      	add	r7, sp, #8
 8002796:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e101      	b.n	80029a6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f006 fda5 	bl	800930c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2203      	movs	r2, #3
 80027c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027d0:	d102      	bne.n	80027d8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 f9a8 	bl	8005b32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7c1a      	ldrb	r2, [r3, #16]
 80027ea:	f88d 2000 	strb.w	r2, [sp]
 80027ee:	3304      	adds	r3, #4
 80027f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f2:	f003 f887 	bl	8005904 <USB_CoreInit>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0ce      	b.n	80029a6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f003 f9a0 	bl	8005b54 <USB_SetCurrentMode>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0bf      	b.n	80029a6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	e04a      	b.n	80028c2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3315      	adds	r3, #21
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	3314      	adds	r3, #20
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	b298      	uxth	r0, r3
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	332e      	adds	r3, #46	@ 0x2e
 8002868:	4602      	mov	r2, r0
 800286a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3318      	adds	r3, #24
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	331c      	adds	r3, #28
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	3320      	adds	r3, #32
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3324      	adds	r3, #36	@ 0x24
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	3301      	adds	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	791b      	ldrb	r3, [r3, #4]
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3af      	bcc.n	800282c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e044      	b.n	800295c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	3301      	adds	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	791b      	ldrb	r3, [r3, #4]
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	429a      	cmp	r2, r3
 8002964:	d3b5      	bcc.n	80028d2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7c1a      	ldrb	r2, [r3, #16]
 800296e:	f88d 2000 	strb.w	r2, [sp]
 8002972:	3304      	adds	r3, #4
 8002974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002976:	f003 f939 	bl	8005bec <USB_DevInit>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e00c      	b.n	80029a6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 f97d 	bl	8006c9e <USB_DevDisconnect>

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_PCD_Start+0x1c>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e022      	b.n	8002a10 <HAL_PCD_Start+0x62>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 f88a 	bl	8005b10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f004 f92b 	bl	8006c5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b08d      	sub	sp, #52	@ 0x34
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 f9e9 	bl	8006e06 <USB_GetMode>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 848c 	bne.w	8003354 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 f94d 	bl	8006ce0 <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8482 	beq.w	8003352 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 f93a 	bl	8006ce0 <USB_ReadInterrupts>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d107      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f002 0202 	and.w	r2, r2, #2
 8002a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 f928 	bl	8006ce0 <USB_ReadInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d161      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699a      	ldr	r2, [r3, #24]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0210 	bic.w	r2, r2, #16
 8002aa8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f003 020f 	and.w	r2, r3, #15
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	0c5b      	lsrs	r3, r3, #17
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d124      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d035      	beq.n	8002b4e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002aec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	6a38      	ldr	r0, [r7, #32]
 8002af6:	f003 ff5f 	bl	80069b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b06:	441a      	add	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b18:	441a      	add	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	615a      	str	r2, [r3, #20]
 8002b1e:	e016      	b.n	8002b4e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	0c5b      	lsrs	r3, r3, #17
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d110      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b32:	2208      	movs	r2, #8
 8002b34:	4619      	mov	r1, r3
 8002b36:	6a38      	ldr	r0, [r7, #32]
 8002b38:	f003 ff3e 	bl	80069b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b48:	441a      	add	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0210 	orr.w	r2, r2, #16
 8002b5c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 f8bc 	bl	8006ce0 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b6e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b72:	f040 80a7 	bne.w	8002cc4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f004 f8c1 	bl	8006d06 <USB_ReadDevAllOutEpInterrupt>
 8002b84:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b86:	e099      	b.n	8002cbc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 808e 	beq.w	8002cb0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f004 f8e5 	bl	8006d6e <USB_ReadDevOutEPInterrupt>
 8002ba4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00c      	beq.n	8002bca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fea1 	bl	800390c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00c      	beq.n	8002bee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be0:	461a      	mov	r2, r3
 8002be2:	2308      	movs	r3, #8
 8002be4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002be6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 ff77 	bl	8003adc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c04:	461a      	mov	r2, r3
 8002c06:	2310      	movs	r3, #16
 8002c08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d030      	beq.n	8002c76 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1c:	2b80      	cmp	r3, #128	@ 0x80
 8002c1e:	d109      	bne.n	8002c34 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c32:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	3304      	adds	r3, #4
 8002c48:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	78db      	ldrb	r3, [r3, #3]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d108      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f006 fc50 	bl	8009504 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c70:	461a      	mov	r2, r3
 8002c72:	2302      	movs	r3, #2
 8002c74:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2320      	movs	r3, #32
 8002c90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d009      	beq.n	8002cb0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f47f af62 	bne.w	8002b88 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 f809 	bl	8006ce0 <USB_ReadInterrupts>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cd8:	f040 80db 	bne.w	8002e92 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 f82a 	bl	8006d3a <USB_ReadDevAllInEpInterrupt>
 8002ce6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002cec:	e0cd      	b.n	8002e8a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80c2 	beq.w	8002e7e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 f850 	bl	8006daa <USB_ReadDevInEPInterrupt>
 8002d0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d057      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69f9      	ldr	r1, [r7, #28]
 8002d32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d36:	4013      	ands	r3, r2
 8002d38:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d46:	461a      	mov	r2, r3
 8002d48:	2301      	movs	r3, #1
 8002d4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	799b      	ldrb	r3, [r3, #6]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d132      	bne.n	8002dba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3320      	adds	r3, #32
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4403      	add	r3, r0
 8002d74:	331c      	adds	r3, #28
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4419      	add	r1, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4403      	add	r3, r0
 8002d88:	3320      	adds	r3, #32
 8002d8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d113      	bne.n	8002dba <HAL_PCD_IRQHandler+0x3a2>
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3324      	adds	r3, #36	@ 0x24
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d108      	bne.n	8002dba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002db2:	461a      	mov	r2, r3
 8002db4:	2101      	movs	r1, #1
 8002db6:	f004 f857 	bl	8006e68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f006 fb24 	bl	800940e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2308      	movs	r3, #8
 8002de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2310      	movs	r3, #16
 8002dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e14:	461a      	mov	r2, r3
 8002e16:	2340      	movs	r3, #64	@ 0x40
 8002e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d023      	beq.n	8002e6c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e26:	6a38      	ldr	r0, [r7, #32]
 8002e28:	f003 f844 	bl	8005eb4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	3310      	adds	r3, #16
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	78db      	ldrb	r3, [r3, #3]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d108      	bne.n	8002e5a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	4619      	mov	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f006 fb67 	bl	8009528 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e66:	461a      	mov	r2, r3
 8002e68:	2302      	movs	r3, #2
 8002e6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fcbb 	bl	80037f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	3301      	adds	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f47f af2e 	bne.w	8002cee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 ff22 	bl	8006ce0 <USB_ReadInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ea6:	d122      	bne.n	8002eee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ece:	2100      	movs	r1, #0
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fea1 	bl	8003c18 <HAL_PCDEx_LPM_Callback>
 8002ed6:	e002      	b.n	8002ede <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f006 fb05 	bl	80094e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fef4 	bl	8006ce0 <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f02:	d112      	bne.n	8002f2a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d102      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f006 fac1 	bl	800949c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f28:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 fed6 	bl	8006ce0 <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f3e:	f040 80b7 	bne.w	80030b0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2110      	movs	r1, #16
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f002 ffa9 	bl	8005eb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f66:	e046      	b.n	8002ff6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f74:	461a      	mov	r2, r3
 8002f76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f7a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f8c:	0151      	lsls	r1, r2, #5
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	440a      	add	r2, r1
 8002f92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc0:	0151      	lsls	r1, r2, #5
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	440a      	add	r2, r1
 8002fc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fe0:	0151      	lsls	r1, r2, #5
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	440a      	add	r2, r1
 8002fe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	791b      	ldrb	r3, [r3, #4]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d3b2      	bcc.n	8002f68 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003010:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003014:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7bdb      	ldrb	r3, [r3, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800302e:	f043 030b 	orr.w	r3, r3, #11
 8003032:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003044:	f043 030b 	orr.w	r3, r3, #11
 8003048:	6453      	str	r3, [r2, #68]	@ 0x44
 800304a:	e015      	b.n	8003078 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800305a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800305e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003062:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003072:	f043 030b 	orr.w	r3, r3, #11
 8003076:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003086:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800308a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800309a:	461a      	mov	r2, r3
 800309c:	f003 fee4 	bl	8006e68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80030ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 fe13 	bl	8006ce0 <USB_ReadInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030c4:	d123      	bne.n	800310e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 fea9 	bl	8006e22 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f002 ff66 	bl	8005fa6 <USB_GetDevSpeed>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681c      	ldr	r4, [r3, #0]
 80030e6:	f001 f9c7 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 80030ea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030f0:	461a      	mov	r2, r3
 80030f2:	4620      	mov	r0, r4
 80030f4:	f002 fc6a 	bl	80059cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f006 f9b0 	bl	800945e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800310c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fde4 	bl	8006ce0 <USB_ReadInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b08      	cmp	r3, #8
 8003120:	d10a      	bne.n	8003138 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f006 f98d 	bl	8009442 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f002 0208 	and.w	r2, r2, #8
 8003136:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fdcf 	bl	8006ce0 <USB_ReadInterrupts>
 8003142:	4603      	mov	r3, r0
 8003144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003148:	2b80      	cmp	r3, #128	@ 0x80
 800314a:	d123      	bne.n	8003194 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003158:	2301      	movs	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
 800315c:	e014      	b.n	8003188 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d105      	bne.n	8003182 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	b2db      	uxtb	r3, r3
 800317a:	4619      	mov	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fb08 	bl	8003792 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	3301      	adds	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	791b      	ldrb	r3, [r3, #4]
 800318c:	461a      	mov	r2, r3
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	4293      	cmp	r3, r2
 8003192:	d3e4      	bcc.n	800315e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fda1 	bl	8006ce0 <USB_ReadInterrupts>
 800319e:	4603      	mov	r3, r0
 80031a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031a8:	d13c      	bne.n	8003224 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031aa:	2301      	movs	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ae:	e02b      	b.n	8003208 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	3318      	adds	r3, #24
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d115      	bne.n	8003202 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031d8:	2b00      	cmp	r3, #0
 80031da:	da12      	bge.n	8003202 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	3317      	adds	r3, #23
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fac8 	bl	8003792 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	3301      	adds	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	791b      	ldrb	r3, [r3, #4]
 800320c:	461a      	mov	r2, r3
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	4293      	cmp	r3, r2
 8003212:	d3cd      	bcc.n	80031b0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f003 fd59 	bl	8006ce0 <USB_ReadInterrupts>
 800322e:	4603      	mov	r3, r0
 8003230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003234:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003238:	d156      	bne.n	80032e8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800323a:	2301      	movs	r3, #1
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
 800323e:	e045      	b.n	80032cc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d12e      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003268:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800326a:	2b00      	cmp	r3, #0
 800326c:	da2b      	bge.n	80032c6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800327a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800327e:	429a      	cmp	r2, r3
 8003280:	d121      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032c2:	6053      	str	r3, [r2, #4]
            break;
 80032c4:	e008      	b.n	80032d8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	3301      	adds	r3, #1
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	791b      	ldrb	r3, [r3, #4]
 80032d0:	461a      	mov	r2, r3
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d3b3      	bcc.n	8003240 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80032e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 fcf7 	bl	8006ce0 <USB_ReadInterrupts>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fc:	d10a      	bne.n	8003314 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f006 f924 	bl	800954c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f003 fce1 	bl	8006ce0 <USB_ReadInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b04      	cmp	r3, #4
 8003326:	d115      	bne.n	8003354 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f006 f914 	bl	8009568 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	e000      	b.n	8003354 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003352:	bf00      	nop
    }
  }
}
 8003354:	3734      	adds	r7, #52	@ 0x34
 8003356:	46bd      	mov	sp, r7
 8003358:	bd90      	pop	{r4, r7, pc}

0800335a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_PCD_SetAddress+0x1a>
 8003370:	2302      	movs	r3, #2
 8003372:	e012      	b.n	800339a <HAL_PCD_SetAddress+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f003 fc40 	bl	8006c10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	4608      	mov	r0, r1
 80033ac:	4611      	mov	r1, r2
 80033ae:	461a      	mov	r2, r3
 80033b0:	4603      	mov	r3, r0
 80033b2:	70fb      	strb	r3, [r7, #3]
 80033b4:	460b      	mov	r3, r1
 80033b6:	803b      	strh	r3, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	da0f      	bge.n	80033e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	f003 020f 	and.w	r2, r3, #15
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	3310      	adds	r3, #16
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	4413      	add	r3, r2
 80033dc:	3304      	adds	r3, #4
 80033de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	705a      	strb	r2, [r3, #1]
 80033e6:	e00f      	b.n	8003408 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 020f 	and.w	r2, r3, #15
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	3304      	adds	r3, #4
 8003400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	b2da      	uxtb	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003414:	883a      	ldrh	r2, [r7, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	78ba      	ldrb	r2, [r7, #2]
 800341e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	785b      	ldrb	r3, [r3, #1]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003432:	78bb      	ldrb	r3, [r7, #2]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d102      	bne.n	800343e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_PCD_EP_Open+0xaa>
 8003448:	2302      	movs	r3, #2
 800344a:	e00e      	b.n	800346a <HAL_PCD_EP_Open+0xc8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68f9      	ldr	r1, [r7, #12]
 800345a:	4618      	mov	r0, r3
 800345c:	f002 fdc8 	bl	8005ff0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003468:	7afb      	ldrb	r3, [r7, #11]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800347e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003482:	2b00      	cmp	r3, #0
 8003484:	da0f      	bge.n	80034a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	f003 020f 	and.w	r2, r3, #15
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	3310      	adds	r3, #16
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	3304      	adds	r3, #4
 800349c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	705a      	strb	r2, [r3, #1]
 80034a4:	e00f      	b.n	80034c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	f003 020f 	and.w	r2, r3, #15
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	3304      	adds	r3, #4
 80034be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_PCD_EP_Close+0x6e>
 80034dc:	2302      	movs	r3, #2
 80034de:	e00e      	b.n	80034fe <HAL_PCD_EP_Close+0x8c>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f002 fe06 	bl	8006100 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	460b      	mov	r3, r1
 8003514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003516:	7afb      	ldrb	r3, [r7, #11]
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2200      	movs	r2, #0
 8003540:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003548:	7afb      	ldrb	r3, [r7, #11]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	b2da      	uxtb	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	799b      	ldrb	r3, [r3, #6]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d102      	bne.n	8003562 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	799b      	ldrb	r3, [r3, #6]
 800356a:	461a      	mov	r2, r3
 800356c:	6979      	ldr	r1, [r7, #20]
 800356e:	f002 fea3 	bl	80062b8 <USB_EPStartXfer>

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	f003 020f 	and.w	r2, r3, #15
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	460b      	mov	r3, r1
 80035ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035bc:	7afb      	ldrb	r3, [r7, #11]
 80035be:	f003 020f 	and.w	r2, r3, #15
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	3310      	adds	r3, #16
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	3304      	adds	r3, #4
 80035d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2200      	movs	r2, #0
 80035e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2201      	movs	r2, #1
 80035ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	799b      	ldrb	r3, [r3, #6]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d102      	bne.n	8003606 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	799b      	ldrb	r3, [r3, #6]
 800360e:	461a      	mov	r2, r3
 8003610:	6979      	ldr	r1, [r7, #20]
 8003612:	f002 fe51 	bl	80062b8 <USB_EPStartXfer>

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	7912      	ldrb	r2, [r2, #4]
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e04f      	b.n	80036de <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800363e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003642:	2b00      	cmp	r3, #0
 8003644:	da0f      	bge.n	8003666 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	f003 020f 	and.w	r2, r3, #15
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	3310      	adds	r3, #16
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	705a      	strb	r2, [r3, #1]
 8003664:	e00d      	b.n	8003682 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	3304      	adds	r3, #4
 800367a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	b2da      	uxtb	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_EP_SetStall+0x82>
 800369e:	2302      	movs	r3, #2
 80036a0:	e01d      	b.n	80036de <HAL_PCD_EP_SetStall+0xbe>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68f9      	ldr	r1, [r7, #12]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f003 f9d9 	bl	8006a68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7999      	ldrb	r1, [r3, #6]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036ce:	461a      	mov	r2, r3
 80036d0:	f003 fbca 	bl	8006e68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	7912      	ldrb	r2, [r2, #4]
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e042      	b.n	800378a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003708:	2b00      	cmp	r3, #0
 800370a:	da0f      	bge.n	800372c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	3310      	adds	r3, #16
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	705a      	strb	r2, [r3, #1]
 800372a:	e00f      	b.n	800374c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	f003 020f 	and.w	r2, r3, #15
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	3304      	adds	r3, #4
 8003744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_PCD_EP_ClrStall+0x86>
 8003768:	2302      	movs	r3, #2
 800376a:	e00e      	b.n	800378a <HAL_PCD_EP_ClrStall+0xa4>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68f9      	ldr	r1, [r7, #12]
 800377a:	4618      	mov	r0, r3
 800377c:	f003 f9e2 	bl	8006b44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800379e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da0c      	bge.n	80037c0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f003 020f 	and.w	r2, r3, #15
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	3310      	adds	r3, #16
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	3304      	adds	r3, #4
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e00c      	b.n	80037da <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	f003 020f 	and.w	r2, r3, #15
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	3304      	adds	r3, #4
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f003 f801 	bl	80067e8 <USB_EPStopXfer>
 80037e6:	4603      	mov	r3, r0
 80037e8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80037ea:	7afb      	ldrb	r3, [r7, #11]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	@ 0x28
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	3310      	adds	r3, #16
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	3304      	adds	r3, #4
 800381a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	429a      	cmp	r2, r3
 8003826:	d901      	bls.n	800382c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e06b      	b.n	8003904 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	429a      	cmp	r2, r3
 8003840:	d902      	bls.n	8003848 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	3303      	adds	r3, #3
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003850:	e02a      	b.n	80038a8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	429a      	cmp	r2, r3
 8003866:	d902      	bls.n	800386e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3303      	adds	r3, #3
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	68d9      	ldr	r1, [r3, #12]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4603      	mov	r3, r0
 800388a:	6978      	ldr	r0, [r7, #20]
 800388c:	f003 f856 	bl	800693c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	441a      	add	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d809      	bhi.n	80038d2 <PCD_WriteEmptyTxFifo+0xde>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d203      	bcs.n	80038d2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1bf      	bne.n	8003852 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d811      	bhi.n	8003902 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	2201      	movs	r2, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	6939      	ldr	r1, [r7, #16]
 80038fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038fe:	4013      	ands	r3, r2
 8003900:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	333c      	adds	r3, #60	@ 0x3c
 8003924:	3304      	adds	r3, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	799b      	ldrb	r3, [r3, #6]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d17b      	bne.n	8003a3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d015      	beq.n	8003978 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4a61      	ldr	r2, [pc, #388]	@ (8003ad4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	f240 80b9 	bls.w	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80b3 	beq.w	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396e:	461a      	mov	r2, r3
 8003970:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003974:	6093      	str	r3, [r2, #8]
 8003976:	e0a7      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800398e:	461a      	mov	r2, r3
 8003990:	2320      	movs	r3, #32
 8003992:	6093      	str	r3, [r2, #8]
 8003994:	e098      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	f040 8093 	bne.w	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ad4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d90f      	bls.n	80039ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039c6:	6093      	str	r3, [r2, #8]
 80039c8:	e07e      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4413      	add	r3, r2
 80039dc:	3304      	adds	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	0159      	lsls	r1, r3, #5
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	440b      	add	r3, r1
 80039ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f6:	1ad2      	subs	r2, r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d114      	bne.n	8003a2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a14:	461a      	mov	r2, r3
 8003a16:	2101      	movs	r1, #1
 8003a18:	f003 fa26 	bl	8006e68 <USB_EP0_OutStart>
 8003a1c:	e006      	b.n	8003a2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	441a      	add	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f005 fcd0 	bl	80093d8 <HAL_PCD_DataOutStageCallback>
 8003a38:	e046      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	4a26      	ldr	r2, [pc, #152]	@ (8003ad8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d124      	bne.n	8003a8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a5e:	6093      	str	r3, [r2, #8]
 8003a60:	e032      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2320      	movs	r3, #32
 8003a7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4619      	mov	r1, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f005 fca7 	bl	80093d8 <HAL_PCD_DataOutStageCallback>
 8003a8a:	e01d      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d114      	bne.n	8003abc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d108      	bne.n	8003abc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f003 f9d6 	bl	8006e68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f005 fc88 	bl	80093d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	4f54300a 	.word	0x4f54300a
 8003ad8:	4f54310a 	.word	0x4f54310a

08003adc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	333c      	adds	r3, #60	@ 0x3c
 8003af4:	3304      	adds	r3, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a15      	ldr	r2, [pc, #84]	@ (8003b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d90e      	bls.n	8003b30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d009      	beq.n	8003b30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f005 fc3f 	bl	80093b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	@ (8003b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d90c      	bls.n	8003b58 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	799b      	ldrb	r3, [r3, #6]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d108      	bne.n	8003b58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b50:	461a      	mov	r2, r3
 8003b52:	2101      	movs	r1, #1
 8003b54:	f003 f988 	bl	8006e68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	4f54300a 	.word	0x4f54300a

08003b68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
 8003b74:	4613      	mov	r3, r2
 8003b76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d107      	bne.n	8003b96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b86:	883b      	ldrh	r3, [r7, #0]
 8003b88:	0419      	lsls	r1, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b94:	e028      	b.n	8003be8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e00d      	b.n	8003bc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	3340      	adds	r3, #64	@ 0x40
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d3ec      	bcc.n	8003baa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003bd0:	883b      	ldrh	r3, [r7, #0]
 8003bd2:	0418      	lsls	r0, r3, #16
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	4302      	orrs	r2, r0
 8003be0:	3340      	adds	r3, #64	@ 0x40
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e267      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d075      	beq.n	8003d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4e:	4b88      	ldr	r3, [pc, #544]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d00c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5a:	4b85      	ldr	r3, [pc, #532]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d112      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c66:	4b82      	ldr	r3, [pc, #520]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c72:	d10b      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	4b7e      	ldr	r3, [pc, #504]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x108>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d157      	bne.n	8003d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e242      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x74>
 8003c96:	4b76      	ldr	r3, [pc, #472]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a75      	ldr	r2, [pc, #468]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e01d      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b70      	ldr	r3, [pc, #448]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6f      	ldr	r2, [pc, #444]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b6d      	ldr	r3, [pc, #436]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a6c      	ldr	r2, [pc, #432]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	4b69      	ldr	r3, [pc, #420]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a68      	ldr	r2, [pc, #416]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b66      	ldr	r3, [pc, #408]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a65      	ldr	r2, [pc, #404]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fa60 	bl	80011ac <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fd fa5c 	bl	80011ac <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	@ 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e207      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b5b      	ldr	r3, [pc, #364]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xc0>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fd fa4c 	bl	80011ac <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d18:	f7fd fa48 	bl	80011ac <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	@ 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1f3      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	4b51      	ldr	r3, [pc, #324]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0xe8>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d063      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d46:	4b4a      	ldr	r3, [pc, #296]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d52:	4b47      	ldr	r3, [pc, #284]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d11c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5e:	4b44      	ldr	r3, [pc, #272]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d116      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6a:	4b41      	ldr	r3, [pc, #260]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e1c7      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d82:	4b3b      	ldr	r3, [pc, #236]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4937      	ldr	r1, [pc, #220]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	e03a      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da0:	4b34      	ldr	r3, [pc, #208]	@ (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fd fa01 	bl	80011ac <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dae:	f7fd f9fd 	bl	80011ac <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e1a8      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dcc:	4b28      	ldr	r3, [pc, #160]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4925      	ldr	r1, [pc, #148]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]
 8003de0:	e015      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de2:	4b24      	ldr	r3, [pc, #144]	@ (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fd f9e0 	bl	80011ac <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df0:	f7fd f9dc 	bl	80011ac <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e187      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	4b1b      	ldr	r3, [pc, #108]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d036      	beq.n	8003e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d016      	beq.n	8003e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e22:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd f9c0 	bl	80011ac <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e30:	f7fd f9bc 	bl	80011ac <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e167      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	4b0b      	ldr	r3, [pc, #44]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x200>
 8003e4e:	e01b      	b.n	8003e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e50:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fd f9a9 	bl	80011ac <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	e00e      	b.n	8003e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5e:	f7fd f9a5 	bl	80011ac <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d907      	bls.n	8003e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e150      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003e70:	40023800 	.word	0x40023800
 8003e74:	42470000 	.word	0x42470000
 8003e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	4b88      	ldr	r3, [pc, #544]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ea      	bne.n	8003e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8097 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9a:	4b81      	ldr	r3, [pc, #516]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	4b7d      	ldr	r3, [pc, #500]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	4a7c      	ldr	r2, [pc, #496]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	4b77      	ldr	r3, [pc, #476]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d118      	bne.n	8003f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed2:	4b74      	ldr	r3, [pc, #464]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a73      	ldr	r2, [pc, #460]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ede:	f7fd f965 	bl	80011ac <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee6:	f7fd f961 	bl	80011ac <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e10c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_OscConfig+0x2ea>
 8003f0c:	4b64      	ldr	r3, [pc, #400]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f10:	4a63      	ldr	r2, [pc, #396]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f18:	e01c      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x30c>
 8003f22:	4b5f      	ldr	r3, [pc, #380]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f26:	4a5e      	ldr	r2, [pc, #376]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f32:	4a5b      	ldr	r2, [pc, #364]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f3c:	4b58      	ldr	r3, [pc, #352]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f40:	4a57      	ldr	r2, [pc, #348]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f48:	4b55      	ldr	r3, [pc, #340]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	4a54      	ldr	r2, [pc, #336]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	f023 0304 	bic.w	r3, r3, #4
 8003f52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fd f926 	bl	80011ac <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fd f922 	bl	80011ac <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0cb      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	4b49      	ldr	r3, [pc, #292]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ee      	beq.n	8003f64 <HAL_RCC_OscConfig+0x334>
 8003f86:	e014      	b.n	8003fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f88:	f7fd f910 	bl	80011ac <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fd f90c 	bl	80011ac <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0b5      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ee      	bne.n	8003f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb8:	4b39      	ldr	r3, [pc, #228]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	4a38      	ldr	r2, [pc, #224]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a1 	beq.w	8004110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fce:	4b34      	ldr	r3, [pc, #208]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d05c      	beq.n	8004094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d141      	bne.n	8004066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b31      	ldr	r3, [pc, #196]	@ (80040a8 <HAL_RCC_OscConfig+0x478>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fd f8e0 	bl	80011ac <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd f8dc 	bl	80011ac <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e087      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	4b27      	ldr	r3, [pc, #156]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	019b      	lsls	r3, r3, #6
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	3b01      	subs	r3, #1
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	491b      	ldr	r1, [pc, #108]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004038:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <HAL_RCC_OscConfig+0x478>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fd f8b5 	bl	80011ac <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004046:	f7fd f8b1 	bl	80011ac <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e05c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x416>
 8004064:	e054      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b10      	ldr	r3, [pc, #64]	@ (80040a8 <HAL_RCC_OscConfig+0x478>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fd f89e 	bl	80011ac <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fd f89a 	bl	80011ac <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e045      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x444>
 8004092:	e03d      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e038      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40007000 	.word	0x40007000
 80040a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ac:	4b1b      	ldr	r3, [pc, #108]	@ (800411c <HAL_RCC_OscConfig+0x4ec>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d028      	beq.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d121      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d11a      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d111      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	3b01      	subs	r3, #1
 80040f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0cc      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b68      	ldr	r3, [pc, #416]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d90c      	bls.n	800415c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b65      	ldr	r3, [pc, #404]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b63      	ldr	r3, [pc, #396]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004174:	4b59      	ldr	r3, [pc, #356]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a58      	ldr	r2, [pc, #352]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800417e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800418c:	4b53      	ldr	r3, [pc, #332]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a52      	ldr	r2, [pc, #328]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b50      	ldr	r3, [pc, #320]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d044      	beq.n	8004240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b47      	ldr	r3, [pc, #284]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d119      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d003      	beq.n	80041de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b3f      	ldr	r3, [pc, #252]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e06f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ee:	4b3b      	ldr	r3, [pc, #236]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e067      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fe:	4b37      	ldr	r3, [pc, #220]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4934      	ldr	r1, [pc, #208]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7fc ffcc 	bl	80011ac <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fc ffc8 	bl	80011ac <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e04f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b25      	ldr	r3, [pc, #148]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d20c      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b22      	ldr	r3, [pc, #136]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b20      	ldr	r3, [pc, #128]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004292:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042a6:	f000 f821 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	@ (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042c2:	4b09      	ldr	r3, [pc, #36]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc ff2c 	bl	8001124 <HAL_InitTick>

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023c00 	.word	0x40023c00
 80042dc:	40023800 	.word	0x40023800
 80042e0:	08009a14 	.word	0x08009a14
 80042e4:	20000004 	.word	0x20000004
 80042e8:	20000008 	.word	0x20000008

080042ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b090      	sub	sp, #64	@ 0x40
 80042f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042f8:	2300      	movs	r3, #0
 80042fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042fc:	2300      	movs	r3, #0
 80042fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004304:	4b59      	ldr	r3, [pc, #356]	@ (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d00d      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x40>
 8004310:	2b08      	cmp	r3, #8
 8004312:	f200 80a1 	bhi.w	8004458 <HAL_RCC_GetSysClockFreq+0x16c>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0x34>
 800431a:	2b04      	cmp	r3, #4
 800431c:	d003      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x3a>
 800431e:	e09b      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b53      	ldr	r3, [pc, #332]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x184>)
 8004322:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004324:	e09b      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004326:	4b53      	ldr	r3, [pc, #332]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x188>)
 8004328:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800432a:	e098      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800432c:	4b4f      	ldr	r3, [pc, #316]	@ (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004334:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004336:	4b4d      	ldr	r3, [pc, #308]	@ (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d028      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b4a      	ldr	r3, [pc, #296]	@ (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	2200      	movs	r2, #0
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	627a      	str	r2, [r7, #36]	@ 0x24
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004354:	2100      	movs	r1, #0
 8004356:	4b47      	ldr	r3, [pc, #284]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x188>)
 8004358:	fb03 f201 	mul.w	r2, r3, r1
 800435c:	2300      	movs	r3, #0
 800435e:	fb00 f303 	mul.w	r3, r0, r3
 8004362:	4413      	add	r3, r2
 8004364:	4a43      	ldr	r2, [pc, #268]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x188>)
 8004366:	fba0 1202 	umull	r1, r2, r0, r2
 800436a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800436c:	460a      	mov	r2, r1
 800436e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004372:	4413      	add	r3, r2
 8004374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004378:	2200      	movs	r2, #0
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	61fa      	str	r2, [r7, #28]
 800437e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004386:	f7fb ff25 	bl	80001d4 <__aeabi_uldivmod>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4613      	mov	r3, r2
 8004390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004392:	e053      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004394:	4b35      	ldr	r3, [pc, #212]	@ (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	099b      	lsrs	r3, r3, #6
 800439a:	2200      	movs	r2, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	617a      	str	r2, [r7, #20]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043a6:	f04f 0b00 	mov.w	fp, #0
 80043aa:	4652      	mov	r2, sl
 80043ac:	465b      	mov	r3, fp
 80043ae:	f04f 0000 	mov.w	r0, #0
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	0159      	lsls	r1, r3, #5
 80043b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043bc:	0150      	lsls	r0, r2, #5
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	ebb2 080a 	subs.w	r8, r2, sl
 80043c6:	eb63 090b 	sbc.w	r9, r3, fp
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043de:	ebb2 0408 	subs.w	r4, r2, r8
 80043e2:	eb63 0509 	sbc.w	r5, r3, r9
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	00eb      	lsls	r3, r5, #3
 80043f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f4:	00e2      	lsls	r2, r4, #3
 80043f6:	4614      	mov	r4, r2
 80043f8:	461d      	mov	r5, r3
 80043fa:	eb14 030a 	adds.w	r3, r4, sl
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	eb45 030b 	adc.w	r3, r5, fp
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004412:	4629      	mov	r1, r5
 8004414:	028b      	lsls	r3, r1, #10
 8004416:	4621      	mov	r1, r4
 8004418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800441c:	4621      	mov	r1, r4
 800441e:	028a      	lsls	r2, r1, #10
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004426:	2200      	movs	r2, #0
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	60fa      	str	r2, [r7, #12]
 800442c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004430:	f7fb fed0 	bl	80001d4 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4613      	mov	r3, r2
 800443a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800443c:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <HAL_RCC_GetSysClockFreq+0x180>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	3301      	adds	r3, #1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800444c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800444e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004456:	e002      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x184>)
 800445a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800445c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004460:	4618      	mov	r0, r3
 8004462:	3740      	adds	r7, #64	@ 0x40
 8004464:	46bd      	mov	sp, r7
 8004466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800
 8004470:	00f42400 	.word	0x00f42400
 8004474:	017d7840 	.word	0x017d7840

08004478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800447c:	4b03      	ldr	r3, [pc, #12]	@ (800448c <HAL_RCC_GetHCLKFreq+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000004 	.word	0x20000004

08004490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e041      	b.n	8004526 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc fc9c 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4619      	mov	r1, r3
 80044ce:	4610      	mov	r0, r2
 80044d0:	f000 fe2e 	bl	8005130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e041      	b.n	80045c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f839 	bl	80045cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3304      	adds	r3, #4
 800456a:	4619      	mov	r1, r3
 800456c:	4610      	mov	r0, r2
 800456e:	f000 fddf 	bl	8005130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <HAL_TIM_PWM_Start+0x24>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e022      	b.n	800464a <HAL_TIM_PWM_Start+0x6a>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b04      	cmp	r3, #4
 8004608:	d109      	bne.n	800461e <HAL_TIM_PWM_Start+0x3e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	e015      	b.n	800464a <HAL_TIM_PWM_Start+0x6a>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d109      	bne.n	8004638 <HAL_TIM_PWM_Start+0x58>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e008      	b.n	800464a <HAL_TIM_PWM_Start+0x6a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e068      	b.n	8004724 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d104      	bne.n	8004662 <HAL_TIM_PWM_Start+0x82>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004660:	e013      	b.n	800468a <HAL_TIM_PWM_Start+0xaa>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b04      	cmp	r3, #4
 8004666:	d104      	bne.n	8004672 <HAL_TIM_PWM_Start+0x92>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004670:	e00b      	b.n	800468a <HAL_TIM_PWM_Start+0xaa>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b08      	cmp	r3, #8
 8004676:	d104      	bne.n	8004682 <HAL_TIM_PWM_Start+0xa2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004680:	e003      	b.n	800468a <HAL_TIM_PWM_Start+0xaa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2201      	movs	r2, #1
 8004690:	6839      	ldr	r1, [r7, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f001 f88f 	bl	80057b6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a23      	ldr	r2, [pc, #140]	@ (800472c <HAL_TIM_PWM_Start+0x14c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d107      	bne.n	80046b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1d      	ldr	r2, [pc, #116]	@ (800472c <HAL_TIM_PWM_Start+0x14c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d018      	beq.n	80046ee <HAL_TIM_PWM_Start+0x10e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c4:	d013      	beq.n	80046ee <HAL_TIM_PWM_Start+0x10e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <HAL_TIM_PWM_Start+0x150>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <HAL_TIM_PWM_Start+0x10e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a17      	ldr	r2, [pc, #92]	@ (8004734 <HAL_TIM_PWM_Start+0x154>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_TIM_PWM_Start+0x10e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a16      	ldr	r2, [pc, #88]	@ (8004738 <HAL_TIM_PWM_Start+0x158>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_TIM_PWM_Start+0x10e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a14      	ldr	r2, [pc, #80]	@ (800473c <HAL_TIM_PWM_Start+0x15c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d111      	bne.n	8004712 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b06      	cmp	r3, #6
 80046fe:	d010      	beq.n	8004722 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	e007      	b.n	8004722 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0201 	orr.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40010000 	.word	0x40010000
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40014000 	.word	0x40014000

08004740 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2200      	movs	r2, #0
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f001 f82f 	bl	80057b6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a29      	ldr	r2, [pc, #164]	@ (8004804 <HAL_TIM_PWM_Stop+0xc4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d117      	bne.n	8004792 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a1a      	ldr	r2, [r3, #32]
 8004768:	f241 1311 	movw	r3, #4369	@ 0x1111
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10f      	bne.n	8004792 <HAL_TIM_PWM_Stop+0x52>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a1a      	ldr	r2, [r3, #32]
 8004778:	f240 4344 	movw	r3, #1092	@ 0x444
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <HAL_TIM_PWM_Stop+0x52>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004790:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a1a      	ldr	r2, [r3, #32]
 8004798:	f241 1311 	movw	r3, #4369	@ 0x1111
 800479c:	4013      	ands	r3, r2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <HAL_TIM_PWM_Stop+0x82>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	f240 4344 	movw	r3, #1092	@ 0x444
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d107      	bne.n	80047c2 <HAL_TIM_PWM_Stop+0x82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_PWM_Stop+0x92>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d0:	e013      	b.n	80047fa <HAL_TIM_PWM_Stop+0xba>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_PWM_Stop+0xa2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e0:	e00b      	b.n	80047fa <HAL_TIM_PWM_Stop+0xba>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_PWM_Stop+0xb2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f0:	e003      	b.n	80047fa <HAL_TIM_PWM_Stop+0xba>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40010000 	.word	0x40010000

08004808 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d109      	bne.n	8004830 <HAL_TIM_PWM_Start_IT+0x28>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e022      	b.n	8004876 <HAL_TIM_PWM_Start_IT+0x6e>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b04      	cmp	r3, #4
 8004834:	d109      	bne.n	800484a <HAL_TIM_PWM_Start_IT+0x42>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	bf14      	ite	ne
 8004842:	2301      	movne	r3, #1
 8004844:	2300      	moveq	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	e015      	b.n	8004876 <HAL_TIM_PWM_Start_IT+0x6e>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d109      	bne.n	8004864 <HAL_TIM_PWM_Start_IT+0x5c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	bf14      	ite	ne
 800485c:	2301      	movne	r3, #1
 800485e:	2300      	moveq	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	e008      	b.n	8004876 <HAL_TIM_PWM_Start_IT+0x6e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	bf14      	ite	ne
 8004870:	2301      	movne	r3, #1
 8004872:	2300      	moveq	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e0b3      	b.n	80049e6 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Start_IT+0x86>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800488c:	e013      	b.n	80048b6 <HAL_TIM_PWM_Start_IT+0xae>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b04      	cmp	r3, #4
 8004892:	d104      	bne.n	800489e <HAL_TIM_PWM_Start_IT+0x96>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800489c:	e00b      	b.n	80048b6 <HAL_TIM_PWM_Start_IT+0xae>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_PWM_Start_IT+0xa6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048ac:	e003      	b.n	80048b6 <HAL_TIM_PWM_Start_IT+0xae>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b0c      	cmp	r3, #12
 80048ba:	d841      	bhi.n	8004940 <HAL_TIM_PWM_Start_IT+0x138>
 80048bc:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004941 	.word	0x08004941
 80048cc:	08004941 	.word	0x08004941
 80048d0:	08004941 	.word	0x08004941
 80048d4:	0800490b 	.word	0x0800490b
 80048d8:	08004941 	.word	0x08004941
 80048dc:	08004941 	.word	0x08004941
 80048e0:	08004941 	.word	0x08004941
 80048e4:	0800491d 	.word	0x0800491d
 80048e8:	08004941 	.word	0x08004941
 80048ec:	08004941 	.word	0x08004941
 80048f0:	08004941 	.word	0x08004941
 80048f4:	0800492f 	.word	0x0800492f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0202 	orr.w	r2, r2, #2
 8004906:	60da      	str	r2, [r3, #12]
      break;
 8004908:	e01d      	b.n	8004946 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0204 	orr.w	r2, r2, #4
 8004918:	60da      	str	r2, [r3, #12]
      break;
 800491a:	e014      	b.n	8004946 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0208 	orr.w	r2, r2, #8
 800492a:	60da      	str	r2, [r3, #12]
      break;
 800492c:	e00b      	b.n	8004946 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0210 	orr.w	r2, r2, #16
 800493c:	60da      	str	r2, [r3, #12]
      break;
 800493e:	e002      	b.n	8004946 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      break;
 8004944:	bf00      	nop
  }

  if (status == HAL_OK)
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d14b      	bne.n	80049e4 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2201      	movs	r2, #1
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 ff2e 	bl	80057b6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a24      	ldr	r2, [pc, #144]	@ (80049f0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d107      	bne.n	8004974 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004972:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1d      	ldr	r2, [pc, #116]	@ (80049f0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d018      	beq.n	80049b0 <HAL_TIM_PWM_Start_IT+0x1a8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004986:	d013      	beq.n	80049b0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a19      	ldr	r2, [pc, #100]	@ (80049f4 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00e      	beq.n	80049b0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a18      	ldr	r2, [pc, #96]	@ (80049f8 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d009      	beq.n	80049b0 <HAL_TIM_PWM_Start_IT+0x1a8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <HAL_TIM_PWM_Start_IT+0x1f4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a15      	ldr	r2, [pc, #84]	@ (8004a00 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d111      	bne.n	80049d4 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b06      	cmp	r3, #6
 80049c0:	d010      	beq.n	80049e4 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d2:	e007      	b.n	80049e4 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40014000 	.word	0x40014000

08004a04 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	d841      	bhi.n	8004a9c <HAL_TIM_PWM_Stop_IT+0x98>
 8004a18:	a201      	add	r2, pc, #4	@ (adr r2, 8004a20 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004a9d 	.word	0x08004a9d
 8004a28:	08004a9d 	.word	0x08004a9d
 8004a2c:	08004a9d 	.word	0x08004a9d
 8004a30:	08004a67 	.word	0x08004a67
 8004a34:	08004a9d 	.word	0x08004a9d
 8004a38:	08004a9d 	.word	0x08004a9d
 8004a3c:	08004a9d 	.word	0x08004a9d
 8004a40:	08004a79 	.word	0x08004a79
 8004a44:	08004a9d 	.word	0x08004a9d
 8004a48:	08004a9d 	.word	0x08004a9d
 8004a4c:	08004a9d 	.word	0x08004a9d
 8004a50:	08004a8b 	.word	0x08004a8b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0202 	bic.w	r2, r2, #2
 8004a62:	60da      	str	r2, [r3, #12]
      break;
 8004a64:	e01d      	b.n	8004aa2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0204 	bic.w	r2, r2, #4
 8004a74:	60da      	str	r2, [r3, #12]
      break;
 8004a76:	e014      	b.n	8004aa2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0208 	bic.w	r2, r2, #8
 8004a86:	60da      	str	r2, [r3, #12]
      break;
 8004a88:	e00b      	b.n	8004aa2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0210 	bic.w	r2, r2, #16
 8004a98:	60da      	str	r2, [r3, #12]
      break;
 8004a9a:	e002      	b.n	8004aa2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d157      	bne.n	8004b58 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2200      	movs	r2, #0
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fe80 	bl	80057b6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2a      	ldr	r2, [pc, #168]	@ (8004b64 <HAL_TIM_PWM_Stop_IT+0x160>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d117      	bne.n	8004af0 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6a1a      	ldr	r2, [r3, #32]
 8004ac6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10f      	bne.n	8004af0 <HAL_TIM_PWM_Stop_IT+0xec>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6a1a      	ldr	r2, [r3, #32]
 8004ad6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d107      	bne.n	8004af0 <HAL_TIM_PWM_Stop_IT+0xec>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004aee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10f      	bne.n	8004b20 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6a1a      	ldr	r2, [r3, #32]
 8004b06:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d107      	bne.n	8004b20 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0201 	bic.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d104      	bne.n	8004b30 <HAL_TIM_PWM_Stop_IT+0x12c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b2e:	e013      	b.n	8004b58 <HAL_TIM_PWM_Stop_IT+0x154>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d104      	bne.n	8004b40 <HAL_TIM_PWM_Stop_IT+0x13c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b3e:	e00b      	b.n	8004b58 <HAL_TIM_PWM_Stop_IT+0x154>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d104      	bne.n	8004b50 <HAL_TIM_PWM_Stop_IT+0x14c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b4e:	e003      	b.n	8004b58 <HAL_TIM_PWM_Stop_IT+0x154>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000

08004b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d020      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01b      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0202 	mvn.w	r2, #2
 8004b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 faa7 	bl	8005106 <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa99 	bl	80050f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fc f82b 	bl	8000c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d020      	beq.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0204 	mvn.w	r2, #4
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa81 	bl	8005106 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa73 	bl	80050f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fc f805 	bl	8000c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d020      	beq.n	8004c64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01b      	beq.n	8004c64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0208 	mvn.w	r2, #8
 8004c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa5b 	bl	8005106 <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa4d 	bl	80050f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fb ffdf 	bl	8000c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d020      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01b      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0210 	mvn.w	r2, #16
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2208      	movs	r2, #8
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa35 	bl	8005106 <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa27 	bl	80050f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fb ffb9 	bl	8000c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00c      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0201 	mvn.w	r2, #1
 8004ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa05 	bl	80050de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00c      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fdfc 	bl	80058f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00c      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f9ff 	bl	800511a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00c      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0220 	mvn.w	r2, #32
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fdce 	bl	80058dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e0ae      	b.n	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	f200 809f 	bhi.w	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d76:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004db1 	.word	0x08004db1
 8004d80:	08004eb5 	.word	0x08004eb5
 8004d84:	08004eb5 	.word	0x08004eb5
 8004d88:	08004eb5 	.word	0x08004eb5
 8004d8c:	08004df1 	.word	0x08004df1
 8004d90:	08004eb5 	.word	0x08004eb5
 8004d94:	08004eb5 	.word	0x08004eb5
 8004d98:	08004eb5 	.word	0x08004eb5
 8004d9c:	08004e33 	.word	0x08004e33
 8004da0:	08004eb5 	.word	0x08004eb5
 8004da4:	08004eb5 	.word	0x08004eb5
 8004da8:	08004eb5 	.word	0x08004eb5
 8004dac:	08004e73 	.word	0x08004e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fa46 	bl	8005248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0208 	orr.w	r2, r2, #8
 8004dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0204 	bic.w	r2, r2, #4
 8004dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6999      	ldr	r1, [r3, #24]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	619a      	str	r2, [r3, #24]
      break;
 8004dee:	e064      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fa8c 	bl	8005314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	021a      	lsls	r2, r3, #8
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	619a      	str	r2, [r3, #24]
      break;
 8004e30:	e043      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fad7 	bl	80053ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0208 	orr.w	r2, r2, #8
 8004e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0204 	bic.w	r2, r2, #4
 8004e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69d9      	ldr	r1, [r3, #28]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	61da      	str	r2, [r3, #28]
      break;
 8004e70:	e023      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fb21 	bl	80054c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69d9      	ldr	r1, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	021a      	lsls	r2, r3, #8
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	61da      	str	r2, [r3, #28]
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e0b4      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x186>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f20:	d03e      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f26:	f200 8087 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2e:	f000 8086 	beq.w	800503e <HAL_TIM_ConfigClockSource+0x172>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f36:	d87f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b70      	cmp	r3, #112	@ 0x70
 8004f3a:	d01a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0xa6>
 8004f3c:	2b70      	cmp	r3, #112	@ 0x70
 8004f3e:	d87b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b60      	cmp	r3, #96	@ 0x60
 8004f42:	d050      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f44:	2b60      	cmp	r3, #96	@ 0x60
 8004f46:	d877      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b50      	cmp	r3, #80	@ 0x50
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004f4c:	2b50      	cmp	r3, #80	@ 0x50
 8004f4e:	d873      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b40      	cmp	r3, #64	@ 0x40
 8004f52:	d058      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x13a>
 8004f54:	2b40      	cmp	r3, #64	@ 0x40
 8004f56:	d86f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b30      	cmp	r3, #48	@ 0x30
 8004f5a:	d064      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f5c:	2b30      	cmp	r3, #48	@ 0x30
 8004f5e:	d86b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d060      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d867      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d05a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f70:	e062      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f82:	f000 fbf8 	bl	8005776 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	609a      	str	r2, [r3, #8]
      break;
 8004f9e:	e04f      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fb0:	f000 fbe1 	bl	8005776 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fc2:	609a      	str	r2, [r3, #8]
      break;
 8004fc4:	e03c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 fb55 	bl	8005682 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2150      	movs	r1, #80	@ 0x50
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fbae 	bl	8005740 <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e02c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 fb74 	bl	80056e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2160      	movs	r1, #96	@ 0x60
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fb9e 	bl	8005740 <TIM_ITRx_SetConfig>
      break;
 8005004:	e01c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fb35 	bl	8005682 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2140      	movs	r1, #64	@ 0x40
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fb8e 	bl	8005740 <TIM_ITRx_SetConfig>
      break;
 8005024:	e00c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f000 fb85 	bl	8005740 <TIM_ITRx_SetConfig>
      break;
 8005036:	e003      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e000      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800503e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_TIM_SlaveConfigSynchro+0x18>
 800506e:	2302      	movs	r3, #2
 8005070:	e031      	b.n	80050d6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fa6b 	bl	8005560 <TIM_SlaveTimer_SetConfig>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e018      	b.n	80050d6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050b2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050c2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a3a      	ldr	r2, [pc, #232]	@ (800522c <TIM_Base_SetConfig+0xfc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00f      	beq.n	8005168 <TIM_Base_SetConfig+0x38>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514e:	d00b      	beq.n	8005168 <TIM_Base_SetConfig+0x38>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a37      	ldr	r2, [pc, #220]	@ (8005230 <TIM_Base_SetConfig+0x100>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_Base_SetConfig+0x38>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a36      	ldr	r2, [pc, #216]	@ (8005234 <TIM_Base_SetConfig+0x104>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0x38>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a35      	ldr	r2, [pc, #212]	@ (8005238 <TIM_Base_SetConfig+0x108>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d108      	bne.n	800517a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2b      	ldr	r2, [pc, #172]	@ (800522c <TIM_Base_SetConfig+0xfc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01b      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005188:	d017      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a28      	ldr	r2, [pc, #160]	@ (8005230 <TIM_Base_SetConfig+0x100>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a27      	ldr	r2, [pc, #156]	@ (8005234 <TIM_Base_SetConfig+0x104>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00f      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a26      	ldr	r2, [pc, #152]	@ (8005238 <TIM_Base_SetConfig+0x108>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a25      	ldr	r2, [pc, #148]	@ (800523c <TIM_Base_SetConfig+0x10c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a24      	ldr	r2, [pc, #144]	@ (8005240 <TIM_Base_SetConfig+0x110>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0x8a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a23      	ldr	r2, [pc, #140]	@ (8005244 <TIM_Base_SetConfig+0x114>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a0e      	ldr	r2, [pc, #56]	@ (800522c <TIM_Base_SetConfig+0xfc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d103      	bne.n	8005200 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d105      	bne.n	800521e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f023 0201 	bic.w	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	611a      	str	r2, [r3, #16]
  }
}
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40010000 	.word	0x40010000
 8005230:	40000400 	.word	0x40000400
 8005234:	40000800 	.word	0x40000800
 8005238:	40000c00 	.word	0x40000c00
 800523c:	40014000 	.word	0x40014000
 8005240:	40014400 	.word	0x40014400
 8005244:	40014800 	.word	0x40014800

08005248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	f023 0201 	bic.w	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f023 0302 	bic.w	r3, r3, #2
 8005290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1c      	ldr	r2, [pc, #112]	@ (8005310 <TIM_OC1_SetConfig+0xc8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10c      	bne.n	80052be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0308 	bic.w	r3, r3, #8
 80052aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 0304 	bic.w	r3, r3, #4
 80052bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a13      	ldr	r2, [pc, #76]	@ (8005310 <TIM_OC1_SetConfig+0xc8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d111      	bne.n	80052ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	621a      	str	r2, [r3, #32]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40010000 	.word	0x40010000

08005314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f023 0210 	bic.w	r2, r3, #16
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800534a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 0320 	bic.w	r3, r3, #32
 800535e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a1e      	ldr	r2, [pc, #120]	@ (80053e8 <TIM_OC2_SetConfig+0xd4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d10d      	bne.n	8005390 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800537a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800538e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a15      	ldr	r2, [pc, #84]	@ (80053e8 <TIM_OC2_SetConfig+0xd4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d113      	bne.n	80053c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800539e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40010000 	.word	0x40010000

080053ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a1d      	ldr	r2, [pc, #116]	@ (80054bc <TIM_OC3_SetConfig+0xd0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d10d      	bne.n	8005466 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a14      	ldr	r2, [pc, #80]	@ (80054bc <TIM_OC3_SetConfig+0xd0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d113      	bne.n	8005496 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800547c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	621a      	str	r2, [r3, #32]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	40010000 	.word	0x40010000

080054c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800550a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	031b      	lsls	r3, r3, #12
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a10      	ldr	r2, [pc, #64]	@ (800555c <TIM_OC4_SetConfig+0x9c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d109      	bne.n	8005534 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	019b      	lsls	r3, r3, #6
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000

08005560 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f023 0307 	bic.w	r3, r3, #7
 800558e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b70      	cmp	r3, #112	@ 0x70
 80055a8:	d01a      	beq.n	80055e0 <TIM_SlaveTimer_SetConfig+0x80>
 80055aa:	2b70      	cmp	r3, #112	@ 0x70
 80055ac:	d860      	bhi.n	8005670 <TIM_SlaveTimer_SetConfig+0x110>
 80055ae:	2b60      	cmp	r3, #96	@ 0x60
 80055b0:	d054      	beq.n	800565c <TIM_SlaveTimer_SetConfig+0xfc>
 80055b2:	2b60      	cmp	r3, #96	@ 0x60
 80055b4:	d85c      	bhi.n	8005670 <TIM_SlaveTimer_SetConfig+0x110>
 80055b6:	2b50      	cmp	r3, #80	@ 0x50
 80055b8:	d046      	beq.n	8005648 <TIM_SlaveTimer_SetConfig+0xe8>
 80055ba:	2b50      	cmp	r3, #80	@ 0x50
 80055bc:	d858      	bhi.n	8005670 <TIM_SlaveTimer_SetConfig+0x110>
 80055be:	2b40      	cmp	r3, #64	@ 0x40
 80055c0:	d019      	beq.n	80055f6 <TIM_SlaveTimer_SetConfig+0x96>
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	d854      	bhi.n	8005670 <TIM_SlaveTimer_SetConfig+0x110>
 80055c6:	2b30      	cmp	r3, #48	@ 0x30
 80055c8:	d055      	beq.n	8005676 <TIM_SlaveTimer_SetConfig+0x116>
 80055ca:	2b30      	cmp	r3, #48	@ 0x30
 80055cc:	d850      	bhi.n	8005670 <TIM_SlaveTimer_SetConfig+0x110>
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d051      	beq.n	8005676 <TIM_SlaveTimer_SetConfig+0x116>
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d84c      	bhi.n	8005670 <TIM_SlaveTimer_SetConfig+0x110>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d04d      	beq.n	8005676 <TIM_SlaveTimer_SetConfig+0x116>
 80055da:	2b10      	cmp	r3, #16
 80055dc:	d04b      	beq.n	8005676 <TIM_SlaveTimer_SetConfig+0x116>
 80055de:	e047      	b.n	8005670 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80055f0:	f000 f8c1 	bl	8005776 <TIM_ETR_SetConfig>
      break;
 80055f4:	e040      	b.n	8005678 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b05      	cmp	r3, #5
 80055fc:	d101      	bne.n	8005602 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e03b      	b.n	800567a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6a1a      	ldr	r2, [r3, #32]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0201 	bic.w	r2, r2, #1
 8005618:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005628:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	4313      	orrs	r3, r2
 8005634:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	621a      	str	r2, [r3, #32]
      break;
 8005646:	e017      	b.n	8005678 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005654:	461a      	mov	r2, r3
 8005656:	f000 f814 	bl	8005682 <TIM_TI1_ConfigInputStage>
      break;
 800565a:	e00d      	b.n	8005678 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005668:	461a      	mov	r2, r3
 800566a:	f000 f839 	bl	80056e0 <TIM_TI2_ConfigInputStage>
      break;
 800566e:	e003      	b.n	8005678 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
      break;
 8005674:	e000      	b.n	8005678 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005676:	bf00      	nop
  }

  return status;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005682:	b480      	push	{r7}
 8005684:	b087      	sub	sp, #28
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f023 0201 	bic.w	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 030a 	bic.w	r3, r3, #10
 80056be:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	621a      	str	r2, [r3, #32]
}
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0210 	bic.w	r2, r3, #16
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800570a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	031b      	lsls	r3, r3, #12
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800571c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	621a      	str	r2, [r3, #32]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	f043 0307 	orr.w	r3, r3, #7
 8005762:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	609a      	str	r2, [r3, #8]
}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005776:	b480      	push	{r7}
 8005778:	b087      	sub	sp, #28
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
 8005782:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005790:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	021a      	lsls	r2, r3, #8
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	431a      	orrs	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4313      	orrs	r3, r2
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	609a      	str	r2, [r3, #8]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b087      	sub	sp, #28
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	2201      	movs	r2, #1
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1a      	ldr	r2, [r3, #32]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	43db      	mvns	r3, r3
 80057d8:	401a      	ands	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	431a      	orrs	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	621a      	str	r2, [r3, #32]
}
 80057f4:	bf00      	nop
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005814:	2302      	movs	r3, #2
 8005816:	e050      	b.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1c      	ldr	r2, [pc, #112]	@ (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d018      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005864:	d013      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a18      	ldr	r2, [pc, #96]	@ (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00e      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a16      	ldr	r2, [pc, #88]	@ (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d009      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a15      	ldr	r2, [pc, #84]	@ (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a13      	ldr	r2, [pc, #76]	@ (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10c      	bne.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	4313      	orrs	r3, r2
 800589e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40010000 	.word	0x40010000
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800
 80058d4:	40000c00 	.word	0x40000c00
 80058d8:	40014000 	.word	0x40014000

080058dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005904:	b084      	sub	sp, #16
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	f107 001c 	add.w	r0, r7, #28
 8005912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005916:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800591a:	2b01      	cmp	r3, #1
 800591c:	d123      	bne.n	8005966 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005922:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005946:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800594a:	2b01      	cmp	r3, #1
 800594c:	d105      	bne.n	800595a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 fae2 	bl	8006f24 <USB_CoreReset>
 8005960:	4603      	mov	r3, r0
 8005962:	73fb      	strb	r3, [r7, #15]
 8005964:	e01b      	b.n	800599e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 fad6 	bl	8006f24 <USB_CoreReset>
 8005978:	4603      	mov	r3, r0
 800597a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800597c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005988:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005990:	e005      	b.n	800599e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800599e:	7fbb      	ldrb	r3, [r7, #30]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d10b      	bne.n	80059bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f043 0206 	orr.w	r2, r3, #6
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f043 0220 	orr.w	r2, r3, #32
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059c8:	b004      	add	sp, #16
 80059ca:	4770      	bx	lr

080059cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	4613      	mov	r3, r2
 80059d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d165      	bne.n	8005aac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4a41      	ldr	r2, [pc, #260]	@ (8005ae8 <USB_SetTurnaroundTime+0x11c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d906      	bls.n	80059f6 <USB_SetTurnaroundTime+0x2a>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4a40      	ldr	r2, [pc, #256]	@ (8005aec <USB_SetTurnaroundTime+0x120>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d202      	bcs.n	80059f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80059f0:	230f      	movs	r3, #15
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	e062      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4a3c      	ldr	r2, [pc, #240]	@ (8005aec <USB_SetTurnaroundTime+0x120>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d306      	bcc.n	8005a0c <USB_SetTurnaroundTime+0x40>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4a3b      	ldr	r2, [pc, #236]	@ (8005af0 <USB_SetTurnaroundTime+0x124>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d202      	bcs.n	8005a0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a06:	230e      	movs	r3, #14
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e057      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4a38      	ldr	r2, [pc, #224]	@ (8005af0 <USB_SetTurnaroundTime+0x124>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d306      	bcc.n	8005a22 <USB_SetTurnaroundTime+0x56>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4a37      	ldr	r2, [pc, #220]	@ (8005af4 <USB_SetTurnaroundTime+0x128>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d202      	bcs.n	8005a22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a1c:	230d      	movs	r3, #13
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e04c      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4a33      	ldr	r2, [pc, #204]	@ (8005af4 <USB_SetTurnaroundTime+0x128>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d306      	bcc.n	8005a38 <USB_SetTurnaroundTime+0x6c>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4a32      	ldr	r2, [pc, #200]	@ (8005af8 <USB_SetTurnaroundTime+0x12c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d802      	bhi.n	8005a38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a32:	230c      	movs	r3, #12
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e041      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8005af8 <USB_SetTurnaroundTime+0x12c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d906      	bls.n	8005a4e <USB_SetTurnaroundTime+0x82>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4a2e      	ldr	r2, [pc, #184]	@ (8005afc <USB_SetTurnaroundTime+0x130>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d802      	bhi.n	8005a4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a48:	230b      	movs	r3, #11
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e036      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4a2a      	ldr	r2, [pc, #168]	@ (8005afc <USB_SetTurnaroundTime+0x130>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d906      	bls.n	8005a64 <USB_SetTurnaroundTime+0x98>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4a29      	ldr	r2, [pc, #164]	@ (8005b00 <USB_SetTurnaroundTime+0x134>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d802      	bhi.n	8005a64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a5e:	230a      	movs	r3, #10
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e02b      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4a26      	ldr	r2, [pc, #152]	@ (8005b00 <USB_SetTurnaroundTime+0x134>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d906      	bls.n	8005a7a <USB_SetTurnaroundTime+0xae>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4a25      	ldr	r2, [pc, #148]	@ (8005b04 <USB_SetTurnaroundTime+0x138>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d202      	bcs.n	8005a7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a74:	2309      	movs	r3, #9
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e020      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4a21      	ldr	r2, [pc, #132]	@ (8005b04 <USB_SetTurnaroundTime+0x138>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d306      	bcc.n	8005a90 <USB_SetTurnaroundTime+0xc4>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4a20      	ldr	r2, [pc, #128]	@ (8005b08 <USB_SetTurnaroundTime+0x13c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d802      	bhi.n	8005a90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e015      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4a1d      	ldr	r2, [pc, #116]	@ (8005b08 <USB_SetTurnaroundTime+0x13c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d906      	bls.n	8005aa6 <USB_SetTurnaroundTime+0xda>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b0c <USB_SetTurnaroundTime+0x140>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d202      	bcs.n	8005aa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005aa0:	2307      	movs	r3, #7
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e00a      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005aa6:	2306      	movs	r3, #6
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e007      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ab2:	2309      	movs	r3, #9
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	e001      	b.n	8005abc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ab8:	2309      	movs	r3, #9
 8005aba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	00d8acbf 	.word	0x00d8acbf
 8005aec:	00e4e1c0 	.word	0x00e4e1c0
 8005af0:	00f42400 	.word	0x00f42400
 8005af4:	01067380 	.word	0x01067380
 8005af8:	011a499f 	.word	0x011a499f
 8005afc:	01312cff 	.word	0x01312cff
 8005b00:	014ca43f 	.word	0x014ca43f
 8005b04:	016e3600 	.word	0x016e3600
 8005b08:	01a6ab1f 	.word	0x01a6ab1f
 8005b0c:	01e84800 	.word	0x01e84800

08005b10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f043 0201 	orr.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f023 0201 	bic.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d115      	bne.n	8005ba2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b82:	200a      	movs	r0, #10
 8005b84:	f7fb fb1e 	bl	80011c4 <HAL_Delay>
      ms += 10U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	330a      	adds	r3, #10
 8005b8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f001 f939 	bl	8006e06 <USB_GetMode>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d01e      	beq.n	8005bd8 <USB_SetCurrentMode+0x84>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b9e:	d9f0      	bls.n	8005b82 <USB_SetCurrentMode+0x2e>
 8005ba0:	e01a      	b.n	8005bd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d115      	bne.n	8005bd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005bb4:	200a      	movs	r0, #10
 8005bb6:	f7fb fb05 	bl	80011c4 <HAL_Delay>
      ms += 10U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	330a      	adds	r3, #10
 8005bbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f920 	bl	8006e06 <USB_GetMode>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <USB_SetCurrentMode+0x84>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2bc7      	cmp	r3, #199	@ 0xc7
 8005bd0:	d9f0      	bls.n	8005bb4 <USB_SetCurrentMode+0x60>
 8005bd2:	e001      	b.n	8005bd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e005      	b.n	8005be4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2bc8      	cmp	r3, #200	@ 0xc8
 8005bdc:	d101      	bne.n	8005be2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bec:	b084      	sub	sp, #16
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b086      	sub	sp, #24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	e009      	b.n	8005c20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	3340      	adds	r3, #64	@ 0x40
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	2200      	movs	r2, #0
 8005c18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b0e      	cmp	r3, #14
 8005c24:	d9f2      	bls.n	8005c0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d11c      	bne.n	8005c68 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c3c:	f043 0302 	orr.w	r3, r3, #2
 8005c40:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c52:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c66:	e00b      	b.n	8005c80 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c78:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c86:	461a      	mov	r2, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c8c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10d      	bne.n	8005cb0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f968 	bl	8005f74 <USB_SetDevSpeed>
 8005ca4:	e008      	b.n	8005cb8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f963 	bl	8005f74 <USB_SetDevSpeed>
 8005cae:	e003      	b.n	8005cb8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cb0:	2103      	movs	r1, #3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f95e 	bl	8005f74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cb8:	2110      	movs	r1, #16
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f8fa 	bl	8005eb4 <USB_FlushTxFifo>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f924 	bl	8005f18 <USB_FlushRxFifo>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cec:	461a      	mov	r2, r3
 8005cee:	2300      	movs	r3, #0
 8005cf0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	e043      	b.n	8005d8c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d1a:	d118      	bne.n	8005d4e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	e013      	b.n	8005d60 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d44:	461a      	mov	r2, r3
 8005d46:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e008      	b.n	8005d60 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d90:	461a      	mov	r2, r3
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d3b5      	bcc.n	8005d04 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	e043      	b.n	8005e26 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005db4:	d118      	bne.n	8005de8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	e013      	b.n	8005dfa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dde:	461a      	mov	r2, r3
 8005de0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	e008      	b.n	8005dfa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df4:	461a      	mov	r2, r3
 8005df6:	2300      	movs	r3, #0
 8005df8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e06:	461a      	mov	r2, r3
 8005e08:	2300      	movs	r3, #0
 8005e0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	3301      	adds	r3, #1
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d3b5      	bcc.n	8005d9e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e44:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005e52:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f043 0210 	orr.w	r2, r3, #16
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	4b10      	ldr	r3, [pc, #64]	@ (8005eb0 <USB_DevInit+0x2c4>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f043 0208 	orr.w	r2, r3, #8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d107      	bne.n	8005ea0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e98:	f043 0304 	orr.w	r3, r3, #4
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eac:	b004      	add	sp, #16
 8005eae:	4770      	bx	lr
 8005eb0:	803c3800 	.word	0x803c3800

08005eb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ece:	d901      	bls.n	8005ed4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e01b      	b.n	8005f0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	daf2      	bge.n	8005ec2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	019b      	lsls	r3, r3, #6
 8005ee4:	f043 0220 	orr.w	r2, r3, #32
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ef8:	d901      	bls.n	8005efe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e006      	b.n	8005f0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d0f0      	beq.n	8005eec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f30:	d901      	bls.n	8005f36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e018      	b.n	8005f68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	daf2      	bge.n	8005f24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2210      	movs	r2, #16
 8005f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f54:	d901      	bls.n	8005f5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e006      	b.n	8005f68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b10      	cmp	r3, #16
 8005f64:	d0f0      	beq.n	8005f48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b087      	sub	sp, #28
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0306 	and.w	r3, r3, #6
 8005fbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d102      	bne.n	8005fcc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	75fb      	strb	r3, [r7, #23]
 8005fca:	e00a      	b.n	8005fe2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d002      	beq.n	8005fd8 <USB_GetDevSpeed+0x32>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b06      	cmp	r3, #6
 8005fd6:	d102      	bne.n	8005fde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	75fb      	strb	r3, [r7, #23]
 8005fdc:	e001      	b.n	8005fe2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005fde:	230f      	movs	r3, #15
 8005fe0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	785b      	ldrb	r3, [r3, #1]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d13a      	bne.n	8006082 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	2101      	movs	r1, #1
 800601e:	fa01 f303 	lsl.w	r3, r1, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	68f9      	ldr	r1, [r7, #12]
 8006026:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800602a:	4313      	orrs	r3, r2
 800602c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d155      	bne.n	80060f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	791b      	ldrb	r3, [r3, #4]
 800605e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006060:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	059b      	lsls	r3, r3, #22
 8006066:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006068:	4313      	orrs	r3, r2
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800607a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	e036      	b.n	80060f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006088:	69da      	ldr	r2, [r3, #28]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	2101      	movs	r1, #1
 8006094:	fa01 f303 	lsl.w	r3, r1, r3
 8006098:	041b      	lsls	r3, r3, #16
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d11a      	bne.n	80060f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	791b      	ldrb	r3, [r3, #4]
 80060d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060d6:	430b      	orrs	r3, r1
 80060d8:	4313      	orrs	r3, r2
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d161      	bne.n	80061e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800612e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006132:	d11f      	bne.n	8006174 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800614e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006152:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	440a      	add	r2, r1
 800616a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800616e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006172:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800617a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	2101      	movs	r1, #1
 8006186:	fa01 f303 	lsl.w	r3, r1, r3
 800618a:	b29b      	uxth	r3, r3
 800618c:	43db      	mvns	r3, r3
 800618e:	68f9      	ldr	r1, [r7, #12]
 8006190:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006194:	4013      	ands	r3, r2
 8006196:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	2101      	movs	r1, #1
 80061aa:	fa01 f303 	lsl.w	r3, r1, r3
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061b8:	4013      	ands	r3, r2
 80061ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	0159      	lsls	r1, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	440b      	add	r3, r1
 80061d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d6:	4619      	mov	r1, r3
 80061d8:	4b35      	ldr	r3, [pc, #212]	@ (80062b0 <USB_DeactivateEndpoint+0x1b0>)
 80061da:	4013      	ands	r3, r2
 80061dc:	600b      	str	r3, [r1, #0]
 80061de:	e060      	b.n	80062a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061f6:	d11f      	bne.n	8006238 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006212:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006216:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006232:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006236:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800623e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	2101      	movs	r1, #1
 800624a:	fa01 f303 	lsl.w	r3, r1, r3
 800624e:	041b      	lsls	r3, r3, #16
 8006250:	43db      	mvns	r3, r3
 8006252:	68f9      	ldr	r1, [r7, #12]
 8006254:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006258:	4013      	ands	r3, r2
 800625a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	2101      	movs	r1, #1
 800626e:	fa01 f303 	lsl.w	r3, r1, r3
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	43db      	mvns	r3, r3
 8006276:	68f9      	ldr	r1, [r7, #12]
 8006278:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800627c:	4013      	ands	r3, r2
 800627e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	0159      	lsls	r1, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	440b      	add	r3, r1
 8006296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629a:	4619      	mov	r1, r3
 800629c:	4b05      	ldr	r3, [pc, #20]	@ (80062b4 <USB_DeactivateEndpoint+0x1b4>)
 800629e:	4013      	ands	r3, r2
 80062a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	ec337800 	.word	0xec337800
 80062b4:	eff37800 	.word	0xeff37800

080062b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08a      	sub	sp, #40	@ 0x28
 80062bc:	af02      	add	r7, sp, #8
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f040 817a 	bne.w	80065ce <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d132      	bne.n	8006348 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006300:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006320:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006340:	0cdb      	lsrs	r3, r3, #19
 8006342:	04db      	lsls	r3, r3, #19
 8006344:	6113      	str	r3, [r2, #16]
 8006346:	e092      	b.n	800646e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006362:	0cdb      	lsrs	r3, r3, #19
 8006364:	04db      	lsls	r3, r3, #19
 8006366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006382:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006386:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800638a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11a      	bne.n	80063c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	691a      	ldr	r2, [r3, #16]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	d903      	bls.n	80063a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063c4:	6113      	str	r3, [r2, #16]
 80063c6:	e01b      	b.n	8006400 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6919      	ldr	r1, [r3, #16]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	440b      	add	r3, r1
 80063e0:	1e59      	subs	r1, r3, #1
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80063ea:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063ec:	4ba2      	ldr	r3, [pc, #648]	@ (8006678 <USB_EPStartXfer+0x3c0>)
 80063ee:	400b      	ands	r3, r1
 80063f0:	69b9      	ldr	r1, [r7, #24]
 80063f2:	0148      	lsls	r0, r1, #5
 80063f4:	69f9      	ldr	r1, [r7, #28]
 80063f6:	4401      	add	r1, r0
 80063f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063fc:	4313      	orrs	r3, r2
 80063fe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006416:	69b9      	ldr	r1, [r7, #24]
 8006418:	0148      	lsls	r0, r1, #5
 800641a:	69f9      	ldr	r1, [r7, #28]
 800641c:	4401      	add	r1, r0
 800641e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006422:	4313      	orrs	r3, r2
 8006424:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	791b      	ldrb	r3, [r3, #4]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d11f      	bne.n	800646e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006448:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800644c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006468:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800646c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d14b      	bne.n	800650c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d009      	beq.n	8006490 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006488:	461a      	mov	r2, r3
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	791b      	ldrb	r3, [r3, #4]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d128      	bne.n	80064ea <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d110      	bne.n	80064ca <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	e00f      	b.n	80064ea <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006504:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	e165      	b.n	80067d8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006526:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800652a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	791b      	ldrb	r3, [r3, #4]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d015      	beq.n	8006560 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 814d 	beq.w	80067d8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	2101      	movs	r1, #1
 8006550:	fa01 f303 	lsl.w	r3, r1, r3
 8006554:	69f9      	ldr	r1, [r7, #28]
 8006556:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800655a:	4313      	orrs	r3, r2
 800655c:	634b      	str	r3, [r1, #52]	@ 0x34
 800655e:	e13b      	b.n	80067d8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656c:	2b00      	cmp	r3, #0
 800656e:	d110      	bne.n	8006592 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800658a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e00f      	b.n	80065b2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	68d9      	ldr	r1, [r3, #12]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	b298      	uxth	r0, r3
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	4603      	mov	r3, r0
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 f9b8 	bl	800693c <USB_WritePacket>
 80065cc:	e104      	b.n	80067d8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	69fa      	ldr	r2, [r7, #28]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e8:	0cdb      	lsrs	r3, r3, #19
 80065ea:	04db      	lsls	r3, r3, #19
 80065ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006608:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800660c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006610:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d131      	bne.n	800667c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663c:	691a      	ldr	r2, [r3, #16]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006646:	69b9      	ldr	r1, [r7, #24]
 8006648:	0148      	lsls	r0, r1, #5
 800664a:	69f9      	ldr	r1, [r7, #28]
 800664c:	4401      	add	r1, r0
 800664e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006652:	4313      	orrs	r3, r2
 8006654:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	69fa      	ldr	r2, [r7, #28]
 800666a:	440a      	add	r2, r1
 800666c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006670:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006674:	6113      	str	r3, [r2, #16]
 8006676:	e061      	b.n	800673c <USB_EPStartXfer+0x484>
 8006678:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d123      	bne.n	80066cc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800669a:	69b9      	ldr	r1, [r7, #24]
 800669c:	0148      	lsls	r0, r1, #5
 800669e:	69f9      	ldr	r1, [r7, #28]
 80066a0:	4401      	add	r1, r0
 80066a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80066a6:	4313      	orrs	r3, r2
 80066a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066c8:	6113      	str	r3, [r2, #16]
 80066ca:	e037      	b.n	800673c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	4413      	add	r3, r2
 80066d6:	1e5a      	subs	r2, r3, #1
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	8afa      	ldrh	r2, [r7, #22]
 80066e8:	fb03 f202 	mul.w	r2, r3, r2
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	8afb      	ldrh	r3, [r7, #22]
 8006700:	04d9      	lsls	r1, r3, #19
 8006702:	4b38      	ldr	r3, [pc, #224]	@ (80067e4 <USB_EPStartXfer+0x52c>)
 8006704:	400b      	ands	r3, r1
 8006706:	69b9      	ldr	r1, [r7, #24]
 8006708:	0148      	lsls	r0, r1, #5
 800670a:	69f9      	ldr	r1, [r7, #28]
 800670c:	4401      	add	r1, r0
 800670e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006712:	4313      	orrs	r3, r2
 8006714:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672c:	69b9      	ldr	r1, [r7, #24]
 800672e:	0148      	lsls	r0, r1, #5
 8006730:	69f9      	ldr	r1, [r7, #28]
 8006732:	4401      	add	r1, r0
 8006734:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006738:	4313      	orrs	r3, r2
 800673a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d10d      	bne.n	800675e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	68d9      	ldr	r1, [r3, #12]
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675a:	460a      	mov	r2, r1
 800675c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	791b      	ldrb	r3, [r3, #4]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d128      	bne.n	80067b8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006772:	2b00      	cmp	r3, #0
 8006774:	d110      	bne.n	8006798 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	440a      	add	r2, r1
 800678c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006790:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	e00f      	b.n	80067b8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80067d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	1ff80000 	.word	0x1ff80000

080067e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d14a      	bne.n	800689c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800681a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800681e:	f040 8086 	bne.w	800692e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	7812      	ldrb	r2, [r2, #0]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	440a      	add	r2, r1
 800683c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006840:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006844:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	7812      	ldrb	r2, [r2, #0]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006864:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006868:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006876:	4293      	cmp	r3, r2
 8006878:	d902      	bls.n	8006880 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]
          break;
 800687e:	e056      	b.n	800692e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006898:	d0e7      	beq.n	800686a <USB_EPStopXfer+0x82>
 800689a:	e048      	b.n	800692e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068b4:	d13b      	bne.n	800692e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	7812      	ldrb	r2, [r2, #0]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	7812      	ldrb	r2, [r2, #0]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f242 7210 	movw	r2, #10000	@ 0x2710
 800690a:	4293      	cmp	r3, r2
 800690c:	d902      	bls.n	8006914 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	75fb      	strb	r3, [r7, #23]
          break;
 8006912:	e00c      	b.n	800692e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800692c:	d0e7      	beq.n	80068fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800692e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006930:	4618      	mov	r0, r3
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	@ 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	460b      	mov	r3, r1
 800694c:	71fb      	strb	r3, [r7, #7]
 800694e:	4613      	mov	r3, r2
 8006950:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800695a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800695e:	2b00      	cmp	r3, #0
 8006960:	d123      	bne.n	80069aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006962:	88bb      	ldrh	r3, [r7, #4]
 8006964:	3303      	adds	r3, #3
 8006966:	089b      	lsrs	r3, r3, #2
 8006968:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800696a:	2300      	movs	r3, #0
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	e018      	b.n	80069a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	031a      	lsls	r2, r3, #12
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	4413      	add	r3, r2
 8006978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800697c:	461a      	mov	r2, r3
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	3301      	adds	r3, #1
 8006988:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	3301      	adds	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	3301      	adds	r3, #1
 800699a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	3301      	adds	r3, #1
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d3e2      	bcc.n	8006970 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3724      	adds	r7, #36	@ 0x24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b08b      	sub	sp, #44	@ 0x2c
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	089b      	lsrs	r3, r3, #2
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	f003 0303 	and.w	r3, r3, #3
 80069dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069de:	2300      	movs	r3, #0
 80069e0:	623b      	str	r3, [r7, #32]
 80069e2:	e014      	b.n	8006a0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	3301      	adds	r3, #1
 80069f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	3301      	adds	r3, #1
 80069fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	3301      	adds	r3, #1
 8006a00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	3301      	adds	r3, #1
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	623b      	str	r3, [r7, #32]
 8006a0e:	6a3a      	ldr	r2, [r7, #32]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d3e6      	bcc.n	80069e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a16:	8bfb      	ldrh	r3, [r7, #30]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01e      	beq.n	8006a5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a26:	461a      	mov	r2, r3
 8006a28:	f107 0310 	add.w	r3, r7, #16
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	701a      	strb	r2, [r3, #0]
      i++;
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	3301      	adds	r3, #1
 8006a46:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006a4e:	8bfb      	ldrh	r3, [r7, #30]
 8006a50:	3b01      	subs	r3, #1
 8006a52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a54:	8bfb      	ldrh	r3, [r7, #30]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1ea      	bne.n	8006a30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	372c      	adds	r7, #44	@ 0x2c
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d12c      	bne.n	8006ade <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	db12      	blt.n	8006abc <USB_EPSetStall+0x54>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00f      	beq.n	8006abc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	0151      	lsls	r1, r2, #5
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ab6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006aba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ad6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	e02b      	b.n	8006b36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	db12      	blt.n	8006b16 <USB_EPSetStall+0xae>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00f      	beq.n	8006b16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d128      	bne.n	8006bb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d003      	beq.n	8006b90 <USB_EPClearStall+0x4c>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	791b      	ldrb	r3, [r3, #4]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d138      	bne.n	8006c02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	e027      	b.n	8006c02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bcc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006bd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d003      	beq.n	8006be2 <USB_EPClearStall+0x9e>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	791b      	ldrb	r3, [r3, #4]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d10f      	bne.n	8006c02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	0151      	lsls	r1, r2, #5
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c2e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006c32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006c44:	68f9      	ldr	r1, [r7, #12]
 8006c46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c76:	f023 0303 	bic.w	r3, r3, #3
 8006c7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c8a:	f023 0302 	bic.w	r3, r3, #2
 8006c8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006cb8:	f023 0303 	bic.w	r3, r3, #3
 8006cbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ccc:	f043 0302 	orr.w	r3, r3, #2
 8006cd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b085      	sub	sp, #20
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	4013      	ands	r3, r2
 8006d28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	0c1b      	lsrs	r3, r3, #16
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	b29b      	uxth	r3, r3
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b087      	sub	sp, #28
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dcc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dda:	01db      	lsls	r3, r3, #7
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4013      	ands	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006df8:	68bb      	ldr	r3, [r7, #8]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	f003 0301 	and.w	r3, r3, #1
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b085      	sub	sp, #20
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e3c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006e40:	f023 0307 	bic.w	r3, r3, #7
 8006e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	460b      	mov	r3, r1
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	333c      	adds	r3, #60	@ 0x3c
 8006e7e:	3304      	adds	r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	4a26      	ldr	r2, [pc, #152]	@ (8006f20 <USB_EP0_OutStart+0xb8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d90a      	bls.n	8006ea2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e9c:	d101      	bne.n	8006ea2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e037      	b.n	8006f12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ebc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ed0:	f043 0318 	orr.w	r3, r3, #24
 8006ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ee4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006ee8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d10f      	bne.n	8006f10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f0a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006f0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	4f54300a 	.word	0x4f54300a

08006f24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f3c:	d901      	bls.n	8006f42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e01b      	b.n	8006f7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	daf2      	bge.n	8006f30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f043 0201 	orr.w	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f66:	d901      	bls.n	8006f6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e006      	b.n	8006f7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d0f0      	beq.n	8006f5a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006f98:	f002 fc7e 	bl	8009898 <USBD_static_malloc>
 8006f9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d109      	bne.n	8006fb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	32b0      	adds	r2, #176	@ 0xb0
 8006fae:	2100      	movs	r1, #0
 8006fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e0d4      	b.n	8007162 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006fb8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f002 fcae 	bl	8009920 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	32b0      	adds	r2, #176	@ 0xb0
 8006fce:	68f9      	ldr	r1, [r7, #12]
 8006fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	32b0      	adds	r2, #176	@ 0xb0
 8006fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	7c1b      	ldrb	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d138      	bne.n	8007062 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ff0:	4b5e      	ldr	r3, [pc, #376]	@ (800716c <USBD_CDC_Init+0x1e4>)
 8006ff2:	7819      	ldrb	r1, [r3, #0]
 8006ff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f002 fb29 	bl	8009652 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007000:	4b5a      	ldr	r3, [pc, #360]	@ (800716c <USBD_CDC_Init+0x1e4>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	f003 020f 	and.w	r2, r3, #15
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	3324      	adds	r3, #36	@ 0x24
 8007016:	2201      	movs	r2, #1
 8007018:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800701a:	4b55      	ldr	r3, [pc, #340]	@ (8007170 <USBD_CDC_Init+0x1e8>)
 800701c:	7819      	ldrb	r1, [r3, #0]
 800701e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007022:	2202      	movs	r2, #2
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f002 fb14 	bl	8009652 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800702a:	4b51      	ldr	r3, [pc, #324]	@ (8007170 <USBD_CDC_Init+0x1e8>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	f003 020f 	and.w	r2, r3, #15
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007042:	2201      	movs	r2, #1
 8007044:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007046:	4b4b      	ldr	r3, [pc, #300]	@ (8007174 <USBD_CDC_Init+0x1ec>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	f003 020f 	and.w	r2, r3, #15
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	3326      	adds	r3, #38	@ 0x26
 800705c:	2210      	movs	r2, #16
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	e035      	b.n	80070ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007062:	4b42      	ldr	r3, [pc, #264]	@ (800716c <USBD_CDC_Init+0x1e4>)
 8007064:	7819      	ldrb	r1, [r3, #0]
 8007066:	2340      	movs	r3, #64	@ 0x40
 8007068:	2202      	movs	r2, #2
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f002 faf1 	bl	8009652 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007070:	4b3e      	ldr	r3, [pc, #248]	@ (800716c <USBD_CDC_Init+0x1e4>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	f003 020f 	and.w	r2, r3, #15
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	3324      	adds	r3, #36	@ 0x24
 8007086:	2201      	movs	r2, #1
 8007088:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800708a:	4b39      	ldr	r3, [pc, #228]	@ (8007170 <USBD_CDC_Init+0x1e8>)
 800708c:	7819      	ldrb	r1, [r3, #0]
 800708e:	2340      	movs	r3, #64	@ 0x40
 8007090:	2202      	movs	r2, #2
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f002 fadd 	bl	8009652 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007098:	4b35      	ldr	r3, [pc, #212]	@ (8007170 <USBD_CDC_Init+0x1e8>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	f003 020f 	and.w	r2, r3, #15
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	440b      	add	r3, r1
 80070ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80070b0:	2201      	movs	r2, #1
 80070b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80070b4:	4b2f      	ldr	r3, [pc, #188]	@ (8007174 <USBD_CDC_Init+0x1ec>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	f003 020f 	and.w	r2, r3, #15
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	3326      	adds	r3, #38	@ 0x26
 80070ca:	2210      	movs	r2, #16
 80070cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070ce:	4b29      	ldr	r3, [pc, #164]	@ (8007174 <USBD_CDC_Init+0x1ec>)
 80070d0:	7819      	ldrb	r1, [r3, #0]
 80070d2:	2308      	movs	r3, #8
 80070d4:	2203      	movs	r2, #3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f002 fabb 	bl	8009652 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80070dc:	4b25      	ldr	r3, [pc, #148]	@ (8007174 <USBD_CDC_Init+0x1ec>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f003 020f 	and.w	r2, r3, #15
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	3324      	adds	r3, #36	@ 0x24
 80070f2:	2201      	movs	r2, #1
 80070f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	33b0      	adds	r3, #176	@ 0xb0
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800712c:	2302      	movs	r3, #2
 800712e:	e018      	b.n	8007162 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	7c1b      	ldrb	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007138:	4b0d      	ldr	r3, [pc, #52]	@ (8007170 <USBD_CDC_Init+0x1e8>)
 800713a:	7819      	ldrb	r1, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007142:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f002 fb72 	bl	8009830 <USBD_LL_PrepareReceive>
 800714c:	e008      	b.n	8007160 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800714e:	4b08      	ldr	r3, [pc, #32]	@ (8007170 <USBD_CDC_Init+0x1e8>)
 8007150:	7819      	ldrb	r1, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007158:	2340      	movs	r3, #64	@ 0x40
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f002 fb68 	bl	8009830 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000097 	.word	0x20000097
 8007170:	20000098 	.word	0x20000098
 8007174:	20000099 	.word	0x20000099

08007178 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007184:	4b3a      	ldr	r3, [pc, #232]	@ (8007270 <USBD_CDC_DeInit+0xf8>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f002 fa87 	bl	800969e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007190:	4b37      	ldr	r3, [pc, #220]	@ (8007270 <USBD_CDC_DeInit+0xf8>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	f003 020f 	and.w	r2, r3, #15
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	4613      	mov	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	3324      	adds	r3, #36	@ 0x24
 80071a6:	2200      	movs	r2, #0
 80071a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80071aa:	4b32      	ldr	r3, [pc, #200]	@ (8007274 <USBD_CDC_DeInit+0xfc>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f002 fa74 	bl	800969e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80071b6:	4b2f      	ldr	r3, [pc, #188]	@ (8007274 <USBD_CDC_DeInit+0xfc>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	f003 020f 	and.w	r2, r3, #15
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80071ce:	2200      	movs	r2, #0
 80071d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80071d2:	4b29      	ldr	r3, [pc, #164]	@ (8007278 <USBD_CDC_DeInit+0x100>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f002 fa60 	bl	800969e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80071de:	4b26      	ldr	r3, [pc, #152]	@ (8007278 <USBD_CDC_DeInit+0x100>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	f003 020f 	and.w	r2, r3, #15
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	3324      	adds	r3, #36	@ 0x24
 80071f4:	2200      	movs	r2, #0
 80071f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80071f8:	4b1f      	ldr	r3, [pc, #124]	@ (8007278 <USBD_CDC_DeInit+0x100>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	f003 020f 	and.w	r2, r3, #15
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	440b      	add	r3, r1
 800720c:	3326      	adds	r3, #38	@ 0x26
 800720e:	2200      	movs	r2, #0
 8007210:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	32b0      	adds	r2, #176	@ 0xb0
 800721c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01f      	beq.n	8007264 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	33b0      	adds	r3, #176	@ 0xb0
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	32b0      	adds	r2, #176	@ 0xb0
 8007242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007246:	4618      	mov	r0, r3
 8007248:	f002 fb34 	bl	80098b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	32b0      	adds	r2, #176	@ 0xb0
 8007256:	2100      	movs	r1, #0
 8007258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000097 	.word	0x20000097
 8007274:	20000098 	.word	0x20000098
 8007278:	20000099 	.word	0x20000099

0800727c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	32b0      	adds	r2, #176	@ 0xb0
 8007290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007294:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e0bf      	b.n	800742c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d050      	beq.n	800735a <USBD_CDC_Setup+0xde>
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	f040 80af 	bne.w	800741c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	88db      	ldrh	r3, [r3, #6]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d03a      	beq.n	800733c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b25b      	sxtb	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	da1b      	bge.n	8007308 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	33b0      	adds	r3, #176	@ 0xb0
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80072e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	88d2      	ldrh	r2, [r2, #6]
 80072ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	88db      	ldrh	r3, [r3, #6]
 80072f2:	2b07      	cmp	r3, #7
 80072f4:	bf28      	it	cs
 80072f6:	2307      	movcs	r3, #7
 80072f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	89fa      	ldrh	r2, [r7, #14]
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 fd87 	bl	8008e14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007306:	e090      	b.n	800742a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	785a      	ldrb	r2, [r3, #1]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	88db      	ldrh	r3, [r3, #6]
 8007316:	2b3f      	cmp	r3, #63	@ 0x3f
 8007318:	d803      	bhi.n	8007322 <USBD_CDC_Setup+0xa6>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	88db      	ldrh	r3, [r3, #6]
 800731e:	b2da      	uxtb	r2, r3
 8007320:	e000      	b.n	8007324 <USBD_CDC_Setup+0xa8>
 8007322:	2240      	movs	r2, #64	@ 0x40
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800732a:	6939      	ldr	r1, [r7, #16]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007332:	461a      	mov	r2, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 fd99 	bl	8008e6c <USBD_CtlPrepareRx>
      break;
 800733a:	e076      	b.n	800742a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	33b0      	adds	r3, #176	@ 0xb0
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	7850      	ldrb	r0, [r2, #1]
 8007352:	2200      	movs	r2, #0
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	4798      	blx	r3
      break;
 8007358:	e067      	b.n	800742a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	2b0b      	cmp	r3, #11
 8007360:	d851      	bhi.n	8007406 <USBD_CDC_Setup+0x18a>
 8007362:	a201      	add	r2, pc, #4	@ (adr r2, 8007368 <USBD_CDC_Setup+0xec>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	08007399 	.word	0x08007399
 800736c:	08007415 	.word	0x08007415
 8007370:	08007407 	.word	0x08007407
 8007374:	08007407 	.word	0x08007407
 8007378:	08007407 	.word	0x08007407
 800737c:	08007407 	.word	0x08007407
 8007380:	08007407 	.word	0x08007407
 8007384:	08007407 	.word	0x08007407
 8007388:	08007407 	.word	0x08007407
 800738c:	08007407 	.word	0x08007407
 8007390:	080073c3 	.word	0x080073c3
 8007394:	080073ed 	.word	0x080073ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d107      	bne.n	80073b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80073a4:	f107 030a 	add.w	r3, r7, #10
 80073a8:	2202      	movs	r2, #2
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 fd31 	bl	8008e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073b2:	e032      	b.n	800741a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 fcbb 	bl	8008d32 <USBD_CtlError>
            ret = USBD_FAIL;
 80073bc:	2303      	movs	r3, #3
 80073be:	75fb      	strb	r3, [r7, #23]
          break;
 80073c0:	e02b      	b.n	800741a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d107      	bne.n	80073de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073ce:	f107 030d 	add.w	r3, r7, #13
 80073d2:	2201      	movs	r2, #1
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 fd1c 	bl	8008e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073dc:	e01d      	b.n	800741a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fca6 	bl	8008d32 <USBD_CtlError>
            ret = USBD_FAIL;
 80073e6:	2303      	movs	r3, #3
 80073e8:	75fb      	strb	r3, [r7, #23]
          break;
 80073ea:	e016      	b.n	800741a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d00f      	beq.n	8007418 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 fc99 	bl	8008d32 <USBD_CtlError>
            ret = USBD_FAIL;
 8007400:	2303      	movs	r3, #3
 8007402:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007404:	e008      	b.n	8007418 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 fc92 	bl	8008d32 <USBD_CtlError>
          ret = USBD_FAIL;
 800740e:	2303      	movs	r3, #3
 8007410:	75fb      	strb	r3, [r7, #23]
          break;
 8007412:	e002      	b.n	800741a <USBD_CDC_Setup+0x19e>
          break;
 8007414:	bf00      	nop
 8007416:	e008      	b.n	800742a <USBD_CDC_Setup+0x1ae>
          break;
 8007418:	bf00      	nop
      }
      break;
 800741a:	e006      	b.n	800742a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 fc87 	bl	8008d32 <USBD_CtlError>
      ret = USBD_FAIL;
 8007424:	2303      	movs	r3, #3
 8007426:	75fb      	strb	r3, [r7, #23]
      break;
 8007428:	bf00      	nop
  }

  return (uint8_t)ret;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007446:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	32b0      	adds	r2, #176	@ 0xb0
 8007452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800745a:	2303      	movs	r3, #3
 800745c:	e065      	b.n	800752a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	32b0      	adds	r2, #176	@ 0xb0
 8007468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	f003 020f 	and.w	r2, r3, #15
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	3318      	adds	r3, #24
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d02f      	beq.n	80074e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	f003 020f 	and.w	r2, r3, #15
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	440b      	add	r3, r1
 800749a:	3318      	adds	r3, #24
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	f003 010f 	and.w	r1, r3, #15
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	460b      	mov	r3, r1
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	440b      	add	r3, r1
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4403      	add	r3, r0
 80074b0:	331c      	adds	r3, #28
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80074b8:	fb01 f303 	mul.w	r3, r1, r3
 80074bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d112      	bne.n	80074e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	f003 020f 	and.w	r2, r3, #15
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	440b      	add	r3, r1
 80074d4:	3318      	adds	r3, #24
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074da:	78f9      	ldrb	r1, [r7, #3]
 80074dc:	2300      	movs	r3, #0
 80074de:	2200      	movs	r2, #0
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f002 f984 	bl	80097ee <USBD_LL_Transmit>
 80074e6:	e01f      	b.n	8007528 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	33b0      	adds	r3, #176	@ 0xb0
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	33b0      	adds	r3, #176	@ 0xb0
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	32b0      	adds	r2, #176	@ 0xb0
 8007548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	32b0      	adds	r2, #176	@ 0xb0
 8007558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007560:	2303      	movs	r3, #3
 8007562:	e01a      	b.n	800759a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f002 f982 	bl	8009872 <USBD_LL_GetRxDataSize>
 800756e:	4602      	mov	r2, r0
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	33b0      	adds	r3, #176	@ 0xb0
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007594:	4611      	mov	r1, r2
 8007596:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	32b0      	adds	r2, #176	@ 0xb0
 80075b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e024      	b.n	800760e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	33b0      	adds	r3, #176	@ 0xb0
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d019      	beq.n	800760c <USBD_CDC_EP0_RxReady+0x6a>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80075de:	2bff      	cmp	r3, #255	@ 0xff
 80075e0:	d014      	beq.n	800760c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	33b0      	adds	r3, #176	@ 0xb0
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80075fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007602:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	22ff      	movs	r2, #255	@ 0xff
 8007608:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007620:	2182      	movs	r1, #130	@ 0x82
 8007622:	4818      	ldr	r0, [pc, #96]	@ (8007684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007624:	f000 fd4f 	bl	80080c6 <USBD_GetEpDesc>
 8007628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800762a:	2101      	movs	r1, #1
 800762c:	4815      	ldr	r0, [pc, #84]	@ (8007684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800762e:	f000 fd4a 	bl	80080c6 <USBD_GetEpDesc>
 8007632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007634:	2181      	movs	r1, #129	@ 0x81
 8007636:	4813      	ldr	r0, [pc, #76]	@ (8007684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007638:	f000 fd45 	bl	80080c6 <USBD_GetEpDesc>
 800763c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2210      	movs	r2, #16
 8007648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d006      	beq.n	800765e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2200      	movs	r2, #0
 8007654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007658:	711a      	strb	r2, [r3, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d006      	beq.n	8007672 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800766c:	711a      	strb	r2, [r3, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2243      	movs	r2, #67	@ 0x43
 8007676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007678:	4b02      	ldr	r3, [pc, #8]	@ (8007684 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	20000054 	.word	0x20000054

08007688 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007690:	2182      	movs	r1, #130	@ 0x82
 8007692:	4818      	ldr	r0, [pc, #96]	@ (80076f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007694:	f000 fd17 	bl	80080c6 <USBD_GetEpDesc>
 8007698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800769a:	2101      	movs	r1, #1
 800769c:	4815      	ldr	r0, [pc, #84]	@ (80076f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800769e:	f000 fd12 	bl	80080c6 <USBD_GetEpDesc>
 80076a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076a4:	2181      	movs	r1, #129	@ 0x81
 80076a6:	4813      	ldr	r0, [pc, #76]	@ (80076f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076a8:	f000 fd0d 	bl	80080c6 <USBD_GetEpDesc>
 80076ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2210      	movs	r2, #16
 80076b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d006      	beq.n	80076ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2200      	movs	r2, #0
 80076c4:	711a      	strb	r2, [r3, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f042 0202 	orr.w	r2, r2, #2
 80076cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d006      	beq.n	80076e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	711a      	strb	r2, [r3, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f042 0202 	orr.w	r2, r2, #2
 80076e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2243      	movs	r2, #67	@ 0x43
 80076e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076e8:	4b02      	ldr	r3, [pc, #8]	@ (80076f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20000054 	.word	0x20000054

080076f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007700:	2182      	movs	r1, #130	@ 0x82
 8007702:	4818      	ldr	r0, [pc, #96]	@ (8007764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007704:	f000 fcdf 	bl	80080c6 <USBD_GetEpDesc>
 8007708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800770a:	2101      	movs	r1, #1
 800770c:	4815      	ldr	r0, [pc, #84]	@ (8007764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800770e:	f000 fcda 	bl	80080c6 <USBD_GetEpDesc>
 8007712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007714:	2181      	movs	r1, #129	@ 0x81
 8007716:	4813      	ldr	r0, [pc, #76]	@ (8007764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007718:	f000 fcd5 	bl	80080c6 <USBD_GetEpDesc>
 800771c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2210      	movs	r2, #16
 8007728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d006      	beq.n	800773e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2200      	movs	r2, #0
 8007734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007738:	711a      	strb	r2, [r3, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d006      	beq.n	8007752 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800774c:	711a      	strb	r2, [r3, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2243      	movs	r2, #67	@ 0x43
 8007756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007758:	4b02      	ldr	r3, [pc, #8]	@ (8007764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000054 	.word	0x20000054

08007768 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	220a      	movs	r2, #10
 8007774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007776:	4b03      	ldr	r3, [pc, #12]	@ (8007784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	20000010 	.word	0x20000010

08007788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e009      	b.n	80077b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	33b0      	adds	r3, #176	@ 0xb0
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	32b0      	adds	r2, #176	@ 0xb0
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077de:	2303      	movs	r3, #3
 80077e0:	e008      	b.n	80077f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	32b0      	adds	r2, #176	@ 0xb0
 8007814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007820:	2303      	movs	r3, #3
 8007822:	e004      	b.n	800782e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
	...

0800783c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	32b0      	adds	r2, #176	@ 0xb0
 800784e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007852:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007854:	2301      	movs	r3, #1
 8007856:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800785e:	2303      	movs	r3, #3
 8007860:	e025      	b.n	80078ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007868:	2b00      	cmp	r3, #0
 800786a:	d11f      	bne.n	80078ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2201      	movs	r2, #1
 8007870:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007874:	4b10      	ldr	r3, [pc, #64]	@ (80078b8 <USBD_CDC_TransmitPacket+0x7c>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	f003 020f 	and.w	r2, r3, #15
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4403      	add	r3, r0
 800788e:	3318      	adds	r3, #24
 8007890:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007892:	4b09      	ldr	r3, [pc, #36]	@ (80078b8 <USBD_CDC_TransmitPacket+0x7c>)
 8007894:	7819      	ldrb	r1, [r3, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 ffa3 	bl	80097ee <USBD_LL_Transmit>

    ret = USBD_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000097 	.word	0x20000097

080078bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	32b0      	adds	r2, #176	@ 0xb0
 80078ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	32b0      	adds	r2, #176	@ 0xb0
 80078de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e018      	b.n	800791c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	7c1b      	ldrb	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007924 <USBD_CDC_ReceivePacket+0x68>)
 80078f4:	7819      	ldrb	r1, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 ff95 	bl	8009830 <USBD_LL_PrepareReceive>
 8007906:	e008      	b.n	800791a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007908:	4b06      	ldr	r3, [pc, #24]	@ (8007924 <USBD_CDC_ReceivePacket+0x68>)
 800790a:	7819      	ldrb	r1, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007912:	2340      	movs	r3, #64	@ 0x40
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 ff8b 	bl	8009830 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20000098 	.word	0x20000098

08007928 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	e01f      	b.n	8007980 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	79fa      	ldrb	r2, [r7, #7]
 8007972:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f001 fe05 	bl	8009584 <USBD_LL_Init>
 800797a:	4603      	mov	r3, r0
 800797c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800797e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800799c:	2303      	movs	r3, #3
 800799e:	e025      	b.n	80079ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	32ae      	adds	r2, #174	@ 0xae
 80079b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00f      	beq.n	80079dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	32ae      	adds	r2, #174	@ 0xae
 80079c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079cc:	f107 020e 	add.w	r2, r7, #14
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
 80079d4:	4602      	mov	r2, r0
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 fe0d 	bl	800961c <USBD_LL_Start>
 8007a02:	4603      	mov	r3, r0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d009      	beq.n	8007a50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	78fa      	ldrb	r2, [r7, #3]
 8007a46:	4611      	mov	r1, r2
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	4798      	blx	r3
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	4611      	mov	r1, r2
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007a80:	2303      	movs	r3, #3
 8007a82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 f90c 	bl	8008cbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007ac2:	f003 031f 	and.w	r3, r3, #31
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d01a      	beq.n	8007b00 <USBD_LL_SetupStage+0x72>
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d822      	bhi.n	8007b14 <USBD_LL_SetupStage+0x86>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <USBD_LL_SetupStage+0x4a>
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d00a      	beq.n	8007aec <USBD_LL_SetupStage+0x5e>
 8007ad6:	e01d      	b.n	8007b14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fb63 	bl	80081ac <USBD_StdDevReq>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8007aea:	e020      	b.n	8007b2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fbcb 	bl	8008290 <USBD_StdItfReq>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]
      break;
 8007afe:	e016      	b.n	8007b2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fc2d 	bl	8008368 <USBD_StdEPReq>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]
      break;
 8007b12:	e00c      	b.n	8007b2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b1a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fdda 	bl	80096dc <USBD_LL_StallEP>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b2c:	bf00      	nop
  }

  return ret;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	460b      	mov	r3, r1
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d16e      	bne.n	8007c2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007b56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	f040 8098 	bne.w	8007c94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d913      	bls.n	8007b98 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	1ad2      	subs	r2, r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	4293      	cmp	r3, r2
 8007b88:	bf28      	it	cs
 8007b8a:	4613      	movcs	r3, r2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f001 f988 	bl	8008ea6 <USBD_CtlContinueRx>
 8007b96:	e07d      	b.n	8007c94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b9e:	f003 031f 	and.w	r3, r3, #31
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d014      	beq.n	8007bd0 <USBD_LL_DataOutStage+0x98>
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d81d      	bhi.n	8007be6 <USBD_LL_DataOutStage+0xae>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <USBD_LL_DataOutStage+0x7c>
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d003      	beq.n	8007bba <USBD_LL_DataOutStage+0x82>
 8007bb2:	e018      	b.n	8007be6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75bb      	strb	r3, [r7, #22]
            break;
 8007bb8:	e018      	b.n	8007bec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 fa64 	bl	8008092 <USBD_CoreFindIF>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	75bb      	strb	r3, [r7, #22]
            break;
 8007bce:	e00d      	b.n	8007bec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	4619      	mov	r1, r3
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fa66 	bl	80080ac <USBD_CoreFindEP>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75bb      	strb	r3, [r7, #22]
            break;
 8007be4:	e002      	b.n	8007bec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	75bb      	strb	r3, [r7, #22]
            break;
 8007bea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007bec:	7dbb      	ldrb	r3, [r7, #22]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d119      	bne.n	8007c26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d113      	bne.n	8007c26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007bfe:	7dba      	ldrb	r2, [r7, #22]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	32ae      	adds	r2, #174	@ 0xae
 8007c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00b      	beq.n	8007c26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007c0e:	7dba      	ldrb	r2, [r7, #22]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007c16:	7dba      	ldrb	r2, [r7, #22]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	32ae      	adds	r2, #174	@ 0xae
 8007c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f001 f94e 	bl	8008ec8 <USBD_CtlSendStatus>
 8007c2c:	e032      	b.n	8007c94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	4619      	mov	r1, r3
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 fa37 	bl	80080ac <USBD_CoreFindEP>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c42:	7dbb      	ldrb	r3, [r7, #22]
 8007c44:	2bff      	cmp	r3, #255	@ 0xff
 8007c46:	d025      	beq.n	8007c94 <USBD_LL_DataOutStage+0x15c>
 8007c48:	7dbb      	ldrb	r3, [r7, #22]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d122      	bne.n	8007c94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d117      	bne.n	8007c8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007c5a:	7dba      	ldrb	r2, [r7, #22]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	32ae      	adds	r2, #174	@ 0xae
 8007c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00f      	beq.n	8007c8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007c6a:	7dba      	ldrb	r2, [r7, #22]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c72:	7dba      	ldrb	r2, [r7, #22]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	32ae      	adds	r2, #174	@ 0xae
 8007c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	7afa      	ldrb	r2, [r7, #11]
 8007c80:	4611      	mov	r1, r2
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	4798      	blx	r3
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	e000      	b.n	8007c96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b086      	sub	sp, #24
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	607a      	str	r2, [r7, #4]
 8007caa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d16f      	bne.n	8007d92 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3314      	adds	r3, #20
 8007cb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d15a      	bne.n	8007d78 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d914      	bls.n	8007cf8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	1ad2      	subs	r2, r2, r3
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	6879      	ldr	r1, [r7, #4]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f001 f8b0 	bl	8008e4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cea:	2300      	movs	r3, #0
 8007cec:	2200      	movs	r2, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f001 fd9d 	bl	8009830 <USBD_LL_PrepareReceive>
 8007cf6:	e03f      	b.n	8007d78 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d11c      	bne.n	8007d3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d316      	bcc.n	8007d3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d20f      	bcs.n	8007d3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2100      	movs	r1, #0
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f001 f891 	bl	8008e4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d30:	2300      	movs	r3, #0
 8007d32:	2200      	movs	r2, #0
 8007d34:	2100      	movs	r1, #0
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f001 fd7a 	bl	8009830 <USBD_LL_PrepareReceive>
 8007d3c:	e01c      	b.n	8007d78 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d10f      	bne.n	8007d6a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d6a:	2180      	movs	r1, #128	@ 0x80
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f001 fcb5 	bl	80096dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f001 f8bb 	bl	8008eee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d03a      	beq.n	8007df8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7ff fe42 	bl	8007a0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007d90:	e032      	b.n	8007df8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f985 	bl	80080ac <USBD_CoreFindEP>
 8007da2:	4603      	mov	r3, r0
 8007da4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2bff      	cmp	r3, #255	@ 0xff
 8007daa:	d025      	beq.n	8007df8 <USBD_LL_DataInStage+0x15a>
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d122      	bne.n	8007df8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d11c      	bne.n	8007df8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007dbe:	7dfa      	ldrb	r2, [r7, #23]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	32ae      	adds	r2, #174	@ 0xae
 8007dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d014      	beq.n	8007df8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007dce:	7dfa      	ldrb	r2, [r7, #23]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007dd6:	7dfa      	ldrb	r2, [r7, #23]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	32ae      	adds	r2, #174	@ 0xae
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	7afa      	ldrb	r2, [r7, #11]
 8007de4:	4611      	mov	r1, r2
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	4798      	blx	r3
 8007dea:	4603      	mov	r3, r0
 8007dec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007dee:	7dbb      	ldrb	r3, [r7, #22]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007df4:	7dbb      	ldrb	r3, [r7, #22]
 8007df6:	e000      	b.n	8007dfa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d014      	beq.n	8007e68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00e      	beq.n	8007e68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	6852      	ldr	r2, [r2, #4]
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	4611      	mov	r1, r2
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	4798      	blx	r3
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e64:	2303      	movs	r3, #3
 8007e66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e68:	2340      	movs	r3, #64	@ 0x40
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fbef 	bl	8009652 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2240      	movs	r2, #64	@ 0x40
 8007e80:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e84:	2340      	movs	r3, #64	@ 0x40
 8007e86:	2200      	movs	r2, #0
 8007e88:	2180      	movs	r1, #128	@ 0x80
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fbe1 	bl	8009652 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2240      	movs	r2, #64	@ 0x40
 8007e9a:	621a      	str	r2, [r3, #32]

  return ret;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d006      	beq.n	8007ee8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2204      	movs	r2, #4
 8007eec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d106      	bne.n	8007f20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d110      	bne.n	8007f64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	32ae      	adds	r2, #174	@ 0xae
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e01c      	b.n	8007fca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d115      	bne.n	8007fc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	32ae      	adds	r2, #174	@ 0xae
 8007fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00b      	beq.n	8007fc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	32ae      	adds	r2, #174	@ 0xae
 8007fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	78fa      	ldrb	r2, [r7, #3]
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	32ae      	adds	r2, #174	@ 0xae
 8007fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e01c      	b.n	800802e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d115      	bne.n	800802c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	32ae      	adds	r2, #174	@ 0xae
 800800a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	32ae      	adds	r2, #174	@ 0xae
 800801e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	4611      	mov	r1, r2
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00e      	beq.n	8008088 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6852      	ldr	r2, [r2, #4]
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	4611      	mov	r1, r2
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	4798      	blx	r3
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008084:	2303      	movs	r3, #3
 8008086:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800809e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b086      	sub	sp, #24
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	460b      	mov	r3, r1
 80080d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	885b      	ldrh	r3, [r3, #2]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	7812      	ldrb	r2, [r2, #0]
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d91f      	bls.n	800812c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80080f2:	e013      	b.n	800811c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80080f4:	f107 030a 	add.w	r3, r7, #10
 80080f8:	4619      	mov	r1, r3
 80080fa:	6978      	ldr	r0, [r7, #20]
 80080fc:	f000 f81b 	bl	8008136 <USBD_GetNextDesc>
 8008100:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	785b      	ldrb	r3, [r3, #1]
 8008106:	2b05      	cmp	r3, #5
 8008108:	d108      	bne.n	800811c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	789b      	ldrb	r3, [r3, #2]
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	429a      	cmp	r2, r3
 8008116:	d008      	beq.n	800812a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	885b      	ldrh	r3, [r3, #2]
 8008120:	b29a      	uxth	r2, r3
 8008122:	897b      	ldrh	r3, [r7, #10]
 8008124:	429a      	cmp	r2, r3
 8008126:	d8e5      	bhi.n	80080f4 <USBD_GetEpDesc+0x2e>
 8008128:	e000      	b.n	800812c <USBD_GetEpDesc+0x66>
          break;
 800812a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800812c:	693b      	ldr	r3, [r7, #16]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008136:	b480      	push	{r7}
 8008138:	b085      	sub	sp, #20
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	4413      	add	r3, r2
 800814e:	b29a      	uxth	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4413      	add	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008160:	68fb      	ldr	r3, [r7, #12]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800816e:	b480      	push	{r7}
 8008170:	b087      	sub	sp, #28
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	3301      	adds	r3, #1
 8008184:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800818c:	8a3b      	ldrh	r3, [r7, #16]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	b21a      	sxth	r2, r3
 8008192:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008196:	4313      	orrs	r3, r2
 8008198:	b21b      	sxth	r3, r3
 800819a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800819c:	89fb      	ldrh	r3, [r7, #14]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
	...

080081ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081c2:	2b40      	cmp	r3, #64	@ 0x40
 80081c4:	d005      	beq.n	80081d2 <USBD_StdDevReq+0x26>
 80081c6:	2b40      	cmp	r3, #64	@ 0x40
 80081c8:	d857      	bhi.n	800827a <USBD_StdDevReq+0xce>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00f      	beq.n	80081ee <USBD_StdDevReq+0x42>
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d153      	bne.n	800827a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	32ae      	adds	r2, #174	@ 0xae
 80081dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
 80081e8:	4603      	mov	r3, r0
 80081ea:	73fb      	strb	r3, [r7, #15]
      break;
 80081ec:	e04a      	b.n	8008284 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	785b      	ldrb	r3, [r3, #1]
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d83b      	bhi.n	800826e <USBD_StdDevReq+0xc2>
 80081f6:	a201      	add	r2, pc, #4	@ (adr r2, 80081fc <USBD_StdDevReq+0x50>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	08008251 	.word	0x08008251
 8008200:	08008265 	.word	0x08008265
 8008204:	0800826f 	.word	0x0800826f
 8008208:	0800825b 	.word	0x0800825b
 800820c:	0800826f 	.word	0x0800826f
 8008210:	0800822f 	.word	0x0800822f
 8008214:	08008225 	.word	0x08008225
 8008218:	0800826f 	.word	0x0800826f
 800821c:	08008247 	.word	0x08008247
 8008220:	08008239 	.word	0x08008239
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa3c 	bl	80086a4 <USBD_GetDescriptor>
          break;
 800822c:	e024      	b.n	8008278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fba1 	bl	8008978 <USBD_SetAddress>
          break;
 8008236:	e01f      	b.n	8008278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fbe0 	bl	8008a00 <USBD_SetConfig>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
          break;
 8008244:	e018      	b.n	8008278 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fc83 	bl	8008b54 <USBD_GetConfig>
          break;
 800824e:	e013      	b.n	8008278 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fcb4 	bl	8008bc0 <USBD_GetStatus>
          break;
 8008258:	e00e      	b.n	8008278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fce3 	bl	8008c28 <USBD_SetFeature>
          break;
 8008262:	e009      	b.n	8008278 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fd07 	bl	8008c7a <USBD_ClrFeature>
          break;
 800826c:	e004      	b.n	8008278 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fd5e 	bl	8008d32 <USBD_CtlError>
          break;
 8008276:	bf00      	nop
      }
      break;
 8008278:	e004      	b.n	8008284 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fd58 	bl	8008d32 <USBD_CtlError>
      break;
 8008282:	bf00      	nop
  }

  return ret;
 8008284:	7bfb      	ldrb	r3, [r7, #15]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop

08008290 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082a6:	2b40      	cmp	r3, #64	@ 0x40
 80082a8:	d005      	beq.n	80082b6 <USBD_StdItfReq+0x26>
 80082aa:	2b40      	cmp	r3, #64	@ 0x40
 80082ac:	d852      	bhi.n	8008354 <USBD_StdItfReq+0xc4>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <USBD_StdItfReq+0x26>
 80082b2:	2b20      	cmp	r3, #32
 80082b4:	d14e      	bne.n	8008354 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d840      	bhi.n	8008346 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	889b      	ldrh	r3, [r3, #4]
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d836      	bhi.n	800833c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	889b      	ldrh	r3, [r3, #4]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7ff fedb 	bl	8008092 <USBD_CoreFindIF>
 80082dc:	4603      	mov	r3, r0
 80082de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2bff      	cmp	r3, #255	@ 0xff
 80082e4:	d01d      	beq.n	8008322 <USBD_StdItfReq+0x92>
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d11a      	bne.n	8008322 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80082ec:	7bba      	ldrb	r2, [r7, #14]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	32ae      	adds	r2, #174	@ 0xae
 80082f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00f      	beq.n	800831c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80082fc:	7bba      	ldrb	r2, [r7, #14]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008304:	7bba      	ldrb	r2, [r7, #14]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	32ae      	adds	r2, #174	@ 0xae
 800830a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
 8008316:	4603      	mov	r3, r0
 8008318:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800831a:	e004      	b.n	8008326 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800831c:	2303      	movs	r3, #3
 800831e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008320:	e001      	b.n	8008326 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008322:	2303      	movs	r3, #3
 8008324:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	88db      	ldrh	r3, [r3, #6]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d110      	bne.n	8008350 <USBD_StdItfReq+0xc0>
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10d      	bne.n	8008350 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fdc7 	bl	8008ec8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800833a:	e009      	b.n	8008350 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fcf7 	bl	8008d32 <USBD_CtlError>
          break;
 8008344:	e004      	b.n	8008350 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fcf2 	bl	8008d32 <USBD_CtlError>
          break;
 800834e:	e000      	b.n	8008352 <USBD_StdItfReq+0xc2>
          break;
 8008350:	bf00      	nop
      }
      break;
 8008352:	e004      	b.n	800835e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fceb 	bl	8008d32 <USBD_CtlError>
      break;
 800835c:	bf00      	nop
  }

  return ret;
 800835e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	889b      	ldrh	r3, [r3, #4]
 800837a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008384:	2b40      	cmp	r3, #64	@ 0x40
 8008386:	d007      	beq.n	8008398 <USBD_StdEPReq+0x30>
 8008388:	2b40      	cmp	r3, #64	@ 0x40
 800838a:	f200 817f 	bhi.w	800868c <USBD_StdEPReq+0x324>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d02a      	beq.n	80083e8 <USBD_StdEPReq+0x80>
 8008392:	2b20      	cmp	r3, #32
 8008394:	f040 817a 	bne.w	800868c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fe85 	bl	80080ac <USBD_CoreFindEP>
 80083a2:	4603      	mov	r3, r0
 80083a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083a6:	7b7b      	ldrb	r3, [r7, #13]
 80083a8:	2bff      	cmp	r3, #255	@ 0xff
 80083aa:	f000 8174 	beq.w	8008696 <USBD_StdEPReq+0x32e>
 80083ae:	7b7b      	ldrb	r3, [r7, #13]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f040 8170 	bne.w	8008696 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80083b6:	7b7a      	ldrb	r2, [r7, #13]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80083be:	7b7a      	ldrb	r2, [r7, #13]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	32ae      	adds	r2, #174	@ 0xae
 80083c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8163 	beq.w	8008696 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083d0:	7b7a      	ldrb	r2, [r7, #13]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	32ae      	adds	r2, #174	@ 0xae
 80083d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	4798      	blx	r3
 80083e2:	4603      	mov	r3, r0
 80083e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80083e6:	e156      	b.n	8008696 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	785b      	ldrb	r3, [r3, #1]
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d008      	beq.n	8008402 <USBD_StdEPReq+0x9a>
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	f300 8145 	bgt.w	8008680 <USBD_StdEPReq+0x318>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 809b 	beq.w	8008532 <USBD_StdEPReq+0x1ca>
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d03c      	beq.n	800847a <USBD_StdEPReq+0x112>
 8008400:	e13e      	b.n	8008680 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b02      	cmp	r3, #2
 800840c:	d002      	beq.n	8008414 <USBD_StdEPReq+0xac>
 800840e:	2b03      	cmp	r3, #3
 8008410:	d016      	beq.n	8008440 <USBD_StdEPReq+0xd8>
 8008412:	e02c      	b.n	800846e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00d      	beq.n	8008436 <USBD_StdEPReq+0xce>
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b80      	cmp	r3, #128	@ 0x80
 800841e:	d00a      	beq.n	8008436 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 f959 	bl	80096dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800842a:	2180      	movs	r1, #128	@ 0x80
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 f955 	bl	80096dc <USBD_LL_StallEP>
 8008432:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008434:	e020      	b.n	8008478 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fc7a 	bl	8008d32 <USBD_CtlError>
              break;
 800843e:	e01b      	b.n	8008478 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	885b      	ldrh	r3, [r3, #2]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10e      	bne.n	8008466 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <USBD_StdEPReq+0xfe>
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b80      	cmp	r3, #128	@ 0x80
 8008452:	d008      	beq.n	8008466 <USBD_StdEPReq+0xfe>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	88db      	ldrh	r3, [r3, #6]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d104      	bne.n	8008466 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f93b 	bl	80096dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fd2e 	bl	8008ec8 <USBD_CtlSendStatus>

              break;
 800846c:	e004      	b.n	8008478 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fc5e 	bl	8008d32 <USBD_CtlError>
              break;
 8008476:	bf00      	nop
          }
          break;
 8008478:	e107      	b.n	800868a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b02      	cmp	r3, #2
 8008484:	d002      	beq.n	800848c <USBD_StdEPReq+0x124>
 8008486:	2b03      	cmp	r3, #3
 8008488:	d016      	beq.n	80084b8 <USBD_StdEPReq+0x150>
 800848a:	e04b      	b.n	8008524 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00d      	beq.n	80084ae <USBD_StdEPReq+0x146>
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	2b80      	cmp	r3, #128	@ 0x80
 8008496:	d00a      	beq.n	80084ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 f91d 	bl	80096dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084a2:	2180      	movs	r1, #128	@ 0x80
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 f919 	bl	80096dc <USBD_LL_StallEP>
 80084aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084ac:	e040      	b.n	8008530 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fc3e 	bl	8008d32 <USBD_CtlError>
              break;
 80084b6:	e03b      	b.n	8008530 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	885b      	ldrh	r3, [r3, #2]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d136      	bne.n	800852e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d004      	beq.n	80084d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f001 f923 	bl	800971a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fcf7 	bl	8008ec8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff fde4 	bl	80080ac <USBD_CoreFindEP>
 80084e4:	4603      	mov	r3, r0
 80084e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084e8:	7b7b      	ldrb	r3, [r7, #13]
 80084ea:	2bff      	cmp	r3, #255	@ 0xff
 80084ec:	d01f      	beq.n	800852e <USBD_StdEPReq+0x1c6>
 80084ee:	7b7b      	ldrb	r3, [r7, #13]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d11c      	bne.n	800852e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80084f4:	7b7a      	ldrb	r2, [r7, #13]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80084fc:	7b7a      	ldrb	r2, [r7, #13]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32ae      	adds	r2, #174	@ 0xae
 8008502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d010      	beq.n	800852e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800850c:	7b7a      	ldrb	r2, [r7, #13]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	32ae      	adds	r2, #174	@ 0xae
 8008512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	4798      	blx	r3
 800851e:	4603      	mov	r3, r0
 8008520:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008522:	e004      	b.n	800852e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fc03 	bl	8008d32 <USBD_CtlError>
              break;
 800852c:	e000      	b.n	8008530 <USBD_StdEPReq+0x1c8>
              break;
 800852e:	bf00      	nop
          }
          break;
 8008530:	e0ab      	b.n	800868a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d002      	beq.n	8008544 <USBD_StdEPReq+0x1dc>
 800853e:	2b03      	cmp	r3, #3
 8008540:	d032      	beq.n	80085a8 <USBD_StdEPReq+0x240>
 8008542:	e097      	b.n	8008674 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <USBD_StdEPReq+0x1f2>
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	2b80      	cmp	r3, #128	@ 0x80
 800854e:	d004      	beq.n	800855a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fbed 	bl	8008d32 <USBD_CtlError>
                break;
 8008558:	e091      	b.n	800867e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800855a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800855e:	2b00      	cmp	r3, #0
 8008560:	da0b      	bge.n	800857a <USBD_StdEPReq+0x212>
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	3310      	adds	r3, #16
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	4413      	add	r3, r2
 8008576:	3304      	adds	r3, #4
 8008578:	e00b      	b.n	8008592 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4413      	add	r3, r2
 8008590:	3304      	adds	r3, #4
 8008592:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2202      	movs	r2, #2
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fc37 	bl	8008e14 <USBD_CtlSendData>
              break;
 80085a6:	e06a      	b.n	800867e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	da11      	bge.n	80085d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	f003 020f 	and.w	r2, r3, #15
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	440b      	add	r3, r1
 80085c2:	3324      	adds	r3, #36	@ 0x24
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d117      	bne.n	80085fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fbb0 	bl	8008d32 <USBD_CtlError>
                  break;
 80085d2:	e054      	b.n	800867e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	f003 020f 	and.w	r2, r3, #15
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4613      	mov	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	440b      	add	r3, r1
 80085e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d104      	bne.n	80085fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fb9d 	bl	8008d32 <USBD_CtlError>
                  break;
 80085f8:	e041      	b.n	800867e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	da0b      	bge.n	800861a <USBD_StdEPReq+0x2b2>
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008608:	4613      	mov	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	3310      	adds	r3, #16
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4413      	add	r3, r2
 8008616:	3304      	adds	r3, #4
 8008618:	e00b      	b.n	8008632 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008620:	4613      	mov	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	4413      	add	r3, r2
 8008630:	3304      	adds	r3, #4
 8008632:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <USBD_StdEPReq+0x2d8>
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	2b80      	cmp	r3, #128	@ 0x80
 800863e:	d103      	bne.n	8008648 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	e00e      	b.n	8008666 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 f883 	bl	8009758 <USBD_LL_IsStallEP>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	e002      	b.n	8008666 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2202      	movs	r2, #2
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fbd1 	bl	8008e14 <USBD_CtlSendData>
              break;
 8008672:	e004      	b.n	800867e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fb5b 	bl	8008d32 <USBD_CtlError>
              break;
 800867c:	bf00      	nop
          }
          break;
 800867e:	e004      	b.n	800868a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fb55 	bl	8008d32 <USBD_CtlError>
          break;
 8008688:	bf00      	nop
      }
      break;
 800868a:	e005      	b.n	8008698 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fb4f 	bl	8008d32 <USBD_CtlError>
      break;
 8008694:	e000      	b.n	8008698 <USBD_StdEPReq+0x330>
      break;
 8008696:	bf00      	nop
  }

  return ret;
 8008698:	7bfb      	ldrb	r3, [r7, #15]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	885b      	ldrh	r3, [r3, #2]
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	3b01      	subs	r3, #1
 80086c4:	2b06      	cmp	r3, #6
 80086c6:	f200 8128 	bhi.w	800891a <USBD_GetDescriptor+0x276>
 80086ca:	a201      	add	r2, pc, #4	@ (adr r2, 80086d0 <USBD_GetDescriptor+0x2c>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	080086ed 	.word	0x080086ed
 80086d4:	08008705 	.word	0x08008705
 80086d8:	08008745 	.word	0x08008745
 80086dc:	0800891b 	.word	0x0800891b
 80086e0:	0800891b 	.word	0x0800891b
 80086e4:	080088bb 	.word	0x080088bb
 80086e8:	080088e7 	.word	0x080088e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	7c12      	ldrb	r2, [r2, #16]
 80086f8:	f107 0108 	add.w	r1, r7, #8
 80086fc:	4610      	mov	r0, r2
 80086fe:	4798      	blx	r3
 8008700:	60f8      	str	r0, [r7, #12]
      break;
 8008702:	e112      	b.n	800892a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	7c1b      	ldrb	r3, [r3, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10d      	bne.n	8008728 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008714:	f107 0208 	add.w	r2, r7, #8
 8008718:	4610      	mov	r0, r2
 800871a:	4798      	blx	r3
 800871c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3301      	adds	r3, #1
 8008722:	2202      	movs	r2, #2
 8008724:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008726:	e100      	b.n	800892a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800872e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008730:	f107 0208 	add.w	r2, r7, #8
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3301      	adds	r3, #1
 800873e:	2202      	movs	r2, #2
 8008740:	701a      	strb	r2, [r3, #0]
      break;
 8008742:	e0f2      	b.n	800892a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	885b      	ldrh	r3, [r3, #2]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b05      	cmp	r3, #5
 800874c:	f200 80ac 	bhi.w	80088a8 <USBD_GetDescriptor+0x204>
 8008750:	a201      	add	r2, pc, #4	@ (adr r2, 8008758 <USBD_GetDescriptor+0xb4>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	08008771 	.word	0x08008771
 800875c:	080087a5 	.word	0x080087a5
 8008760:	080087d9 	.word	0x080087d9
 8008764:	0800880d 	.word	0x0800880d
 8008768:	08008841 	.word	0x08008841
 800876c:	08008875 	.word	0x08008875
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00b      	beq.n	8008794 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	7c12      	ldrb	r2, [r2, #16]
 8008788:	f107 0108 	add.w	r1, r7, #8
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
 8008790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008792:	e091      	b.n	80088b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 facb 	bl	8008d32 <USBD_CtlError>
            err++;
 800879c:	7afb      	ldrb	r3, [r7, #11]
 800879e:	3301      	adds	r3, #1
 80087a0:	72fb      	strb	r3, [r7, #11]
          break;
 80087a2:	e089      	b.n	80088b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00b      	beq.n	80087c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	7c12      	ldrb	r2, [r2, #16]
 80087bc:	f107 0108 	add.w	r1, r7, #8
 80087c0:	4610      	mov	r0, r2
 80087c2:	4798      	blx	r3
 80087c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087c6:	e077      	b.n	80088b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fab1 	bl	8008d32 <USBD_CtlError>
            err++;
 80087d0:	7afb      	ldrb	r3, [r7, #11]
 80087d2:	3301      	adds	r3, #1
 80087d4:	72fb      	strb	r3, [r7, #11]
          break;
 80087d6:	e06f      	b.n	80088b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00b      	beq.n	80087fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	7c12      	ldrb	r2, [r2, #16]
 80087f0:	f107 0108 	add.w	r1, r7, #8
 80087f4:	4610      	mov	r0, r2
 80087f6:	4798      	blx	r3
 80087f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087fa:	e05d      	b.n	80088b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fa97 	bl	8008d32 <USBD_CtlError>
            err++;
 8008804:	7afb      	ldrb	r3, [r7, #11]
 8008806:	3301      	adds	r3, #1
 8008808:	72fb      	strb	r3, [r7, #11]
          break;
 800880a:	e055      	b.n	80088b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	7c12      	ldrb	r2, [r2, #16]
 8008824:	f107 0108 	add.w	r1, r7, #8
 8008828:	4610      	mov	r0, r2
 800882a:	4798      	blx	r3
 800882c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800882e:	e043      	b.n	80088b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa7d 	bl	8008d32 <USBD_CtlError>
            err++;
 8008838:	7afb      	ldrb	r3, [r7, #11]
 800883a:	3301      	adds	r3, #1
 800883c:	72fb      	strb	r3, [r7, #11]
          break;
 800883e:	e03b      	b.n	80088b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00b      	beq.n	8008864 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	7c12      	ldrb	r2, [r2, #16]
 8008858:	f107 0108 	add.w	r1, r7, #8
 800885c:	4610      	mov	r0, r2
 800885e:	4798      	blx	r3
 8008860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008862:	e029      	b.n	80088b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fa63 	bl	8008d32 <USBD_CtlError>
            err++;
 800886c:	7afb      	ldrb	r3, [r7, #11]
 800886e:	3301      	adds	r3, #1
 8008870:	72fb      	strb	r3, [r7, #11]
          break;
 8008872:	e021      	b.n	80088b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00b      	beq.n	8008898 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	7c12      	ldrb	r2, [r2, #16]
 800888c:	f107 0108 	add.w	r1, r7, #8
 8008890:	4610      	mov	r0, r2
 8008892:	4798      	blx	r3
 8008894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008896:	e00f      	b.n	80088b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa49 	bl	8008d32 <USBD_CtlError>
            err++;
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	3301      	adds	r3, #1
 80088a4:	72fb      	strb	r3, [r7, #11]
          break;
 80088a6:	e007      	b.n	80088b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa41 	bl	8008d32 <USBD_CtlError>
          err++;
 80088b0:	7afb      	ldrb	r3, [r7, #11]
 80088b2:	3301      	adds	r3, #1
 80088b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088b6:	bf00      	nop
      }
      break;
 80088b8:	e037      	b.n	800892a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	7c1b      	ldrb	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ca:	f107 0208 	add.w	r2, r7, #8
 80088ce:	4610      	mov	r0, r2
 80088d0:	4798      	blx	r3
 80088d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088d4:	e029      	b.n	800892a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fa2a 	bl	8008d32 <USBD_CtlError>
        err++;
 80088de:	7afb      	ldrb	r3, [r7, #11]
 80088e0:	3301      	adds	r3, #1
 80088e2:	72fb      	strb	r3, [r7, #11]
      break;
 80088e4:	e021      	b.n	800892a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	7c1b      	ldrb	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10d      	bne.n	800890a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f6:	f107 0208 	add.w	r2, r7, #8
 80088fa:	4610      	mov	r0, r2
 80088fc:	4798      	blx	r3
 80088fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3301      	adds	r3, #1
 8008904:	2207      	movs	r2, #7
 8008906:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008908:	e00f      	b.n	800892a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fa10 	bl	8008d32 <USBD_CtlError>
        err++;
 8008912:	7afb      	ldrb	r3, [r7, #11]
 8008914:	3301      	adds	r3, #1
 8008916:	72fb      	strb	r3, [r7, #11]
      break;
 8008918:	e007      	b.n	800892a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fa08 	bl	8008d32 <USBD_CtlError>
      err++;
 8008922:	7afb      	ldrb	r3, [r7, #11]
 8008924:	3301      	adds	r3, #1
 8008926:	72fb      	strb	r3, [r7, #11]
      break;
 8008928:	bf00      	nop
  }

  if (err != 0U)
 800892a:	7afb      	ldrb	r3, [r7, #11]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d11e      	bne.n	800896e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	88db      	ldrh	r3, [r3, #6]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d016      	beq.n	8008966 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008938:	893b      	ldrh	r3, [r7, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00e      	beq.n	800895c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	88da      	ldrh	r2, [r3, #6]
 8008942:	893b      	ldrh	r3, [r7, #8]
 8008944:	4293      	cmp	r3, r2
 8008946:	bf28      	it	cs
 8008948:	4613      	movcs	r3, r2
 800894a:	b29b      	uxth	r3, r3
 800894c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800894e:	893b      	ldrh	r3, [r7, #8]
 8008950:	461a      	mov	r2, r3
 8008952:	68f9      	ldr	r1, [r7, #12]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fa5d 	bl	8008e14 <USBD_CtlSendData>
 800895a:	e009      	b.n	8008970 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9e7 	bl	8008d32 <USBD_CtlError>
 8008964:	e004      	b.n	8008970 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 faae 	bl	8008ec8 <USBD_CtlSendStatus>
 800896c:	e000      	b.n	8008970 <USBD_GetDescriptor+0x2cc>
    return;
 800896e:	bf00      	nop
  }
}
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop

08008978 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	889b      	ldrh	r3, [r3, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d131      	bne.n	80089ee <USBD_SetAddress+0x76>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	88db      	ldrh	r3, [r3, #6]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d12d      	bne.n	80089ee <USBD_SetAddress+0x76>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	885b      	ldrh	r3, [r3, #2]
 8008996:	2b7f      	cmp	r3, #127	@ 0x7f
 8008998:	d829      	bhi.n	80089ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	885b      	ldrh	r3, [r3, #2]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d104      	bne.n	80089bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f9bc 	bl	8008d32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ba:	e01d      	b.n	80089f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	7bfa      	ldrb	r2, [r7, #15]
 80089c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fef1 	bl	80097b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa7a 	bl	8008ec8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d004      	beq.n	80089e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e2:	e009      	b.n	80089f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ec:	e004      	b.n	80089f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f99e 	bl	8008d32 <USBD_CtlError>
  }
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	885b      	ldrh	r3, [r3, #2]
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	4b4e      	ldr	r3, [pc, #312]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008a16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a18:	4b4d      	ldr	r3, [pc, #308]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d905      	bls.n	8008a2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f985 	bl	8008d32 <USBD_CtlError>
    return USBD_FAIL;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e08c      	b.n	8008b46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d002      	beq.n	8008a3e <USBD_SetConfig+0x3e>
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d029      	beq.n	8008a90 <USBD_SetConfig+0x90>
 8008a3c:	e075      	b.n	8008b2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a3e:	4b44      	ldr	r3, [pc, #272]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d020      	beq.n	8008a88 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a46:	4b42      	ldr	r3, [pc, #264]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a50:	4b3f      	ldr	r3, [pc, #252]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7fe ffe3 	bl	8007a22 <USBD_SetClassConfig>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d008      	beq.n	8008a78 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f962 	bl	8008d32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a76:	e065      	b.n	8008b44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fa25 	bl	8008ec8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2203      	movs	r2, #3
 8008a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a86:	e05d      	b.n	8008b44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fa1d 	bl	8008ec8 <USBD_CtlSendStatus>
      break;
 8008a8e:	e059      	b.n	8008b44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a90:	4b2f      	ldr	r3, [pc, #188]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d112      	bne.n	8008abe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008aaa:	4b29      	ldr	r3, [pc, #164]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7fe ffd2 	bl	8007a5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa06 	bl	8008ec8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008abc:	e042      	b.n	8008b44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008abe:	4b24      	ldr	r3, [pc, #144]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d02a      	beq.n	8008b22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7fe ffc0 	bl	8007a5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ada:	4b1d      	ldr	r3, [pc, #116]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7fe ff99 	bl	8007a22 <USBD_SetClassConfig>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00f      	beq.n	8008b1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f918 	bl	8008d32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7fe ffa5 	bl	8007a5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b18:	e014      	b.n	8008b44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f9d4 	bl	8008ec8 <USBD_CtlSendStatus>
      break;
 8008b20:	e010      	b.n	8008b44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f9d0 	bl	8008ec8 <USBD_CtlSendStatus>
      break;
 8008b28:	e00c      	b.n	8008b44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f900 	bl	8008d32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b32:	4b07      	ldr	r3, [pc, #28]	@ (8008b50 <USBD_SetConfig+0x150>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7fe ff8e 	bl	8007a5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	73fb      	strb	r3, [r7, #15]
      break;
 8008b42:	bf00      	nop
  }

  return ret;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	200031d0 	.word	0x200031d0

08008b54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	88db      	ldrh	r3, [r3, #6]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d004      	beq.n	8008b70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f8e2 	bl	8008d32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b6e:	e023      	b.n	8008bb8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	dc02      	bgt.n	8008b82 <USBD_GetConfig+0x2e>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	dc03      	bgt.n	8008b88 <USBD_GetConfig+0x34>
 8008b80:	e015      	b.n	8008bae <USBD_GetConfig+0x5a>
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d00b      	beq.n	8008b9e <USBD_GetConfig+0x4a>
 8008b86:	e012      	b.n	8008bae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3308      	adds	r3, #8
 8008b92:	2201      	movs	r2, #1
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f93c 	bl	8008e14 <USBD_CtlSendData>
        break;
 8008b9c:	e00c      	b.n	8008bb8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f934 	bl	8008e14 <USBD_CtlSendData>
        break;
 8008bac:	e004      	b.n	8008bb8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f8be 	bl	8008d32 <USBD_CtlError>
        break;
 8008bb6:	bf00      	nop
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d81e      	bhi.n	8008c16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	88db      	ldrh	r3, [r3, #6]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d004      	beq.n	8008bea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8a5 	bl	8008d32 <USBD_CtlError>
        break;
 8008be8:	e01a      	b.n	8008c20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f043 0202 	orr.w	r2, r3, #2
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	330c      	adds	r3, #12
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f900 	bl	8008e14 <USBD_CtlSendData>
      break;
 8008c14:	e004      	b.n	8008c20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f88a 	bl	8008d32 <USBD_CtlError>
      break;
 8008c1e:	bf00      	nop
  }
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	885b      	ldrh	r3, [r3, #2]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d107      	bne.n	8008c4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f940 	bl	8008ec8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c48:	e013      	b.n	8008c72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d10b      	bne.n	8008c6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	889b      	ldrh	r3, [r3, #4]
 8008c56:	0a1b      	lsrs	r3, r3, #8
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f930 	bl	8008ec8 <USBD_CtlSendStatus>
}
 8008c68:	e003      	b.n	8008c72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f860 	bl	8008d32 <USBD_CtlError>
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d80b      	bhi.n	8008caa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	885b      	ldrh	r3, [r3, #2]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d10c      	bne.n	8008cb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f910 	bl	8008ec8 <USBD_CtlSendStatus>
      }
      break;
 8008ca8:	e004      	b.n	8008cb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f840 	bl	8008d32 <USBD_CtlError>
      break;
 8008cb2:	e000      	b.n	8008cb6 <USBD_ClrFeature+0x3c>
      break;
 8008cb4:	bf00      	nop
  }
}
 8008cb6:	bf00      	nop
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	781a      	ldrb	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	781a      	ldrb	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff fa40 	bl	800816e <SWAPBYTE>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f7ff fa33 	bl	800816e <SWAPBYTE>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f7ff fa26 	bl	800816e <SWAPBYTE>
 8008d22:	4603      	mov	r3, r0
 8008d24:	461a      	mov	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	80da      	strh	r2, [r3, #6]
}
 8008d2a:	bf00      	nop
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d3c:	2180      	movs	r1, #128	@ 0x80
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fccc 	bl	80096dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d44:	2100      	movs	r1, #0
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fcc8 	bl	80096dc <USBD_LL_StallEP>
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d036      	beq.n	8008dd8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d6e:	6938      	ldr	r0, [r7, #16]
 8008d70:	f000 f836 	bl	8008de0 <USBD_GetLen>
 8008d74:	4603      	mov	r3, r0
 8008d76:	3301      	adds	r3, #1
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	4413      	add	r3, r2
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	7812      	ldrb	r2, [r2, #0]
 8008d8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	3301      	adds	r3, #1
 8008d92:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	4413      	add	r3, r2
 8008d9a:	2203      	movs	r2, #3
 8008d9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	3301      	adds	r3, #1
 8008da2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008da4:	e013      	b.n	8008dce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	4413      	add	r3, r2
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	7812      	ldrb	r2, [r2, #0]
 8008db0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	3301      	adds	r3, #1
 8008db6:	613b      	str	r3, [r7, #16]
    idx++;
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008dc8:	7dfb      	ldrb	r3, [r7, #23]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e7      	bne.n	8008da6 <USBD_GetString+0x52>
 8008dd6:	e000      	b.n	8008dda <USBD_GetString+0x86>
    return;
 8008dd8:	bf00      	nop
  }
}
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008df0:	e005      	b.n	8008dfe <USBD_GetLen+0x1e>
  {
    len++;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	3301      	adds	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1f5      	bne.n	8008df2 <USBD_GetLen+0x12>
  }

  return len;
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	2100      	movs	r1, #0
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fcd7 	bl	80097ee <USBD_LL_Transmit>

  return USBD_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 fcc6 	bl	80097ee <USBD_LL_Transmit>

  return USBD_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	2100      	movs	r1, #0
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 fcca 	bl	8009830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fcb9 	bl	8009830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ed8:	2300      	movs	r3, #0
 8008eda:	2200      	movs	r2, #0
 8008edc:	2100      	movs	r1, #0
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fc85 	bl	80097ee <USBD_LL_Transmit>

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2205      	movs	r2, #5
 8008efa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008efe:	2300      	movs	r3, #0
 8008f00:	2200      	movs	r2, #0
 8008f02:	2100      	movs	r1, #0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fc93 	bl	8009830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4912      	ldr	r1, [pc, #72]	@ (8008f64 <MX_USB_DEVICE_Init+0x50>)
 8008f1c:	4812      	ldr	r0, [pc, #72]	@ (8008f68 <MX_USB_DEVICE_Init+0x54>)
 8008f1e:	f7fe fd03 	bl	8007928 <USBD_Init>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f28:	f7f7 fec0 	bl	8000cac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f2c:	490f      	ldr	r1, [pc, #60]	@ (8008f6c <MX_USB_DEVICE_Init+0x58>)
 8008f2e:	480e      	ldr	r0, [pc, #56]	@ (8008f68 <MX_USB_DEVICE_Init+0x54>)
 8008f30:	f7fe fd2a 	bl	8007988 <USBD_RegisterClass>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f3a:	f7f7 feb7 	bl	8000cac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f3e:	490c      	ldr	r1, [pc, #48]	@ (8008f70 <MX_USB_DEVICE_Init+0x5c>)
 8008f40:	4809      	ldr	r0, [pc, #36]	@ (8008f68 <MX_USB_DEVICE_Init+0x54>)
 8008f42:	f7fe fc21 	bl	8007788 <USBD_CDC_RegisterInterface>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f4c:	f7f7 feae 	bl	8000cac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f50:	4805      	ldr	r0, [pc, #20]	@ (8008f68 <MX_USB_DEVICE_Init+0x54>)
 8008f52:	f7fe fd4f 	bl	80079f4 <USBD_Start>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f5c:	f7f7 fea6 	bl	8000cac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f60:	bf00      	nop
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	200000b0 	.word	0x200000b0
 8008f68:	200031d4 	.word	0x200031d4
 8008f6c:	2000001c 	.word	0x2000001c
 8008f70:	2000009c 	.word	0x2000009c

08008f74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f78:	2200      	movs	r2, #0
 8008f7a:	4905      	ldr	r1, [pc, #20]	@ (8008f90 <CDC_Init_FS+0x1c>)
 8008f7c:	4805      	ldr	r0, [pc, #20]	@ (8008f94 <CDC_Init_FS+0x20>)
 8008f7e:	f7fe fc1d 	bl	80077bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f82:	4905      	ldr	r1, [pc, #20]	@ (8008f98 <CDC_Init_FS+0x24>)
 8008f84:	4803      	ldr	r0, [pc, #12]	@ (8008f94 <CDC_Init_FS+0x20>)
 8008f86:	f7fe fc3b 	bl	8007800 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	200038b0 	.word	0x200038b0
 8008f94:	200031d4 	.word	0x200031d4
 8008f98:	200034b0 	.word	0x200034b0

08008f9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fa0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	6039      	str	r1, [r7, #0]
 8008fb6:	71fb      	strb	r3, [r7, #7]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	2b23      	cmp	r3, #35	@ 0x23
 8008fc0:	d84a      	bhi.n	8009058 <CDC_Control_FS+0xac>
 8008fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc8 <CDC_Control_FS+0x1c>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08009059 	.word	0x08009059
 8008fcc:	08009059 	.word	0x08009059
 8008fd0:	08009059 	.word	0x08009059
 8008fd4:	08009059 	.word	0x08009059
 8008fd8:	08009059 	.word	0x08009059
 8008fdc:	08009059 	.word	0x08009059
 8008fe0:	08009059 	.word	0x08009059
 8008fe4:	08009059 	.word	0x08009059
 8008fe8:	08009059 	.word	0x08009059
 8008fec:	08009059 	.word	0x08009059
 8008ff0:	08009059 	.word	0x08009059
 8008ff4:	08009059 	.word	0x08009059
 8008ff8:	08009059 	.word	0x08009059
 8008ffc:	08009059 	.word	0x08009059
 8009000:	08009059 	.word	0x08009059
 8009004:	08009059 	.word	0x08009059
 8009008:	08009059 	.word	0x08009059
 800900c:	08009059 	.word	0x08009059
 8009010:	08009059 	.word	0x08009059
 8009014:	08009059 	.word	0x08009059
 8009018:	08009059 	.word	0x08009059
 800901c:	08009059 	.word	0x08009059
 8009020:	08009059 	.word	0x08009059
 8009024:	08009059 	.word	0x08009059
 8009028:	08009059 	.word	0x08009059
 800902c:	08009059 	.word	0x08009059
 8009030:	08009059 	.word	0x08009059
 8009034:	08009059 	.word	0x08009059
 8009038:	08009059 	.word	0x08009059
 800903c:	08009059 	.word	0x08009059
 8009040:	08009059 	.word	0x08009059
 8009044:	08009059 	.word	0x08009059
 8009048:	08009059 	.word	0x08009059
 800904c:	08009059 	.word	0x08009059
 8009050:	08009059 	.word	0x08009059
 8009054:	08009059 	.word	0x08009059
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009058:	bf00      	nop
  }

  return (USBD_OK);
 800905a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	4808      	ldr	r0, [pc, #32]	@ (8009098 <CDC_Receive_FS+0x30>)
 8009076:	f7fe fbc3 	bl	8007800 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800907a:	4807      	ldr	r0, [pc, #28]	@ (8009098 <CDC_Receive_FS+0x30>)
 800907c:	f7fe fc1e 	bl	80078bc <USBD_CDC_ReceivePacket>
  CDCReceiveCallback(Buf, *Len);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7f7 fddc 	bl	8000c44 <CDCReceiveCallback>
  return (USBD_OK);
 800908c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	200031d4 	.word	0x200031d4

0800909c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80090ac:	4b0d      	ldr	r3, [pc, #52]	@ (80090e4 <CDC_Transmit_FS+0x48>)
 80090ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80090be:	2301      	movs	r3, #1
 80090c0:	e00b      	b.n	80090da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090c2:	887b      	ldrh	r3, [r7, #2]
 80090c4:	461a      	mov	r2, r3
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	4806      	ldr	r0, [pc, #24]	@ (80090e4 <CDC_Transmit_FS+0x48>)
 80090ca:	f7fe fb77 	bl	80077bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090ce:	4805      	ldr	r0, [pc, #20]	@ (80090e4 <CDC_Transmit_FS+0x48>)
 80090d0:	f7fe fbb4 	bl	800783c <USBD_CDC_TransmitPacket>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	200031d4 	.word	0x200031d4

080090e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80090fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
	...

0800910c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	6039      	str	r1, [r7, #0]
 8009116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2212      	movs	r2, #18
 800911c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800911e:	4b03      	ldr	r3, [pc, #12]	@ (800912c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	200000cc 	.word	0x200000cc

08009130 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	2204      	movs	r2, #4
 8009140:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009142:	4b03      	ldr	r3, [pc, #12]	@ (8009150 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	200000e0 	.word	0x200000e0

08009154 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	6039      	str	r1, [r7, #0]
 800915e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	4907      	ldr	r1, [pc, #28]	@ (8009188 <USBD_FS_ProductStrDescriptor+0x34>)
 800916a:	4808      	ldr	r0, [pc, #32]	@ (800918c <USBD_FS_ProductStrDescriptor+0x38>)
 800916c:	f7ff fdf2 	bl	8008d54 <USBD_GetString>
 8009170:	e004      	b.n	800917c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4904      	ldr	r1, [pc, #16]	@ (8009188 <USBD_FS_ProductStrDescriptor+0x34>)
 8009176:	4805      	ldr	r0, [pc, #20]	@ (800918c <USBD_FS_ProductStrDescriptor+0x38>)
 8009178:	f7ff fdec 	bl	8008d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800917c:	4b02      	ldr	r3, [pc, #8]	@ (8009188 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20003cb0 	.word	0x20003cb0
 800918c:	080099cc 	.word	0x080099cc

08009190 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	6039      	str	r1, [r7, #0]
 800919a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	4904      	ldr	r1, [pc, #16]	@ (80091b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091a0:	4804      	ldr	r0, [pc, #16]	@ (80091b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091a2:	f7ff fdd7 	bl	8008d54 <USBD_GetString>
  return USBD_StrDesc;
 80091a6:	4b02      	ldr	r3, [pc, #8]	@ (80091b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20003cb0 	.word	0x20003cb0
 80091b4:	080099e4 	.word	0x080099e4

080091b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	6039      	str	r1, [r7, #0]
 80091c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	221a      	movs	r2, #26
 80091c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091ca:	f000 f843 	bl	8009254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091ce:	4b02      	ldr	r3, [pc, #8]	@ (80091d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	200000e4 	.word	0x200000e4

080091dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	6039      	str	r1, [r7, #0]
 80091e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d105      	bne.n	80091fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	4907      	ldr	r1, [pc, #28]	@ (8009210 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091f2:	4808      	ldr	r0, [pc, #32]	@ (8009214 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091f4:	f7ff fdae 	bl	8008d54 <USBD_GetString>
 80091f8:	e004      	b.n	8009204 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	4904      	ldr	r1, [pc, #16]	@ (8009210 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091fe:	4805      	ldr	r0, [pc, #20]	@ (8009214 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009200:	f7ff fda8 	bl	8008d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009204:	4b02      	ldr	r3, [pc, #8]	@ (8009210 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20003cb0 	.word	0x20003cb0
 8009214:	080099f8 	.word	0x080099f8

08009218 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	6039      	str	r1, [r7, #0]
 8009222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d105      	bne.n	8009236 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	4907      	ldr	r1, [pc, #28]	@ (800924c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800922e:	4808      	ldr	r0, [pc, #32]	@ (8009250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009230:	f7ff fd90 	bl	8008d54 <USBD_GetString>
 8009234:	e004      	b.n	8009240 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	4904      	ldr	r1, [pc, #16]	@ (800924c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800923a:	4805      	ldr	r0, [pc, #20]	@ (8009250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800923c:	f7ff fd8a 	bl	8008d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009240:	4b02      	ldr	r3, [pc, #8]	@ (800924c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20003cb0 	.word	0x20003cb0
 8009250:	08009a04 	.word	0x08009a04

08009254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4413      	add	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d009      	beq.n	800927c <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009268:	2208      	movs	r2, #8
 800926a:	4906      	ldr	r1, [pc, #24]	@ (8009284 <Get_SerialNum+0x30>)
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 f80d 	bl	800928c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009272:	2204      	movs	r2, #4
 8009274:	4904      	ldr	r1, [pc, #16]	@ (8009288 <Get_SerialNum+0x34>)
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f808 	bl	800928c <IntToUnicode>
  }
}
 800927c:	bf00      	nop
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	200000e6 	.word	0x200000e6
 8009288:	200000f6 	.word	0x200000f6

0800928c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4613      	mov	r3, r2
 8009298:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800929e:	2300      	movs	r3, #0
 80092a0:	75fb      	strb	r3, [r7, #23]
 80092a2:	e027      	b.n	80092f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	0f1b      	lsrs	r3, r3, #28
 80092a8:	2b09      	cmp	r3, #9
 80092aa:	d80b      	bhi.n	80092c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	0f1b      	lsrs	r3, r3, #28
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	4619      	mov	r1, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	440b      	add	r3, r1
 80092bc:	3230      	adds	r2, #48	@ 0x30
 80092be:	b2d2      	uxtb	r2, r2
 80092c0:	701a      	strb	r2, [r3, #0]
 80092c2:	e00a      	b.n	80092da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	0f1b      	lsrs	r3, r3, #28
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	4619      	mov	r1, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	440b      	add	r3, r1
 80092d4:	3237      	adds	r2, #55	@ 0x37
 80092d6:	b2d2      	uxtb	r2, r2
 80092d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092e0:	7dfb      	ldrb	r3, [r7, #23]
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	3301      	adds	r3, #1
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	4413      	add	r3, r2
 80092ea:	2200      	movs	r2, #0
 80092ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	3301      	adds	r3, #1
 80092f2:	75fb      	strb	r3, [r7, #23]
 80092f4:	7dfa      	ldrb	r2, [r7, #23]
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d3d3      	bcc.n	80092a4 <IntToUnicode+0x18>
  }
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
	...

0800930c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08a      	sub	sp, #40	@ 0x28
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009314:	f107 0314 	add.w	r3, r7, #20
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	605a      	str	r2, [r3, #4]
 800931e:	609a      	str	r2, [r3, #8]
 8009320:	60da      	str	r2, [r3, #12]
 8009322:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800932c:	d13a      	bne.n	80093a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800932e:	2300      	movs	r3, #0
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	4b1e      	ldr	r3, [pc, #120]	@ (80093ac <HAL_PCD_MspInit+0xa0>)
 8009334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009336:	4a1d      	ldr	r2, [pc, #116]	@ (80093ac <HAL_PCD_MspInit+0xa0>)
 8009338:	f043 0301 	orr.w	r3, r3, #1
 800933c:	6313      	str	r3, [r2, #48]	@ 0x30
 800933e:	4b1b      	ldr	r3, [pc, #108]	@ (80093ac <HAL_PCD_MspInit+0xa0>)
 8009340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	613b      	str	r3, [r7, #16]
 8009348:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800934a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800934e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009350:	2302      	movs	r3, #2
 8009352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009354:	2300      	movs	r3, #0
 8009356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009358:	2303      	movs	r3, #3
 800935a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800935c:	230a      	movs	r3, #10
 800935e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009360:	f107 0314 	add.w	r3, r7, #20
 8009364:	4619      	mov	r1, r3
 8009366:	4812      	ldr	r0, [pc, #72]	@ (80093b0 <HAL_PCD_MspInit+0xa4>)
 8009368:	f7f9 f88e 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800936c:	4b0f      	ldr	r3, [pc, #60]	@ (80093ac <HAL_PCD_MspInit+0xa0>)
 800936e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009370:	4a0e      	ldr	r2, [pc, #56]	@ (80093ac <HAL_PCD_MspInit+0xa0>)
 8009372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009376:	6353      	str	r3, [r2, #52]	@ 0x34
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	4b0b      	ldr	r3, [pc, #44]	@ (80093ac <HAL_PCD_MspInit+0xa0>)
 800937e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009380:	4a0a      	ldr	r2, [pc, #40]	@ (80093ac <HAL_PCD_MspInit+0xa0>)
 8009382:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009386:	6453      	str	r3, [r2, #68]	@ 0x44
 8009388:	4b08      	ldr	r3, [pc, #32]	@ (80093ac <HAL_PCD_MspInit+0xa0>)
 800938a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009390:	60fb      	str	r3, [r7, #12]
 8009392:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009394:	2200      	movs	r2, #0
 8009396:	2100      	movs	r1, #0
 8009398:	2043      	movs	r0, #67	@ 0x43
 800939a:	f7f8 fc5e 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800939e:	2043      	movs	r0, #67	@ 0x43
 80093a0:	f7f8 fc77 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093a4:	bf00      	nop
 80093a6:	3728      	adds	r7, #40	@ 0x28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	40023800 	.word	0x40023800
 80093b0:	40020000 	.word	0x40020000

080093b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80093c8:	4619      	mov	r1, r3
 80093ca:	4610      	mov	r0, r2
 80093cc:	f7fe fb5f 	bl	8007a8e <USBD_LL_SetupStage>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80093ea:	78fa      	ldrb	r2, [r7, #3]
 80093ec:	6879      	ldr	r1, [r7, #4]
 80093ee:	4613      	mov	r3, r2
 80093f0:	00db      	lsls	r3, r3, #3
 80093f2:	4413      	add	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	440b      	add	r3, r1
 80093f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	78fb      	ldrb	r3, [r7, #3]
 8009400:	4619      	mov	r1, r3
 8009402:	f7fe fb99 	bl	8007b38 <USBD_LL_DataOutStage>
}
 8009406:	bf00      	nop
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009420:	78fa      	ldrb	r2, [r7, #3]
 8009422:	6879      	ldr	r1, [r7, #4]
 8009424:	4613      	mov	r3, r2
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	4413      	add	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	440b      	add	r3, r1
 800942e:	3320      	adds	r3, #32
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	78fb      	ldrb	r3, [r7, #3]
 8009434:	4619      	mov	r1, r3
 8009436:	f7fe fc32 	bl	8007c9e <USBD_LL_DataInStage>
}
 800943a:	bf00      	nop
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe fd6c 	bl	8007f2e <USBD_LL_SOF>
}
 8009456:	bf00      	nop
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009466:	2301      	movs	r3, #1
 8009468:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	79db      	ldrb	r3, [r3, #7]
 800946e:	2b02      	cmp	r3, #2
 8009470:	d001      	beq.n	8009476 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009472:	f7f7 fc1b 	bl	8000cac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800947c:	7bfa      	ldrb	r2, [r7, #15]
 800947e:	4611      	mov	r1, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fd10 	bl	8007ea6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe fcb8 	bl	8007e02 <USBD_LL_Reset>
}
 8009492:	bf00      	nop
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe fd0b 	bl	8007ec6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	6812      	ldr	r2, [r2, #0]
 80094be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094c2:	f043 0301 	orr.w	r3, r3, #1
 80094c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	7adb      	ldrb	r3, [r3, #11]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094d0:	4b04      	ldr	r3, [pc, #16]	@ (80094e4 <HAL_PCD_SuspendCallback+0x48>)
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	4a03      	ldr	r2, [pc, #12]	@ (80094e4 <HAL_PCD_SuspendCallback+0x48>)
 80094d6:	f043 0306 	orr.w	r3, r3, #6
 80094da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	e000ed00 	.word	0xe000ed00

080094e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fd01 	bl	8007efe <USBD_LL_Resume>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009516:	78fa      	ldrb	r2, [r7, #3]
 8009518:	4611      	mov	r1, r2
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe fd59 	bl	8007fd2 <USBD_LL_IsoOUTIncomplete>
}
 8009520:	bf00      	nop
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800953a:	78fa      	ldrb	r2, [r7, #3]
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f7fe fd15 	bl	8007f6e <USBD_LL_IsoINIncomplete>
}
 8009544:	bf00      	nop
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fd6b 	bl	8008036 <USBD_LL_DevConnected>
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe fd68 	bl	800804c <USBD_LL_DevDisconnected>
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d13c      	bne.n	800960e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009594:	4a20      	ldr	r2, [pc, #128]	@ (8009618 <USBD_LL_Init+0x94>)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a1e      	ldr	r2, [pc, #120]	@ (8009618 <USBD_LL_Init+0x94>)
 80095a0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009618 <USBD_LL_Init+0x94>)
 80095a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80095ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009618 <USBD_LL_Init+0x94>)
 80095ae:	2204      	movs	r2, #4
 80095b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095b2:	4b19      	ldr	r3, [pc, #100]	@ (8009618 <USBD_LL_Init+0x94>)
 80095b4:	2202      	movs	r2, #2
 80095b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095b8:	4b17      	ldr	r3, [pc, #92]	@ (8009618 <USBD_LL_Init+0x94>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095be:	4b16      	ldr	r3, [pc, #88]	@ (8009618 <USBD_LL_Init+0x94>)
 80095c0:	2202      	movs	r2, #2
 80095c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095c4:	4b14      	ldr	r3, [pc, #80]	@ (8009618 <USBD_LL_Init+0x94>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80095ca:	4b13      	ldr	r3, [pc, #76]	@ (8009618 <USBD_LL_Init+0x94>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80095d0:	4b11      	ldr	r3, [pc, #68]	@ (8009618 <USBD_LL_Init+0x94>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80095d6:	4b10      	ldr	r3, [pc, #64]	@ (8009618 <USBD_LL_Init+0x94>)
 80095d8:	2200      	movs	r2, #0
 80095da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80095dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009618 <USBD_LL_Init+0x94>)
 80095de:	2200      	movs	r2, #0
 80095e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80095e2:	480d      	ldr	r0, [pc, #52]	@ (8009618 <USBD_LL_Init+0x94>)
 80095e4:	f7f9 f8d4 	bl	8002790 <HAL_PCD_Init>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80095ee:	f7f7 fb5d 	bl	8000cac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80095f2:	2180      	movs	r1, #128	@ 0x80
 80095f4:	4808      	ldr	r0, [pc, #32]	@ (8009618 <USBD_LL_Init+0x94>)
 80095f6:	f7fa fafe 	bl	8003bf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80095fa:	2240      	movs	r2, #64	@ 0x40
 80095fc:	2100      	movs	r1, #0
 80095fe:	4806      	ldr	r0, [pc, #24]	@ (8009618 <USBD_LL_Init+0x94>)
 8009600:	f7fa fab2 	bl	8003b68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009604:	2280      	movs	r2, #128	@ 0x80
 8009606:	2101      	movs	r1, #1
 8009608:	4803      	ldr	r0, [pc, #12]	@ (8009618 <USBD_LL_Init+0x94>)
 800960a:	f7fa faad 	bl	8003b68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	20003eb0 	.word	0x20003eb0

0800961c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009632:	4618      	mov	r0, r3
 8009634:	f7f9 f9bb 	bl	80029ae <HAL_PCD_Start>
 8009638:	4603      	mov	r3, r0
 800963a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	4618      	mov	r0, r3
 8009640:	f000 f942 	bl	80098c8 <USBD_Get_USB_Status>
 8009644:	4603      	mov	r3, r0
 8009646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009648:	7bbb      	ldrb	r3, [r7, #14]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	4608      	mov	r0, r1
 800965c:	4611      	mov	r1, r2
 800965e:	461a      	mov	r2, r3
 8009660:	4603      	mov	r3, r0
 8009662:	70fb      	strb	r3, [r7, #3]
 8009664:	460b      	mov	r3, r1
 8009666:	70bb      	strb	r3, [r7, #2]
 8009668:	4613      	mov	r3, r2
 800966a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800967a:	78bb      	ldrb	r3, [r7, #2]
 800967c:	883a      	ldrh	r2, [r7, #0]
 800967e:	78f9      	ldrb	r1, [r7, #3]
 8009680:	f7f9 fe8f 	bl	80033a2 <HAL_PCD_EP_Open>
 8009684:	4603      	mov	r3, r0
 8009686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	4618      	mov	r0, r3
 800968c:	f000 f91c 	bl	80098c8 <USBD_Get_USB_Status>
 8009690:	4603      	mov	r3, r0
 8009692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009694:	7bbb      	ldrb	r3, [r7, #14]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	460b      	mov	r3, r1
 80096a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096b8:	78fa      	ldrb	r2, [r7, #3]
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f7f9 fed8 	bl	8003472 <HAL_PCD_EP_Close>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 f8fd 	bl	80098c8 <USBD_Get_USB_Status>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096f6:	78fa      	ldrb	r2, [r7, #3]
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7f9 ff90 	bl	8003620 <HAL_PCD_EP_SetStall>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	4618      	mov	r0, r3
 8009708:	f000 f8de 	bl	80098c8 <USBD_Get_USB_Status>
 800970c:	4603      	mov	r3, r0
 800970e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009710:	7bbb      	ldrb	r3, [r7, #14]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f7f9 ffd4 	bl	80036e6 <HAL_PCD_EP_ClrStall>
 800973e:	4603      	mov	r3, r0
 8009740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	4618      	mov	r0, r3
 8009746:	f000 f8bf 	bl	80098c8 <USBD_Get_USB_Status>
 800974a:	4603      	mov	r3, r0
 800974c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800974e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800976a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800976c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009770:	2b00      	cmp	r3, #0
 8009772:	da0b      	bge.n	800978c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800977a:	68f9      	ldr	r1, [r7, #12]
 800977c:	4613      	mov	r3, r2
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	4413      	add	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	440b      	add	r3, r1
 8009786:	3316      	adds	r3, #22
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	e00b      	b.n	80097a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800978c:	78fb      	ldrb	r3, [r7, #3]
 800978e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009792:	68f9      	ldr	r1, [r7, #12]
 8009794:	4613      	mov	r3, r2
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80097a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097ca:	78fa      	ldrb	r2, [r7, #3]
 80097cc:	4611      	mov	r1, r2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7f9 fdc3 	bl	800335a <HAL_PCD_SetAddress>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f874 	bl	80098c8 <USBD_Get_USB_Status>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b086      	sub	sp, #24
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
 80097fa:	460b      	mov	r3, r1
 80097fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800980c:	7af9      	ldrb	r1, [r7, #11]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	f7f9 fecb 	bl	80035ac <HAL_PCD_EP_Transmit>
 8009816:	4603      	mov	r3, r0
 8009818:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800981a:	7dfb      	ldrb	r3, [r7, #23]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 f853 	bl	80098c8 <USBD_Get_USB_Status>
 8009822:	4603      	mov	r3, r0
 8009824:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009826:	7dbb      	ldrb	r3, [r7, #22]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	460b      	mov	r3, r1
 800983e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800984e:	7af9      	ldrb	r1, [r7, #11]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	f7f9 fe57 	bl	8003506 <HAL_PCD_EP_Receive>
 8009858:	4603      	mov	r3, r0
 800985a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	4618      	mov	r0, r3
 8009860:	f000 f832 	bl	80098c8 <USBD_Get_USB_Status>
 8009864:	4603      	mov	r3, r0
 8009866:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009868:	7dbb      	ldrb	r3, [r7, #22]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	460b      	mov	r3, r1
 800987c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009884:	78fa      	ldrb	r2, [r7, #3]
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f7f9 fe77 	bl	800357c <HAL_PCD_EP_GetRxCount>
 800988e:	4603      	mov	r3, r0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098a0:	4b03      	ldr	r3, [pc, #12]	@ (80098b0 <USBD_static_malloc+0x18>)
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	20004394 	.word	0x20004394

080098b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]

}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d817      	bhi.n	800990c <USBD_Get_USB_Status+0x44>
 80098dc:	a201      	add	r2, pc, #4	@ (adr r2, 80098e4 <USBD_Get_USB_Status+0x1c>)
 80098de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e2:	bf00      	nop
 80098e4:	080098f5 	.word	0x080098f5
 80098e8:	080098fb 	.word	0x080098fb
 80098ec:	08009901 	.word	0x08009901
 80098f0:	08009907 	.word	0x08009907
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
    break;
 80098f8:	e00b      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098fa:	2303      	movs	r3, #3
 80098fc:	73fb      	strb	r3, [r7, #15]
    break;
 80098fe:	e008      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009900:	2301      	movs	r3, #1
 8009902:	73fb      	strb	r3, [r7, #15]
    break;
 8009904:	e005      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009906:	2303      	movs	r3, #3
 8009908:	73fb      	strb	r3, [r7, #15]
    break;
 800990a:	e002      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800990c:	2303      	movs	r3, #3
 800990e:	73fb      	strb	r3, [r7, #15]
    break;
 8009910:	bf00      	nop
  }
  return usb_status;
 8009912:	7bfb      	ldrb	r3, [r7, #15]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <memset>:
 8009920:	4402      	add	r2, r0
 8009922:	4603      	mov	r3, r0
 8009924:	4293      	cmp	r3, r2
 8009926:	d100      	bne.n	800992a <memset+0xa>
 8009928:	4770      	bx	lr
 800992a:	f803 1b01 	strb.w	r1, [r3], #1
 800992e:	e7f9      	b.n	8009924 <memset+0x4>

08009930 <strncmp>:
 8009930:	b510      	push	{r4, lr}
 8009932:	b16a      	cbz	r2, 8009950 <strncmp+0x20>
 8009934:	3901      	subs	r1, #1
 8009936:	1884      	adds	r4, r0, r2
 8009938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800993c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009940:	429a      	cmp	r2, r3
 8009942:	d103      	bne.n	800994c <strncmp+0x1c>
 8009944:	42a0      	cmp	r0, r4
 8009946:	d001      	beq.n	800994c <strncmp+0x1c>
 8009948:	2a00      	cmp	r2, #0
 800994a:	d1f5      	bne.n	8009938 <strncmp+0x8>
 800994c:	1ad0      	subs	r0, r2, r3
 800994e:	bd10      	pop	{r4, pc}
 8009950:	4610      	mov	r0, r2
 8009952:	e7fc      	b.n	800994e <strncmp+0x1e>

08009954 <__libc_init_array>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	4d0d      	ldr	r5, [pc, #52]	@ (800998c <__libc_init_array+0x38>)
 8009958:	4c0d      	ldr	r4, [pc, #52]	@ (8009990 <__libc_init_array+0x3c>)
 800995a:	1b64      	subs	r4, r4, r5
 800995c:	10a4      	asrs	r4, r4, #2
 800995e:	2600      	movs	r6, #0
 8009960:	42a6      	cmp	r6, r4
 8009962:	d109      	bne.n	8009978 <__libc_init_array+0x24>
 8009964:	4d0b      	ldr	r5, [pc, #44]	@ (8009994 <__libc_init_array+0x40>)
 8009966:	4c0c      	ldr	r4, [pc, #48]	@ (8009998 <__libc_init_array+0x44>)
 8009968:	f000 f818 	bl	800999c <_init>
 800996c:	1b64      	subs	r4, r4, r5
 800996e:	10a4      	asrs	r4, r4, #2
 8009970:	2600      	movs	r6, #0
 8009972:	42a6      	cmp	r6, r4
 8009974:	d105      	bne.n	8009982 <__libc_init_array+0x2e>
 8009976:	bd70      	pop	{r4, r5, r6, pc}
 8009978:	f855 3b04 	ldr.w	r3, [r5], #4
 800997c:	4798      	blx	r3
 800997e:	3601      	adds	r6, #1
 8009980:	e7ee      	b.n	8009960 <__libc_init_array+0xc>
 8009982:	f855 3b04 	ldr.w	r3, [r5], #4
 8009986:	4798      	blx	r3
 8009988:	3601      	adds	r6, #1
 800998a:	e7f2      	b.n	8009972 <__libc_init_array+0x1e>
 800998c:	08009a34 	.word	0x08009a34
 8009990:	08009a34 	.word	0x08009a34
 8009994:	08009a34 	.word	0x08009a34
 8009998:	08009a38 	.word	0x08009a38

0800999c <_init>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr

080099a8 <_fini>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	bf00      	nop
 80099ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ae:	bc08      	pop	{r3}
 80099b0:	469e      	mov	lr, r3
 80099b2:	4770      	bx	lr
