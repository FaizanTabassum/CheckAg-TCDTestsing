
STMValidationSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009614  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080097b4  080097b4  0000a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009910  08009910  0000b3d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009910  08009910  0000a910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009918  08009918  0000b3d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009918  08009918  0000a918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800991c  0800991c  0000a91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003d0  20000000  08009920  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001800  200003d0  08009cf0  0000b3d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bd0  08009cf0  0000bbd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b3d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d94  00000000  00000000  0000b400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e6  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00023880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e43  00000000  00000000  00024b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a35b  00000000  00000000  00025973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b20  00000000  00000000  0003fcce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b1e2  00000000  00000000  000577ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f29d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005328  00000000  00000000  000f2a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000f7d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003d0 	.word	0x200003d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800979c 	.word	0x0800979c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003d4 	.word	0x200003d4
 80001dc:	0800979c 	.word	0x0800979c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fdea 	bl	800114c <HAL_Init>

  /* USER CODE BEGIN Init */
  InitializeHeaderFooter();
 8000578:	f000 fb3c 	bl	8000bf4 <InitializeHeaderFooter>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f824 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 faf0 	bl	8000b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000584:	f000 face 	bl	8000b24 <MX_DMA_Init>
  MX_TIM2_Init();
 8000588:	f000 f8dc 	bl	8000744 <MX_TIM2_Init>
  MX_TIM3_Init();
 800058c:	f000 f952 	bl	8000834 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000590:	f000 f9c6 	bl	8000920 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000594:	f000 fa36 	bl	8000a04 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000598:	f007 ff34 	bl	8008404 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800059c:	f000 f880 	bl	80006a0 <MX_ADC1_Init>
//  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
////  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
//  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH

  if (!start_command_received) {
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <main+0x50>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d108      	bne.n	80005bc <main+0x4c>
  CDC_Transmit_FS("Target Ready\r\n",14);
 80005aa:	210e      	movs	r1, #14
 80005ac:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <main+0x54>)
 80005ae:	f007 ffed 	bl	800858c <CDC_Transmit_FS>
  HAL_Delay(1000);}
 80005b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b6:	f000 fe3b 	bl	8001230 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x4c>
 80005c0:	2000069a 	.word	0x2000069a
 80005c4:	080097b4 	.word	0x080097b4

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	@ 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f008 fc4e 	bl	8008e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <SystemClock_Config+0xd0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a28      	ldr	r2, [pc, #160]	@ (8000698 <SystemClock_Config+0xd0>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b23      	ldr	r3, [pc, #140]	@ (800069c <SystemClock_Config+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <SystemClock_Config+0xd4>)
 8000616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800063c:	2319      	movs	r3, #25
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000646:	2304      	movs	r3, #4
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f003 f842 	bl	80036dc <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065e:	f000 fb25 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f003 faa4 	bl	8003bcc <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800068a:	f000 fb0f 	bl	8000cac <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	@ 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b2:	4b22      	ldr	r3, [pc, #136]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006b4:	4a22      	ldr	r2, [pc, #136]	@ (8000740 <MX_ADC1_Init+0xa0>)
 80006b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b8:	4b20      	ldr	r3, [pc, #128]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006da:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006e4:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 80006e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_ADC1_Init+0x9c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_ADC1_Init+0x9c>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	@ (800073c <MX_ADC1_Init+0x9c>)
 8000706:	f000 fdb7 	bl	8001278 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000710:	f000 facc 	bl	8000cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000714:	2303      	movs	r3, #3
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_ADC1_Init+0x9c>)
 8000726:	f000 fdeb 	bl	8001300 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000730:	f000 fabc 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200003ec 	.word	0x200003ec
 8000740:	40012000 	.word	0x40012000

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	@ 0x38
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]
 8000772:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000774:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_TIM2_Init+0xe8>)
 8000776:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800077a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800077c:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <MX_TIM2_Init+0xe8>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_TIM2_Init+0xe8>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <MX_TIM2_Init+0xe8>)
 800078a:	4a29      	ldr	r2, [pc, #164]	@ (8000830 <MX_TIM2_Init+0xec>)
 800078c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078e:	4b27      	ldr	r3, [pc, #156]	@ (800082c <MX_TIM2_Init+0xe8>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <MX_TIM2_Init+0xe8>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800079a:	4824      	ldr	r0, [pc, #144]	@ (800082c <MX_TIM2_Init+0xe8>)
 800079c:	f003 fbce 	bl	8003f3c <HAL_TIM_Base_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80007a6:	f000 fa81 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b4:	4619      	mov	r1, r3
 80007b6:	481d      	ldr	r0, [pc, #116]	@ (800082c <MX_TIM2_Init+0xe8>)
 80007b8:	f003 fe1a 	bl	80043f0 <HAL_TIM_ConfigClockSource>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007c2:	f000 fa73 	bl	8000cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007c6:	4819      	ldr	r0, [pc, #100]	@ (800082c <MX_TIM2_Init+0xe8>)
 80007c8:	f003 fc07 	bl	8003fda <HAL_TIM_PWM_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007d2:	f000 fa6b 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80007d6:	2310      	movs	r3, #16
 80007d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80007da:	2380      	movs	r3, #128	@ 0x80
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4619      	mov	r1, r3
 80007e4:	4811      	ldr	r0, [pc, #68]	@ (800082c <MX_TIM2_Init+0xe8>)
 80007e6:	f004 fa83 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007f0:	f000 fa5c 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f4:	2360      	movs	r3, #96	@ 0x60
 80007f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 80007f8:	f242 2373 	movw	r3, #8819	@ 0x2273
 80007fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	@ (800082c <MX_TIM2_Init+0xe8>)
 800080e:	f003 fd2d 	bl	800426c <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000818:	f000 fa48 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800081c:	4803      	ldr	r0, [pc, #12]	@ (800082c <MX_TIM2_Init+0xe8>)
 800081e:	f000 fb51 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 8000822:	bf00      	nop
 8000824:	3738      	adds	r7, #56	@ 0x38
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000494 	.word	0x20000494
 8000830:	000802c7 	.word	0x000802c7

08000834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	@ 0x38
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000864:	4b2c      	ldr	r3, [pc, #176]	@ (8000918 <MX_TIM3_Init+0xe4>)
 8000866:	4a2d      	ldr	r2, [pc, #180]	@ (800091c <MX_TIM3_Init+0xe8>)
 8000868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800086a:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <MX_TIM3_Init+0xe4>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b29      	ldr	r3, [pc, #164]	@ (8000918 <MX_TIM3_Init+0xe4>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 8000876:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_TIM3_Init+0xe4>)
 8000878:	22a7      	movs	r2, #167	@ 0xa7
 800087a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <MX_TIM3_Init+0xe4>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <MX_TIM3_Init+0xe4>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000888:	4823      	ldr	r0, [pc, #140]	@ (8000918 <MX_TIM3_Init+0xe4>)
 800088a:	f003 fb57 	bl	8003f3c <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000894:	f000 fa0a 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800089e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a2:	4619      	mov	r1, r3
 80008a4:	481c      	ldr	r0, [pc, #112]	@ (8000918 <MX_TIM3_Init+0xe4>)
 80008a6:	f003 fda3 	bl	80043f0 <HAL_TIM_ConfigClockSource>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80008b0:	f000 f9fc 	bl	8000cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008b4:	4818      	ldr	r0, [pc, #96]	@ (8000918 <MX_TIM3_Init+0xe4>)
 80008b6:	f003 fb90 	bl	8003fda <HAL_TIM_PWM_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80008c0:	f000 f9f4 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4619      	mov	r1, r3
 80008d2:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_TIM3_Init+0xe4>)
 80008d4:	f004 fa0c 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80008de:	f000 f9e5 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e2:	2360      	movs	r3, #96	@ 0x60
 80008e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 80008e6:	2353      	movs	r3, #83	@ 0x53
 80008e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <MX_TIM3_Init+0xe4>)
 80008fa:	f003 fcb7 	bl	800426c <HAL_TIM_PWM_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000904:	f000 f9d2 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <MX_TIM3_Init+0xe4>)
 800090a:	f000 fadb 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 800090e:	bf00      	nop
 8000910:	3738      	adds	r7, #56	@ 0x38
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200004dc 	.word	0x200004dc
 800091c:	40000400 	.word	0x40000400

08000920 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	@ 0x38
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000950:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000952:	4a2b      	ldr	r2, [pc, #172]	@ (8000a00 <MX_TIM4_Init+0xe0>)
 8000954:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000956:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <MX_TIM4_Init+0xdc>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 8000962:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000964:	22a7      	movs	r2, #167	@ 0xa7
 8000966:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b24      	ldr	r3, [pc, #144]	@ (80009fc <MX_TIM4_Init+0xdc>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000974:	4821      	ldr	r0, [pc, #132]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000976:	f003 fae1 	bl	8003f3c <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000980:	f000 f994 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800098a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800098e:	4619      	mov	r1, r3
 8000990:	481a      	ldr	r0, [pc, #104]	@ (80009fc <MX_TIM4_Init+0xdc>)
 8000992:	f003 fd2d 	bl	80043f0 <HAL_TIM_ConfigClockSource>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800099c:	f000 f986 	bl	8000cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009a0:	4816      	ldr	r0, [pc, #88]	@ (80009fc <MX_TIM4_Init+0xdc>)
 80009a2:	f003 fb1a 	bl	8003fda <HAL_TIM_PWM_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80009ac:	f000 f97e 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4619      	mov	r1, r3
 80009be:	480f      	ldr	r0, [pc, #60]	@ (80009fc <MX_TIM4_Init+0xdc>)
 80009c0:	f004 f996 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80009ca:	f000 f96f 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ce:	2360      	movs	r3, #96	@ 0x60
 80009d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 80009d2:	2329      	movs	r3, #41	@ 0x29
 80009d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	220c      	movs	r2, #12
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_TIM4_Init+0xdc>)
 80009e6:	f003 fc41 	bl	800426c <HAL_TIM_PWM_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80009f0:	f000 f95c 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3738      	adds	r7, #56	@ 0x38
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000524 	.word	0x20000524
 8000a00:	40000800 	.word	0x40000800

08000a04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b092      	sub	sp, #72	@ 0x48
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a44:	4b34      	ldr	r3, [pc, #208]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a46:	4a35      	ldr	r2, [pc, #212]	@ (8000b1c <MX_TIM5_Init+0x118>)
 8000a48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000a4a:	4b33      	ldr	r3, [pc, #204]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 8000a56:	4b30      	ldr	r3, [pc, #192]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a58:	4a31      	ldr	r2, [pc, #196]	@ (8000b20 <MX_TIM5_Init+0x11c>)
 8000a5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a68:	482b      	ldr	r0, [pc, #172]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a6a:	f003 fa67 	bl	8003f3c <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000a74:	f000 f91a 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a82:	4619      	mov	r1, r3
 8000a84:	4824      	ldr	r0, [pc, #144]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a86:	f003 fcb3 	bl	80043f0 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a90:	f000 f90c 	bl	8000cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a94:	4820      	ldr	r0, [pc, #128]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000a96:	f003 faa0 	bl	8003fda <HAL_TIM_PWM_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000aa0:	f000 f904 	bl	8000cac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4819      	ldr	r0, [pc, #100]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000ab4:	f003 fd63 	bl	800457e <HAL_TIM_SlaveConfigSynchro>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000abe:	f000 f8f5 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ac6:	2380      	movs	r3, #128	@ 0x80
 8000ac8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4811      	ldr	r0, [pc, #68]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000ad2:	f004 f90d 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000adc:	f000 f8e6 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae0:	2360      	movs	r3, #96	@ 0x60
 8000ae2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000ae4:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000aea:	2302      	movs	r3, #2
 8000aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	2208      	movs	r2, #8
 8000af6:	4619      	mov	r1, r3
 8000af8:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000afa:	f003 fbb7 	bl	800426c <HAL_TIM_PWM_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000b04:	f000 f8d2 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b08:	4803      	ldr	r0, [pc, #12]	@ (8000b18 <MX_TIM5_Init+0x114>)
 8000b0a:	f000 f9db 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 8000b0e:	bf00      	nop
 8000b10:	3748      	adds	r7, #72	@ 0x48
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000056c 	.word	0x2000056c
 8000b1c:	40000c00 	.word	0x40000c00
 8000b20:	000802c7 	.word	0x000802c7

08000b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_DMA_Init+0x3c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <MX_DMA_Init+0x3c>)
 8000b34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_DMA_Init+0x3c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2038      	movs	r0, #56	@ 0x38
 8000b4c:	f000 fed1 	bl	80018f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b50:	2038      	movs	r0, #56	@ 0x38
 8000b52:	f000 feea 	bl	800192a <HAL_NVIC_EnableIRQ>

}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_GPIO_Init+0x4c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <CDCReceiveCallback>:



//when the stm receives anything, it checks if it is the string start

void CDCReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
    // Ensure the buffer is null-terminated
    Buf[Len] = '\0';
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

    // Check for the "start" command
    if (strncmp((char*)Buf, "start", 5) == 0) {
 8000bc8:	2205      	movs	r2, #5
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <CDCReceiveCallback+0x38>)
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f008 f95b 	bl	8008e88 <strncmp>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d104      	bne.n	8000be2 <CDCReceiveCallback+0x2e>
    	CDC_Transmit_FS((uint8_t*)TestBuffer, 600);
 8000bd8:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <CDCReceiveCallback+0x3c>)
 8000bde:	f007 fcd5 	bl	800858c <CDC_Transmit_FS>
    }
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	080097c4 	.word	0x080097c4
 8000bf0:	2000002c 	.word	0x2000002c

08000bf4 <InitializeHeaderFooter>:
    // Configure the SH signal with the calculated period and pulse width
    Configure_SH_Signal(T_SH_ticks, SH_pulse_ticks);
}


void InitializeHeaderFooter(void) {
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	b093      	sub	sp, #76	@ 0x4c
 8000bf8:	af0c      	add	r7, sp, #48	@ 0x30
    // Construct the header
    snprintf(header, HEADER_SIZE,
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <InitializeHeaderFooter+0x80>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	4a1d      	ldr	r2, [pc, #116]	@ (8000c78 <InitializeHeaderFooter+0x84>)
 8000c02:	6812      	ldr	r2, [r2, #0]
 8000c04:	491d      	ldr	r1, [pc, #116]	@ (8000c7c <InitializeHeaderFooter+0x88>)
 8000c06:	6809      	ldr	r1, [r1, #0]
 8000c08:	481d      	ldr	r0, [pc, #116]	@ (8000c80 <InitializeHeaderFooter+0x8c>)
 8000c0a:	6800      	ldr	r0, [r0, #0]
 8000c0c:	4c1d      	ldr	r4, [pc, #116]	@ (8000c84 <InitializeHeaderFooter+0x90>)
 8000c0e:	6824      	ldr	r4, [r4, #0]
 8000c10:	4d1c      	ldr	r5, [pc, #112]	@ (8000c84 <InitializeHeaderFooter+0x90>)
 8000c12:	686d      	ldr	r5, [r5, #4]
 8000c14:	4e1b      	ldr	r6, [pc, #108]	@ (8000c84 <InitializeHeaderFooter+0x90>)
 8000c16:	68b6      	ldr	r6, [r6, #8]
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <InitializeHeaderFooter+0x90>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <InitializeHeaderFooter+0x94>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <InitializeHeaderFooter+0x98>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <InitializeHeaderFooter+0x9c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <InitializeHeaderFooter+0xa0>)
 8000c32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	9308      	str	r3, [sp, #32]
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	9307      	str	r3, [sp, #28]
 8000c44:	9606      	str	r6, [sp, #24]
 8000c46:	9505      	str	r5, [sp, #20]
 8000c48:	9404      	str	r4, [sp, #16]
 8000c4a:	9003      	str	r0, [sp, #12]
 8000c4c:	9102      	str	r1, [sp, #8]
 8000c4e:	9201      	str	r2, [sp, #4]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <InitializeHeaderFooter+0xa4>)
 8000c56:	4a11      	ldr	r2, [pc, #68]	@ (8000c9c <InitializeHeaderFooter+0xa8>)
 8000c58:	21c8      	movs	r1, #200	@ 0xc8
 8000c5a:	4811      	ldr	r0, [pc, #68]	@ (8000ca0 <InitializeHeaderFooter+0xac>)
 8000c5c:	f008 f8d8 	bl	8008e10 <sniprintf>
        VersionNo, MajorVersion, FileFormatNo, CustomizationNo, CameraType,
        DataInfo[0], DataInfo[1], DataInfo[2], DataInfo[3],
        MeasureMode, SheetData, Profile, ScaleUnitChars);

    // Construct the footer (this example just uses a simple footer, customize as needed)
    snprintf(footer, FOOTER_SIZE, "\n");
 8000c60:	4a10      	ldr	r2, [pc, #64]	@ (8000ca4 <InitializeHeaderFooter+0xb0>)
 8000c62:	2102      	movs	r1, #2
 8000c64:	4810      	ldr	r0, [pc, #64]	@ (8000ca8 <InitializeHeaderFooter+0xb4>)
 8000c66:	f008 f8d3 	bl	8008e10 <sniprintf>
}
 8000c6a:	bf00      	nop
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000004 	.word	0x20000004
 8000c78:	200005b4 	.word	0x200005b4
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	2000000c 	.word	0x2000000c
 8000c84:	200005b8 	.word	0x200005b8
 8000c88:	20000010 	.word	0x20000010
 8000c8c:	200005cc 	.word	0x200005cc
 8000c90:	20000014 	.word	0x20000014
 8000c94:	20000018 	.word	0x20000018
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	080097cc 	.word	0x080097cc
 8000ca0:	200005d0 	.word	0x200005d0
 8000ca4:	08009878 	.word	0x08009878
 8000ca8:	20000698 	.word	0x20000698

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a2e      	ldr	r2, [pc, #184]	@ (8000de0 <HAL_ADC_MspInit+0xd8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d156      	bne.n	8000dd8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a2c      	ldr	r2, [pc, #176]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a25      	ldr	r2, [pc, #148]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d62:	2308      	movs	r3, #8
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	481c      	ldr	r0, [pc, #112]	@ (8000de8 <HAL_ADC_MspInit+0xe0>)
 8000d76:	f001 f8dd 	bl	8001f34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000df0 <HAL_ADC_MspInit+0xe8>)
 8000d7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000da0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da2:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000da4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000da8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dbc:	480b      	ldr	r0, [pc, #44]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000dbe:	f000 fdcf 	bl	8001960 <HAL_DMA_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000dc8:	f7ff ff70 	bl	8000cac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000dd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dd2:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <HAL_ADC_MspInit+0xe4>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	@ 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40012000 	.word	0x40012000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	20000434 	.word	0x20000434
 8000df0:	40026410 	.word	0x40026410

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e04:	d116      	bne.n	8000e34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	4a29      	ldr	r2, [pc, #164]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e16:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	201c      	movs	r0, #28
 8000e28:	f000 fd63 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e2c:	201c      	movs	r0, #28
 8000e2e:	f000 fd7c 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000e32:	e03a      	b.n	8000eaa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d10e      	bne.n	8000e5c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4e:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
}
 8000e5a:	e026      	b.n	8000eaa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <HAL_TIM_Base_MspInit+0xc8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10e      	bne.n	8000e84 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
}
 8000e82:	e012      	b.n	8000eaa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_TIM_Base_MspInit+0xcc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d10d      	bne.n	8000eaa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9e:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40000400 	.word	0x40000400
 8000ebc:	40000800 	.word	0x40000800
 8000ec0:	40000c00 	.word	0x40000c00

08000ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ee4:	d11e      	bne.n	8000f24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b34      	ldr	r3, [pc, #208]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a33      	ldr	r2, [pc, #204]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f12:	2301      	movs	r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4828      	ldr	r0, [pc, #160]	@ (8000fc0 <HAL_TIM_MspPostInit+0xfc>)
 8000f1e:	f001 f809 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000f22:	e046      	b.n	8000fb2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a26      	ldr	r2, [pc, #152]	@ (8000fc4 <HAL_TIM_MspPostInit+0x100>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d11e      	bne.n	8000f6c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a21      	ldr	r2, [pc, #132]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f4a:	2340      	movs	r3, #64	@ 0x40
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4816      	ldr	r0, [pc, #88]	@ (8000fc0 <HAL_TIM_MspPostInit+0xfc>)
 8000f66:	f000 ffe5 	bl	8001f34 <HAL_GPIO_Init>
}
 8000f6a:	e022      	b.n	8000fb2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a15      	ldr	r2, [pc, #84]	@ (8000fc8 <HAL_TIM_MspPostInit+0x104>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d11d      	bne.n	8000fb2 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_TIM_MspPostInit+0xf8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f92:	2304      	movs	r3, #4
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <HAL_TIM_MspPostInit+0xfc>)
 8000fae:	f000 ffc1 	bl	8001f34 <HAL_GPIO_Init>
}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	@ 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40000400 	.word	0x40000400
 8000fc8:	40000c00 	.word	0x40000c00

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f000 f8e5 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <TIM2_IRQHandler+0x10>)
 8001032:	f003 f82b 	bl	800408c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000494 	.word	0x20000494

08001040 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <DMA2_Stream0_IRQHandler+0x10>)
 8001046:	f000 fd39 	bl	8001abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000434 	.word	0x20000434

08001054 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <OTG_FS_IRQHandler+0x10>)
 800105a:	f001 fa33 	bl	80024c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20001384 	.word	0x20001384

08001068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001070:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <_sbrk+0x5c>)
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <_sbrk+0x60>)
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800107c:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <_sbrk+0x64>)
 8001086:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <_sbrk+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	429a      	cmp	r2, r3
 8001096:	d207      	bcs.n	80010a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001098:	f007 ff08 	bl	8008eac <__errno>
 800109c:	4603      	mov	r3, r0
 800109e:	220c      	movs	r2, #12
 80010a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e009      	b.n	80010bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a8:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <_sbrk+0x64>)
 80010b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20010000 	.word	0x20010000
 80010c8:	00000400 	.word	0x00000400
 80010cc:	2000069c 	.word	0x2000069c
 80010d0:	20001bd0 	.word	0x20001bd0

080010d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <SystemInit+0x20>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <SystemInit+0x20>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001130 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010fc:	f7ff ffea 	bl	80010d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	@ (8001138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	@ (8001144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001126:	f007 fec7 	bl	8008eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fa21 	bl	8000570 <main>
  bx  lr    
 800112e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	200003d0 	.word	0x200003d0
  ldr r2, =_sidata
 800113c:	08009920 	.word	0x08009920
  ldr r2, =_sbss
 8001140:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 8001144:	20001bd0 	.word	0x20001bd0

08001148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <HAL_Init+0x40>)
 8001156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800115a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <HAL_Init+0x40>)
 8001162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a07      	ldr	r2, [pc, #28]	@ (800118c <HAL_Init+0x40>)
 800116e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 fbb1 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117a:	200f      	movs	r0, #15
 800117c:	f000 f808 	bl	8001190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001180:	f7ff fd9a 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023c00 	.word	0x40023c00

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_InitTick+0x54>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_InitTick+0x58>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fbc9 	bl	8001946 <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00e      	b.n	80011dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d80a      	bhi.n	80011da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f000 fb91 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4a06      	ldr	r2, [pc, #24]	@ (80011ec <HAL_InitTick+0x5c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000284 	.word	0x20000284
 80011e8:	2000028c 	.word	0x2000028c
 80011ec:	20000288 	.word	0x20000288

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	2000028c 	.word	0x2000028c
 8001214:	200006a0 	.word	0x200006a0

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200006a0 	.word	0x200006a0

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff ffee 	bl	8001218 <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffde 	bl	8001218 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000028c 	.word	0x2000028c

08001278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e033      	b.n	80012f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fd36 	bl	8000d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d118      	bne.n	80012e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012be:	f023 0302 	bic.w	r3, r3, #2
 80012c2:	f043 0202 	orr.w	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f93a 	bl	8001544 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f023 0303 	bic.w	r3, r3, #3
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80012e6:	e001      	b.n	80012ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1c>
 8001318:	2302      	movs	r3, #2
 800131a:	e105      	b.n	8001528 <HAL_ADC_ConfigChannel+0x228>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b09      	cmp	r3, #9
 800132a:	d925      	bls.n	8001378 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68d9      	ldr	r1, [r3, #12]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	3b1e      	subs	r3, #30
 8001342:	2207      	movs	r2, #7
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43da      	mvns	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	400a      	ands	r2, r1
 8001350:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68d9      	ldr	r1, [r3, #12]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b29b      	uxth	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	4603      	mov	r3, r0
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4403      	add	r3, r0
 800136a:	3b1e      	subs	r3, #30
 800136c:	409a      	lsls	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	e022      	b.n	80013be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6919      	ldr	r1, [r3, #16]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	2207      	movs	r2, #7
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	400a      	ands	r2, r1
 800139a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6919      	ldr	r1, [r3, #16]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4403      	add	r3, r0
 80013b4:	409a      	lsls	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d824      	bhi.n	8001410 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b05      	subs	r3, #5
 80013d8:	221f      	movs	r2, #31
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	400a      	ands	r2, r1
 80013e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b05      	subs	r3, #5
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	635a      	str	r2, [r3, #52]	@ 0x34
 800140e:	e04c      	b.n	80014aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d824      	bhi.n	8001462 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3b23      	subs	r3, #35	@ 0x23
 800142a:	221f      	movs	r2, #31
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43da      	mvns	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	400a      	ands	r2, r1
 8001438:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	b29b      	uxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b23      	subs	r3, #35	@ 0x23
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001460:	e023      	b.n	80014aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	3b41      	subs	r3, #65	@ 0x41
 8001474:	221f      	movs	r2, #31
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	400a      	ands	r2, r1
 8001482:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	3b41      	subs	r3, #65	@ 0x41
 800149e:	fa00 f203 	lsl.w	r2, r0, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014aa:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <HAL_ADC_ConfigChannel+0x234>)
 80014ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <HAL_ADC_ConfigChannel+0x238>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d109      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x1cc>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b12      	cmp	r3, #18
 80014be:	d105      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	@ (8001538 <HAL_ADC_ConfigChannel+0x238>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d123      	bne.n	800151e <HAL_ADC_ConfigChannel+0x21e>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b10      	cmp	r3, #16
 80014dc:	d003      	beq.n	80014e6 <HAL_ADC_ConfigChannel+0x1e6>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b11      	cmp	r3, #17
 80014e4:	d11b      	bne.n	800151e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b10      	cmp	r3, #16
 80014f8:	d111      	bne.n	800151e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <HAL_ADC_ConfigChannel+0x23c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a10      	ldr	r2, [pc, #64]	@ (8001540 <HAL_ADC_ConfigChannel+0x240>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	0c9a      	lsrs	r2, r3, #18
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001510:	e002      	b.n	8001518 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3b01      	subs	r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40012300 	.word	0x40012300
 8001538:	40012000 	.word	0x40012000
 800153c:	20000284 	.word	0x20000284
 8001540:	431bde83 	.word	0x431bde83

08001544 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800154c:	4b79      	ldr	r3, [pc, #484]	@ (8001734 <ADC_Init+0x1f0>)
 800154e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	431a      	orrs	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	021a      	lsls	r2, r3, #8
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800159c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6899      	ldr	r1, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d6:	4a58      	ldr	r2, [pc, #352]	@ (8001738 <ADC_Init+0x1f4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d022      	beq.n	8001622 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6899      	ldr	r1, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800160c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6899      	ldr	r1, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	e00f      	b.n	8001642 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001640:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0202 	bic.w	r2, r2, #2
 8001650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6899      	ldr	r1, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7e1b      	ldrb	r3, [r3, #24]
 800165c:	005a      	lsls	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01b      	beq.n	80016a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800167e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800168e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6859      	ldr	r1, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	3b01      	subs	r3, #1
 800169c:	035a      	lsls	r2, r3, #13
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	e007      	b.n	80016b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	051a      	lsls	r2, r3, #20
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6899      	ldr	r1, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016fa:	025a      	lsls	r2, r3, #9
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6899      	ldr	r1, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	029a      	lsls	r2, r3, #10
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	609a      	str	r2, [r3, #8]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40012300 	.word	0x40012300
 8001738:	0f000001 	.word	0x0f000001

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4907      	ldr	r1, [pc, #28]	@ (80017d8 <__NVIC_EnableIRQ+0x38>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	@ (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	@ 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	@ 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff8e 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff29 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff3e 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff8e 	bl	8001830 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5d 	bl	80017dc <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff31 	bl	80017a0 <__NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffa2 	bl	8001898 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fc54 	bl	8001218 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e099      	b.n	8001ab0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199c:	e00f      	b.n	80019be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199e:	f7ff fc3b 	bl	8001218 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d908      	bls.n	80019be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2220      	movs	r2, #32
 80019b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2203      	movs	r2, #3
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e078      	b.n	8001ab0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e8      	bne.n	800199e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <HAL_DMA_Init+0x158>)
 80019d8:	4013      	ands	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d107      	bne.n	8001a28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a20:	4313      	orrs	r3, r2
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f023 0307 	bic.w	r3, r3, #7
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d117      	bne.n	8001a82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00e      	beq.n	8001a82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f9e9 	bl	8001e3c <DMA_CheckFifoParam>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2240      	movs	r2, #64	@ 0x40
 8001a74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e016      	b.n	8001ab0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f9a0 	bl	8001dd0 <DMA_CalcBaseAndBitshift>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a98:	223f      	movs	r2, #63	@ 0x3f
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	f010803f 	.word	0xf010803f

08001abc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8001d04 <HAL_DMA_IRQHandler+0x248>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a8e      	ldr	r2, [pc, #568]	@ (8001d08 <HAL_DMA_IRQHandler+0x24c>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0a9b      	lsrs	r3, r3, #10
 8001ad4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ada:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01a      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0204 	bic.w	r2, r2, #4
 8001b0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b14:	2208      	movs	r2, #8
 8001b16:	409a      	lsls	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d012      	beq.n	8001b5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b56:	f043 0202 	orr.w	r2, r3, #2
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b62:	2204      	movs	r2, #4
 8001b64:	409a      	lsls	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d012      	beq.n	8001b94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b80:	2204      	movs	r2, #4
 8001b82:	409a      	lsls	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8c:	f043 0204 	orr.w	r2, r3, #4
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b98:	2210      	movs	r2, #16
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d043      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03c      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d018      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d108      	bne.n	8001bec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d024      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	4798      	blx	r3
 8001bea:	e01f      	b.n	8001c2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01b      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
 8001bfc:	e016      	b.n	8001c2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d107      	bne.n	8001c1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0208 	bic.w	r2, r2, #8
 8001c1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c30:	2220      	movs	r2, #32
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 808f 	beq.w	8001d5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8087 	beq.w	8001d5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	2220      	movs	r2, #32
 8001c54:	409a      	lsls	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d136      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0216 	bic.w	r2, r2, #22
 8001c74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <HAL_DMA_IRQHandler+0x1da>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0208 	bic.w	r2, r2, #8
 8001ca4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001caa:	223f      	movs	r2, #63	@ 0x3f
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d07e      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
        }
        return;
 8001cd2:	e079      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01d      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d031      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
 8001d00:	e02c      	b.n	8001d5c <HAL_DMA_IRQHandler+0x2a0>
 8001d02:	bf00      	nop
 8001d04:	20000284 	.word	0x20000284
 8001d08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
 8001d1c:	e01e      	b.n	8001d5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10f      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0210 	bic.w	r2, r2, #16
 8001d3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d032      	beq.n	8001dca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d022      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2205      	movs	r2, #5
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d307      	bcc.n	8001da4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f2      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x2cc>
 8001da2:	e000      	b.n	8001da6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001da4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
 8001dc6:	e000      	b.n	8001dca <HAL_DMA_IRQHandler+0x30e>
        return;
 8001dc8:	bf00      	nop
    }
  }
}
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	3b10      	subs	r3, #16
 8001de0:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <DMA_CalcBaseAndBitshift+0x64>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dea:	4a13      	ldr	r2, [pc, #76]	@ (8001e38 <DMA_CalcBaseAndBitshift+0x68>)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d909      	bls.n	8001e12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	1d1a      	adds	r2, r3, #4
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e10:	e007      	b.n	8001e22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e1a:	f023 0303 	bic.w	r3, r3, #3
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	aaaaaaab 	.word	0xaaaaaaab
 8001e38:	080098d4 	.word	0x080098d4

08001e3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d11f      	bne.n	8001e96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d856      	bhi.n	8001f0a <DMA_CheckFifoParam+0xce>
 8001e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e64 <DMA_CheckFifoParam+0x28>)
 8001e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e62:	bf00      	nop
 8001e64:	08001e75 	.word	0x08001e75
 8001e68:	08001e87 	.word	0x08001e87
 8001e6c:	08001e75 	.word	0x08001e75
 8001e70:	08001f0b 	.word	0x08001f0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d046      	beq.n	8001f0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e84:	e043      	b.n	8001f0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e8e:	d140      	bne.n	8001f12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e94:	e03d      	b.n	8001f12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e9e:	d121      	bne.n	8001ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d837      	bhi.n	8001f16 <DMA_CheckFifoParam+0xda>
 8001ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8001eac <DMA_CheckFifoParam+0x70>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001ebd 	.word	0x08001ebd
 8001eb0:	08001ec3 	.word	0x08001ec3
 8001eb4:	08001ebd 	.word	0x08001ebd
 8001eb8:	08001ed5 	.word	0x08001ed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec0:	e030      	b.n	8001f24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d025      	beq.n	8001f1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ed2:	e022      	b.n	8001f1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001edc:	d11f      	bne.n	8001f1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ee2:	e01c      	b.n	8001f1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d903      	bls.n	8001ef2 <DMA_CheckFifoParam+0xb6>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d003      	beq.n	8001ef8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ef0:	e018      	b.n	8001f24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef6:	e015      	b.n	8001f24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00e      	beq.n	8001f22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
      break;
 8001f08:	e00b      	b.n	8001f22 <DMA_CheckFifoParam+0xe6>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e00a      	b.n	8001f24 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0e:	bf00      	nop
 8001f10:	e008      	b.n	8001f24 <DMA_CheckFifoParam+0xe8>
      break;
 8001f12:	bf00      	nop
 8001f14:	e006      	b.n	8001f24 <DMA_CheckFifoParam+0xe8>
      break;
 8001f16:	bf00      	nop
 8001f18:	e004      	b.n	8001f24 <DMA_CheckFifoParam+0xe8>
      break;
 8001f1a:	bf00      	nop
 8001f1c:	e002      	b.n	8001f24 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f1e:	bf00      	nop
 8001f20:	e000      	b.n	8001f24 <DMA_CheckFifoParam+0xe8>
      break;
 8001f22:	bf00      	nop
    }
  } 
  
  return status; 
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	@ 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e159      	b.n	8002204 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f50:	2201      	movs	r2, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	f040 8148 	bne.w	80021fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d005      	beq.n	8001f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d130      	bne.n	8001fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 0201 	and.w	r2, r3, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d017      	beq.n	8002024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d123      	bne.n	8002078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	69b9      	ldr	r1, [r7, #24]
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80a2 	beq.w	80021fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b57      	ldr	r3, [pc, #348]	@ (800221c <HAL_GPIO_Init+0x2e8>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	4a56      	ldr	r2, [pc, #344]	@ (800221c <HAL_GPIO_Init+0x2e8>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ca:	4b54      	ldr	r3, [pc, #336]	@ (800221c <HAL_GPIO_Init+0x2e8>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d6:	4a52      	ldr	r2, [pc, #328]	@ (8002220 <HAL_GPIO_Init+0x2ec>)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a49      	ldr	r2, [pc, #292]	@ (8002224 <HAL_GPIO_Init+0x2f0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d019      	beq.n	8002136 <HAL_GPIO_Init+0x202>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a48      	ldr	r2, [pc, #288]	@ (8002228 <HAL_GPIO_Init+0x2f4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0x1fe>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a47      	ldr	r2, [pc, #284]	@ (800222c <HAL_GPIO_Init+0x2f8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00d      	beq.n	800212e <HAL_GPIO_Init+0x1fa>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a46      	ldr	r2, [pc, #280]	@ (8002230 <HAL_GPIO_Init+0x2fc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <HAL_GPIO_Init+0x1f6>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a45      	ldr	r2, [pc, #276]	@ (8002234 <HAL_GPIO_Init+0x300>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d101      	bne.n	8002126 <HAL_GPIO_Init+0x1f2>
 8002122:	2304      	movs	r3, #4
 8002124:	e008      	b.n	8002138 <HAL_GPIO_Init+0x204>
 8002126:	2307      	movs	r3, #7
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x204>
 800212a:	2303      	movs	r3, #3
 800212c:	e004      	b.n	8002138 <HAL_GPIO_Init+0x204>
 800212e:	2302      	movs	r3, #2
 8002130:	e002      	b.n	8002138 <HAL_GPIO_Init+0x204>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x204>
 8002136:	2300      	movs	r3, #0
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	4093      	lsls	r3, r2
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002148:	4935      	ldr	r1, [pc, #212]	@ (8002220 <HAL_GPIO_Init+0x2ec>)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002156:	4b38      	ldr	r3, [pc, #224]	@ (8002238 <HAL_GPIO_Init+0x304>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217a:	4a2f      	ldr	r2, [pc, #188]	@ (8002238 <HAL_GPIO_Init+0x304>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002180:	4b2d      	ldr	r3, [pc, #180]	@ (8002238 <HAL_GPIO_Init+0x304>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a4:	4a24      	ldr	r2, [pc, #144]	@ (8002238 <HAL_GPIO_Init+0x304>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021aa:	4b23      	ldr	r3, [pc, #140]	@ (8002238 <HAL_GPIO_Init+0x304>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002238 <HAL_GPIO_Init+0x304>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <HAL_GPIO_Init+0x304>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002238 <HAL_GPIO_Init+0x304>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3301      	adds	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	f67f aea2 	bls.w	8001f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40013c00 	.word	0x40013c00

0800223c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af02      	add	r7, sp, #8
 8002242:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e101      	b.n	8002452 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f006 fac7 	bl	80087fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2203      	movs	r2, #3
 8002272:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800227c:	d102      	bne.n	8002284 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f002 feca 	bl	8005022 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7c1a      	ldrb	r2, [r3, #16]
 8002296:	f88d 2000 	strb.w	r2, [sp]
 800229a:	3304      	adds	r3, #4
 800229c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800229e:	f002 fda9 	bl	8004df4 <USB_CoreInit>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0ce      	b.n	8002452 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 fec2 	bl	8005044 <USB_SetCurrentMode>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0bf      	b.n	8002452 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e04a      	b.n	800236e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3315      	adds	r3, #21
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3314      	adds	r3, #20
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	b298      	uxth	r0, r3
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	332e      	adds	r3, #46	@ 0x2e
 8002314:	4602      	mov	r2, r0
 8002316:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	3318      	adds	r3, #24
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	331c      	adds	r3, #28
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3320      	adds	r3, #32
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3324      	adds	r3, #36	@ 0x24
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	3301      	adds	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	791b      	ldrb	r3, [r3, #4]
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	429a      	cmp	r2, r3
 8002376:	d3af      	bcc.n	80022d8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e044      	b.n	8002408 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	3301      	adds	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	791b      	ldrb	r3, [r3, #4]
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	429a      	cmp	r2, r3
 8002410:	d3b5      	bcc.n	800237e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7c1a      	ldrb	r2, [r3, #16]
 800241a:	f88d 2000 	strb.w	r2, [sp]
 800241e:	3304      	adds	r3, #4
 8002420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002422:	f002 fe5b 	bl	80050dc <USB_DevInit>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e00c      	b.n	8002452 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fe9f 	bl	800618e <USB_DevDisconnect>

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_PCD_Start+0x1c>
 8002472:	2302      	movs	r3, #2
 8002474:	e022      	b.n	80024bc <HAL_PCD_Start+0x62>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002496:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 fdac 	bl	8005000 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 fe4d 	bl	800614c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b08d      	sub	sp, #52	@ 0x34
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 ff0b 	bl	80062f6 <USB_GetMode>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 848c 	bne.w	8002e00 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 fe6f 	bl	80061d0 <USB_ReadInterrupts>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8482 	beq.w	8002dfe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fe5c 	bl	80061d0 <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f002 0202 	and.w	r2, r2, #2
 8002530:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fe4a 	bl	80061d0 <USB_ReadInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b10      	cmp	r3, #16
 8002544:	d161      	bne.n	800260a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699a      	ldr	r2, [r3, #24]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0210 	bic.w	r2, r2, #16
 8002554:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	3304      	adds	r3, #4
 8002574:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	0c5b      	lsrs	r3, r3, #17
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	2b02      	cmp	r3, #2
 8002580:	d124      	bne.n	80025cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d035      	beq.n	80025fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	6a38      	ldr	r0, [r7, #32]
 80025a2:	f003 fc81 	bl	8005ea8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b2:	441a      	add	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c4:	441a      	add	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	615a      	str	r2, [r3, #20]
 80025ca:	e016      	b.n	80025fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	0c5b      	lsrs	r3, r3, #17
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	2b06      	cmp	r3, #6
 80025d6:	d110      	bne.n	80025fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025de:	2208      	movs	r2, #8
 80025e0:	4619      	mov	r1, r3
 80025e2:	6a38      	ldr	r0, [r7, #32]
 80025e4:	f003 fc60 	bl	8005ea8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f4:	441a      	add	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0210 	orr.w	r2, r2, #16
 8002608:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f003 fdde 	bl	80061d0 <USB_ReadInterrupts>
 8002614:	4603      	mov	r3, r0
 8002616:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800261a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800261e:	f040 80a7 	bne.w	8002770 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 fde3 	bl	80061f6 <USB_ReadDevAllOutEpInterrupt>
 8002630:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002632:	e099      	b.n	8002768 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 808e 	beq.w	800275c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fe07 	bl	800625e <USB_ReadDevOutEPInterrupt>
 8002650:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002668:	461a      	mov	r2, r3
 800266a:	2301      	movs	r3, #1
 800266c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800266e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fea1 	bl	80033b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00c      	beq.n	800269a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800268c:	461a      	mov	r2, r3
 800268e:	2308      	movs	r3, #8
 8002690:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002692:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 ff77 	bl	8003588 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026b0:	461a      	mov	r2, r3
 80026b2:	2310      	movs	r3, #16
 80026b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d030      	beq.n	8002722 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c8:	2b80      	cmp	r3, #128	@ 0x80
 80026ca:	d109      	bne.n	80026e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	3304      	adds	r3, #4
 80026f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	78db      	ldrb	r3, [r3, #3]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d108      	bne.n	8002710 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f006 f972 	bl	80089f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800271c:	461a      	mov	r2, r3
 800271e:	2302      	movs	r3, #2
 8002720:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	2320      	movs	r3, #32
 800273c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d009      	beq.n	800275c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002754:	461a      	mov	r2, r3
 8002756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800275a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	3301      	adds	r3, #1
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	f47f af62 	bne.w	8002634 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f003 fd2b 	bl	80061d0 <USB_ReadInterrupts>
 800277a:	4603      	mov	r3, r0
 800277c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002780:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002784:	f040 80db 	bne.w	800293e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fd4c 	bl	800622a <USB_ReadDevAllInEpInterrupt>
 8002792:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002798:	e0cd      	b.n	8002936 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800279a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80c2 	beq.w	800292a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f003 fd72 	bl	800629a <USB_ReadDevInEPInterrupt>
 80027b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d057      	beq.n	8002872 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	2201      	movs	r2, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69f9      	ldr	r1, [r7, #28]
 80027de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027e2:	4013      	ands	r3, r2
 80027e4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027f2:	461a      	mov	r2, r3
 80027f4:	2301      	movs	r3, #1
 80027f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	799b      	ldrb	r3, [r3, #6]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d132      	bne.n	8002866 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	3320      	adds	r3, #32
 8002810:	6819      	ldr	r1, [r3, #0]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4403      	add	r3, r0
 8002820:	331c      	adds	r3, #28
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4419      	add	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4403      	add	r3, r0
 8002834:	3320      	adds	r3, #32
 8002836:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	2b00      	cmp	r3, #0
 800283c:	d113      	bne.n	8002866 <HAL_PCD_IRQHandler+0x3a2>
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3324      	adds	r3, #36	@ 0x24
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d108      	bne.n	8002866 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800285e:	461a      	mov	r2, r3
 8002860:	2101      	movs	r1, #1
 8002862:	f003 fd79 	bl	8006358 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f006 f846 	bl	80088fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002888:	461a      	mov	r2, r3
 800288a:	2308      	movs	r3, #8
 800288c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028a4:	461a      	mov	r2, r3
 80028a6:	2310      	movs	r3, #16
 80028a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028c0:	461a      	mov	r2, r3
 80028c2:	2340      	movs	r3, #64	@ 0x40
 80028c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d023      	beq.n	8002918 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028d2:	6a38      	ldr	r0, [r7, #32]
 80028d4:	f002 fd66 	bl	80053a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	3310      	adds	r3, #16
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	3304      	adds	r3, #4
 80028ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	78db      	ldrb	r3, [r3, #3]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d108      	bne.n	8002906 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2200      	movs	r2, #0
 80028f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f006 f889 	bl	8008a18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	4413      	add	r3, r2
 800290e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002912:	461a      	mov	r2, r3
 8002914:	2302      	movs	r3, #2
 8002916:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002922:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fcbb 	bl	80032a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	3301      	adds	r3, #1
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	f47f af2e 	bne.w	800279a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fc44 	bl	80061d0 <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800294e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002952:	d122      	bne.n	800299a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800296e:	2b01      	cmp	r3, #1
 8002970:	d108      	bne.n	8002984 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800297a:	2100      	movs	r1, #0
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fea1 	bl	80036c4 <HAL_PCDEx_LPM_Callback>
 8002982:	e002      	b.n	800298a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f006 f827 	bl	80089d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 fc16 	bl	80061d0 <USB_ReadInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ae:	d112      	bne.n	80029d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d102      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f005 ffe3 	bl	800898c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029d4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fbf8 	bl	80061d0 <USB_ReadInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ea:	f040 80b7 	bne.w	8002b5c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2110      	movs	r1, #16
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 fccb 	bl	80053a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a12:	e046      	b.n	8002aa2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a20:	461a      	mov	r2, r3
 8002a22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a26:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a38:	0151      	lsls	r1, r2, #5
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a54:	461a      	mov	r2, r3
 8002a56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a5a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a6c:	0151      	lsls	r1, r2, #5
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	440a      	add	r2, r1
 8002a72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a8c:	0151      	lsls	r1, r2, #5
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	440a      	add	r2, r1
 8002a92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002a9a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	791b      	ldrb	r3, [r3, #4]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d3b2      	bcc.n	8002a14 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002abc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ac0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7bdb      	ldrb	r3, [r3, #15]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ada:	f043 030b 	orr.w	r3, r3, #11
 8002ade:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002af0:	f043 030b 	orr.w	r3, r3, #11
 8002af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002af6:	e015      	b.n	8002b24 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b0a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b0e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b1e:	f043 030b 	orr.w	r3, r3, #11
 8002b22:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b32:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b36:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b46:	461a      	mov	r2, r3
 8002b48:	f003 fc06 	bl	8006358 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 fb35 	bl	80061d0 <USB_ReadInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b70:	d123      	bne.n	8002bba <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fbcb 	bl	8006312 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 fc88 	bl	8005496 <USB_GetDevSpeed>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681c      	ldr	r4, [r3, #0]
 8002b92:	f001 f9c7 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8002b96:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f002 f98c 	bl	8004ebc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f005 fed2 	bl	800894e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fb06 	bl	80061d0 <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d10a      	bne.n	8002be4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f005 feaf 	bl	8008932 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f002 0208 	and.w	r2, r2, #8
 8002be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 faf1 	bl	80061d0 <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf4:	2b80      	cmp	r3, #128	@ 0x80
 8002bf6:	d123      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c04:	2301      	movs	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c08:	e014      	b.n	8002c34 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0e:	4613      	mov	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d105      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fb08 	bl	800323e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	3301      	adds	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	791b      	ldrb	r3, [r3, #4]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d3e4      	bcc.n	8002c0a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fac3 	bl	80061d0 <USB_ReadInterrupts>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c54:	d13c      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c56:	2301      	movs	r3, #1
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c5a:	e02b      	b.n	8002cb4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3318      	adds	r3, #24
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d115      	bne.n	8002cae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c82:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	da12      	bge.n	8002cae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3317      	adds	r3, #23
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fac8 	bl	800323e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	791b      	ldrb	r3, [r3, #4]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d3cd      	bcc.n	8002c5c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fa7b 	bl	80061d0 <USB_ReadInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ce4:	d156      	bne.n	8002d94 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cea:	e045      	b.n	8002d78 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d12e      	bne.n	8002d72 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	da2b      	bge.n	8002d72 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002d26:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d121      	bne.n	8002d72 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d6e:	6053      	str	r3, [r2, #4]
            break;
 8002d70:	e008      	b.n	8002d84 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	3301      	adds	r3, #1
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	791b      	ldrb	r3, [r3, #4]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d3b3      	bcc.n	8002cec <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fa19 	bl	80061d0 <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002da8:	d10a      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f005 fe46 	bl	8008a3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 fa03 	bl	80061d0 <USB_ReadInterrupts>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d115      	bne.n	8002e00 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f005 fe36 	bl	8008a58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	e000      	b.n	8002e00 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002dfe:	bf00      	nop
    }
  }
}
 8002e00:	3734      	adds	r7, #52	@ 0x34
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd90      	pop	{r4, r7, pc}

08002e06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_PCD_SetAddress+0x1a>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e012      	b.n	8002e46 <HAL_PCD_SetAddress+0x40>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 f962 	bl	8006100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	4608      	mov	r0, r1
 8002e58:	4611      	mov	r1, r2
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	70fb      	strb	r3, [r7, #3]
 8002e60:	460b      	mov	r3, r1
 8002e62:	803b      	strh	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da0f      	bge.n	8002e94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f003 020f 	and.w	r2, r3, #15
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	3310      	adds	r3, #16
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	3304      	adds	r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	705a      	strb	r2, [r3, #1]
 8002e92:	e00f      	b.n	8002eb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ec0:	883a      	ldrh	r2, [r7, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	78ba      	ldrb	r2, [r7, #2]
 8002eca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ede:	78bb      	ldrb	r3, [r7, #2]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d102      	bne.n	8002eea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_PCD_EP_Open+0xaa>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e00e      	b.n	8002f16 <HAL_PCD_EP_Open+0xc8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68f9      	ldr	r1, [r7, #12]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 faea 	bl	80054e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f14:	7afb      	ldrb	r3, [r7, #11]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	da0f      	bge.n	8002f52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 020f 	and.w	r2, r3, #15
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	3310      	adds	r3, #16
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	3304      	adds	r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	705a      	strb	r2, [r3, #1]
 8002f50:	e00f      	b.n	8002f72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 020f 	and.w	r2, r3, #15
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	3304      	adds	r3, #4
 8002f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_PCD_EP_Close+0x6e>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e00e      	b.n	8002faa <HAL_PCD_EP_Close+0x8c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68f9      	ldr	r1, [r7, #12]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fb28 	bl	80055f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
 8002fc4:	f003 020f 	and.w	r2, r3, #15
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3304      	adds	r3, #4
 8002fda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2200      	movs	r2, #0
 8002fec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	799b      	ldrb	r3, [r3, #6]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d102      	bne.n	800300e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	799b      	ldrb	r3, [r3, #6]
 8003016:	461a      	mov	r2, r3
 8003018:	6979      	ldr	r1, [r7, #20]
 800301a:	f002 fbc5 	bl	80057a8 <USB_EPStartXfer>

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	f003 020f 	and.w	r2, r3, #15
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	460b      	mov	r3, r1
 8003066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003068:	7afb      	ldrb	r3, [r7, #11]
 800306a:	f003 020f 	and.w	r2, r3, #15
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	3310      	adds	r3, #16
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	3304      	adds	r3, #4
 800307e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2200      	movs	r2, #0
 8003090:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2201      	movs	r2, #1
 8003096:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	799b      	ldrb	r3, [r3, #6]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d102      	bne.n	80030b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	799b      	ldrb	r3, [r3, #6]
 80030ba:	461a      	mov	r2, r3
 80030bc:	6979      	ldr	r1, [r7, #20]
 80030be:	f002 fb73 	bl	80057a8 <USB_EPStartXfer>

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	7912      	ldrb	r2, [r2, #4]
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e04f      	b.n	800318a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da0f      	bge.n	8003112 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3310      	adds	r3, #16
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	3304      	adds	r3, #4
 8003108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	705a      	strb	r2, [r3, #1]
 8003110:	e00d      	b.n	800312e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	3304      	adds	r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	b2da      	uxtb	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_PCD_EP_SetStall+0x82>
 800314a:	2302      	movs	r3, #2
 800314c:	e01d      	b.n	800318a <HAL_PCD_EP_SetStall+0xbe>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68f9      	ldr	r1, [r7, #12]
 800315c:	4618      	mov	r0, r3
 800315e:	f002 fefb 	bl	8005f58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	7999      	ldrb	r1, [r3, #6]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800317a:	461a      	mov	r2, r3
 800317c:	f003 f8ec 	bl	8006358 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	7912      	ldrb	r2, [r2, #4]
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e042      	b.n	8003236 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	da0f      	bge.n	80031d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 020f 	and.w	r2, r3, #15
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	3310      	adds	r3, #16
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	3304      	adds	r3, #4
 80031ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	705a      	strb	r2, [r3, #1]
 80031d6:	e00f      	b.n	80031f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 020f 	and.w	r2, r3, #15
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	3304      	adds	r3, #4
 80031f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	b2da      	uxtb	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_PCD_EP_ClrStall+0x86>
 8003214:	2302      	movs	r3, #2
 8003216:	e00e      	b.n	8003236 <HAL_PCD_EP_ClrStall+0xa4>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68f9      	ldr	r1, [r7, #12]
 8003226:	4618      	mov	r0, r3
 8003228:	f002 ff04 	bl	8006034 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800324a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800324e:	2b00      	cmp	r3, #0
 8003250:	da0c      	bge.n	800326c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	3310      	adds	r3, #16
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e00c      	b.n	8003286 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68f9      	ldr	r1, [r7, #12]
 800328c:	4618      	mov	r0, r3
 800328e:	f002 fd23 	bl	8005cd8 <USB_EPStopXfer>
 8003292:	4603      	mov	r3, r0
 8003294:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003296:	7afb      	ldrb	r3, [r7, #11]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	@ 0x28
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	3310      	adds	r3, #16
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	4413      	add	r3, r2
 80032c4:	3304      	adds	r3, #4
 80032c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d901      	bls.n	80032d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e06b      	b.n	80033b0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d902      	bls.n	80032f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	3303      	adds	r3, #3
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032fc:	e02a      	b.n	8003354 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	429a      	cmp	r2, r3
 8003312:	d902      	bls.n	800331a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3303      	adds	r3, #3
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	68d9      	ldr	r1, [r3, #12]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	4603      	mov	r3, r0
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f002 fd78 	bl	8005e2c <USB_WritePacket>

    ep->xfer_buff  += len;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	441a      	add	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	441a      	add	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	429a      	cmp	r2, r3
 8003368:	d809      	bhi.n	800337e <PCD_WriteEmptyTxFifo+0xde>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003372:	429a      	cmp	r2, r3
 8003374:	d203      	bcs.n	800337e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1bf      	bne.n	80032fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	429a      	cmp	r2, r3
 8003388:	d811      	bhi.n	80033ae <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	2201      	movs	r2, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800339e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	6939      	ldr	r1, [r7, #16]
 80033a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033aa:	4013      	ands	r3, r2
 80033ac:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	333c      	adds	r3, #60	@ 0x3c
 80033d0:	3304      	adds	r3, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	799b      	ldrb	r3, [r3, #6]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d17b      	bne.n	80034e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	4a61      	ldr	r2, [pc, #388]	@ (8003580 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	f240 80b9 	bls.w	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80b3 	beq.w	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800341a:	461a      	mov	r2, r3
 800341c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003420:	6093      	str	r3, [r2, #8]
 8003422:	e0a7      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343a:	461a      	mov	r2, r3
 800343c:	2320      	movs	r3, #32
 800343e:	6093      	str	r3, [r2, #8]
 8003440:	e098      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 8093 	bne.w	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	4a4b      	ldr	r2, [pc, #300]	@ (8003580 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d90f      	bls.n	8003476 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346c:	461a      	mov	r2, r3
 800346e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003472:	6093      	str	r3, [r2, #8]
 8003474:	e07e      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	3304      	adds	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	0159      	lsls	r1, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	440b      	add	r3, r1
 8003498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a2:	1ad2      	subs	r2, r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d114      	bne.n	80034d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034c0:	461a      	mov	r2, r3
 80034c2:	2101      	movs	r1, #1
 80034c4:	f002 ff48 	bl	8006358 <USB_EP0_OutStart>
 80034c8:	e006      	b.n	80034d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	441a      	add	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f005 f9f2 	bl	80088c8 <HAL_PCD_DataOutStageCallback>
 80034e4:	e046      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	4a26      	ldr	r2, [pc, #152]	@ (8003584 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d124      	bne.n	8003538 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003504:	461a      	mov	r2, r3
 8003506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	e032      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	2320      	movs	r3, #32
 8003528:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f005 f9c9 	bl	80088c8 <HAL_PCD_DataOutStageCallback>
 8003536:	e01d      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d114      	bne.n	8003568 <PCD_EP_OutXfrComplete_int+0x1b0>
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003560:	461a      	mov	r2, r3
 8003562:	2100      	movs	r1, #0
 8003564:	f002 fef8 	bl	8006358 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f005 f9aa 	bl	80088c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	4f54300a 	.word	0x4f54300a
 8003584:	4f54310a 	.word	0x4f54310a

08003588 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	333c      	adds	r3, #60	@ 0x3c
 80035a0:	3304      	adds	r3, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a15      	ldr	r2, [pc, #84]	@ (8003610 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d90e      	bls.n	80035dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d4:	461a      	mov	r2, r3
 80035d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f005 f961 	bl	80088a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <PCD_EP_OutSetupPacket_int+0x88>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d90c      	bls.n	8003604 <PCD_EP_OutSetupPacket_int+0x7c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	799b      	ldrb	r3, [r3, #6]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035fc:	461a      	mov	r2, r3
 80035fe:	2101      	movs	r1, #1
 8003600:	f002 feaa 	bl	8006358 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	4f54300a 	.word	0x4f54300a

08003614 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
 8003620:	4613      	mov	r3, r2
 8003622:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003632:	883b      	ldrh	r3, [r7, #0]
 8003634:	0419      	lsls	r1, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	430a      	orrs	r2, r1
 800363e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003640:	e028      	b.n	8003694 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4413      	add	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e00d      	b.n	8003672 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	3340      	adds	r3, #64	@ 0x40
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	4413      	add	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	3301      	adds	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	3b01      	subs	r3, #1
 8003678:	429a      	cmp	r2, r3
 800367a:	d3ec      	bcc.n	8003656 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800367c:	883b      	ldrh	r3, [r7, #0]
 800367e:	0418      	lsls	r0, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6819      	ldr	r1, [r3, #0]
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	3b01      	subs	r3, #1
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	4302      	orrs	r2, r0
 800368c:	3340      	adds	r3, #64	@ 0x40
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e267      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d075      	beq.n	80037e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036fa:	4b88      	ldr	r3, [pc, #544]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b04      	cmp	r3, #4
 8003704:	d00c      	beq.n	8003720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003706:	4b85      	ldr	r3, [pc, #532]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800370e:	2b08      	cmp	r3, #8
 8003710:	d112      	bne.n	8003738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003712:	4b82      	ldr	r3, [pc, #520]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800371a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800371e:	d10b      	bne.n	8003738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003720:	4b7e      	ldr	r3, [pc, #504]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d05b      	beq.n	80037e4 <HAL_RCC_OscConfig+0x108>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d157      	bne.n	80037e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e242      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003740:	d106      	bne.n	8003750 <HAL_RCC_OscConfig+0x74>
 8003742:	4b76      	ldr	r3, [pc, #472]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a75      	ldr	r2, [pc, #468]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e01d      	b.n	800378c <HAL_RCC_OscConfig+0xb0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0x98>
 800375a:	4b70      	ldr	r3, [pc, #448]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a6f      	ldr	r2, [pc, #444]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b6d      	ldr	r3, [pc, #436]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6c      	ldr	r2, [pc, #432]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0xb0>
 8003774:	4b69      	ldr	r3, [pc, #420]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a68      	ldr	r2, [pc, #416]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 800377a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b66      	ldr	r3, [pc, #408]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a65      	ldr	r2, [pc, #404]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fd fd40 	bl	8001218 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800379c:	f7fd fd3c 	bl	8001218 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	@ 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e207      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b5b      	ldr	r3, [pc, #364]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0xc0>
 80037ba:	e014      	b.n	80037e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fd2c 	bl	8001218 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd fd28 	bl	8001218 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	@ 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e1f3      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	4b51      	ldr	r3, [pc, #324]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0xe8>
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d063      	beq.n	80038ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037f2:	4b4a      	ldr	r3, [pc, #296]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fe:	4b47      	ldr	r3, [pc, #284]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003806:	2b08      	cmp	r3, #8
 8003808:	d11c      	bne.n	8003844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b44      	ldr	r3, [pc, #272]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	4b41      	ldr	r3, [pc, #260]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x152>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1c7      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b3b      	ldr	r3, [pc, #236]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4937      	ldr	r1, [pc, #220]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	e03a      	b.n	80038ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384c:	4b34      	ldr	r3, [pc, #208]	@ (8003920 <HAL_RCC_OscConfig+0x244>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fd fce1 	bl	8001218 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385a:	f7fd fcdd 	bl	8001218 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1a8      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	4b2b      	ldr	r3, [pc, #172]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b28      	ldr	r3, [pc, #160]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4925      	ldr	r1, [pc, #148]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388e:	4b24      	ldr	r3, [pc, #144]	@ (8003920 <HAL_RCC_OscConfig+0x244>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd fcc0 	bl	8001218 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389c:	f7fd fcbc 	bl	8001218 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e187      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d036      	beq.n	8003934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ce:	4b15      	ldr	r3, [pc, #84]	@ (8003924 <HAL_RCC_OscConfig+0x248>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fd fca0 	bl	8001218 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fd fc9c 	bl	8001218 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e167      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <HAL_RCC_OscConfig+0x240>)
 80038f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x200>
 80038fa:	e01b      	b.n	8003934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fc:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <HAL_RCC_OscConfig+0x248>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003902:	f7fd fc89 	bl	8001218 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	e00e      	b.n	8003928 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390a:	f7fd fc85 	bl	8001218 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d907      	bls.n	8003928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e150      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
 800391c:	40023800 	.word	0x40023800
 8003920:	42470000 	.word	0x42470000
 8003924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	4b88      	ldr	r3, [pc, #544]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 800392a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ea      	bne.n	800390a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8097 	beq.w	8003a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003946:	4b81      	ldr	r3, [pc, #516]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	4b7d      	ldr	r3, [pc, #500]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003960:	6413      	str	r3, [r2, #64]	@ 0x40
 8003962:	4b7a      	ldr	r3, [pc, #488]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396e:	2301      	movs	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	4b77      	ldr	r3, [pc, #476]	@ (8003b50 <HAL_RCC_OscConfig+0x474>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397e:	4b74      	ldr	r3, [pc, #464]	@ (8003b50 <HAL_RCC_OscConfig+0x474>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a73      	ldr	r2, [pc, #460]	@ (8003b50 <HAL_RCC_OscConfig+0x474>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398a:	f7fd fc45 	bl	8001218 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fd fc41 	bl	8001218 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e10c      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b50 <HAL_RCC_OscConfig+0x474>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x2ea>
 80039b8:	4b64      	ldr	r3, [pc, #400]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039bc:	4a63      	ldr	r2, [pc, #396]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c4:	e01c      	b.n	8003a00 <HAL_RCC_OscConfig+0x324>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x30c>
 80039ce:	4b5f      	ldr	r3, [pc, #380]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	4a5e      	ldr	r2, [pc, #376]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039da:	4b5c      	ldr	r3, [pc, #368]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039de:	4a5b      	ldr	r2, [pc, #364]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0x324>
 80039e8:	4b58      	ldr	r3, [pc, #352]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ec:	4a57      	ldr	r2, [pc, #348]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f4:	4b55      	ldr	r3, [pc, #340]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f8:	4a54      	ldr	r2, [pc, #336]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039fa:	f023 0304 	bic.w	r3, r3, #4
 80039fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fd fc06 	bl	8001218 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fd fc02 	bl	8001218 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0cb      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a26:	4b49      	ldr	r3, [pc, #292]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ee      	beq.n	8003a10 <HAL_RCC_OscConfig+0x334>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a34:	f7fd fbf0 	bl	8001218 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7fd fbec 	bl	8001218 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e0b5      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a52:	4b3e      	ldr	r3, [pc, #248]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ee      	bne.n	8003a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d105      	bne.n	8003a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a64:	4b39      	ldr	r3, [pc, #228]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	4a38      	ldr	r2, [pc, #224]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80a1 	beq.w	8003bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a7a:	4b34      	ldr	r3, [pc, #208]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d05c      	beq.n	8003b40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d141      	bne.n	8003b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	4b31      	ldr	r3, [pc, #196]	@ (8003b54 <HAL_RCC_OscConfig+0x478>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fd fbc0 	bl	8001218 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fd fbbc 	bl	8001218 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e087      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	4b27      	ldr	r3, [pc, #156]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	019b      	lsls	r3, r3, #6
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	491b      	ldr	r1, [pc, #108]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <HAL_RCC_OscConfig+0x478>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fd fb95 	bl	8001218 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fd fb91 	bl	8001218 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e05c      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b04:	4b11      	ldr	r3, [pc, #68]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x416>
 8003b10:	e054      	b.n	8003bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b10      	ldr	r3, [pc, #64]	@ (8003b54 <HAL_RCC_OscConfig+0x478>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fd fb7e 	bl	8001218 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fd fb7a 	bl	8001218 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e045      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x444>
 8003b3e:	e03d      	b.n	8003bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e038      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40007000 	.word	0x40007000
 8003b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b58:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ec>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d028      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d121      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d11a      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b88:	4013      	ands	r3, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d111      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800

08003bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0cc      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be0:	4b68      	ldr	r3, [pc, #416]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d90c      	bls.n	8003c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b65      	ldr	r3, [pc, #404]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b63      	ldr	r3, [pc, #396]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0b8      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c20:	4b59      	ldr	r3, [pc, #356]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a58      	ldr	r2, [pc, #352]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c38:	4b53      	ldr	r3, [pc, #332]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4a52      	ldr	r2, [pc, #328]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c44:	4b50      	ldr	r3, [pc, #320]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	494d      	ldr	r1, [pc, #308]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d044      	beq.n	8003cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d119      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e07f      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d003      	beq.n	8003c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e06f      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e067      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003caa:	4b37      	ldr	r3, [pc, #220]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4934      	ldr	r1, [pc, #208]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cbc:	f7fd faac 	bl	8001218 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc4:	f7fd faa8 	bl	8001218 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e04f      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	4b2b      	ldr	r3, [pc, #172]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 020c 	and.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1eb      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cec:	4b25      	ldr	r3, [pc, #148]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d20c      	bcs.n	8003d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b22      	ldr	r3, [pc, #136]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	4b20      	ldr	r3, [pc, #128]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e032      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d20:	4b19      	ldr	r3, [pc, #100]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4916      	ldr	r1, [pc, #88]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3e:	4b12      	ldr	r3, [pc, #72]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	490e      	ldr	r1, [pc, #56]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d52:	f000 f821 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003d56:	4602      	mov	r2, r0
 8003d58:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	490a      	ldr	r1, [pc, #40]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003d64:	5ccb      	ldrb	r3, [r1, r3]
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	4a09      	ldr	r2, [pc, #36]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d6e:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd fa0c 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40023c00 	.word	0x40023c00
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	080098c4 	.word	0x080098c4
 8003d90:	20000284 	.word	0x20000284
 8003d94:	20000288 	.word	0x20000288

08003d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d9c:	b090      	sub	sp, #64	@ 0x40
 8003d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da4:	2300      	movs	r3, #0
 8003da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003da8:	2300      	movs	r3, #0
 8003daa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db0:	4b59      	ldr	r3, [pc, #356]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d00d      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	f200 80a1 	bhi.w	8003f04 <HAL_RCC_GetSysClockFreq+0x16c>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x34>
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d003      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dca:	e09b      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dcc:	4b53      	ldr	r3, [pc, #332]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003dce:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003dd0:	e09b      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dd2:	4b53      	ldr	r3, [pc, #332]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dd6:	e098      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003de0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003de2:	4b4d      	ldr	r3, [pc, #308]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d028      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dee:	4b4a      	ldr	r3, [pc, #296]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	099b      	lsrs	r3, r3, #6
 8003df4:	2200      	movs	r2, #0
 8003df6:	623b      	str	r3, [r7, #32]
 8003df8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e00:	2100      	movs	r1, #0
 8003e02:	4b47      	ldr	r3, [pc, #284]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e04:	fb03 f201 	mul.w	r2, r3, r1
 8003e08:	2300      	movs	r3, #0
 8003e0a:	fb00 f303 	mul.w	r3, r0, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	4a43      	ldr	r2, [pc, #268]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e12:	fba0 1202 	umull	r1, r2, r0, r2
 8003e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e18:	460a      	mov	r2, r1
 8003e1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e1e:	4413      	add	r3, r2
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e24:	2200      	movs	r2, #0
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	61fa      	str	r2, [r7, #28]
 8003e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e32:	f7fc fa25 	bl	8000280 <__aeabi_uldivmod>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e3e:	e053      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e40:	4b35      	ldr	r3, [pc, #212]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	2200      	movs	r2, #0
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	617a      	str	r2, [r7, #20]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e52:	f04f 0b00 	mov.w	fp, #0
 8003e56:	4652      	mov	r2, sl
 8003e58:	465b      	mov	r3, fp
 8003e5a:	f04f 0000 	mov.w	r0, #0
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	0159      	lsls	r1, r3, #5
 8003e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e68:	0150      	lsls	r0, r2, #5
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	ebb2 080a 	subs.w	r8, r2, sl
 8003e72:	eb63 090b 	sbc.w	r9, r3, fp
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e8a:	ebb2 0408 	subs.w	r4, r2, r8
 8003e8e:	eb63 0509 	sbc.w	r5, r3, r9
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	00eb      	lsls	r3, r5, #3
 8003e9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea0:	00e2      	lsls	r2, r4, #3
 8003ea2:	4614      	mov	r4, r2
 8003ea4:	461d      	mov	r5, r3
 8003ea6:	eb14 030a 	adds.w	r3, r4, sl
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	eb45 030b 	adc.w	r3, r5, fp
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	028b      	lsls	r3, r1, #10
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec8:	4621      	mov	r1, r4
 8003eca:	028a      	lsls	r2, r1, #10
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	60fa      	str	r2, [r7, #12]
 8003ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003edc:	f7fc f9d0 	bl	8000280 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003ef8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f02:	e002      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3740      	adds	r7, #64	@ 0x40
 8003f10:	46bd      	mov	sp, r7
 8003f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	00f42400 	.word	0x00f42400
 8003f20:	017d7840 	.word	0x017d7840

08003f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f28:	4b03      	ldr	r3, [pc, #12]	@ (8003f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000284 	.word	0x20000284

08003f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e041      	b.n	8003fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc ff46 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f000 fb74 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e041      	b.n	8004070 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d106      	bne.n	8004006 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f839 	bl	8004078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f000 fb25 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d020      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01b      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0202 	mvn.w	r2, #2
 80040c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 faa7 	bl	800462a <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fa99 	bl	8004616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 faaa 	bl	800463e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d020      	beq.n	800413c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0204 	mvn.w	r2, #4
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa81 	bl	800462a <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fa73 	bl	8004616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fa84 	bl	800463e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d020      	beq.n	8004188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01b      	beq.n	8004188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0208 	mvn.w	r2, #8
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2204      	movs	r2, #4
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa5b 	bl	800462a <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fa4d 	bl	8004616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fa5e 	bl	800463e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0210 	mvn.w	r2, #16
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2208      	movs	r2, #8
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fa35 	bl	800462a <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fa27 	bl	8004616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fa38 	bl	800463e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00c      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0201 	mvn.w	r2, #1
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fa05 	bl	8004602 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00c      	beq.n	800421c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fde2 	bl	8004de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00c      	beq.n	8004240 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa09 	bl	8004652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00c      	beq.n	8004264 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0220 	mvn.w	r2, #32
 800425c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fdb4 	bl	8004dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004286:	2302      	movs	r3, #2
 8004288:	e0ae      	b.n	80043e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b0c      	cmp	r3, #12
 8004296:	f200 809f 	bhi.w	80043d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800429a:	a201      	add	r2, pc, #4	@ (adr r2, 80042a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042d5 	.word	0x080042d5
 80042a4:	080043d9 	.word	0x080043d9
 80042a8:	080043d9 	.word	0x080043d9
 80042ac:	080043d9 	.word	0x080043d9
 80042b0:	08004315 	.word	0x08004315
 80042b4:	080043d9 	.word	0x080043d9
 80042b8:	080043d9 	.word	0x080043d9
 80042bc:	080043d9 	.word	0x080043d9
 80042c0:	08004357 	.word	0x08004357
 80042c4:	080043d9 	.word	0x080043d9
 80042c8:	080043d9 	.word	0x080043d9
 80042cc:	080043d9 	.word	0x080043d9
 80042d0:	08004397 	.word	0x08004397
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fa50 	bl	8004780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0208 	orr.w	r2, r2, #8
 80042ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0204 	bic.w	r2, r2, #4
 80042fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6999      	ldr	r1, [r3, #24]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	619a      	str	r2, [r3, #24]
      break;
 8004312:	e064      	b.n	80043de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fa96 	bl	800484c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800432e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6999      	ldr	r1, [r3, #24]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	021a      	lsls	r2, r3, #8
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	619a      	str	r2, [r3, #24]
      break;
 8004354:	e043      	b.n	80043de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fae1 	bl	8004924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0208 	orr.w	r2, r2, #8
 8004370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0204 	bic.w	r2, r2, #4
 8004380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69d9      	ldr	r1, [r3, #28]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	61da      	str	r2, [r3, #28]
      break;
 8004394:	e023      	b.n	80043de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fb2b 	bl	80049f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69d9      	ldr	r1, [r3, #28]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	021a      	lsls	r2, r3, #8
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	61da      	str	r2, [r3, #28]
      break;
 80043d6:	e002      	b.n	80043de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
      break;
 80043dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_TIM_ConfigClockSource+0x1c>
 8004408:	2302      	movs	r3, #2
 800440a:	e0b4      	b.n	8004576 <HAL_TIM_ConfigClockSource+0x186>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800442a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004432:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004444:	d03e      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800444a:	f200 8087 	bhi.w	800455c <HAL_TIM_ConfigClockSource+0x16c>
 800444e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004452:	f000 8086 	beq.w	8004562 <HAL_TIM_ConfigClockSource+0x172>
 8004456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445a:	d87f      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b70      	cmp	r3, #112	@ 0x70
 800445e:	d01a      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0xa6>
 8004460:	2b70      	cmp	r3, #112	@ 0x70
 8004462:	d87b      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 8004464:	2b60      	cmp	r3, #96	@ 0x60
 8004466:	d050      	beq.n	800450a <HAL_TIM_ConfigClockSource+0x11a>
 8004468:	2b60      	cmp	r3, #96	@ 0x60
 800446a:	d877      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 800446c:	2b50      	cmp	r3, #80	@ 0x50
 800446e:	d03c      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0xfa>
 8004470:	2b50      	cmp	r3, #80	@ 0x50
 8004472:	d873      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b40      	cmp	r3, #64	@ 0x40
 8004476:	d058      	beq.n	800452a <HAL_TIM_ConfigClockSource+0x13a>
 8004478:	2b40      	cmp	r3, #64	@ 0x40
 800447a:	d86f      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b30      	cmp	r3, #48	@ 0x30
 800447e:	d064      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x15a>
 8004480:	2b30      	cmp	r3, #48	@ 0x30
 8004482:	d86b      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b20      	cmp	r3, #32
 8004486:	d060      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x15a>
 8004488:	2b20      	cmp	r3, #32
 800448a:	d867      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d05c      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x15a>
 8004490:	2b10      	cmp	r3, #16
 8004492:	d05a      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x15a>
 8004494:	e062      	b.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a6:	f000 fc02 	bl	8004cae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	609a      	str	r2, [r3, #8]
      break;
 80044c2:	e04f      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044d4:	f000 fbeb 	bl	8004cae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044e6:	609a      	str	r2, [r3, #8]
      break;
 80044e8:	e03c      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f6:	461a      	mov	r2, r3
 80044f8:	f000 fb5f 	bl	8004bba <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2150      	movs	r1, #80	@ 0x50
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fbb8 	bl	8004c78 <TIM_ITRx_SetConfig>
      break;
 8004508:	e02c      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004516:	461a      	mov	r2, r3
 8004518:	f000 fb7e 	bl	8004c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2160      	movs	r1, #96	@ 0x60
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fba8 	bl	8004c78 <TIM_ITRx_SetConfig>
      break;
 8004528:	e01c      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004536:	461a      	mov	r2, r3
 8004538:	f000 fb3f 	bl	8004bba <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2140      	movs	r1, #64	@ 0x40
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fb98 	bl	8004c78 <TIM_ITRx_SetConfig>
      break;
 8004548:	e00c      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f000 fb8f 	bl	8004c78 <TIM_ITRx_SetConfig>
      break;
 800455a:	e003      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
      break;
 8004560:	e000      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004592:	2302      	movs	r3, #2
 8004594:	e031      	b.n	80045fa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80045a6:	6839      	ldr	r1, [r7, #0]
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fa75 	bl	8004a98 <TIM_SlaveTimer_SetConfig>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d009      	beq.n	80045c8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e018      	b.n	80045fa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045d6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045e6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a3a      	ldr	r2, [pc, #232]	@ (8004764 <TIM_Base_SetConfig+0xfc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00f      	beq.n	80046a0 <TIM_Base_SetConfig+0x38>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004686:	d00b      	beq.n	80046a0 <TIM_Base_SetConfig+0x38>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a37      	ldr	r2, [pc, #220]	@ (8004768 <TIM_Base_SetConfig+0x100>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d007      	beq.n	80046a0 <TIM_Base_SetConfig+0x38>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a36      	ldr	r2, [pc, #216]	@ (800476c <TIM_Base_SetConfig+0x104>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_Base_SetConfig+0x38>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a35      	ldr	r2, [pc, #212]	@ (8004770 <TIM_Base_SetConfig+0x108>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d108      	bne.n	80046b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004764 <TIM_Base_SetConfig+0xfc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01b      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c0:	d017      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a28      	ldr	r2, [pc, #160]	@ (8004768 <TIM_Base_SetConfig+0x100>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a27      	ldr	r2, [pc, #156]	@ (800476c <TIM_Base_SetConfig+0x104>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00f      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a26      	ldr	r2, [pc, #152]	@ (8004770 <TIM_Base_SetConfig+0x108>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a25      	ldr	r2, [pc, #148]	@ (8004774 <TIM_Base_SetConfig+0x10c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a24      	ldr	r2, [pc, #144]	@ (8004778 <TIM_Base_SetConfig+0x110>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a23      	ldr	r2, [pc, #140]	@ (800477c <TIM_Base_SetConfig+0x114>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d108      	bne.n	8004704 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a0e      	ldr	r2, [pc, #56]	@ (8004764 <TIM_Base_SetConfig+0xfc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d103      	bne.n	8004738 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b01      	cmp	r3, #1
 8004748:	d105      	bne.n	8004756 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f023 0201 	bic.w	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	611a      	str	r2, [r3, #16]
  }
}
 8004756:	bf00      	nop
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800

08004780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f023 0201 	bic.w	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f023 0302 	bic.w	r3, r3, #2
 80047c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004848 <TIM_OC1_SetConfig+0xc8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d10c      	bne.n	80047f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 0308 	bic.w	r3, r3, #8
 80047e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a13      	ldr	r2, [pc, #76]	@ (8004848 <TIM_OC1_SetConfig+0xc8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d111      	bne.n	8004822 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800480c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	621a      	str	r2, [r3, #32]
}
 800483c:	bf00      	nop
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40010000 	.word	0x40010000

0800484c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f023 0210 	bic.w	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f023 0320 	bic.w	r3, r3, #32
 8004896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004920 <TIM_OC2_SetConfig+0xd4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10d      	bne.n	80048c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a15      	ldr	r2, [pc, #84]	@ (8004920 <TIM_OC2_SetConfig+0xd4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d113      	bne.n	80048f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	621a      	str	r2, [r3, #32]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000

08004924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0303 	bic.w	r3, r3, #3
 800495a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800496c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1d      	ldr	r2, [pc, #116]	@ (80049f4 <TIM_OC3_SetConfig+0xd0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d10d      	bne.n	800499e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800499c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a14      	ldr	r2, [pc, #80]	@ (80049f4 <TIM_OC3_SetConfig+0xd0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d113      	bne.n	80049ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	621a      	str	r2, [r3, #32]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40010000 	.word	0x40010000

080049f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	031b      	lsls	r3, r3, #12
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a10      	ldr	r2, [pc, #64]	@ (8004a94 <TIM_OC4_SetConfig+0x9c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d109      	bne.n	8004a6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40010000 	.word	0x40010000

08004a98 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f023 0307 	bic.w	r3, r3, #7
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b70      	cmp	r3, #112	@ 0x70
 8004ae0:	d01a      	beq.n	8004b18 <TIM_SlaveTimer_SetConfig+0x80>
 8004ae2:	2b70      	cmp	r3, #112	@ 0x70
 8004ae4:	d860      	bhi.n	8004ba8 <TIM_SlaveTimer_SetConfig+0x110>
 8004ae6:	2b60      	cmp	r3, #96	@ 0x60
 8004ae8:	d054      	beq.n	8004b94 <TIM_SlaveTimer_SetConfig+0xfc>
 8004aea:	2b60      	cmp	r3, #96	@ 0x60
 8004aec:	d85c      	bhi.n	8004ba8 <TIM_SlaveTimer_SetConfig+0x110>
 8004aee:	2b50      	cmp	r3, #80	@ 0x50
 8004af0:	d046      	beq.n	8004b80 <TIM_SlaveTimer_SetConfig+0xe8>
 8004af2:	2b50      	cmp	r3, #80	@ 0x50
 8004af4:	d858      	bhi.n	8004ba8 <TIM_SlaveTimer_SetConfig+0x110>
 8004af6:	2b40      	cmp	r3, #64	@ 0x40
 8004af8:	d019      	beq.n	8004b2e <TIM_SlaveTimer_SetConfig+0x96>
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d854      	bhi.n	8004ba8 <TIM_SlaveTimer_SetConfig+0x110>
 8004afe:	2b30      	cmp	r3, #48	@ 0x30
 8004b00:	d055      	beq.n	8004bae <TIM_SlaveTimer_SetConfig+0x116>
 8004b02:	2b30      	cmp	r3, #48	@ 0x30
 8004b04:	d850      	bhi.n	8004ba8 <TIM_SlaveTimer_SetConfig+0x110>
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d051      	beq.n	8004bae <TIM_SlaveTimer_SetConfig+0x116>
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d84c      	bhi.n	8004ba8 <TIM_SlaveTimer_SetConfig+0x110>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d04d      	beq.n	8004bae <TIM_SlaveTimer_SetConfig+0x116>
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d04b      	beq.n	8004bae <TIM_SlaveTimer_SetConfig+0x116>
 8004b16:	e047      	b.n	8004ba8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004b28:	f000 f8c1 	bl	8004cae <TIM_ETR_SetConfig>
      break;
 8004b2c:	e040      	b.n	8004bb0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b05      	cmp	r3, #5
 8004b34:	d101      	bne.n	8004b3a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e03b      	b.n	8004bb2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b60:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
      break;
 8004b7e:	e017      	b.n	8004bb0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f000 f814 	bl	8004bba <TIM_TI1_ConfigInputStage>
      break;
 8004b92:	e00d      	b.n	8004bb0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f000 f839 	bl	8004c18 <TIM_TI2_ConfigInputStage>
      break;
 8004ba6:	e003      	b.n	8004bb0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
      break;
 8004bac:	e000      	b.n	8004bb0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004bae:	bf00      	nop
  }

  return status;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b087      	sub	sp, #28
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f023 0201 	bic.w	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f023 030a 	bic.w	r3, r3, #10
 8004bf6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	621a      	str	r2, [r3, #32]
}
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0210 	bic.w	r2, r3, #16
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	031b      	lsls	r3, r3, #12
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f043 0307 	orr.w	r3, r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	609a      	str	r2, [r3, #8]
}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b087      	sub	sp, #28
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	021a      	lsls	r2, r3, #8
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	609a      	str	r2, [r3, #8]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e050      	b.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1c      	ldr	r2, [pc, #112]	@ (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d54:	d013      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a18      	ldr	r2, [pc, #96]	@ (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a16      	ldr	r2, [pc, #88]	@ (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a15      	ldr	r2, [pc, #84]	@ (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a13      	ldr	r2, [pc, #76]	@ (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d10c      	bne.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40014000 	.word	0x40014000

08004dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004df4:	b084      	sub	sp, #16
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	f107 001c 	add.w	r0, r7, #28
 8004e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d123      	bne.n	8004e56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d105      	bne.n	8004e4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f001 fae2 	bl	8006414 <USB_CoreReset>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	e01b      	b.n	8004e8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f001 fad6 	bl	8006414 <USB_CoreReset>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e80:	e005      	b.n	8004e8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e8e:	7fbb      	ldrb	r3, [r7, #30]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10b      	bne.n	8004eac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f043 0206 	orr.w	r2, r3, #6
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb8:	b004      	add	sp, #16
 8004eba:	4770      	bx	lr

08004ebc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d165      	bne.n	8004f9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a41      	ldr	r2, [pc, #260]	@ (8004fd8 <USB_SetTurnaroundTime+0x11c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d906      	bls.n	8004ee6 <USB_SetTurnaroundTime+0x2a>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a40      	ldr	r2, [pc, #256]	@ (8004fdc <USB_SetTurnaroundTime+0x120>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d202      	bcs.n	8004ee6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ee0:	230f      	movs	r3, #15
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e062      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8004fdc <USB_SetTurnaroundTime+0x120>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d306      	bcc.n	8004efc <USB_SetTurnaroundTime+0x40>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a3b      	ldr	r2, [pc, #236]	@ (8004fe0 <USB_SetTurnaroundTime+0x124>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d202      	bcs.n	8004efc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ef6:	230e      	movs	r3, #14
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e057      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a38      	ldr	r2, [pc, #224]	@ (8004fe0 <USB_SetTurnaroundTime+0x124>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d306      	bcc.n	8004f12 <USB_SetTurnaroundTime+0x56>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a37      	ldr	r2, [pc, #220]	@ (8004fe4 <USB_SetTurnaroundTime+0x128>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d202      	bcs.n	8004f12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f0c:	230d      	movs	r3, #13
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e04c      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a33      	ldr	r2, [pc, #204]	@ (8004fe4 <USB_SetTurnaroundTime+0x128>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d306      	bcc.n	8004f28 <USB_SetTurnaroundTime+0x6c>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a32      	ldr	r2, [pc, #200]	@ (8004fe8 <USB_SetTurnaroundTime+0x12c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d802      	bhi.n	8004f28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f22:	230c      	movs	r3, #12
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e041      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8004fe8 <USB_SetTurnaroundTime+0x12c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d906      	bls.n	8004f3e <USB_SetTurnaroundTime+0x82>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4a2e      	ldr	r2, [pc, #184]	@ (8004fec <USB_SetTurnaroundTime+0x130>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d802      	bhi.n	8004f3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f38:	230b      	movs	r3, #11
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e036      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a2a      	ldr	r2, [pc, #168]	@ (8004fec <USB_SetTurnaroundTime+0x130>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d906      	bls.n	8004f54 <USB_SetTurnaroundTime+0x98>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4a29      	ldr	r2, [pc, #164]	@ (8004ff0 <USB_SetTurnaroundTime+0x134>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d802      	bhi.n	8004f54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f4e:	230a      	movs	r3, #10
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e02b      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a26      	ldr	r2, [pc, #152]	@ (8004ff0 <USB_SetTurnaroundTime+0x134>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d906      	bls.n	8004f6a <USB_SetTurnaroundTime+0xae>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4a25      	ldr	r2, [pc, #148]	@ (8004ff4 <USB_SetTurnaroundTime+0x138>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d202      	bcs.n	8004f6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f64:	2309      	movs	r3, #9
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e020      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a21      	ldr	r2, [pc, #132]	@ (8004ff4 <USB_SetTurnaroundTime+0x138>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d306      	bcc.n	8004f80 <USB_SetTurnaroundTime+0xc4>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4a20      	ldr	r2, [pc, #128]	@ (8004ff8 <USB_SetTurnaroundTime+0x13c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d802      	bhi.n	8004f80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	e015      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff8 <USB_SetTurnaroundTime+0x13c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d906      	bls.n	8004f96 <USB_SetTurnaroundTime+0xda>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ffc <USB_SetTurnaroundTime+0x140>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d202      	bcs.n	8004f96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f90:	2307      	movs	r3, #7
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e00a      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f96:	2306      	movs	r3, #6
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e007      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d102      	bne.n	8004fa8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004fa2:	2309      	movs	r3, #9
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e001      	b.n	8004fac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fa8:	2309      	movs	r3, #9
 8004faa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	029b      	lsls	r3, r3, #10
 8004fc0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	00d8acbf 	.word	0x00d8acbf
 8004fdc:	00e4e1c0 	.word	0x00e4e1c0
 8004fe0:	00f42400 	.word	0x00f42400
 8004fe4:	01067380 	.word	0x01067380
 8004fe8:	011a499f 	.word	0x011a499f
 8004fec:	01312cff 	.word	0x01312cff
 8004ff0:	014ca43f 	.word	0x014ca43f
 8004ff4:	016e3600 	.word	0x016e3600
 8004ff8:	01a6ab1f 	.word	0x01a6ab1f
 8004ffc:	01e84800 	.word	0x01e84800

08005000 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f043 0201 	orr.w	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d115      	bne.n	8005092 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005072:	200a      	movs	r0, #10
 8005074:	f7fc f8dc 	bl	8001230 <HAL_Delay>
      ms += 10U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	330a      	adds	r3, #10
 800507c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f001 f939 	bl	80062f6 <USB_GetMode>
 8005084:	4603      	mov	r3, r0
 8005086:	2b01      	cmp	r3, #1
 8005088:	d01e      	beq.n	80050c8 <USB_SetCurrentMode+0x84>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2bc7      	cmp	r3, #199	@ 0xc7
 800508e:	d9f0      	bls.n	8005072 <USB_SetCurrentMode+0x2e>
 8005090:	e01a      	b.n	80050c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d115      	bne.n	80050c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050a4:	200a      	movs	r0, #10
 80050a6:	f7fc f8c3 	bl	8001230 <HAL_Delay>
      ms += 10U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	330a      	adds	r3, #10
 80050ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 f920 	bl	80062f6 <USB_GetMode>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <USB_SetCurrentMode+0x84>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2bc7      	cmp	r3, #199	@ 0xc7
 80050c0:	d9f0      	bls.n	80050a4 <USB_SetCurrentMode+0x60>
 80050c2:	e001      	b.n	80050c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e005      	b.n	80050d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80050cc:	d101      	bne.n	80050d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050dc:	b084      	sub	sp, #16
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80050ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e009      	b.n	8005110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3340      	adds	r3, #64	@ 0x40
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	2200      	movs	r2, #0
 8005108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b0e      	cmp	r3, #14
 8005114:	d9f2      	bls.n	80050fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005116:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800511a:	2b00      	cmp	r3, #0
 800511c:	d11c      	bne.n	8005158 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800512c:	f043 0302 	orr.w	r3, r3, #2
 8005130:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005136:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005142:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	@ 0x38
 8005156:	e00b      	b.n	8005170 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005176:	461a      	mov	r2, r3
 8005178:	2300      	movs	r3, #0
 800517a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800517c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10d      	bne.n	80051a0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800518c:	2100      	movs	r1, #0
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f968 	bl	8005464 <USB_SetDevSpeed>
 8005194:	e008      	b.n	80051a8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005196:	2101      	movs	r1, #1
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f963 	bl	8005464 <USB_SetDevSpeed>
 800519e:	e003      	b.n	80051a8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051a0:	2103      	movs	r1, #3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f95e 	bl	8005464 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051a8:	2110      	movs	r1, #16
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8fa 	bl	80053a4 <USB_FlushTxFifo>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f924 	bl	8005408 <USB_FlushRxFifo>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051dc:	461a      	mov	r2, r3
 80051de:	2300      	movs	r3, #0
 80051e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e8:	461a      	mov	r2, r3
 80051ea:	2300      	movs	r3, #0
 80051ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ee:	2300      	movs	r3, #0
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e043      	b.n	800527c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005206:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800520a:	d118      	bne.n	800523e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521e:	461a      	mov	r2, r3
 8005220:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e013      	b.n	8005250 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005234:	461a      	mov	r2, r3
 8005236:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	e008      	b.n	8005250 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524a:	461a      	mov	r2, r3
 800524c:	2300      	movs	r3, #0
 800524e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800525c:	461a      	mov	r2, r3
 800525e:	2300      	movs	r3, #0
 8005260:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526e:	461a      	mov	r2, r3
 8005270:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005274:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3301      	adds	r3, #1
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005280:	461a      	mov	r2, r3
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4293      	cmp	r3, r2
 8005286:	d3b5      	bcc.n	80051f4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	e043      	b.n	8005316 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052a4:	d118      	bne.n	80052d8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b8:	461a      	mov	r2, r3
 80052ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e013      	b.n	80052ea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ce:	461a      	mov	r2, r3
 80052d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	e008      	b.n	80052ea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e4:	461a      	mov	r2, r3
 80052e6:	2300      	movs	r3, #0
 80052e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f6:	461a      	mov	r2, r3
 80052f8:	2300      	movs	r3, #0
 80052fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005308:	461a      	mov	r2, r3
 800530a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800530e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	3301      	adds	r3, #1
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800531a:	461a      	mov	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4293      	cmp	r3, r2
 8005320:	d3b5      	bcc.n	800528e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005334:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005342:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005344:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f043 0210 	orr.w	r2, r3, #16
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <USB_DevInit+0x2c4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005364:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f043 0208 	orr.w	r2, r3, #8
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005378:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800537c:	2b01      	cmp	r3, #1
 800537e:	d107      	bne.n	8005390 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005388:	f043 0304 	orr.w	r3, r3, #4
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005390:	7dfb      	ldrb	r3, [r7, #23]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800539c:	b004      	add	sp, #16
 800539e:	4770      	bx	lr
 80053a0:	803c3800 	.word	0x803c3800

080053a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3301      	adds	r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053be:	d901      	bls.n	80053c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e01b      	b.n	80053fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	daf2      	bge.n	80053b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	019b      	lsls	r3, r3, #6
 80053d4:	f043 0220 	orr.w	r2, r3, #32
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053e8:	d901      	bls.n	80053ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e006      	b.n	80053fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d0f0      	beq.n	80053dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3301      	adds	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005420:	d901      	bls.n	8005426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e018      	b.n	8005458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	daf2      	bge.n	8005414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2210      	movs	r2, #16
 8005436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005444:	d901      	bls.n	800544a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e006      	b.n	8005458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b10      	cmp	r3, #16
 8005454:	d0f0      	beq.n	8005438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	68f9      	ldr	r1, [r7, #12]
 8005480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005484:	4313      	orrs	r3, r2
 8005486:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005496:	b480      	push	{r7}
 8005498:	b087      	sub	sp, #28
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0306 	and.w	r3, r3, #6
 80054ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054b6:	2300      	movs	r3, #0
 80054b8:	75fb      	strb	r3, [r7, #23]
 80054ba:	e00a      	b.n	80054d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d002      	beq.n	80054c8 <USB_GetDevSpeed+0x32>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b06      	cmp	r3, #6
 80054c6:	d102      	bne.n	80054ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054c8:	2302      	movs	r3, #2
 80054ca:	75fb      	strb	r3, [r7, #23]
 80054cc:	e001      	b.n	80054d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054ce:	230f      	movs	r3, #15
 80054d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d13a      	bne.n	8005572 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	2101      	movs	r1, #1
 800550e:	fa01 f303 	lsl.w	r3, r1, r3
 8005512:	b29b      	uxth	r3, r3
 8005514:	68f9      	ldr	r1, [r7, #12]
 8005516:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800551a:	4313      	orrs	r3, r2
 800551c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d155      	bne.n	80055e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	791b      	ldrb	r3, [r3, #4]
 800554e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005550:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	059b      	lsls	r3, r3, #22
 8005556:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005558:	4313      	orrs	r3, r2
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800556a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e036      	b.n	80055e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005578:	69da      	ldr	r2, [r3, #28]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	2101      	movs	r1, #1
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	041b      	lsls	r3, r3, #16
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005590:	4313      	orrs	r3, r2
 8005592:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d11a      	bne.n	80055e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	791b      	ldrb	r3, [r3, #4]
 80055c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055c6:	430b      	orrs	r3, r1
 80055c8:	4313      	orrs	r3, r2
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
	...

080055f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d161      	bne.n	80056d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800561e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005622:	d11f      	bne.n	8005664 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	440a      	add	r2, r1
 800563a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800563e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005642:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	440a      	add	r2, r1
 800565a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800565e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005662:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800566a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	43db      	mvns	r3, r3
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005684:	4013      	ands	r3, r2
 8005686:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	2101      	movs	r1, #1
 800569a:	fa01 f303 	lsl.w	r3, r1, r3
 800569e:	b29b      	uxth	r3, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056a8:	4013      	ands	r3, r2
 80056aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	0159      	lsls	r1, r3, #5
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	440b      	add	r3, r1
 80056c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c6:	4619      	mov	r1, r3
 80056c8:	4b35      	ldr	r3, [pc, #212]	@ (80057a0 <USB_DeactivateEndpoint+0x1b0>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]
 80056ce:	e060      	b.n	8005792 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056e6:	d11f      	bne.n	8005728 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005702:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005706:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005722:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800572e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	2101      	movs	r1, #1
 800573a:	fa01 f303 	lsl.w	r3, r1, r3
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	43db      	mvns	r3, r3
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005748:	4013      	ands	r3, r2
 800574a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	2101      	movs	r1, #1
 800575e:	fa01 f303 	lsl.w	r3, r1, r3
 8005762:	041b      	lsls	r3, r3, #16
 8005764:	43db      	mvns	r3, r3
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800576c:	4013      	ands	r3, r2
 800576e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	0159      	lsls	r1, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	440b      	add	r3, r1
 8005786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578a:	4619      	mov	r1, r3
 800578c:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <USB_DeactivateEndpoint+0x1b4>)
 800578e:	4013      	ands	r3, r2
 8005790:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	ec337800 	.word	0xec337800
 80057a4:	eff37800 	.word	0xeff37800

080057a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	@ 0x28
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	f040 817a 	bne.w	8005abe <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d132      	bne.n	8005838 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005810:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005830:	0cdb      	lsrs	r3, r3, #19
 8005832:	04db      	lsls	r3, r3, #19
 8005834:	6113      	str	r3, [r2, #16]
 8005836:	e092      	b.n	800595e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	440a      	add	r2, r1
 800584e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005852:	0cdb      	lsrs	r3, r3, #19
 8005854:	04db      	lsls	r3, r3, #19
 8005856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005872:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005876:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800587a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d11a      	bne.n	80058b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	d903      	bls.n	8005896 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058b4:	6113      	str	r3, [r2, #16]
 80058b6:	e01b      	b.n	80058f0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	6919      	ldr	r1, [r3, #16]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	440b      	add	r3, r1
 80058d0:	1e59      	subs	r1, r3, #1
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80058da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058dc:	4ba2      	ldr	r3, [pc, #648]	@ (8005b68 <USB_EPStartXfer+0x3c0>)
 80058de:	400b      	ands	r3, r1
 80058e0:	69b9      	ldr	r1, [r7, #24]
 80058e2:	0148      	lsls	r0, r1, #5
 80058e4:	69f9      	ldr	r1, [r7, #28]
 80058e6:	4401      	add	r1, r0
 80058e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80058ec:	4313      	orrs	r3, r2
 80058ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005906:	69b9      	ldr	r1, [r7, #24]
 8005908:	0148      	lsls	r0, r1, #5
 800590a:	69f9      	ldr	r1, [r7, #28]
 800590c:	4401      	add	r1, r0
 800590e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005912:	4313      	orrs	r3, r2
 8005914:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	791b      	ldrb	r3, [r3, #4]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d11f      	bne.n	800595e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005938:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800593c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005958:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800595c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d14b      	bne.n	80059fc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005978:	461a      	mov	r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	791b      	ldrb	r3, [r3, #4]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d128      	bne.n	80059da <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d110      	bne.n	80059ba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	e00f      	b.n	80059da <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e165      	b.n	8005cc8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	791b      	ldrb	r3, [r3, #4]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d015      	beq.n	8005a50 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 814d 	beq.w	8005cc8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	2101      	movs	r1, #1
 8005a40:	fa01 f303 	lsl.w	r3, r1, r3
 8005a44:	69f9      	ldr	r1, [r7, #28]
 8005a46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	634b      	str	r3, [r1, #52]	@ 0x34
 8005a4e:	e13b      	b.n	8005cc8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d110      	bne.n	8005a82 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	e00f      	b.n	8005aa2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aa0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	68d9      	ldr	r1, [r3, #12]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	b298      	uxth	r0, r3
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f9b8 	bl	8005e2c <USB_WritePacket>
 8005abc:	e104      	b.n	8005cc8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ad8:	0cdb      	lsrs	r3, r3, #19
 8005ada:	04db      	lsls	r3, r3, #19
 8005adc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005af8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005afc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b00:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d131      	bne.n	8005b6c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b36:	69b9      	ldr	r1, [r7, #24]
 8005b38:	0148      	lsls	r0, r1, #5
 8005b3a:	69f9      	ldr	r1, [r7, #28]
 8005b3c:	4401      	add	r1, r0
 8005b3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b42:	4313      	orrs	r3, r2
 8005b44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b64:	6113      	str	r3, [r2, #16]
 8005b66:	e061      	b.n	8005c2c <USB_EPStartXfer+0x484>
 8005b68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d123      	bne.n	8005bbc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b8a:	69b9      	ldr	r1, [r7, #24]
 8005b8c:	0148      	lsls	r0, r1, #5
 8005b8e:	69f9      	ldr	r1, [r7, #28]
 8005b90:	4401      	add	r1, r0
 8005b92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b96:	4313      	orrs	r3, r2
 8005b98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bb8:	6113      	str	r3, [r2, #16]
 8005bba:	e037      	b.n	8005c2c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	1e5a      	subs	r2, r3, #1
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	8afa      	ldrh	r2, [r7, #22]
 8005bd8:	fb03 f202 	mul.w	r2, r3, r2
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	8afb      	ldrh	r3, [r7, #22]
 8005bf0:	04d9      	lsls	r1, r3, #19
 8005bf2:	4b38      	ldr	r3, [pc, #224]	@ (8005cd4 <USB_EPStartXfer+0x52c>)
 8005bf4:	400b      	ands	r3, r1
 8005bf6:	69b9      	ldr	r1, [r7, #24]
 8005bf8:	0148      	lsls	r0, r1, #5
 8005bfa:	69f9      	ldr	r1, [r7, #28]
 8005bfc:	4401      	add	r1, r0
 8005bfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c02:	4313      	orrs	r3, r2
 8005c04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c1c:	69b9      	ldr	r1, [r7, #24]
 8005c1e:	0148      	lsls	r0, r1, #5
 8005c20:	69f9      	ldr	r1, [r7, #28]
 8005c22:	4401      	add	r1, r0
 8005c24:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d10d      	bne.n	8005c4e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	68d9      	ldr	r1, [r3, #12]
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c4a:	460a      	mov	r2, r1
 8005c4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	791b      	ldrb	r3, [r3, #4]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d128      	bne.n	8005ca8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d110      	bne.n	8005c88 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	e00f      	b.n	8005ca8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ca6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cc2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005cc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	1ff80000 	.word	0x1ff80000

08005cd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d14a      	bne.n	8005d8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d0e:	f040 8086 	bne.w	8005e1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	7812      	ldrb	r2, [r2, #0]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d902      	bls.n	8005d70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d6e:	e056      	b.n	8005e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d88:	d0e7      	beq.n	8005d5a <USB_EPStopXfer+0x82>
 8005d8a:	e048      	b.n	8005e1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da4:	d13b      	bne.n	8005e1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	7812      	ldrb	r2, [r2, #0]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005dc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	7812      	ldrb	r2, [r2, #0]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d902      	bls.n	8005e04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
          break;
 8005e02:	e00c      	b.n	8005e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e1c:	d0e7      	beq.n	8005dee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b089      	sub	sp, #36	@ 0x24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	4611      	mov	r1, r2
 8005e38:	461a      	mov	r2, r3
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	71fb      	strb	r3, [r7, #7]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d123      	bne.n	8005e9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e52:	88bb      	ldrh	r3, [r7, #4]
 8005e54:	3303      	adds	r3, #3
 8005e56:	089b      	lsrs	r3, r3, #2
 8005e58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	e018      	b.n	8005e92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	031a      	lsls	r2, r3, #12
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	3301      	adds	r3, #1
 8005e78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	3301      	adds	r3, #1
 8005e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d3e2      	bcc.n	8005e60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3724      	adds	r7, #36	@ 0x24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b08b      	sub	sp, #44	@ 0x2c
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	089b      	lsrs	r3, r3, #2
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	623b      	str	r3, [r7, #32]
 8005ed2:	e014      	b.n	8005efe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	3301      	adds	r3, #1
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eee:	3301      	adds	r3, #1
 8005ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	3301      	adds	r3, #1
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	6a3a      	ldr	r2, [r7, #32]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3e6      	bcc.n	8005ed4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f06:	8bfb      	ldrh	r3, [r7, #30]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01e      	beq.n	8005f4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f16:	461a      	mov	r2, r3
 8005f18:	f107 0310 	add.w	r3, r7, #16
 8005f1c:	6812      	ldr	r2, [r2, #0]
 8005f1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	701a      	strb	r2, [r3, #0]
      i++;
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	3301      	adds	r3, #1
 8005f36:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005f3e:	8bfb      	ldrh	r3, [r7, #30]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f44:	8bfb      	ldrh	r3, [r7, #30]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1ea      	bne.n	8005f20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	372c      	adds	r7, #44	@ 0x2c
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d12c      	bne.n	8005fce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	db12      	blt.n	8005fac <USB_EPSetStall+0x54>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00f      	beq.n	8005fac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005faa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e02b      	b.n	8006026 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	db12      	blt.n	8006006 <USB_EPSetStall+0xae>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00f      	beq.n	8006006 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006000:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006004:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006024:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d128      	bne.n	80060a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800606a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800606e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	791b      	ldrb	r3, [r3, #4]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d003      	beq.n	8006080 <USB_EPClearStall+0x4c>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	791b      	ldrb	r3, [r3, #4]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d138      	bne.n	80060f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800609a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	e027      	b.n	80060f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	791b      	ldrb	r3, [r3, #4]
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d003      	beq.n	80060d2 <USB_EPClearStall+0x9e>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	791b      	ldrb	r3, [r3, #4]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d10f      	bne.n	80060f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800611e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006122:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006134:	68f9      	ldr	r1, [r7, #12]
 8006136:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800613a:	4313      	orrs	r3, r2
 800613c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800617a:	f023 0302 	bic.w	r3, r3, #2
 800617e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80061a8:	f023 0303 	bic.w	r3, r3, #3
 80061ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061bc:	f043 0302 	orr.w	r3, r3, #2
 80061c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4013      	ands	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061e8:	68fb      	ldr	r3, [r7, #12]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	4013      	ands	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	0c1b      	lsrs	r3, r3, #16
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	4013      	ands	r3, r2
 800624c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	b29b      	uxth	r3, r3
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4013      	ands	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800628c:	68bb      	ldr	r3, [r7, #8]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ca:	01db      	lsls	r3, r3, #7
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4013      	ands	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062e8:	68bb      	ldr	r3, [r7, #8]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	f003 0301 	and.w	r3, r3, #1
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800632c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006330:	f023 0307 	bic.w	r3, r3, #7
 8006334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	460b      	mov	r3, r1
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	333c      	adds	r3, #60	@ 0x3c
 800636e:	3304      	adds	r3, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4a26      	ldr	r2, [pc, #152]	@ (8006410 <USB_EP0_OutStart+0xb8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d90a      	bls.n	8006392 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800638c:	d101      	bne.n	8006392 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	e037      	b.n	8006402 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006398:	461a      	mov	r2, r3
 800639a:	2300      	movs	r3, #0
 800639c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063c0:	f043 0318 	orr.w	r3, r3, #24
 80063c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80063d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80063da:	7afb      	ldrb	r3, [r7, #11]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d10f      	bne.n	8006400 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e6:	461a      	mov	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80063fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	4f54300a 	.word	0x4f54300a

08006414 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800642c:	d901      	bls.n	8006432 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e01b      	b.n	800646a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	daf2      	bge.n	8006420 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f043 0201 	orr.w	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3301      	adds	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006456:	d901      	bls.n	800645c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e006      	b.n	800646a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b01      	cmp	r3, #1
 8006466:	d0f0      	beq.n	800644a <USB_CoreReset+0x36>

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
	...

08006478 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006484:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006488:	f002 fc7e 	bl	8008d88 <USBD_static_malloc>
 800648c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d109      	bne.n	80064a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	32b0      	adds	r2, #176	@ 0xb0
 800649e:	2100      	movs	r1, #0
 80064a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064a4:	2302      	movs	r3, #2
 80064a6:	e0d4      	b.n	8006652 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064a8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80064ac:	2100      	movs	r1, #0
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f002 fce2 	bl	8008e78 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	32b0      	adds	r2, #176	@ 0xb0
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	32b0      	adds	r2, #176	@ 0xb0
 80064ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	7c1b      	ldrb	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d138      	bne.n	8006552 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064e0:	4b5e      	ldr	r3, [pc, #376]	@ (800665c <USBD_CDC_Init+0x1e4>)
 80064e2:	7819      	ldrb	r1, [r3, #0]
 80064e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064e8:	2202      	movs	r2, #2
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f002 fb29 	bl	8008b42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064f0:	4b5a      	ldr	r3, [pc, #360]	@ (800665c <USBD_CDC_Init+0x1e4>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	f003 020f 	and.w	r2, r3, #15
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	3324      	adds	r3, #36	@ 0x24
 8006506:	2201      	movs	r2, #1
 8006508:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800650a:	4b55      	ldr	r3, [pc, #340]	@ (8006660 <USBD_CDC_Init+0x1e8>)
 800650c:	7819      	ldrb	r1, [r3, #0]
 800650e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006512:	2202      	movs	r2, #2
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f002 fb14 	bl	8008b42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800651a:	4b51      	ldr	r3, [pc, #324]	@ (8006660 <USBD_CDC_Init+0x1e8>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	f003 020f 	and.w	r2, r3, #15
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	4613      	mov	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006532:	2201      	movs	r2, #1
 8006534:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006536:	4b4b      	ldr	r3, [pc, #300]	@ (8006664 <USBD_CDC_Init+0x1ec>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f003 020f 	and.w	r2, r3, #15
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	3326      	adds	r3, #38	@ 0x26
 800654c:	2210      	movs	r2, #16
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	e035      	b.n	80065be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006552:	4b42      	ldr	r3, [pc, #264]	@ (800665c <USBD_CDC_Init+0x1e4>)
 8006554:	7819      	ldrb	r1, [r3, #0]
 8006556:	2340      	movs	r3, #64	@ 0x40
 8006558:	2202      	movs	r2, #2
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f002 faf1 	bl	8008b42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006560:	4b3e      	ldr	r3, [pc, #248]	@ (800665c <USBD_CDC_Init+0x1e4>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f003 020f 	and.w	r2, r3, #15
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	3324      	adds	r3, #36	@ 0x24
 8006576:	2201      	movs	r2, #1
 8006578:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800657a:	4b39      	ldr	r3, [pc, #228]	@ (8006660 <USBD_CDC_Init+0x1e8>)
 800657c:	7819      	ldrb	r1, [r3, #0]
 800657e:	2340      	movs	r3, #64	@ 0x40
 8006580:	2202      	movs	r2, #2
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f002 fadd 	bl	8008b42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006588:	4b35      	ldr	r3, [pc, #212]	@ (8006660 <USBD_CDC_Init+0x1e8>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	f003 020f 	and.w	r2, r3, #15
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80065a0:	2201      	movs	r2, #1
 80065a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065a4:	4b2f      	ldr	r3, [pc, #188]	@ (8006664 <USBD_CDC_Init+0x1ec>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	3326      	adds	r3, #38	@ 0x26
 80065ba:	2210      	movs	r2, #16
 80065bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065be:	4b29      	ldr	r3, [pc, #164]	@ (8006664 <USBD_CDC_Init+0x1ec>)
 80065c0:	7819      	ldrb	r1, [r3, #0]
 80065c2:	2308      	movs	r3, #8
 80065c4:	2203      	movs	r2, #3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f002 fabb 	bl	8008b42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80065cc:	4b25      	ldr	r3, [pc, #148]	@ (8006664 <USBD_CDC_Init+0x1ec>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f003 020f 	and.w	r2, r3, #15
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	440b      	add	r3, r1
 80065e0:	3324      	adds	r3, #36	@ 0x24
 80065e2:	2201      	movs	r2, #1
 80065e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	33b0      	adds	r3, #176	@ 0xb0
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800661c:	2302      	movs	r3, #2
 800661e:	e018      	b.n	8006652 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	7c1b      	ldrb	r3, [r3, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006628:	4b0d      	ldr	r3, [pc, #52]	@ (8006660 <USBD_CDC_Init+0x1e8>)
 800662a:	7819      	ldrb	r1, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f002 fb72 	bl	8008d20 <USBD_LL_PrepareReceive>
 800663c:	e008      	b.n	8006650 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800663e:	4b08      	ldr	r3, [pc, #32]	@ (8006660 <USBD_CDC_Init+0x1e8>)
 8006640:	7819      	ldrb	r1, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006648:	2340      	movs	r3, #64	@ 0x40
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f002 fb68 	bl	8008d20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000317 	.word	0x20000317
 8006660:	20000318 	.word	0x20000318
 8006664:	20000319 	.word	0x20000319

08006668 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006674:	4b3a      	ldr	r3, [pc, #232]	@ (8006760 <USBD_CDC_DeInit+0xf8>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 fa87 	bl	8008b8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006680:	4b37      	ldr	r3, [pc, #220]	@ (8006760 <USBD_CDC_DeInit+0xf8>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 020f 	and.w	r2, r3, #15
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	440b      	add	r3, r1
 8006694:	3324      	adds	r3, #36	@ 0x24
 8006696:	2200      	movs	r2, #0
 8006698:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800669a:	4b32      	ldr	r3, [pc, #200]	@ (8006764 <USBD_CDC_DeInit+0xfc>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f002 fa74 	bl	8008b8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006764 <USBD_CDC_DeInit+0xfc>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f003 020f 	and.w	r2, r3, #15
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	440b      	add	r3, r1
 80066ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80066be:	2200      	movs	r2, #0
 80066c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80066c2:	4b29      	ldr	r3, [pc, #164]	@ (8006768 <USBD_CDC_DeInit+0x100>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f002 fa60 	bl	8008b8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80066ce:	4b26      	ldr	r3, [pc, #152]	@ (8006768 <USBD_CDC_DeInit+0x100>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	f003 020f 	and.w	r2, r3, #15
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	440b      	add	r3, r1
 80066e2:	3324      	adds	r3, #36	@ 0x24
 80066e4:	2200      	movs	r2, #0
 80066e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80066e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006768 <USBD_CDC_DeInit+0x100>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	f003 020f 	and.w	r2, r3, #15
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	3326      	adds	r3, #38	@ 0x26
 80066fe:	2200      	movs	r2, #0
 8006700:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	32b0      	adds	r2, #176	@ 0xb0
 800670c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01f      	beq.n	8006754 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	33b0      	adds	r3, #176	@ 0xb0
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	32b0      	adds	r2, #176	@ 0xb0
 8006732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006736:	4618      	mov	r0, r3
 8006738:	f002 fb34 	bl	8008da4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	32b0      	adds	r2, #176	@ 0xb0
 8006746:	2100      	movs	r1, #0
 8006748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000317 	.word	0x20000317
 8006764:	20000318 	.word	0x20000318
 8006768:	20000319 	.word	0x20000319

0800676c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	32b0      	adds	r2, #176	@ 0xb0
 8006780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006784:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006798:	2303      	movs	r3, #3
 800679a:	e0bf      	b.n	800691c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d050      	beq.n	800684a <USBD_CDC_Setup+0xde>
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	f040 80af 	bne.w	800690c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	88db      	ldrh	r3, [r3, #6]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d03a      	beq.n	800682c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	b25b      	sxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	da1b      	bge.n	80067f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	33b0      	adds	r3, #176	@ 0xb0
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80067d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	88d2      	ldrh	r2, [r2, #6]
 80067dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	88db      	ldrh	r3, [r3, #6]
 80067e2:	2b07      	cmp	r3, #7
 80067e4:	bf28      	it	cs
 80067e6:	2307      	movcs	r3, #7
 80067e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	89fa      	ldrh	r2, [r7, #14]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 fd87 	bl	8008304 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80067f6:	e090      	b.n	800691a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	785a      	ldrb	r2, [r3, #1]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	88db      	ldrh	r3, [r3, #6]
 8006806:	2b3f      	cmp	r3, #63	@ 0x3f
 8006808:	d803      	bhi.n	8006812 <USBD_CDC_Setup+0xa6>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	88db      	ldrh	r3, [r3, #6]
 800680e:	b2da      	uxtb	r2, r3
 8006810:	e000      	b.n	8006814 <USBD_CDC_Setup+0xa8>
 8006812:	2240      	movs	r2, #64	@ 0x40
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800681a:	6939      	ldr	r1, [r7, #16]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006822:	461a      	mov	r2, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fd99 	bl	800835c <USBD_CtlPrepareRx>
      break;
 800682a:	e076      	b.n	800691a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	33b0      	adds	r3, #176	@ 0xb0
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	7850      	ldrb	r0, [r2, #1]
 8006842:	2200      	movs	r2, #0
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	4798      	blx	r3
      break;
 8006848:	e067      	b.n	800691a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	2b0b      	cmp	r3, #11
 8006850:	d851      	bhi.n	80068f6 <USBD_CDC_Setup+0x18a>
 8006852:	a201      	add	r2, pc, #4	@ (adr r2, 8006858 <USBD_CDC_Setup+0xec>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	08006889 	.word	0x08006889
 800685c:	08006905 	.word	0x08006905
 8006860:	080068f7 	.word	0x080068f7
 8006864:	080068f7 	.word	0x080068f7
 8006868:	080068f7 	.word	0x080068f7
 800686c:	080068f7 	.word	0x080068f7
 8006870:	080068f7 	.word	0x080068f7
 8006874:	080068f7 	.word	0x080068f7
 8006878:	080068f7 	.word	0x080068f7
 800687c:	080068f7 	.word	0x080068f7
 8006880:	080068b3 	.word	0x080068b3
 8006884:	080068dd 	.word	0x080068dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b03      	cmp	r3, #3
 8006892:	d107      	bne.n	80068a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006894:	f107 030a 	add.w	r3, r7, #10
 8006898:	2202      	movs	r2, #2
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 fd31 	bl	8008304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068a2:	e032      	b.n	800690a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 fcbb 	bl	8008222 <USBD_CtlError>
            ret = USBD_FAIL;
 80068ac:	2303      	movs	r3, #3
 80068ae:	75fb      	strb	r3, [r7, #23]
          break;
 80068b0:	e02b      	b.n	800690a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d107      	bne.n	80068ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068be:	f107 030d 	add.w	r3, r7, #13
 80068c2:	2201      	movs	r2, #1
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 fd1c 	bl	8008304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068cc:	e01d      	b.n	800690a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 fca6 	bl	8008222 <USBD_CtlError>
            ret = USBD_FAIL;
 80068d6:	2303      	movs	r3, #3
 80068d8:	75fb      	strb	r3, [r7, #23]
          break;
 80068da:	e016      	b.n	800690a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d00f      	beq.n	8006908 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fc99 	bl	8008222 <USBD_CtlError>
            ret = USBD_FAIL;
 80068f0:	2303      	movs	r3, #3
 80068f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068f4:	e008      	b.n	8006908 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fc92 	bl	8008222 <USBD_CtlError>
          ret = USBD_FAIL;
 80068fe:	2303      	movs	r3, #3
 8006900:	75fb      	strb	r3, [r7, #23]
          break;
 8006902:	e002      	b.n	800690a <USBD_CDC_Setup+0x19e>
          break;
 8006904:	bf00      	nop
 8006906:	e008      	b.n	800691a <USBD_CDC_Setup+0x1ae>
          break;
 8006908:	bf00      	nop
      }
      break;
 800690a:	e006      	b.n	800691a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fc87 	bl	8008222 <USBD_CtlError>
      ret = USBD_FAIL;
 8006914:	2303      	movs	r3, #3
 8006916:	75fb      	strb	r3, [r7, #23]
      break;
 8006918:	bf00      	nop
  }

  return (uint8_t)ret;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006936:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	32b0      	adds	r2, #176	@ 0xb0
 8006942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800694a:	2303      	movs	r3, #3
 800694c:	e065      	b.n	8006a1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	32b0      	adds	r2, #176	@ 0xb0
 8006958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	f003 020f 	and.w	r2, r3, #15
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	3318      	adds	r3, #24
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d02f      	beq.n	80069d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	f003 020f 	and.w	r2, r3, #15
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	3318      	adds	r3, #24
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	f003 010f 	and.w	r1, r3, #15
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	460b      	mov	r3, r1
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	440b      	add	r3, r1
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4403      	add	r3, r0
 80069a0:	331c      	adds	r3, #28
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d112      	bne.n	80069d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	f003 020f 	and.w	r2, r3, #15
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	3318      	adds	r3, #24
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069ca:	78f9      	ldrb	r1, [r7, #3]
 80069cc:	2300      	movs	r3, #0
 80069ce:	2200      	movs	r2, #0
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f002 f984 	bl	8008cde <USBD_LL_Transmit>
 80069d6:	e01f      	b.n	8006a18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	33b0      	adds	r3, #176	@ 0xb0
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d010      	beq.n	8006a18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	33b0      	adds	r3, #176	@ 0xb0
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006a14:	78fa      	ldrb	r2, [r7, #3]
 8006a16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	32b0      	adds	r2, #176	@ 0xb0
 8006a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	32b0      	adds	r2, #176	@ 0xb0
 8006a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e01a      	b.n	8006a8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f002 f982 	bl	8008d62 <USBD_LL_GetRxDataSize>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	33b0      	adds	r3, #176	@ 0xb0
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006a84:	4611      	mov	r1, r2
 8006a86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	32b0      	adds	r2, #176	@ 0xb0
 8006aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e024      	b.n	8006afe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	33b0      	adds	r3, #176	@ 0xb0
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d019      	beq.n	8006afc <USBD_CDC_EP0_RxReady+0x6a>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006ace:	2bff      	cmp	r3, #255	@ 0xff
 8006ad0:	d014      	beq.n	8006afc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	33b0      	adds	r3, #176	@ 0xb0
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006aea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006af2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	22ff      	movs	r2, #255	@ 0xff
 8006af8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b10:	2182      	movs	r1, #130	@ 0x82
 8006b12:	4818      	ldr	r0, [pc, #96]	@ (8006b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b14:	f000 fd4f 	bl	80075b6 <USBD_GetEpDesc>
 8006b18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	4815      	ldr	r0, [pc, #84]	@ (8006b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b1e:	f000 fd4a 	bl	80075b6 <USBD_GetEpDesc>
 8006b22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b24:	2181      	movs	r1, #129	@ 0x81
 8006b26:	4813      	ldr	r0, [pc, #76]	@ (8006b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b28:	f000 fd45 	bl	80075b6 <USBD_GetEpDesc>
 8006b2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2210      	movs	r2, #16
 8006b38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d006      	beq.n	8006b4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b48:	711a      	strb	r2, [r3, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d006      	beq.n	8006b62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b5c:	711a      	strb	r2, [r3, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2243      	movs	r2, #67	@ 0x43
 8006b66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b68:	4b02      	ldr	r3, [pc, #8]	@ (8006b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	200002d4 	.word	0x200002d4

08006b78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b80:	2182      	movs	r1, #130	@ 0x82
 8006b82:	4818      	ldr	r0, [pc, #96]	@ (8006be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b84:	f000 fd17 	bl	80075b6 <USBD_GetEpDesc>
 8006b88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	4815      	ldr	r0, [pc, #84]	@ (8006be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b8e:	f000 fd12 	bl	80075b6 <USBD_GetEpDesc>
 8006b92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b94:	2181      	movs	r1, #129	@ 0x81
 8006b96:	4813      	ldr	r0, [pc, #76]	@ (8006be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b98:	f000 fd0d 	bl	80075b6 <USBD_GetEpDesc>
 8006b9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2210      	movs	r2, #16
 8006ba8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d006      	beq.n	8006bbe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	711a      	strb	r2, [r3, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f042 0202 	orr.w	r2, r2, #2
 8006bbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d006      	beq.n	8006bd2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	711a      	strb	r2, [r3, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f042 0202 	orr.w	r2, r2, #2
 8006bd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2243      	movs	r2, #67	@ 0x43
 8006bd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bd8:	4b02      	ldr	r3, [pc, #8]	@ (8006be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	200002d4 	.word	0x200002d4

08006be8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bf0:	2182      	movs	r1, #130	@ 0x82
 8006bf2:	4818      	ldr	r0, [pc, #96]	@ (8006c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bf4:	f000 fcdf 	bl	80075b6 <USBD_GetEpDesc>
 8006bf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	4815      	ldr	r0, [pc, #84]	@ (8006c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bfe:	f000 fcda 	bl	80075b6 <USBD_GetEpDesc>
 8006c02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c04:	2181      	movs	r1, #129	@ 0x81
 8006c06:	4813      	ldr	r0, [pc, #76]	@ (8006c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c08:	f000 fcd5 	bl	80075b6 <USBD_GetEpDesc>
 8006c0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2210      	movs	r2, #16
 8006c18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d006      	beq.n	8006c2e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c28:	711a      	strb	r2, [r3, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c3c:	711a      	strb	r2, [r3, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2243      	movs	r2, #67	@ 0x43
 8006c46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c48:	4b02      	ldr	r3, [pc, #8]	@ (8006c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	200002d4 	.word	0x200002d4

08006c58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	220a      	movs	r2, #10
 8006c64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c66:	4b03      	ldr	r3, [pc, #12]	@ (8006c74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	20000290 	.word	0x20000290

08006c78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e009      	b.n	8006ca0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	33b0      	adds	r3, #176	@ 0xb0
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	32b0      	adds	r2, #176	@ 0xb0
 8006cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e008      	b.n	8006ce4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	32b0      	adds	r2, #176	@ 0xb0
 8006d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e004      	b.n	8006d1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	32b0      	adds	r2, #176	@ 0xb0
 8006d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d42:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e025      	b.n	8006d9e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d11f      	bne.n	8006d9c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006d64:	4b10      	ldr	r3, [pc, #64]	@ (8006da8 <USBD_CDC_TransmitPacket+0x7c>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	f003 020f 	and.w	r2, r3, #15
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4403      	add	r3, r0
 8006d7e:	3318      	adds	r3, #24
 8006d80:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006d82:	4b09      	ldr	r3, [pc, #36]	@ (8006da8 <USBD_CDC_TransmitPacket+0x7c>)
 8006d84:	7819      	ldrb	r1, [r3, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f001 ffa3 	bl	8008cde <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20000317 	.word	0x20000317

08006dac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	32b0      	adds	r2, #176	@ 0xb0
 8006dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32b0      	adds	r2, #176	@ 0xb0
 8006dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e018      	b.n	8006e0c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7c1b      	ldrb	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006de2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <USBD_CDC_ReceivePacket+0x68>)
 8006de4:	7819      	ldrb	r1, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 ff95 	bl	8008d20 <USBD_LL_PrepareReceive>
 8006df6:	e008      	b.n	8006e0a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006df8:	4b06      	ldr	r3, [pc, #24]	@ (8006e14 <USBD_CDC_ReceivePacket+0x68>)
 8006dfa:	7819      	ldrb	r1, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e02:	2340      	movs	r3, #64	@ 0x40
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 ff8b 	bl	8008d20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20000318 	.word	0x20000318

08006e18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e01f      	b.n	8006e70 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	79fa      	ldrb	r2, [r7, #7]
 8006e62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f001 fe05 	bl	8008a74 <USBD_LL_Init>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e025      	b.n	8006edc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32ae      	adds	r2, #174	@ 0xae
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00f      	beq.n	8006ecc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	32ae      	adds	r2, #174	@ 0xae
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebc:	f107 020e 	add.w	r2, r7, #14
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fe0d 	bl	8008b0c <USBD_LL_Start>
 8006ef2:	4603      	mov	r3, r0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	78fa      	ldrb	r2, [r7, #3]
 8006f36:	4611      	mov	r1, r2
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	78fa      	ldrb	r2, [r7, #3]
 8006f64:	4611      	mov	r1, r2
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4798      	blx	r3
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f70:	2303      	movs	r3, #3
 8006f72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 f90c 	bl	80081ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d01a      	beq.n	8006ff0 <USBD_LL_SetupStage+0x72>
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d822      	bhi.n	8007004 <USBD_LL_SetupStage+0x86>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <USBD_LL_SetupStage+0x4a>
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d00a      	beq.n	8006fdc <USBD_LL_SetupStage+0x5e>
 8006fc6:	e01d      	b.n	8007004 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fb63 	bl	800769c <USBD_StdDevReq>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fda:	e020      	b.n	800701e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fbcb 	bl	8007780 <USBD_StdItfReq>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73fb      	strb	r3, [r7, #15]
      break;
 8006fee:	e016      	b.n	800701e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fc2d 	bl	8007858 <USBD_StdEPReq>
 8006ffe:	4603      	mov	r3, r0
 8007000:	73fb      	strb	r3, [r7, #15]
      break;
 8007002:	e00c      	b.n	800701e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800700a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800700e:	b2db      	uxtb	r3, r3
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fdda 	bl	8008bcc <USBD_LL_StallEP>
 8007018:	4603      	mov	r3, r0
 800701a:	73fb      	strb	r3, [r7, #15]
      break;
 800701c:	bf00      	nop
  }

  return ret;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	460b      	mov	r3, r1
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d16e      	bne.n	800711e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007046:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800704e:	2b03      	cmp	r3, #3
 8007050:	f040 8098 	bne.w	8007184 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	429a      	cmp	r2, r3
 800705e:	d913      	bls.n	8007088 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	1ad2      	subs	r2, r2, r3
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	4293      	cmp	r3, r2
 8007078:	bf28      	it	cs
 800707a:	4613      	movcs	r3, r2
 800707c:	461a      	mov	r2, r3
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f001 f988 	bl	8008396 <USBD_CtlContinueRx>
 8007086:	e07d      	b.n	8007184 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	2b02      	cmp	r3, #2
 8007094:	d014      	beq.n	80070c0 <USBD_LL_DataOutStage+0x98>
 8007096:	2b02      	cmp	r3, #2
 8007098:	d81d      	bhi.n	80070d6 <USBD_LL_DataOutStage+0xae>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <USBD_LL_DataOutStage+0x7c>
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d003      	beq.n	80070aa <USBD_LL_DataOutStage+0x82>
 80070a2:	e018      	b.n	80070d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	75bb      	strb	r3, [r7, #22]
            break;
 80070a8:	e018      	b.n	80070dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	4619      	mov	r1, r3
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 fa64 	bl	8007582 <USBD_CoreFindIF>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75bb      	strb	r3, [r7, #22]
            break;
 80070be:	e00d      	b.n	80070dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	4619      	mov	r1, r3
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fa66 	bl	800759c <USBD_CoreFindEP>
 80070d0:	4603      	mov	r3, r0
 80070d2:	75bb      	strb	r3, [r7, #22]
            break;
 80070d4:	e002      	b.n	80070dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	75bb      	strb	r3, [r7, #22]
            break;
 80070da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80070dc:	7dbb      	ldrb	r3, [r7, #22]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d119      	bne.n	8007116 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d113      	bne.n	8007116 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80070ee:	7dba      	ldrb	r2, [r7, #22]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	32ae      	adds	r2, #174	@ 0xae
 80070f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00b      	beq.n	8007116 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80070fe:	7dba      	ldrb	r2, [r7, #22]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007106:	7dba      	ldrb	r2, [r7, #22]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	32ae      	adds	r2, #174	@ 0xae
 800710c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f001 f94e 	bl	80083b8 <USBD_CtlSendStatus>
 800711c:	e032      	b.n	8007184 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800711e:	7afb      	ldrb	r3, [r7, #11]
 8007120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007124:	b2db      	uxtb	r3, r3
 8007126:	4619      	mov	r1, r3
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fa37 	bl	800759c <USBD_CoreFindEP>
 800712e:	4603      	mov	r3, r0
 8007130:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007132:	7dbb      	ldrb	r3, [r7, #22]
 8007134:	2bff      	cmp	r3, #255	@ 0xff
 8007136:	d025      	beq.n	8007184 <USBD_LL_DataOutStage+0x15c>
 8007138:	7dbb      	ldrb	r3, [r7, #22]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d122      	bne.n	8007184 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b03      	cmp	r3, #3
 8007148:	d117      	bne.n	800717a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800714a:	7dba      	ldrb	r2, [r7, #22]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	32ae      	adds	r2, #174	@ 0xae
 8007150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00f      	beq.n	800717a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800715a:	7dba      	ldrb	r2, [r7, #22]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007162:	7dba      	ldrb	r2, [r7, #22]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	32ae      	adds	r2, #174	@ 0xae
 8007168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	7afa      	ldrb	r2, [r7, #11]
 8007170:	4611      	mov	r1, r2
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	4798      	blx	r3
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	e000      	b.n	8007186 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b086      	sub	sp, #24
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	460b      	mov	r3, r1
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d16f      	bne.n	8007282 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3314      	adds	r3, #20
 80071a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d15a      	bne.n	8007268 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d914      	bls.n	80071e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	1ad2      	subs	r2, r2, r3
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	461a      	mov	r2, r3
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f001 f8b0 	bl	800833a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071da:	2300      	movs	r3, #0
 80071dc:	2200      	movs	r2, #0
 80071de:	2100      	movs	r1, #0
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f001 fd9d 	bl	8008d20 <USBD_LL_PrepareReceive>
 80071e6:	e03f      	b.n	8007268 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d11c      	bne.n	800722e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d316      	bcc.n	800722e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800720a:	429a      	cmp	r2, r3
 800720c:	d20f      	bcs.n	800722e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800720e:	2200      	movs	r2, #0
 8007210:	2100      	movs	r1, #0
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f001 f891 	bl	800833a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007220:	2300      	movs	r3, #0
 8007222:	2200      	movs	r2, #0
 8007224:	2100      	movs	r1, #0
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f001 fd7a 	bl	8008d20 <USBD_LL_PrepareReceive>
 800722c:	e01c      	b.n	8007268 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b03      	cmp	r3, #3
 8007238:	d10f      	bne.n	800725a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800725a:	2180      	movs	r1, #128	@ 0x80
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f001 fcb5 	bl	8008bcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f001 f8bb 	bl	80083de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d03a      	beq.n	80072e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff fe42 	bl	8006efc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007280:	e032      	b.n	80072e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007288:	b2db      	uxtb	r3, r3
 800728a:	4619      	mov	r1, r3
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 f985 	bl	800759c <USBD_CoreFindEP>
 8007292:	4603      	mov	r3, r0
 8007294:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	2bff      	cmp	r3, #255	@ 0xff
 800729a:	d025      	beq.n	80072e8 <USBD_LL_DataInStage+0x15a>
 800729c:	7dfb      	ldrb	r3, [r7, #23]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d122      	bne.n	80072e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d11c      	bne.n	80072e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80072ae:	7dfa      	ldrb	r2, [r7, #23]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	32ae      	adds	r2, #174	@ 0xae
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d014      	beq.n	80072e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80072be:	7dfa      	ldrb	r2, [r7, #23]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80072c6:	7dfa      	ldrb	r2, [r7, #23]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	32ae      	adds	r2, #174	@ 0xae
 80072cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	7afa      	ldrb	r2, [r7, #11]
 80072d4:	4611      	mov	r1, r2
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80072de:	7dbb      	ldrb	r3, [r7, #22]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80072e4:	7dbb      	ldrb	r3, [r7, #22]
 80072e6:	e000      	b.n	80072ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d014      	beq.n	8007358 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00e      	beq.n	8007358 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6852      	ldr	r2, [r2, #4]
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	4611      	mov	r1, r2
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007354:	2303      	movs	r3, #3
 8007356:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007358:	2340      	movs	r3, #64	@ 0x40
 800735a:	2200      	movs	r2, #0
 800735c:	2100      	movs	r1, #0
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 fbef 	bl	8008b42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2240      	movs	r2, #64	@ 0x40
 8007370:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007374:	2340      	movs	r3, #64	@ 0x40
 8007376:	2200      	movs	r2, #0
 8007378:	2180      	movs	r1, #128	@ 0x80
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 fbe1 	bl	8008b42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2240      	movs	r2, #64	@ 0x40
 800738a:	621a      	str	r2, [r3, #32]

  return ret;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	78fa      	ldrb	r2, [r7, #3]
 80073a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d006      	beq.n	80073d8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2204      	movs	r2, #4
 80073dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d106      	bne.n	8007410 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007408:	b2da      	uxtb	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b03      	cmp	r3, #3
 8007430:	d110      	bne.n	8007454 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b082      	sub	sp, #8
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	460b      	mov	r3, r1
 8007468:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	32ae      	adds	r2, #174	@ 0xae
 8007474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	e01c      	b.n	80074ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b03      	cmp	r3, #3
 800748a:	d115      	bne.n	80074b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32ae      	adds	r2, #174	@ 0xae
 8007496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	32ae      	adds	r2, #174	@ 0xae
 80074aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	78fa      	ldrb	r2, [r7, #3]
 80074b2:	4611      	mov	r1, r2
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	32ae      	adds	r2, #174	@ 0xae
 80074d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e01c      	b.n	800751e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d115      	bne.n	800751c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	32ae      	adds	r2, #174	@ 0xae
 80074fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	32ae      	adds	r2, #174	@ 0xae
 800750e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	4611      	mov	r1, r2
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00e      	beq.n	8007578 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6852      	ldr	r2, [r2, #4]
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	4611      	mov	r1, r2
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007578:	7bfb      	ldrb	r3, [r7, #15]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800758e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b086      	sub	sp, #24
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	460b      	mov	r3, r1
 80075c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	885b      	ldrh	r3, [r3, #2]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	7812      	ldrb	r2, [r2, #0]
 80075d8:	4293      	cmp	r3, r2
 80075da:	d91f      	bls.n	800761c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80075e2:	e013      	b.n	800760c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80075e4:	f107 030a 	add.w	r3, r7, #10
 80075e8:	4619      	mov	r1, r3
 80075ea:	6978      	ldr	r0, [r7, #20]
 80075ec:	f000 f81b 	bl	8007626 <USBD_GetNextDesc>
 80075f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	2b05      	cmp	r3, #5
 80075f8:	d108      	bne.n	800760c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	789b      	ldrb	r3, [r3, #2]
 8007602:	78fa      	ldrb	r2, [r7, #3]
 8007604:	429a      	cmp	r2, r3
 8007606:	d008      	beq.n	800761a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007608:	2300      	movs	r3, #0
 800760a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	885b      	ldrh	r3, [r3, #2]
 8007610:	b29a      	uxth	r2, r3
 8007612:	897b      	ldrh	r3, [r7, #10]
 8007614:	429a      	cmp	r2, r3
 8007616:	d8e5      	bhi.n	80075e4 <USBD_GetEpDesc+0x2e>
 8007618:	e000      	b.n	800761c <USBD_GetEpDesc+0x66>
          break;
 800761a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800761c:	693b      	ldr	r3, [r7, #16]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	7812      	ldrb	r2, [r2, #0]
 800763c:	4413      	add	r3, r2
 800763e:	b29a      	uxth	r2, r3
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007650:	68fb      	ldr	r3, [r7, #12]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800765e:	b480      	push	{r7}
 8007660:	b087      	sub	sp, #28
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	3301      	adds	r3, #1
 8007674:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800767c:	8a3b      	ldrh	r3, [r7, #16]
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	b21a      	sxth	r2, r3
 8007682:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007686:	4313      	orrs	r3, r2
 8007688:	b21b      	sxth	r3, r3
 800768a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800768c:	89fb      	ldrh	r3, [r7, #14]
}
 800768e:	4618      	mov	r0, r3
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
	...

0800769c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076b2:	2b40      	cmp	r3, #64	@ 0x40
 80076b4:	d005      	beq.n	80076c2 <USBD_StdDevReq+0x26>
 80076b6:	2b40      	cmp	r3, #64	@ 0x40
 80076b8:	d857      	bhi.n	800776a <USBD_StdDevReq+0xce>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00f      	beq.n	80076de <USBD_StdDevReq+0x42>
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d153      	bne.n	800776a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	32ae      	adds	r2, #174	@ 0xae
 80076cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4798      	blx	r3
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]
      break;
 80076dc:	e04a      	b.n	8007774 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	785b      	ldrb	r3, [r3, #1]
 80076e2:	2b09      	cmp	r3, #9
 80076e4:	d83b      	bhi.n	800775e <USBD_StdDevReq+0xc2>
 80076e6:	a201      	add	r2, pc, #4	@ (adr r2, 80076ec <USBD_StdDevReq+0x50>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	08007741 	.word	0x08007741
 80076f0:	08007755 	.word	0x08007755
 80076f4:	0800775f 	.word	0x0800775f
 80076f8:	0800774b 	.word	0x0800774b
 80076fc:	0800775f 	.word	0x0800775f
 8007700:	0800771f 	.word	0x0800771f
 8007704:	08007715 	.word	0x08007715
 8007708:	0800775f 	.word	0x0800775f
 800770c:	08007737 	.word	0x08007737
 8007710:	08007729 	.word	0x08007729
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa3c 	bl	8007b94 <USBD_GetDescriptor>
          break;
 800771c:	e024      	b.n	8007768 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fba1 	bl	8007e68 <USBD_SetAddress>
          break;
 8007726:	e01f      	b.n	8007768 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fbe0 	bl	8007ef0 <USBD_SetConfig>
 8007730:	4603      	mov	r3, r0
 8007732:	73fb      	strb	r3, [r7, #15]
          break;
 8007734:	e018      	b.n	8007768 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fc83 	bl	8008044 <USBD_GetConfig>
          break;
 800773e:	e013      	b.n	8007768 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fcb4 	bl	80080b0 <USBD_GetStatus>
          break;
 8007748:	e00e      	b.n	8007768 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fce3 	bl	8008118 <USBD_SetFeature>
          break;
 8007752:	e009      	b.n	8007768 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fd07 	bl	800816a <USBD_ClrFeature>
          break;
 800775c:	e004      	b.n	8007768 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fd5e 	bl	8008222 <USBD_CtlError>
          break;
 8007766:	bf00      	nop
      }
      break;
 8007768:	e004      	b.n	8007774 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fd58 	bl	8008222 <USBD_CtlError>
      break;
 8007772:	bf00      	nop
  }

  return ret;
 8007774:	7bfb      	ldrb	r3, [r7, #15]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop

08007780 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007796:	2b40      	cmp	r3, #64	@ 0x40
 8007798:	d005      	beq.n	80077a6 <USBD_StdItfReq+0x26>
 800779a:	2b40      	cmp	r3, #64	@ 0x40
 800779c:	d852      	bhi.n	8007844 <USBD_StdItfReq+0xc4>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <USBD_StdItfReq+0x26>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d14e      	bne.n	8007844 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	3b01      	subs	r3, #1
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d840      	bhi.n	8007836 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	889b      	ldrh	r3, [r3, #4]
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d836      	bhi.n	800782c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	889b      	ldrh	r3, [r3, #4]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fedb 	bl	8007582 <USBD_CoreFindIF>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	2bff      	cmp	r3, #255	@ 0xff
 80077d4:	d01d      	beq.n	8007812 <USBD_StdItfReq+0x92>
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d11a      	bne.n	8007812 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80077dc:	7bba      	ldrb	r2, [r7, #14]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	32ae      	adds	r2, #174	@ 0xae
 80077e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00f      	beq.n	800780c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80077ec:	7bba      	ldrb	r2, [r7, #14]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077f4:	7bba      	ldrb	r2, [r7, #14]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	32ae      	adds	r2, #174	@ 0xae
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	4798      	blx	r3
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800780a:	e004      	b.n	8007816 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800780c:	2303      	movs	r3, #3
 800780e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007810:	e001      	b.n	8007816 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007812:	2303      	movs	r3, #3
 8007814:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	88db      	ldrh	r3, [r3, #6]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d110      	bne.n	8007840 <USBD_StdItfReq+0xc0>
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10d      	bne.n	8007840 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fdc7 	bl	80083b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800782a:	e009      	b.n	8007840 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fcf7 	bl	8008222 <USBD_CtlError>
          break;
 8007834:	e004      	b.n	8007840 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fcf2 	bl	8008222 <USBD_CtlError>
          break;
 800783e:	e000      	b.n	8007842 <USBD_StdItfReq+0xc2>
          break;
 8007840:	bf00      	nop
      }
      break;
 8007842:	e004      	b.n	800784e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fceb 	bl	8008222 <USBD_CtlError>
      break;
 800784c:	bf00      	nop
  }

  return ret;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	889b      	ldrh	r3, [r3, #4]
 800786a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007874:	2b40      	cmp	r3, #64	@ 0x40
 8007876:	d007      	beq.n	8007888 <USBD_StdEPReq+0x30>
 8007878:	2b40      	cmp	r3, #64	@ 0x40
 800787a:	f200 817f 	bhi.w	8007b7c <USBD_StdEPReq+0x324>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d02a      	beq.n	80078d8 <USBD_StdEPReq+0x80>
 8007882:	2b20      	cmp	r3, #32
 8007884:	f040 817a 	bne.w	8007b7c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff fe85 	bl	800759c <USBD_CoreFindEP>
 8007892:	4603      	mov	r3, r0
 8007894:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007896:	7b7b      	ldrb	r3, [r7, #13]
 8007898:	2bff      	cmp	r3, #255	@ 0xff
 800789a:	f000 8174 	beq.w	8007b86 <USBD_StdEPReq+0x32e>
 800789e:	7b7b      	ldrb	r3, [r7, #13]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 8170 	bne.w	8007b86 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80078a6:	7b7a      	ldrb	r2, [r7, #13]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80078ae:	7b7a      	ldrb	r2, [r7, #13]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	32ae      	adds	r2, #174	@ 0xae
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 8163 	beq.w	8007b86 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80078c0:	7b7a      	ldrb	r2, [r7, #13]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32ae      	adds	r2, #174	@ 0xae
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078d6:	e156      	b.n	8007b86 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d008      	beq.n	80078f2 <USBD_StdEPReq+0x9a>
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	f300 8145 	bgt.w	8007b70 <USBD_StdEPReq+0x318>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 809b 	beq.w	8007a22 <USBD_StdEPReq+0x1ca>
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d03c      	beq.n	800796a <USBD_StdEPReq+0x112>
 80078f0:	e13e      	b.n	8007b70 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d002      	beq.n	8007904 <USBD_StdEPReq+0xac>
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d016      	beq.n	8007930 <USBD_StdEPReq+0xd8>
 8007902:	e02c      	b.n	800795e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00d      	beq.n	8007926 <USBD_StdEPReq+0xce>
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b80      	cmp	r3, #128	@ 0x80
 800790e:	d00a      	beq.n	8007926 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 f959 	bl	8008bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800791a:	2180      	movs	r1, #128	@ 0x80
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 f955 	bl	8008bcc <USBD_LL_StallEP>
 8007922:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007924:	e020      	b.n	8007968 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fc7a 	bl	8008222 <USBD_CtlError>
              break;
 800792e:	e01b      	b.n	8007968 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	885b      	ldrh	r3, [r3, #2]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10e      	bne.n	8007956 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00b      	beq.n	8007956 <USBD_StdEPReq+0xfe>
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b80      	cmp	r3, #128	@ 0x80
 8007942:	d008      	beq.n	8007956 <USBD_StdEPReq+0xfe>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	88db      	ldrh	r3, [r3, #6]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f93b 	bl	8008bcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fd2e 	bl	80083b8 <USBD_CtlSendStatus>

              break;
 800795c:	e004      	b.n	8007968 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fc5e 	bl	8008222 <USBD_CtlError>
              break;
 8007966:	bf00      	nop
          }
          break;
 8007968:	e107      	b.n	8007b7a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d002      	beq.n	800797c <USBD_StdEPReq+0x124>
 8007976:	2b03      	cmp	r3, #3
 8007978:	d016      	beq.n	80079a8 <USBD_StdEPReq+0x150>
 800797a:	e04b      	b.n	8007a14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00d      	beq.n	800799e <USBD_StdEPReq+0x146>
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	2b80      	cmp	r3, #128	@ 0x80
 8007986:	d00a      	beq.n	800799e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 f91d 	bl	8008bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007992:	2180      	movs	r1, #128	@ 0x80
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 f919 	bl	8008bcc <USBD_LL_StallEP>
 800799a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800799c:	e040      	b.n	8007a20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fc3e 	bl	8008222 <USBD_CtlError>
              break;
 80079a6:	e03b      	b.n	8007a20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	885b      	ldrh	r3, [r3, #2]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d136      	bne.n	8007a1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 f923 	bl	8008c0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fcf7 	bl	80083b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff fde4 	bl	800759c <USBD_CoreFindEP>
 80079d4:	4603      	mov	r3, r0
 80079d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079d8:	7b7b      	ldrb	r3, [r7, #13]
 80079da:	2bff      	cmp	r3, #255	@ 0xff
 80079dc:	d01f      	beq.n	8007a1e <USBD_StdEPReq+0x1c6>
 80079de:	7b7b      	ldrb	r3, [r7, #13]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d11c      	bne.n	8007a1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80079e4:	7b7a      	ldrb	r2, [r7, #13]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80079ec:	7b7a      	ldrb	r2, [r7, #13]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	32ae      	adds	r2, #174	@ 0xae
 80079f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d010      	beq.n	8007a1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079fc:	7b7a      	ldrb	r2, [r7, #13]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	32ae      	adds	r2, #174	@ 0xae
 8007a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
 8007a0e:	4603      	mov	r3, r0
 8007a10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a12:	e004      	b.n	8007a1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fc03 	bl	8008222 <USBD_CtlError>
              break;
 8007a1c:	e000      	b.n	8007a20 <USBD_StdEPReq+0x1c8>
              break;
 8007a1e:	bf00      	nop
          }
          break;
 8007a20:	e0ab      	b.n	8007b7a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d002      	beq.n	8007a34 <USBD_StdEPReq+0x1dc>
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d032      	beq.n	8007a98 <USBD_StdEPReq+0x240>
 8007a32:	e097      	b.n	8007b64 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <USBD_StdEPReq+0x1f2>
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b80      	cmp	r3, #128	@ 0x80
 8007a3e:	d004      	beq.n	8007a4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fbed 	bl	8008222 <USBD_CtlError>
                break;
 8007a48:	e091      	b.n	8007b6e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	da0b      	bge.n	8007a6a <USBD_StdEPReq+0x212>
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	3310      	adds	r3, #16
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	e00b      	b.n	8007a82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	4413      	add	r3, r2
 8007a80:	3304      	adds	r3, #4
 8007a82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc37 	bl	8008304 <USBD_CtlSendData>
              break;
 8007a96:	e06a      	b.n	8007b6e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da11      	bge.n	8007ac4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	f003 020f 	and.w	r2, r3, #15
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	3324      	adds	r3, #36	@ 0x24
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d117      	bne.n	8007aea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fbb0 	bl	8008222 <USBD_CtlError>
                  break;
 8007ac2:	e054      	b.n	8007b6e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	f003 020f 	and.w	r2, r3, #15
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d104      	bne.n	8007aea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fb9d 	bl	8008222 <USBD_CtlError>
                  break;
 8007ae8:	e041      	b.n	8007b6e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da0b      	bge.n	8007b0a <USBD_StdEPReq+0x2b2>
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	3310      	adds	r3, #16
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	4413      	add	r3, r2
 8007b06:	3304      	adds	r3, #4
 8007b08:	e00b      	b.n	8007b22 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	4413      	add	r3, r2
 8007b20:	3304      	adds	r3, #4
 8007b22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <USBD_StdEPReq+0x2d8>
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b80      	cmp	r3, #128	@ 0x80
 8007b2e:	d103      	bne.n	8007b38 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	e00e      	b.n	8007b56 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f883 	bl	8008c48 <USBD_LL_IsStallEP>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	e002      	b.n	8007b56 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fbd1 	bl	8008304 <USBD_CtlSendData>
              break;
 8007b62:	e004      	b.n	8007b6e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fb5b 	bl	8008222 <USBD_CtlError>
              break;
 8007b6c:	bf00      	nop
          }
          break;
 8007b6e:	e004      	b.n	8007b7a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fb55 	bl	8008222 <USBD_CtlError>
          break;
 8007b78:	bf00      	nop
      }
      break;
 8007b7a:	e005      	b.n	8007b88 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fb4f 	bl	8008222 <USBD_CtlError>
      break;
 8007b84:	e000      	b.n	8007b88 <USBD_StdEPReq+0x330>
      break;
 8007b86:	bf00      	nop
  }

  return ret;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	885b      	ldrh	r3, [r3, #2]
 8007bae:	0a1b      	lsrs	r3, r3, #8
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	2b06      	cmp	r3, #6
 8007bb6:	f200 8128 	bhi.w	8007e0a <USBD_GetDescriptor+0x276>
 8007bba:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc0 <USBD_GetDescriptor+0x2c>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bdd 	.word	0x08007bdd
 8007bc4:	08007bf5 	.word	0x08007bf5
 8007bc8:	08007c35 	.word	0x08007c35
 8007bcc:	08007e0b 	.word	0x08007e0b
 8007bd0:	08007e0b 	.word	0x08007e0b
 8007bd4:	08007dab 	.word	0x08007dab
 8007bd8:	08007dd7 	.word	0x08007dd7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	7c12      	ldrb	r2, [r2, #16]
 8007be8:	f107 0108 	add.w	r1, r7, #8
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	60f8      	str	r0, [r7, #12]
      break;
 8007bf2:	e112      	b.n	8007e1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7c1b      	ldrb	r3, [r3, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10d      	bne.n	8007c18 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c04:	f107 0208 	add.w	r2, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3301      	adds	r3, #1
 8007c12:	2202      	movs	r2, #2
 8007c14:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c16:	e100      	b.n	8007e1a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	f107 0208 	add.w	r2, r7, #8
 8007c24:	4610      	mov	r0, r2
 8007c26:	4798      	blx	r3
 8007c28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	2202      	movs	r2, #2
 8007c30:	701a      	strb	r2, [r3, #0]
      break;
 8007c32:	e0f2      	b.n	8007e1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	885b      	ldrh	r3, [r3, #2]
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b05      	cmp	r3, #5
 8007c3c:	f200 80ac 	bhi.w	8007d98 <USBD_GetDescriptor+0x204>
 8007c40:	a201      	add	r2, pc, #4	@ (adr r2, 8007c48 <USBD_GetDescriptor+0xb4>)
 8007c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c46:	bf00      	nop
 8007c48:	08007c61 	.word	0x08007c61
 8007c4c:	08007c95 	.word	0x08007c95
 8007c50:	08007cc9 	.word	0x08007cc9
 8007c54:	08007cfd 	.word	0x08007cfd
 8007c58:	08007d31 	.word	0x08007d31
 8007c5c:	08007d65 	.word	0x08007d65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7c12      	ldrb	r2, [r2, #16]
 8007c78:	f107 0108 	add.w	r1, r7, #8
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
 8007c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c82:	e091      	b.n	8007da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 facb 	bl	8008222 <USBD_CtlError>
            err++;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	72fb      	strb	r3, [r7, #11]
          break;
 8007c92:	e089      	b.n	8007da8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7c12      	ldrb	r2, [r2, #16]
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb6:	e077      	b.n	8007da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fab1 	bl	8008222 <USBD_CtlError>
            err++;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc6:	e06f      	b.n	8007da8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cea:	e05d      	b.n	8007da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa97 	bl	8008222 <USBD_CtlError>
            err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cfa:	e055      	b.n	8007da8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 0108 	add.w	r1, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1e:	e043      	b.n	8007da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa7d 	bl	8008222 <USBD_CtlError>
            err++;
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2e:	e03b      	b.n	8007da8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00b      	beq.n	8007d54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	7c12      	ldrb	r2, [r2, #16]
 8007d48:	f107 0108 	add.w	r1, r7, #8
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d52:	e029      	b.n	8007da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa63 	bl	8008222 <USBD_CtlError>
            err++;
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	72fb      	strb	r3, [r7, #11]
          break;
 8007d62:	e021      	b.n	8007da8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	7c12      	ldrb	r2, [r2, #16]
 8007d7c:	f107 0108 	add.w	r1, r7, #8
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d86:	e00f      	b.n	8007da8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa49 	bl	8008222 <USBD_CtlError>
            err++;
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	3301      	adds	r3, #1
 8007d94:	72fb      	strb	r3, [r7, #11]
          break;
 8007d96:	e007      	b.n	8007da8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa41 	bl	8008222 <USBD_CtlError>
          err++;
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	3301      	adds	r3, #1
 8007da4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007da6:	bf00      	nop
      }
      break;
 8007da8:	e037      	b.n	8007e1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7c1b      	ldrb	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d109      	bne.n	8007dc6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dba:	f107 0208 	add.w	r2, r7, #8
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	4798      	blx	r3
 8007dc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dc4:	e029      	b.n	8007e1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fa2a 	bl	8008222 <USBD_CtlError>
        err++;
 8007dce:	7afb      	ldrb	r3, [r7, #11]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8007dd4:	e021      	b.n	8007e1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	7c1b      	ldrb	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10d      	bne.n	8007dfa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de6:	f107 0208 	add.w	r2, r7, #8
 8007dea:	4610      	mov	r0, r2
 8007dec:	4798      	blx	r3
 8007dee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3301      	adds	r3, #1
 8007df4:	2207      	movs	r2, #7
 8007df6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007df8:	e00f      	b.n	8007e1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa10 	bl	8008222 <USBD_CtlError>
        err++;
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	3301      	adds	r3, #1
 8007e06:	72fb      	strb	r3, [r7, #11]
      break;
 8007e08:	e007      	b.n	8007e1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fa08 	bl	8008222 <USBD_CtlError>
      err++;
 8007e12:	7afb      	ldrb	r3, [r7, #11]
 8007e14:	3301      	adds	r3, #1
 8007e16:	72fb      	strb	r3, [r7, #11]
      break;
 8007e18:	bf00      	nop
  }

  if (err != 0U)
 8007e1a:	7afb      	ldrb	r3, [r7, #11]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d11e      	bne.n	8007e5e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	88db      	ldrh	r3, [r3, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d016      	beq.n	8007e56 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e28:	893b      	ldrh	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00e      	beq.n	8007e4c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	88da      	ldrh	r2, [r3, #6]
 8007e32:	893b      	ldrh	r3, [r7, #8]
 8007e34:	4293      	cmp	r3, r2
 8007e36:	bf28      	it	cs
 8007e38:	4613      	movcs	r3, r2
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e3e:	893b      	ldrh	r3, [r7, #8]
 8007e40:	461a      	mov	r2, r3
 8007e42:	68f9      	ldr	r1, [r7, #12]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fa5d 	bl	8008304 <USBD_CtlSendData>
 8007e4a:	e009      	b.n	8007e60 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f9e7 	bl	8008222 <USBD_CtlError>
 8007e54:	e004      	b.n	8007e60 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 faae 	bl	80083b8 <USBD_CtlSendStatus>
 8007e5c:	e000      	b.n	8007e60 <USBD_GetDescriptor+0x2cc>
    return;
 8007e5e:	bf00      	nop
  }
}
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop

08007e68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	889b      	ldrh	r3, [r3, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d131      	bne.n	8007ede <USBD_SetAddress+0x76>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	88db      	ldrh	r3, [r3, #6]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d12d      	bne.n	8007ede <USBD_SetAddress+0x76>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	885b      	ldrh	r3, [r3, #2]
 8007e86:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e88:	d829      	bhi.n	8007ede <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	885b      	ldrh	r3, [r3, #2]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d104      	bne.n	8007eac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f9bc 	bl	8008222 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eaa:	e01d      	b.n	8007ee8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7bfa      	ldrb	r2, [r7, #15]
 8007eb0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fef1 	bl	8008ca0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa7a 	bl	80083b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed2:	e009      	b.n	8007ee8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007edc:	e004      	b.n	8007ee8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f99e 	bl	8008222 <USBD_CtlError>
  }
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	885b      	ldrh	r3, [r3, #2]
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	4b4e      	ldr	r3, [pc, #312]	@ (8008040 <USBD_SetConfig+0x150>)
 8007f06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f08:	4b4d      	ldr	r3, [pc, #308]	@ (8008040 <USBD_SetConfig+0x150>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d905      	bls.n	8007f1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f985 	bl	8008222 <USBD_CtlError>
    return USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e08c      	b.n	8008036 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d002      	beq.n	8007f2e <USBD_SetConfig+0x3e>
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d029      	beq.n	8007f80 <USBD_SetConfig+0x90>
 8007f2c:	e075      	b.n	800801a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f2e:	4b44      	ldr	r3, [pc, #272]	@ (8008040 <USBD_SetConfig+0x150>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d020      	beq.n	8007f78 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f36:	4b42      	ldr	r3, [pc, #264]	@ (8008040 <USBD_SetConfig+0x150>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f40:	4b3f      	ldr	r3, [pc, #252]	@ (8008040 <USBD_SetConfig+0x150>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fe ffe3 	bl	8006f12 <USBD_SetClassConfig>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d008      	beq.n	8007f68 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f962 	bl	8008222 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f66:	e065      	b.n	8008034 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa25 	bl	80083b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2203      	movs	r2, #3
 8007f72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f76:	e05d      	b.n	8008034 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa1d 	bl	80083b8 <USBD_CtlSendStatus>
      break;
 8007f7e:	e059      	b.n	8008034 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f80:	4b2f      	ldr	r3, [pc, #188]	@ (8008040 <USBD_SetConfig+0x150>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d112      	bne.n	8007fae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007f90:	4b2b      	ldr	r3, [pc, #172]	@ (8008040 <USBD_SetConfig+0x150>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f9a:	4b29      	ldr	r3, [pc, #164]	@ (8008040 <USBD_SetConfig+0x150>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7fe ffd2 	bl	8006f4a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fa06 	bl	80083b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fac:	e042      	b.n	8008034 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007fae:	4b24      	ldr	r3, [pc, #144]	@ (8008040 <USBD_SetConfig+0x150>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d02a      	beq.n	8008012 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7fe ffc0 	bl	8006f4a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fca:	4b1d      	ldr	r3, [pc, #116]	@ (8008040 <USBD_SetConfig+0x150>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8008040 <USBD_SetConfig+0x150>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7fe ff99 	bl	8006f12 <USBD_SetClassConfig>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00f      	beq.n	800800a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f918 	bl	8008222 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fe ffa5 	bl	8006f4a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008008:	e014      	b.n	8008034 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f9d4 	bl	80083b8 <USBD_CtlSendStatus>
      break;
 8008010:	e010      	b.n	8008034 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f9d0 	bl	80083b8 <USBD_CtlSendStatus>
      break;
 8008018:	e00c      	b.n	8008034 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f900 	bl	8008222 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008022:	4b07      	ldr	r3, [pc, #28]	@ (8008040 <USBD_SetConfig+0x150>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7fe ff8e 	bl	8006f4a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800802e:	2303      	movs	r3, #3
 8008030:	73fb      	strb	r3, [r7, #15]
      break;
 8008032:	bf00      	nop
  }

  return ret;
 8008034:	7bfb      	ldrb	r3, [r7, #15]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	200006a4 	.word	0x200006a4

08008044 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	88db      	ldrh	r3, [r3, #6]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d004      	beq.n	8008060 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f8e2 	bl	8008222 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800805e:	e023      	b.n	80080a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	dc02      	bgt.n	8008072 <USBD_GetConfig+0x2e>
 800806c:	2b00      	cmp	r3, #0
 800806e:	dc03      	bgt.n	8008078 <USBD_GetConfig+0x34>
 8008070:	e015      	b.n	800809e <USBD_GetConfig+0x5a>
 8008072:	2b03      	cmp	r3, #3
 8008074:	d00b      	beq.n	800808e <USBD_GetConfig+0x4a>
 8008076:	e012      	b.n	800809e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3308      	adds	r3, #8
 8008082:	2201      	movs	r2, #1
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f93c 	bl	8008304 <USBD_CtlSendData>
        break;
 800808c:	e00c      	b.n	80080a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3304      	adds	r3, #4
 8008092:	2201      	movs	r2, #1
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f934 	bl	8008304 <USBD_CtlSendData>
        break;
 800809c:	e004      	b.n	80080a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f8be 	bl	8008222 <USBD_CtlError>
        break;
 80080a6:	bf00      	nop
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d81e      	bhi.n	8008106 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	88db      	ldrh	r3, [r3, #6]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d004      	beq.n	80080da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f8a5 	bl	8008222 <USBD_CtlError>
        break;
 80080d8:	e01a      	b.n	8008110 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f043 0202 	orr.w	r2, r3, #2
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	330c      	adds	r3, #12
 80080fa:	2202      	movs	r2, #2
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f900 	bl	8008304 <USBD_CtlSendData>
      break;
 8008104:	e004      	b.n	8008110 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f88a 	bl	8008222 <USBD_CtlError>
      break;
 800810e:	bf00      	nop
  }
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	885b      	ldrh	r3, [r3, #2]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d107      	bne.n	800813a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f940 	bl	80083b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008138:	e013      	b.n	8008162 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	885b      	ldrh	r3, [r3, #2]
 800813e:	2b02      	cmp	r3, #2
 8008140:	d10b      	bne.n	800815a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	889b      	ldrh	r3, [r3, #4]
 8008146:	0a1b      	lsrs	r3, r3, #8
 8008148:	b29b      	uxth	r3, r3
 800814a:	b2da      	uxtb	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f930 	bl	80083b8 <USBD_CtlSendStatus>
}
 8008158:	e003      	b.n	8008162 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f860 	bl	8008222 <USBD_CtlError>
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800817a:	b2db      	uxtb	r3, r3
 800817c:	3b01      	subs	r3, #1
 800817e:	2b02      	cmp	r3, #2
 8008180:	d80b      	bhi.n	800819a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	885b      	ldrh	r3, [r3, #2]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d10c      	bne.n	80081a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f910 	bl	80083b8 <USBD_CtlSendStatus>
      }
      break;
 8008198:	e004      	b.n	80081a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f840 	bl	8008222 <USBD_CtlError>
      break;
 80081a2:	e000      	b.n	80081a6 <USBD_ClrFeature+0x3c>
      break;
 80081a4:	bf00      	nop
  }
}
 80081a6:	bf00      	nop
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	781a      	ldrb	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3301      	adds	r3, #1
 80081d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7ff fa40 	bl	800765e <SWAPBYTE>
 80081de:	4603      	mov	r3, r0
 80081e0:	461a      	mov	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7ff fa33 	bl	800765e <SWAPBYTE>
 80081f8:	4603      	mov	r3, r0
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff fa26 	bl	800765e <SWAPBYTE>
 8008212:	4603      	mov	r3, r0
 8008214:	461a      	mov	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	80da      	strh	r2, [r3, #6]
}
 800821a:	bf00      	nop
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800822c:	2180      	movs	r1, #128	@ 0x80
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fccc 	bl	8008bcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008234:	2100      	movs	r1, #0
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fcc8 	bl	8008bcc <USBD_LL_StallEP>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d036      	beq.n	80082c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800825e:	6938      	ldr	r0, [r7, #16]
 8008260:	f000 f836 	bl	80082d0 <USBD_GetLen>
 8008264:	4603      	mov	r3, r0
 8008266:	3301      	adds	r3, #1
 8008268:	b29b      	uxth	r3, r3
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	b29a      	uxth	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	4413      	add	r3, r2
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	701a      	strb	r2, [r3, #0]
  idx++;
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	3301      	adds	r3, #1
 8008282:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	4413      	add	r3, r2
 800828a:	2203      	movs	r2, #3
 800828c:	701a      	strb	r2, [r3, #0]
  idx++;
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	3301      	adds	r3, #1
 8008292:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008294:	e013      	b.n	80082be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	4413      	add	r3, r2
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	3301      	adds	r3, #1
 80082a6:	613b      	str	r3, [r7, #16]
    idx++;
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	3301      	adds	r3, #1
 80082ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	4413      	add	r3, r2
 80082b4:	2200      	movs	r2, #0
 80082b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	3301      	adds	r3, #1
 80082bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e7      	bne.n	8008296 <USBD_GetString+0x52>
 80082c6:	e000      	b.n	80082ca <USBD_GetString+0x86>
    return;
 80082c8:	bf00      	nop
  }
}
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80082e0:	e005      	b.n	80082ee <USBD_GetLen+0x1e>
  {
    len++;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	3301      	adds	r3, #1
 80082e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f5      	bne.n	80082e2 <USBD_GetLen+0x12>
  }

  return len;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2202      	movs	r2, #2
 8008314:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	2100      	movs	r1, #0
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fcd7 	bl	8008cde <USBD_LL_Transmit>

  return USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	60b9      	str	r1, [r7, #8]
 8008344:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	2100      	movs	r1, #0
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 fcc6 	bl	8008cde <USBD_LL_Transmit>

  return USBD_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2203      	movs	r2, #3
 800836c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	2100      	movs	r1, #0
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fcca 	bl	8008d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	2100      	movs	r1, #0
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fcb9 	bl	8008d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2204      	movs	r2, #4
 80083c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083c8:	2300      	movs	r3, #0
 80083ca:	2200      	movs	r2, #0
 80083cc:	2100      	movs	r1, #0
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fc85 	bl	8008cde <USBD_LL_Transmit>

  return USBD_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2205      	movs	r2, #5
 80083ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ee:	2300      	movs	r3, #0
 80083f0:	2200      	movs	r2, #0
 80083f2:	2100      	movs	r1, #0
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fc93 	bl	8008d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008408:	2200      	movs	r2, #0
 800840a:	4912      	ldr	r1, [pc, #72]	@ (8008454 <MX_USB_DEVICE_Init+0x50>)
 800840c:	4812      	ldr	r0, [pc, #72]	@ (8008458 <MX_USB_DEVICE_Init+0x54>)
 800840e:	f7fe fd03 	bl	8006e18 <USBD_Init>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008418:	f7f8 fc48 	bl	8000cac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800841c:	490f      	ldr	r1, [pc, #60]	@ (800845c <MX_USB_DEVICE_Init+0x58>)
 800841e:	480e      	ldr	r0, [pc, #56]	@ (8008458 <MX_USB_DEVICE_Init+0x54>)
 8008420:	f7fe fd2a 	bl	8006e78 <USBD_RegisterClass>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800842a:	f7f8 fc3f 	bl	8000cac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800842e:	490c      	ldr	r1, [pc, #48]	@ (8008460 <MX_USB_DEVICE_Init+0x5c>)
 8008430:	4809      	ldr	r0, [pc, #36]	@ (8008458 <MX_USB_DEVICE_Init+0x54>)
 8008432:	f7fe fc21 	bl	8006c78 <USBD_CDC_RegisterInterface>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800843c:	f7f8 fc36 	bl	8000cac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008440:	4805      	ldr	r0, [pc, #20]	@ (8008458 <MX_USB_DEVICE_Init+0x54>)
 8008442:	f7fe fd4f 	bl	8006ee4 <USBD_Start>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800844c:	f7f8 fc2e 	bl	8000cac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008450:	bf00      	nop
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20000330 	.word	0x20000330
 8008458:	200006a8 	.word	0x200006a8
 800845c:	2000029c 	.word	0x2000029c
 8008460:	2000031c 	.word	0x2000031c

08008464 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008468:	2200      	movs	r2, #0
 800846a:	4905      	ldr	r1, [pc, #20]	@ (8008480 <CDC_Init_FS+0x1c>)
 800846c:	4805      	ldr	r0, [pc, #20]	@ (8008484 <CDC_Init_FS+0x20>)
 800846e:	f7fe fc1d 	bl	8006cac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008472:	4905      	ldr	r1, [pc, #20]	@ (8008488 <CDC_Init_FS+0x24>)
 8008474:	4803      	ldr	r0, [pc, #12]	@ (8008484 <CDC_Init_FS+0x20>)
 8008476:	f7fe fc3b 	bl	8006cf0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800847a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800847c:	4618      	mov	r0, r3
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20000d84 	.word	0x20000d84
 8008484:	200006a8 	.word	0x200006a8
 8008488:	20000984 	.word	0x20000984

0800848c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008490:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008492:	4618      	mov	r0, r3
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	6039      	str	r1, [r7, #0]
 80084a6:	71fb      	strb	r3, [r7, #7]
 80084a8:	4613      	mov	r3, r2
 80084aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	2b23      	cmp	r3, #35	@ 0x23
 80084b0:	d84a      	bhi.n	8008548 <CDC_Control_FS+0xac>
 80084b2:	a201      	add	r2, pc, #4	@ (adr r2, 80084b8 <CDC_Control_FS+0x1c>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	08008549 	.word	0x08008549
 80084bc:	08008549 	.word	0x08008549
 80084c0:	08008549 	.word	0x08008549
 80084c4:	08008549 	.word	0x08008549
 80084c8:	08008549 	.word	0x08008549
 80084cc:	08008549 	.word	0x08008549
 80084d0:	08008549 	.word	0x08008549
 80084d4:	08008549 	.word	0x08008549
 80084d8:	08008549 	.word	0x08008549
 80084dc:	08008549 	.word	0x08008549
 80084e0:	08008549 	.word	0x08008549
 80084e4:	08008549 	.word	0x08008549
 80084e8:	08008549 	.word	0x08008549
 80084ec:	08008549 	.word	0x08008549
 80084f0:	08008549 	.word	0x08008549
 80084f4:	08008549 	.word	0x08008549
 80084f8:	08008549 	.word	0x08008549
 80084fc:	08008549 	.word	0x08008549
 8008500:	08008549 	.word	0x08008549
 8008504:	08008549 	.word	0x08008549
 8008508:	08008549 	.word	0x08008549
 800850c:	08008549 	.word	0x08008549
 8008510:	08008549 	.word	0x08008549
 8008514:	08008549 	.word	0x08008549
 8008518:	08008549 	.word	0x08008549
 800851c:	08008549 	.word	0x08008549
 8008520:	08008549 	.word	0x08008549
 8008524:	08008549 	.word	0x08008549
 8008528:	08008549 	.word	0x08008549
 800852c:	08008549 	.word	0x08008549
 8008530:	08008549 	.word	0x08008549
 8008534:	08008549 	.word	0x08008549
 8008538:	08008549 	.word	0x08008549
 800853c:	08008549 	.word	0x08008549
 8008540:	08008549 	.word	0x08008549
 8008544:	08008549 	.word	0x08008549
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008548:	bf00      	nop
  }

  return (USBD_OK);
 800854a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	4808      	ldr	r0, [pc, #32]	@ (8008588 <CDC_Receive_FS+0x30>)
 8008566:	f7fe fbc3 	bl	8006cf0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800856a:	4807      	ldr	r0, [pc, #28]	@ (8008588 <CDC_Receive_FS+0x30>)
 800856c:	f7fe fc1e 	bl	8006dac <USBD_CDC_ReceivePacket>
  CDCReceiveCallback(Buf, *Len);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7f8 fb1c 	bl	8000bb4 <CDCReceiveCallback>
  return (USBD_OK);
 800857c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	200006a8 	.word	0x200006a8

0800858c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800859c:	4b0d      	ldr	r3, [pc, #52]	@ (80085d4 <CDC_Transmit_FS+0x48>)
 800859e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e00b      	b.n	80085ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085b2:	887b      	ldrh	r3, [r7, #2]
 80085b4:	461a      	mov	r2, r3
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4806      	ldr	r0, [pc, #24]	@ (80085d4 <CDC_Transmit_FS+0x48>)
 80085ba:	f7fe fb77 	bl	8006cac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085be:	4805      	ldr	r0, [pc, #20]	@ (80085d4 <CDC_Transmit_FS+0x48>)
 80085c0:	f7fe fbb4 	bl	8006d2c <USBD_CDC_TransmitPacket>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	200006a8 	.word	0x200006a8

080085d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80085ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2212      	movs	r2, #18
 800860c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800860e:	4b03      	ldr	r3, [pc, #12]	@ (800861c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	2000034c 	.word	0x2000034c

08008620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2204      	movs	r2, #4
 8008630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008632:	4b03      	ldr	r3, [pc, #12]	@ (8008640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20000360 	.word	0x20000360

08008644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d105      	bne.n	8008662 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	4907      	ldr	r1, [pc, #28]	@ (8008678 <USBD_FS_ProductStrDescriptor+0x34>)
 800865a:	4808      	ldr	r0, [pc, #32]	@ (800867c <USBD_FS_ProductStrDescriptor+0x38>)
 800865c:	f7ff fdf2 	bl	8008244 <USBD_GetString>
 8008660:	e004      	b.n	800866c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	4904      	ldr	r1, [pc, #16]	@ (8008678 <USBD_FS_ProductStrDescriptor+0x34>)
 8008666:	4805      	ldr	r0, [pc, #20]	@ (800867c <USBD_FS_ProductStrDescriptor+0x38>)
 8008668:	f7ff fdec 	bl	8008244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800866c:	4b02      	ldr	r3, [pc, #8]	@ (8008678 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20001184 	.word	0x20001184
 800867c:	0800987c 	.word	0x0800987c

08008680 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	4904      	ldr	r1, [pc, #16]	@ (80086a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008690:	4804      	ldr	r0, [pc, #16]	@ (80086a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008692:	f7ff fdd7 	bl	8008244 <USBD_GetString>
  return USBD_StrDesc;
 8008696:	4b02      	ldr	r3, [pc, #8]	@ (80086a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20001184 	.word	0x20001184
 80086a4:	08009894 	.word	0x08009894

080086a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	6039      	str	r1, [r7, #0]
 80086b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	221a      	movs	r2, #26
 80086b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086ba:	f000 f843 	bl	8008744 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086be:	4b02      	ldr	r3, [pc, #8]	@ (80086c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000364 	.word	0x20000364

080086cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	6039      	str	r1, [r7, #0]
 80086d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d105      	bne.n	80086ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	4907      	ldr	r1, [pc, #28]	@ (8008700 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086e2:	4808      	ldr	r0, [pc, #32]	@ (8008704 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086e4:	f7ff fdae 	bl	8008244 <USBD_GetString>
 80086e8:	e004      	b.n	80086f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	4904      	ldr	r1, [pc, #16]	@ (8008700 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086ee:	4805      	ldr	r0, [pc, #20]	@ (8008704 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086f0:	f7ff fda8 	bl	8008244 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086f4:	4b02      	ldr	r3, [pc, #8]	@ (8008700 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20001184 	.word	0x20001184
 8008704:	080098a8 	.word	0x080098a8

08008708 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	6039      	str	r1, [r7, #0]
 8008712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008714:	79fb      	ldrb	r3, [r7, #7]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d105      	bne.n	8008726 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	4907      	ldr	r1, [pc, #28]	@ (800873c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800871e:	4808      	ldr	r0, [pc, #32]	@ (8008740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008720:	f7ff fd90 	bl	8008244 <USBD_GetString>
 8008724:	e004      	b.n	8008730 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	4904      	ldr	r1, [pc, #16]	@ (800873c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800872a:	4805      	ldr	r0, [pc, #20]	@ (8008740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800872c:	f7ff fd8a 	bl	8008244 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008730:	4b02      	ldr	r3, [pc, #8]	@ (800873c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20001184 	.word	0x20001184
 8008740:	080098b4 	.word	0x080098b4

08008744 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4413      	add	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d009      	beq.n	800876c <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008758:	2208      	movs	r2, #8
 800875a:	4906      	ldr	r1, [pc, #24]	@ (8008774 <Get_SerialNum+0x30>)
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 f80d 	bl	800877c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008762:	2204      	movs	r2, #4
 8008764:	4904      	ldr	r1, [pc, #16]	@ (8008778 <Get_SerialNum+0x34>)
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f808 	bl	800877c <IntToUnicode>
  }
}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20000366 	.word	0x20000366
 8008778:	20000376 	.word	0x20000376

0800877c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800878e:	2300      	movs	r3, #0
 8008790:	75fb      	strb	r3, [r7, #23]
 8008792:	e027      	b.n	80087e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	0f1b      	lsrs	r3, r3, #28
 8008798:	2b09      	cmp	r3, #9
 800879a:	d80b      	bhi.n	80087b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	0f1b      	lsrs	r3, r3, #28
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	7dfb      	ldrb	r3, [r7, #23]
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	4619      	mov	r1, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	440b      	add	r3, r1
 80087ac:	3230      	adds	r2, #48	@ 0x30
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	e00a      	b.n	80087ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	0f1b      	lsrs	r3, r3, #28
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	4619      	mov	r1, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	440b      	add	r3, r1
 80087c4:	3237      	adds	r2, #55	@ 0x37
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	011b      	lsls	r3, r3, #4
 80087ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	3301      	adds	r3, #1
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	4413      	add	r3, r2
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	3301      	adds	r3, #1
 80087e2:	75fb      	strb	r3, [r7, #23]
 80087e4:	7dfa      	ldrb	r2, [r7, #23]
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d3d3      	bcc.n	8008794 <IntToUnicode+0x18>
  }
}
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	371c      	adds	r7, #28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
	...

080087fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08a      	sub	sp, #40	@ 0x28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008804:	f107 0314 	add.w	r3, r7, #20
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	605a      	str	r2, [r3, #4]
 800880e:	609a      	str	r2, [r3, #8]
 8008810:	60da      	str	r2, [r3, #12]
 8008812:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800881c:	d13a      	bne.n	8008894 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800881e:	2300      	movs	r3, #0
 8008820:	613b      	str	r3, [r7, #16]
 8008822:	4b1e      	ldr	r3, [pc, #120]	@ (800889c <HAL_PCD_MspInit+0xa0>)
 8008824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008826:	4a1d      	ldr	r2, [pc, #116]	@ (800889c <HAL_PCD_MspInit+0xa0>)
 8008828:	f043 0301 	orr.w	r3, r3, #1
 800882c:	6313      	str	r3, [r2, #48]	@ 0x30
 800882e:	4b1b      	ldr	r3, [pc, #108]	@ (800889c <HAL_PCD_MspInit+0xa0>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	613b      	str	r3, [r7, #16]
 8008838:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800883a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800883e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008840:	2302      	movs	r3, #2
 8008842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008844:	2300      	movs	r3, #0
 8008846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008848:	2303      	movs	r3, #3
 800884a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800884c:	230a      	movs	r3, #10
 800884e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008850:	f107 0314 	add.w	r3, r7, #20
 8008854:	4619      	mov	r1, r3
 8008856:	4812      	ldr	r0, [pc, #72]	@ (80088a0 <HAL_PCD_MspInit+0xa4>)
 8008858:	f7f9 fb6c 	bl	8001f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800885c:	4b0f      	ldr	r3, [pc, #60]	@ (800889c <HAL_PCD_MspInit+0xa0>)
 800885e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008860:	4a0e      	ldr	r2, [pc, #56]	@ (800889c <HAL_PCD_MspInit+0xa0>)
 8008862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008866:	6353      	str	r3, [r2, #52]	@ 0x34
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	4b0b      	ldr	r3, [pc, #44]	@ (800889c <HAL_PCD_MspInit+0xa0>)
 800886e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008870:	4a0a      	ldr	r2, [pc, #40]	@ (800889c <HAL_PCD_MspInit+0xa0>)
 8008872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008876:	6453      	str	r3, [r2, #68]	@ 0x44
 8008878:	4b08      	ldr	r3, [pc, #32]	@ (800889c <HAL_PCD_MspInit+0xa0>)
 800887a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800887c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008884:	2200      	movs	r2, #0
 8008886:	2100      	movs	r1, #0
 8008888:	2043      	movs	r0, #67	@ 0x43
 800888a:	f7f9 f832 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800888e:	2043      	movs	r0, #67	@ 0x43
 8008890:	f7f9 f84b 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008894:	bf00      	nop
 8008896:	3728      	adds	r7, #40	@ 0x28
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	40023800 	.word	0x40023800
 80088a0:	40020000 	.word	0x40020000

080088a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088b8:	4619      	mov	r1, r3
 80088ba:	4610      	mov	r0, r2
 80088bc:	f7fe fb5f 	bl	8006f7e <USBD_LL_SetupStage>
}
 80088c0:	bf00      	nop
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80088da:	78fa      	ldrb	r2, [r7, #3]
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	4613      	mov	r3, r2
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	440b      	add	r3, r1
 80088e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	78fb      	ldrb	r3, [r7, #3]
 80088f0:	4619      	mov	r1, r3
 80088f2:	f7fe fb99 	bl	8007028 <USBD_LL_DataOutStage>
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008910:	78fa      	ldrb	r2, [r7, #3]
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	4613      	mov	r3, r2
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	440b      	add	r3, r1
 800891e:	3320      	adds	r3, #32
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	78fb      	ldrb	r3, [r7, #3]
 8008924:	4619      	mov	r1, r3
 8008926:	f7fe fc32 	bl	800718e <USBD_LL_DataInStage>
}
 800892a:	bf00      	nop
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b082      	sub	sp, #8
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008940:	4618      	mov	r0, r3
 8008942:	f7fe fd6c 	bl	800741e <USBD_LL_SOF>
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008956:	2301      	movs	r3, #1
 8008958:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	79db      	ldrb	r3, [r3, #7]
 800895e:	2b02      	cmp	r3, #2
 8008960:	d001      	beq.n	8008966 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008962:	f7f8 f9a3 	bl	8000cac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800896c:	7bfa      	ldrb	r2, [r7, #15]
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe fd10 	bl	8007396 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fcb8 	bl	80072f2 <USBD_LL_Reset>
}
 8008982:	bf00      	nop
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
	...

0800898c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fd0b 	bl	80073b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6812      	ldr	r2, [r2, #0]
 80089ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089b2:	f043 0301 	orr.w	r3, r3, #1
 80089b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	7adb      	ldrb	r3, [r3, #11]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d005      	beq.n	80089cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089c0:	4b04      	ldr	r3, [pc, #16]	@ (80089d4 <HAL_PCD_SuspendCallback+0x48>)
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	4a03      	ldr	r2, [pc, #12]	@ (80089d4 <HAL_PCD_SuspendCallback+0x48>)
 80089c6:	f043 0306 	orr.w	r3, r3, #6
 80089ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	e000ed00 	.word	0xe000ed00

080089d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fd01 	bl	80073ee <USBD_LL_Resume>
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fd59 	bl	80074c2 <USBD_LL_IsoOUTIncomplete>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fd15 	bl	800745e <USBD_LL_IsoINIncomplete>
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fd6b 	bl	8007526 <USBD_LL_DevConnected>
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe fd68 	bl	800753c <USBD_LL_DevDisconnected>
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d13c      	bne.n	8008afe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a84:	4a20      	ldr	r2, [pc, #128]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008a90:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a94:	4b1c      	ldr	r3, [pc, #112]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008a96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008a9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008a9e:	2204      	movs	r2, #4
 8008aa0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008aa2:	4b19      	ldr	r3, [pc, #100]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008aa8:	4b17      	ldr	r3, [pc, #92]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008aae:	4b16      	ldr	r3, [pc, #88]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ab4:	4b14      	ldr	r3, [pc, #80]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008aba:	4b13      	ldr	r3, [pc, #76]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ac0:	4b11      	ldr	r3, [pc, #68]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ac6:	4b10      	ldr	r3, [pc, #64]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008acc:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ad2:	480d      	ldr	r0, [pc, #52]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ad4:	f7f9 fbb2 	bl	800223c <HAL_PCD_Init>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ade:	f7f8 f8e5 	bl	8000cac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ae2:	2180      	movs	r1, #128	@ 0x80
 8008ae4:	4808      	ldr	r0, [pc, #32]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ae6:	f7fa fddc 	bl	80036a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008aea:	2240      	movs	r2, #64	@ 0x40
 8008aec:	2100      	movs	r1, #0
 8008aee:	4806      	ldr	r0, [pc, #24]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008af0:	f7fa fd90 	bl	8003614 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008af4:	2280      	movs	r2, #128	@ 0x80
 8008af6:	2101      	movs	r1, #1
 8008af8:	4803      	ldr	r0, [pc, #12]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008afa:	f7fa fd8b 	bl	8003614 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20001384 	.word	0x20001384

08008b0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f9 fc99 	bl	800245a <HAL_PCD_Start>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f942 	bl	8008db8 <USBD_Get_USB_Status>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4603      	mov	r3, r0
 8008b52:	70fb      	strb	r3, [r7, #3]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70bb      	strb	r3, [r7, #2]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b6a:	78bb      	ldrb	r3, [r7, #2]
 8008b6c:	883a      	ldrh	r2, [r7, #0]
 8008b6e:	78f9      	ldrb	r1, [r7, #3]
 8008b70:	f7fa f96d 	bl	8002e4e <HAL_PCD_EP_Open>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f91c 	bl	8008db8 <USBD_Get_USB_Status>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fa f9b6 	bl	8002f1e <HAL_PCD_EP_Close>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f8fd 	bl	8008db8 <USBD_Get_USB_Status>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008be6:	78fa      	ldrb	r2, [r7, #3]
 8008be8:	4611      	mov	r1, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fa fa6e 	bl	80030cc <HAL_PCD_EP_SetStall>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 f8de 	bl	8008db8 <USBD_Get_USB_Status>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	460b      	mov	r3, r1
 8008c14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c24:	78fa      	ldrb	r2, [r7, #3]
 8008c26:	4611      	mov	r1, r2
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fa fab2 	bl	8003192 <HAL_PCD_EP_ClrStall>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 f8bf 	bl	8008db8 <USBD_Get_USB_Status>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da0b      	bge.n	8008c7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c6a:	68f9      	ldr	r1, [r7, #12]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	440b      	add	r3, r1
 8008c76:	3316      	adds	r3, #22
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	e00b      	b.n	8008c94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c82:	68f9      	ldr	r1, [r7, #12]
 8008c84:	4613      	mov	r3, r2
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008c92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fa f8a1 	bl	8002e06 <HAL_PCD_SetAddress>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 f874 	bl	8008db8 <USBD_Get_USB_Status>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b086      	sub	sp, #24
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	603b      	str	r3, [r7, #0]
 8008cea:	460b      	mov	r3, r1
 8008cec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cfc:	7af9      	ldrb	r1, [r7, #11]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	f7fa f9a9 	bl	8003058 <HAL_PCD_EP_Transmit>
 8008d06:	4603      	mov	r3, r0
 8008d08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 f853 	bl	8008db8 <USBD_Get_USB_Status>
 8008d12:	4603      	mov	r3, r0
 8008d14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d16:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	607a      	str	r2, [r7, #4]
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d3e:	7af9      	ldrb	r1, [r7, #11]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	f7fa f935 	bl	8002fb2 <HAL_PCD_EP_Receive>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 f832 	bl	8008db8 <USBD_Get_USB_Status>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d58:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d74:	78fa      	ldrb	r2, [r7, #3]
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fa f955 	bl	8003028 <HAL_PCD_EP_GetRxCount>
 8008d7e:	4603      	mov	r3, r0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d90:	4b03      	ldr	r3, [pc, #12]	@ (8008da0 <USBD_static_malloc+0x18>)
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	20001868 	.word	0x20001868

08008da4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]

}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d817      	bhi.n	8008dfc <USBD_Get_USB_Status+0x44>
 8008dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <USBD_Get_USB_Status+0x1c>)
 8008dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd2:	bf00      	nop
 8008dd4:	08008de5 	.word	0x08008de5
 8008dd8:	08008deb 	.word	0x08008deb
 8008ddc:	08008df1 	.word	0x08008df1
 8008de0:	08008df7 	.word	0x08008df7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
    break;
 8008de8:	e00b      	b.n	8008e02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dea:	2303      	movs	r3, #3
 8008dec:	73fb      	strb	r3, [r7, #15]
    break;
 8008dee:	e008      	b.n	8008e02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008df0:	2301      	movs	r3, #1
 8008df2:	73fb      	strb	r3, [r7, #15]
    break;
 8008df4:	e005      	b.n	8008e02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008df6:	2303      	movs	r3, #3
 8008df8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dfa:	e002      	b.n	8008e02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8008e00:	bf00      	nop
  }
  return usb_status;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <sniprintf>:
 8008e10:	b40c      	push	{r2, r3}
 8008e12:	b530      	push	{r4, r5, lr}
 8008e14:	4b17      	ldr	r3, [pc, #92]	@ (8008e74 <sniprintf+0x64>)
 8008e16:	1e0c      	subs	r4, r1, #0
 8008e18:	681d      	ldr	r5, [r3, #0]
 8008e1a:	b09d      	sub	sp, #116	@ 0x74
 8008e1c:	da08      	bge.n	8008e30 <sniprintf+0x20>
 8008e1e:	238b      	movs	r3, #139	@ 0x8b
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	f04f 30ff 	mov.w	r0, #4294967295
 8008e26:	b01d      	add	sp, #116	@ 0x74
 8008e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e2c:	b002      	add	sp, #8
 8008e2e:	4770      	bx	lr
 8008e30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008e34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e38:	bf14      	ite	ne
 8008e3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e3e:	4623      	moveq	r3, r4
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	9307      	str	r3, [sp, #28]
 8008e44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008e48:	9002      	str	r0, [sp, #8]
 8008e4a:	9006      	str	r0, [sp, #24]
 8008e4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e52:	ab21      	add	r3, sp, #132	@ 0x84
 8008e54:	a902      	add	r1, sp, #8
 8008e56:	4628      	mov	r0, r5
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	f000 f9b5 	bl	80091c8 <_svfiprintf_r>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	bfbc      	itt	lt
 8008e62:	238b      	movlt	r3, #139	@ 0x8b
 8008e64:	602b      	strlt	r3, [r5, #0]
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	d0dd      	beq.n	8008e26 <sniprintf+0x16>
 8008e6a:	9b02      	ldr	r3, [sp, #8]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	701a      	strb	r2, [r3, #0]
 8008e70:	e7d9      	b.n	8008e26 <sniprintf+0x16>
 8008e72:	bf00      	nop
 8008e74:	20000380 	.word	0x20000380

08008e78 <memset>:
 8008e78:	4402      	add	r2, r0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d100      	bne.n	8008e82 <memset+0xa>
 8008e80:	4770      	bx	lr
 8008e82:	f803 1b01 	strb.w	r1, [r3], #1
 8008e86:	e7f9      	b.n	8008e7c <memset+0x4>

08008e88 <strncmp>:
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	b16a      	cbz	r2, 8008ea8 <strncmp+0x20>
 8008e8c:	3901      	subs	r1, #1
 8008e8e:	1884      	adds	r4, r0, r2
 8008e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d103      	bne.n	8008ea4 <strncmp+0x1c>
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d001      	beq.n	8008ea4 <strncmp+0x1c>
 8008ea0:	2a00      	cmp	r2, #0
 8008ea2:	d1f5      	bne.n	8008e90 <strncmp+0x8>
 8008ea4:	1ad0      	subs	r0, r2, r3
 8008ea6:	bd10      	pop	{r4, pc}
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	e7fc      	b.n	8008ea6 <strncmp+0x1e>

08008eac <__errno>:
 8008eac:	4b01      	ldr	r3, [pc, #4]	@ (8008eb4 <__errno+0x8>)
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	20000380 	.word	0x20000380

08008eb8 <__libc_init_array>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	4d0d      	ldr	r5, [pc, #52]	@ (8008ef0 <__libc_init_array+0x38>)
 8008ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8008ef4 <__libc_init_array+0x3c>)
 8008ebe:	1b64      	subs	r4, r4, r5
 8008ec0:	10a4      	asrs	r4, r4, #2
 8008ec2:	2600      	movs	r6, #0
 8008ec4:	42a6      	cmp	r6, r4
 8008ec6:	d109      	bne.n	8008edc <__libc_init_array+0x24>
 8008ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8008ef8 <__libc_init_array+0x40>)
 8008eca:	4c0c      	ldr	r4, [pc, #48]	@ (8008efc <__libc_init_array+0x44>)
 8008ecc:	f000 fc66 	bl	800979c <_init>
 8008ed0:	1b64      	subs	r4, r4, r5
 8008ed2:	10a4      	asrs	r4, r4, #2
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	42a6      	cmp	r6, r4
 8008ed8:	d105      	bne.n	8008ee6 <__libc_init_array+0x2e>
 8008eda:	bd70      	pop	{r4, r5, r6, pc}
 8008edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee0:	4798      	blx	r3
 8008ee2:	3601      	adds	r6, #1
 8008ee4:	e7ee      	b.n	8008ec4 <__libc_init_array+0xc>
 8008ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eea:	4798      	blx	r3
 8008eec:	3601      	adds	r6, #1
 8008eee:	e7f2      	b.n	8008ed6 <__libc_init_array+0x1e>
 8008ef0:	08009918 	.word	0x08009918
 8008ef4:	08009918 	.word	0x08009918
 8008ef8:	08009918 	.word	0x08009918
 8008efc:	0800991c 	.word	0x0800991c

08008f00 <__retarget_lock_acquire_recursive>:
 8008f00:	4770      	bx	lr

08008f02 <__retarget_lock_release_recursive>:
 8008f02:	4770      	bx	lr

08008f04 <memcpy>:
 8008f04:	440a      	add	r2, r1
 8008f06:	4291      	cmp	r1, r2
 8008f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f0c:	d100      	bne.n	8008f10 <memcpy+0xc>
 8008f0e:	4770      	bx	lr
 8008f10:	b510      	push	{r4, lr}
 8008f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f1a:	4291      	cmp	r1, r2
 8008f1c:	d1f9      	bne.n	8008f12 <memcpy+0xe>
 8008f1e:	bd10      	pop	{r4, pc}

08008f20 <_free_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4605      	mov	r5, r0
 8008f24:	2900      	cmp	r1, #0
 8008f26:	d041      	beq.n	8008fac <_free_r+0x8c>
 8008f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f2c:	1f0c      	subs	r4, r1, #4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	bfb8      	it	lt
 8008f32:	18e4      	addlt	r4, r4, r3
 8008f34:	f000 f8e0 	bl	80090f8 <__malloc_lock>
 8008f38:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb0 <_free_r+0x90>)
 8008f3a:	6813      	ldr	r3, [r2, #0]
 8008f3c:	b933      	cbnz	r3, 8008f4c <_free_r+0x2c>
 8008f3e:	6063      	str	r3, [r4, #4]
 8008f40:	6014      	str	r4, [r2, #0]
 8008f42:	4628      	mov	r0, r5
 8008f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f48:	f000 b8dc 	b.w	8009104 <__malloc_unlock>
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	d908      	bls.n	8008f62 <_free_r+0x42>
 8008f50:	6820      	ldr	r0, [r4, #0]
 8008f52:	1821      	adds	r1, r4, r0
 8008f54:	428b      	cmp	r3, r1
 8008f56:	bf01      	itttt	eq
 8008f58:	6819      	ldreq	r1, [r3, #0]
 8008f5a:	685b      	ldreq	r3, [r3, #4]
 8008f5c:	1809      	addeq	r1, r1, r0
 8008f5e:	6021      	streq	r1, [r4, #0]
 8008f60:	e7ed      	b.n	8008f3e <_free_r+0x1e>
 8008f62:	461a      	mov	r2, r3
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	b10b      	cbz	r3, 8008f6c <_free_r+0x4c>
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	d9fa      	bls.n	8008f62 <_free_r+0x42>
 8008f6c:	6811      	ldr	r1, [r2, #0]
 8008f6e:	1850      	adds	r0, r2, r1
 8008f70:	42a0      	cmp	r0, r4
 8008f72:	d10b      	bne.n	8008f8c <_free_r+0x6c>
 8008f74:	6820      	ldr	r0, [r4, #0]
 8008f76:	4401      	add	r1, r0
 8008f78:	1850      	adds	r0, r2, r1
 8008f7a:	4283      	cmp	r3, r0
 8008f7c:	6011      	str	r1, [r2, #0]
 8008f7e:	d1e0      	bne.n	8008f42 <_free_r+0x22>
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	6053      	str	r3, [r2, #4]
 8008f86:	4408      	add	r0, r1
 8008f88:	6010      	str	r0, [r2, #0]
 8008f8a:	e7da      	b.n	8008f42 <_free_r+0x22>
 8008f8c:	d902      	bls.n	8008f94 <_free_r+0x74>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	e7d6      	b.n	8008f42 <_free_r+0x22>
 8008f94:	6820      	ldr	r0, [r4, #0]
 8008f96:	1821      	adds	r1, r4, r0
 8008f98:	428b      	cmp	r3, r1
 8008f9a:	bf04      	itt	eq
 8008f9c:	6819      	ldreq	r1, [r3, #0]
 8008f9e:	685b      	ldreq	r3, [r3, #4]
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	bf04      	itt	eq
 8008fa4:	1809      	addeq	r1, r1, r0
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	6054      	str	r4, [r2, #4]
 8008faa:	e7ca      	b.n	8008f42 <_free_r+0x22>
 8008fac:	bd38      	pop	{r3, r4, r5, pc}
 8008fae:	bf00      	nop
 8008fb0:	20001bcc 	.word	0x20001bcc

08008fb4 <sbrk_aligned>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8008ff4 <sbrk_aligned+0x40>)
 8008fb8:	460c      	mov	r4, r1
 8008fba:	6831      	ldr	r1, [r6, #0]
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	b911      	cbnz	r1, 8008fc6 <sbrk_aligned+0x12>
 8008fc0:	f000 fba6 	bl	8009710 <_sbrk_r>
 8008fc4:	6030      	str	r0, [r6, #0]
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f000 fba1 	bl	8009710 <_sbrk_r>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d103      	bne.n	8008fda <sbrk_aligned+0x26>
 8008fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	bd70      	pop	{r4, r5, r6, pc}
 8008fda:	1cc4      	adds	r4, r0, #3
 8008fdc:	f024 0403 	bic.w	r4, r4, #3
 8008fe0:	42a0      	cmp	r0, r4
 8008fe2:	d0f8      	beq.n	8008fd6 <sbrk_aligned+0x22>
 8008fe4:	1a21      	subs	r1, r4, r0
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 fb92 	bl	8009710 <_sbrk_r>
 8008fec:	3001      	adds	r0, #1
 8008fee:	d1f2      	bne.n	8008fd6 <sbrk_aligned+0x22>
 8008ff0:	e7ef      	b.n	8008fd2 <sbrk_aligned+0x1e>
 8008ff2:	bf00      	nop
 8008ff4:	20001bc8 	.word	0x20001bc8

08008ff8 <_malloc_r>:
 8008ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ffc:	1ccd      	adds	r5, r1, #3
 8008ffe:	f025 0503 	bic.w	r5, r5, #3
 8009002:	3508      	adds	r5, #8
 8009004:	2d0c      	cmp	r5, #12
 8009006:	bf38      	it	cc
 8009008:	250c      	movcc	r5, #12
 800900a:	2d00      	cmp	r5, #0
 800900c:	4606      	mov	r6, r0
 800900e:	db01      	blt.n	8009014 <_malloc_r+0x1c>
 8009010:	42a9      	cmp	r1, r5
 8009012:	d904      	bls.n	800901e <_malloc_r+0x26>
 8009014:	230c      	movs	r3, #12
 8009016:	6033      	str	r3, [r6, #0]
 8009018:	2000      	movs	r0, #0
 800901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090f4 <_malloc_r+0xfc>
 8009022:	f000 f869 	bl	80090f8 <__malloc_lock>
 8009026:	f8d8 3000 	ldr.w	r3, [r8]
 800902a:	461c      	mov	r4, r3
 800902c:	bb44      	cbnz	r4, 8009080 <_malloc_r+0x88>
 800902e:	4629      	mov	r1, r5
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff ffbf 	bl	8008fb4 <sbrk_aligned>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	4604      	mov	r4, r0
 800903a:	d158      	bne.n	80090ee <_malloc_r+0xf6>
 800903c:	f8d8 4000 	ldr.w	r4, [r8]
 8009040:	4627      	mov	r7, r4
 8009042:	2f00      	cmp	r7, #0
 8009044:	d143      	bne.n	80090ce <_malloc_r+0xd6>
 8009046:	2c00      	cmp	r4, #0
 8009048:	d04b      	beq.n	80090e2 <_malloc_r+0xea>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	4639      	mov	r1, r7
 800904e:	4630      	mov	r0, r6
 8009050:	eb04 0903 	add.w	r9, r4, r3
 8009054:	f000 fb5c 	bl	8009710 <_sbrk_r>
 8009058:	4581      	cmp	r9, r0
 800905a:	d142      	bne.n	80090e2 <_malloc_r+0xea>
 800905c:	6821      	ldr	r1, [r4, #0]
 800905e:	1a6d      	subs	r5, r5, r1
 8009060:	4629      	mov	r1, r5
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ffa6 	bl	8008fb4 <sbrk_aligned>
 8009068:	3001      	adds	r0, #1
 800906a:	d03a      	beq.n	80090e2 <_malloc_r+0xea>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	442b      	add	r3, r5
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	f8d8 3000 	ldr.w	r3, [r8]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	bb62      	cbnz	r2, 80090d4 <_malloc_r+0xdc>
 800907a:	f8c8 7000 	str.w	r7, [r8]
 800907e:	e00f      	b.n	80090a0 <_malloc_r+0xa8>
 8009080:	6822      	ldr	r2, [r4, #0]
 8009082:	1b52      	subs	r2, r2, r5
 8009084:	d420      	bmi.n	80090c8 <_malloc_r+0xd0>
 8009086:	2a0b      	cmp	r2, #11
 8009088:	d917      	bls.n	80090ba <_malloc_r+0xc2>
 800908a:	1961      	adds	r1, r4, r5
 800908c:	42a3      	cmp	r3, r4
 800908e:	6025      	str	r5, [r4, #0]
 8009090:	bf18      	it	ne
 8009092:	6059      	strne	r1, [r3, #4]
 8009094:	6863      	ldr	r3, [r4, #4]
 8009096:	bf08      	it	eq
 8009098:	f8c8 1000 	streq.w	r1, [r8]
 800909c:	5162      	str	r2, [r4, r5]
 800909e:	604b      	str	r3, [r1, #4]
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 f82f 	bl	8009104 <__malloc_unlock>
 80090a6:	f104 000b 	add.w	r0, r4, #11
 80090aa:	1d23      	adds	r3, r4, #4
 80090ac:	f020 0007 	bic.w	r0, r0, #7
 80090b0:	1ac2      	subs	r2, r0, r3
 80090b2:	bf1c      	itt	ne
 80090b4:	1a1b      	subne	r3, r3, r0
 80090b6:	50a3      	strne	r3, [r4, r2]
 80090b8:	e7af      	b.n	800901a <_malloc_r+0x22>
 80090ba:	6862      	ldr	r2, [r4, #4]
 80090bc:	42a3      	cmp	r3, r4
 80090be:	bf0c      	ite	eq
 80090c0:	f8c8 2000 	streq.w	r2, [r8]
 80090c4:	605a      	strne	r2, [r3, #4]
 80090c6:	e7eb      	b.n	80090a0 <_malloc_r+0xa8>
 80090c8:	4623      	mov	r3, r4
 80090ca:	6864      	ldr	r4, [r4, #4]
 80090cc:	e7ae      	b.n	800902c <_malloc_r+0x34>
 80090ce:	463c      	mov	r4, r7
 80090d0:	687f      	ldr	r7, [r7, #4]
 80090d2:	e7b6      	b.n	8009042 <_malloc_r+0x4a>
 80090d4:	461a      	mov	r2, r3
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	42a3      	cmp	r3, r4
 80090da:	d1fb      	bne.n	80090d4 <_malloc_r+0xdc>
 80090dc:	2300      	movs	r3, #0
 80090de:	6053      	str	r3, [r2, #4]
 80090e0:	e7de      	b.n	80090a0 <_malloc_r+0xa8>
 80090e2:	230c      	movs	r3, #12
 80090e4:	6033      	str	r3, [r6, #0]
 80090e6:	4630      	mov	r0, r6
 80090e8:	f000 f80c 	bl	8009104 <__malloc_unlock>
 80090ec:	e794      	b.n	8009018 <_malloc_r+0x20>
 80090ee:	6005      	str	r5, [r0, #0]
 80090f0:	e7d6      	b.n	80090a0 <_malloc_r+0xa8>
 80090f2:	bf00      	nop
 80090f4:	20001bcc 	.word	0x20001bcc

080090f8 <__malloc_lock>:
 80090f8:	4801      	ldr	r0, [pc, #4]	@ (8009100 <__malloc_lock+0x8>)
 80090fa:	f7ff bf01 	b.w	8008f00 <__retarget_lock_acquire_recursive>
 80090fe:	bf00      	nop
 8009100:	20001bc4 	.word	0x20001bc4

08009104 <__malloc_unlock>:
 8009104:	4801      	ldr	r0, [pc, #4]	@ (800910c <__malloc_unlock+0x8>)
 8009106:	f7ff befc 	b.w	8008f02 <__retarget_lock_release_recursive>
 800910a:	bf00      	nop
 800910c:	20001bc4 	.word	0x20001bc4

08009110 <__ssputs_r>:
 8009110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	688e      	ldr	r6, [r1, #8]
 8009116:	461f      	mov	r7, r3
 8009118:	42be      	cmp	r6, r7
 800911a:	680b      	ldr	r3, [r1, #0]
 800911c:	4682      	mov	sl, r0
 800911e:	460c      	mov	r4, r1
 8009120:	4690      	mov	r8, r2
 8009122:	d82d      	bhi.n	8009180 <__ssputs_r+0x70>
 8009124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009128:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800912c:	d026      	beq.n	800917c <__ssputs_r+0x6c>
 800912e:	6965      	ldr	r5, [r4, #20]
 8009130:	6909      	ldr	r1, [r1, #16]
 8009132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009136:	eba3 0901 	sub.w	r9, r3, r1
 800913a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800913e:	1c7b      	adds	r3, r7, #1
 8009140:	444b      	add	r3, r9
 8009142:	106d      	asrs	r5, r5, #1
 8009144:	429d      	cmp	r5, r3
 8009146:	bf38      	it	cc
 8009148:	461d      	movcc	r5, r3
 800914a:	0553      	lsls	r3, r2, #21
 800914c:	d527      	bpl.n	800919e <__ssputs_r+0x8e>
 800914e:	4629      	mov	r1, r5
 8009150:	f7ff ff52 	bl	8008ff8 <_malloc_r>
 8009154:	4606      	mov	r6, r0
 8009156:	b360      	cbz	r0, 80091b2 <__ssputs_r+0xa2>
 8009158:	6921      	ldr	r1, [r4, #16]
 800915a:	464a      	mov	r2, r9
 800915c:	f7ff fed2 	bl	8008f04 <memcpy>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	6126      	str	r6, [r4, #16]
 800916e:	6165      	str	r5, [r4, #20]
 8009170:	444e      	add	r6, r9
 8009172:	eba5 0509 	sub.w	r5, r5, r9
 8009176:	6026      	str	r6, [r4, #0]
 8009178:	60a5      	str	r5, [r4, #8]
 800917a:	463e      	mov	r6, r7
 800917c:	42be      	cmp	r6, r7
 800917e:	d900      	bls.n	8009182 <__ssputs_r+0x72>
 8009180:	463e      	mov	r6, r7
 8009182:	6820      	ldr	r0, [r4, #0]
 8009184:	4632      	mov	r2, r6
 8009186:	4641      	mov	r1, r8
 8009188:	f000 faa8 	bl	80096dc <memmove>
 800918c:	68a3      	ldr	r3, [r4, #8]
 800918e:	1b9b      	subs	r3, r3, r6
 8009190:	60a3      	str	r3, [r4, #8]
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	4433      	add	r3, r6
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	2000      	movs	r0, #0
 800919a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919e:	462a      	mov	r2, r5
 80091a0:	f000 fac6 	bl	8009730 <_realloc_r>
 80091a4:	4606      	mov	r6, r0
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d1e0      	bne.n	800916c <__ssputs_r+0x5c>
 80091aa:	6921      	ldr	r1, [r4, #16]
 80091ac:	4650      	mov	r0, sl
 80091ae:	f7ff feb7 	bl	8008f20 <_free_r>
 80091b2:	230c      	movs	r3, #12
 80091b4:	f8ca 3000 	str.w	r3, [sl]
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091be:	81a3      	strh	r3, [r4, #12]
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	e7e9      	b.n	800919a <__ssputs_r+0x8a>
	...

080091c8 <_svfiprintf_r>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	4698      	mov	r8, r3
 80091ce:	898b      	ldrh	r3, [r1, #12]
 80091d0:	061b      	lsls	r3, r3, #24
 80091d2:	b09d      	sub	sp, #116	@ 0x74
 80091d4:	4607      	mov	r7, r0
 80091d6:	460d      	mov	r5, r1
 80091d8:	4614      	mov	r4, r2
 80091da:	d510      	bpl.n	80091fe <_svfiprintf_r+0x36>
 80091dc:	690b      	ldr	r3, [r1, #16]
 80091de:	b973      	cbnz	r3, 80091fe <_svfiprintf_r+0x36>
 80091e0:	2140      	movs	r1, #64	@ 0x40
 80091e2:	f7ff ff09 	bl	8008ff8 <_malloc_r>
 80091e6:	6028      	str	r0, [r5, #0]
 80091e8:	6128      	str	r0, [r5, #16]
 80091ea:	b930      	cbnz	r0, 80091fa <_svfiprintf_r+0x32>
 80091ec:	230c      	movs	r3, #12
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	f04f 30ff 	mov.w	r0, #4294967295
 80091f4:	b01d      	add	sp, #116	@ 0x74
 80091f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fa:	2340      	movs	r3, #64	@ 0x40
 80091fc:	616b      	str	r3, [r5, #20]
 80091fe:	2300      	movs	r3, #0
 8009200:	9309      	str	r3, [sp, #36]	@ 0x24
 8009202:	2320      	movs	r3, #32
 8009204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009208:	f8cd 800c 	str.w	r8, [sp, #12]
 800920c:	2330      	movs	r3, #48	@ 0x30
 800920e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093ac <_svfiprintf_r+0x1e4>
 8009212:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009216:	f04f 0901 	mov.w	r9, #1
 800921a:	4623      	mov	r3, r4
 800921c:	469a      	mov	sl, r3
 800921e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009222:	b10a      	cbz	r2, 8009228 <_svfiprintf_r+0x60>
 8009224:	2a25      	cmp	r2, #37	@ 0x25
 8009226:	d1f9      	bne.n	800921c <_svfiprintf_r+0x54>
 8009228:	ebba 0b04 	subs.w	fp, sl, r4
 800922c:	d00b      	beq.n	8009246 <_svfiprintf_r+0x7e>
 800922e:	465b      	mov	r3, fp
 8009230:	4622      	mov	r2, r4
 8009232:	4629      	mov	r1, r5
 8009234:	4638      	mov	r0, r7
 8009236:	f7ff ff6b 	bl	8009110 <__ssputs_r>
 800923a:	3001      	adds	r0, #1
 800923c:	f000 80a7 	beq.w	800938e <_svfiprintf_r+0x1c6>
 8009240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009242:	445a      	add	r2, fp
 8009244:	9209      	str	r2, [sp, #36]	@ 0x24
 8009246:	f89a 3000 	ldrb.w	r3, [sl]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 809f 	beq.w	800938e <_svfiprintf_r+0x1c6>
 8009250:	2300      	movs	r3, #0
 8009252:	f04f 32ff 	mov.w	r2, #4294967295
 8009256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800925a:	f10a 0a01 	add.w	sl, sl, #1
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	9307      	str	r3, [sp, #28]
 8009262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009266:	931a      	str	r3, [sp, #104]	@ 0x68
 8009268:	4654      	mov	r4, sl
 800926a:	2205      	movs	r2, #5
 800926c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009270:	484e      	ldr	r0, [pc, #312]	@ (80093ac <_svfiprintf_r+0x1e4>)
 8009272:	f7f6 ffb5 	bl	80001e0 <memchr>
 8009276:	9a04      	ldr	r2, [sp, #16]
 8009278:	b9d8      	cbnz	r0, 80092b2 <_svfiprintf_r+0xea>
 800927a:	06d0      	lsls	r0, r2, #27
 800927c:	bf44      	itt	mi
 800927e:	2320      	movmi	r3, #32
 8009280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009284:	0711      	lsls	r1, r2, #28
 8009286:	bf44      	itt	mi
 8009288:	232b      	movmi	r3, #43	@ 0x2b
 800928a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800928e:	f89a 3000 	ldrb.w	r3, [sl]
 8009292:	2b2a      	cmp	r3, #42	@ 0x2a
 8009294:	d015      	beq.n	80092c2 <_svfiprintf_r+0xfa>
 8009296:	9a07      	ldr	r2, [sp, #28]
 8009298:	4654      	mov	r4, sl
 800929a:	2000      	movs	r0, #0
 800929c:	f04f 0c0a 	mov.w	ip, #10
 80092a0:	4621      	mov	r1, r4
 80092a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092a6:	3b30      	subs	r3, #48	@ 0x30
 80092a8:	2b09      	cmp	r3, #9
 80092aa:	d94b      	bls.n	8009344 <_svfiprintf_r+0x17c>
 80092ac:	b1b0      	cbz	r0, 80092dc <_svfiprintf_r+0x114>
 80092ae:	9207      	str	r2, [sp, #28]
 80092b0:	e014      	b.n	80092dc <_svfiprintf_r+0x114>
 80092b2:	eba0 0308 	sub.w	r3, r0, r8
 80092b6:	fa09 f303 	lsl.w	r3, r9, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	46a2      	mov	sl, r4
 80092c0:	e7d2      	b.n	8009268 <_svfiprintf_r+0xa0>
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	1d19      	adds	r1, r3, #4
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	9103      	str	r1, [sp, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfbb      	ittet	lt
 80092ce:	425b      	neglt	r3, r3
 80092d0:	f042 0202 	orrlt.w	r2, r2, #2
 80092d4:	9307      	strge	r3, [sp, #28]
 80092d6:	9307      	strlt	r3, [sp, #28]
 80092d8:	bfb8      	it	lt
 80092da:	9204      	strlt	r2, [sp, #16]
 80092dc:	7823      	ldrb	r3, [r4, #0]
 80092de:	2b2e      	cmp	r3, #46	@ 0x2e
 80092e0:	d10a      	bne.n	80092f8 <_svfiprintf_r+0x130>
 80092e2:	7863      	ldrb	r3, [r4, #1]
 80092e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092e6:	d132      	bne.n	800934e <_svfiprintf_r+0x186>
 80092e8:	9b03      	ldr	r3, [sp, #12]
 80092ea:	1d1a      	adds	r2, r3, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	9203      	str	r2, [sp, #12]
 80092f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092f4:	3402      	adds	r4, #2
 80092f6:	9305      	str	r3, [sp, #20]
 80092f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093bc <_svfiprintf_r+0x1f4>
 80092fc:	7821      	ldrb	r1, [r4, #0]
 80092fe:	2203      	movs	r2, #3
 8009300:	4650      	mov	r0, sl
 8009302:	f7f6 ff6d 	bl	80001e0 <memchr>
 8009306:	b138      	cbz	r0, 8009318 <_svfiprintf_r+0x150>
 8009308:	9b04      	ldr	r3, [sp, #16]
 800930a:	eba0 000a 	sub.w	r0, r0, sl
 800930e:	2240      	movs	r2, #64	@ 0x40
 8009310:	4082      	lsls	r2, r0
 8009312:	4313      	orrs	r3, r2
 8009314:	3401      	adds	r4, #1
 8009316:	9304      	str	r3, [sp, #16]
 8009318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800931c:	4824      	ldr	r0, [pc, #144]	@ (80093b0 <_svfiprintf_r+0x1e8>)
 800931e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009322:	2206      	movs	r2, #6
 8009324:	f7f6 ff5c 	bl	80001e0 <memchr>
 8009328:	2800      	cmp	r0, #0
 800932a:	d036      	beq.n	800939a <_svfiprintf_r+0x1d2>
 800932c:	4b21      	ldr	r3, [pc, #132]	@ (80093b4 <_svfiprintf_r+0x1ec>)
 800932e:	bb1b      	cbnz	r3, 8009378 <_svfiprintf_r+0x1b0>
 8009330:	9b03      	ldr	r3, [sp, #12]
 8009332:	3307      	adds	r3, #7
 8009334:	f023 0307 	bic.w	r3, r3, #7
 8009338:	3308      	adds	r3, #8
 800933a:	9303      	str	r3, [sp, #12]
 800933c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800933e:	4433      	add	r3, r6
 8009340:	9309      	str	r3, [sp, #36]	@ 0x24
 8009342:	e76a      	b.n	800921a <_svfiprintf_r+0x52>
 8009344:	fb0c 3202 	mla	r2, ip, r2, r3
 8009348:	460c      	mov	r4, r1
 800934a:	2001      	movs	r0, #1
 800934c:	e7a8      	b.n	80092a0 <_svfiprintf_r+0xd8>
 800934e:	2300      	movs	r3, #0
 8009350:	3401      	adds	r4, #1
 8009352:	9305      	str	r3, [sp, #20]
 8009354:	4619      	mov	r1, r3
 8009356:	f04f 0c0a 	mov.w	ip, #10
 800935a:	4620      	mov	r0, r4
 800935c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009360:	3a30      	subs	r2, #48	@ 0x30
 8009362:	2a09      	cmp	r2, #9
 8009364:	d903      	bls.n	800936e <_svfiprintf_r+0x1a6>
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0c6      	beq.n	80092f8 <_svfiprintf_r+0x130>
 800936a:	9105      	str	r1, [sp, #20]
 800936c:	e7c4      	b.n	80092f8 <_svfiprintf_r+0x130>
 800936e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009372:	4604      	mov	r4, r0
 8009374:	2301      	movs	r3, #1
 8009376:	e7f0      	b.n	800935a <_svfiprintf_r+0x192>
 8009378:	ab03      	add	r3, sp, #12
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	462a      	mov	r2, r5
 800937e:	4b0e      	ldr	r3, [pc, #56]	@ (80093b8 <_svfiprintf_r+0x1f0>)
 8009380:	a904      	add	r1, sp, #16
 8009382:	4638      	mov	r0, r7
 8009384:	f3af 8000 	nop.w
 8009388:	1c42      	adds	r2, r0, #1
 800938a:	4606      	mov	r6, r0
 800938c:	d1d6      	bne.n	800933c <_svfiprintf_r+0x174>
 800938e:	89ab      	ldrh	r3, [r5, #12]
 8009390:	065b      	lsls	r3, r3, #25
 8009392:	f53f af2d 	bmi.w	80091f0 <_svfiprintf_r+0x28>
 8009396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009398:	e72c      	b.n	80091f4 <_svfiprintf_r+0x2c>
 800939a:	ab03      	add	r3, sp, #12
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	462a      	mov	r2, r5
 80093a0:	4b05      	ldr	r3, [pc, #20]	@ (80093b8 <_svfiprintf_r+0x1f0>)
 80093a2:	a904      	add	r1, sp, #16
 80093a4:	4638      	mov	r0, r7
 80093a6:	f000 f879 	bl	800949c <_printf_i>
 80093aa:	e7ed      	b.n	8009388 <_svfiprintf_r+0x1c0>
 80093ac:	080098dc 	.word	0x080098dc
 80093b0:	080098e6 	.word	0x080098e6
 80093b4:	00000000 	.word	0x00000000
 80093b8:	08009111 	.word	0x08009111
 80093bc:	080098e2 	.word	0x080098e2

080093c0 <_printf_common>:
 80093c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c4:	4616      	mov	r6, r2
 80093c6:	4698      	mov	r8, r3
 80093c8:	688a      	ldr	r2, [r1, #8]
 80093ca:	690b      	ldr	r3, [r1, #16]
 80093cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093d0:	4293      	cmp	r3, r2
 80093d2:	bfb8      	it	lt
 80093d4:	4613      	movlt	r3, r2
 80093d6:	6033      	str	r3, [r6, #0]
 80093d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093dc:	4607      	mov	r7, r0
 80093de:	460c      	mov	r4, r1
 80093e0:	b10a      	cbz	r2, 80093e6 <_printf_common+0x26>
 80093e2:	3301      	adds	r3, #1
 80093e4:	6033      	str	r3, [r6, #0]
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	0699      	lsls	r1, r3, #26
 80093ea:	bf42      	ittt	mi
 80093ec:	6833      	ldrmi	r3, [r6, #0]
 80093ee:	3302      	addmi	r3, #2
 80093f0:	6033      	strmi	r3, [r6, #0]
 80093f2:	6825      	ldr	r5, [r4, #0]
 80093f4:	f015 0506 	ands.w	r5, r5, #6
 80093f8:	d106      	bne.n	8009408 <_printf_common+0x48>
 80093fa:	f104 0a19 	add.w	sl, r4, #25
 80093fe:	68e3      	ldr	r3, [r4, #12]
 8009400:	6832      	ldr	r2, [r6, #0]
 8009402:	1a9b      	subs	r3, r3, r2
 8009404:	42ab      	cmp	r3, r5
 8009406:	dc26      	bgt.n	8009456 <_printf_common+0x96>
 8009408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800940c:	6822      	ldr	r2, [r4, #0]
 800940e:	3b00      	subs	r3, #0
 8009410:	bf18      	it	ne
 8009412:	2301      	movne	r3, #1
 8009414:	0692      	lsls	r2, r2, #26
 8009416:	d42b      	bmi.n	8009470 <_printf_common+0xb0>
 8009418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800941c:	4641      	mov	r1, r8
 800941e:	4638      	mov	r0, r7
 8009420:	47c8      	blx	r9
 8009422:	3001      	adds	r0, #1
 8009424:	d01e      	beq.n	8009464 <_printf_common+0xa4>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	6922      	ldr	r2, [r4, #16]
 800942a:	f003 0306 	and.w	r3, r3, #6
 800942e:	2b04      	cmp	r3, #4
 8009430:	bf02      	ittt	eq
 8009432:	68e5      	ldreq	r5, [r4, #12]
 8009434:	6833      	ldreq	r3, [r6, #0]
 8009436:	1aed      	subeq	r5, r5, r3
 8009438:	68a3      	ldr	r3, [r4, #8]
 800943a:	bf0c      	ite	eq
 800943c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009440:	2500      	movne	r5, #0
 8009442:	4293      	cmp	r3, r2
 8009444:	bfc4      	itt	gt
 8009446:	1a9b      	subgt	r3, r3, r2
 8009448:	18ed      	addgt	r5, r5, r3
 800944a:	2600      	movs	r6, #0
 800944c:	341a      	adds	r4, #26
 800944e:	42b5      	cmp	r5, r6
 8009450:	d11a      	bne.n	8009488 <_printf_common+0xc8>
 8009452:	2000      	movs	r0, #0
 8009454:	e008      	b.n	8009468 <_printf_common+0xa8>
 8009456:	2301      	movs	r3, #1
 8009458:	4652      	mov	r2, sl
 800945a:	4641      	mov	r1, r8
 800945c:	4638      	mov	r0, r7
 800945e:	47c8      	blx	r9
 8009460:	3001      	adds	r0, #1
 8009462:	d103      	bne.n	800946c <_printf_common+0xac>
 8009464:	f04f 30ff 	mov.w	r0, #4294967295
 8009468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800946c:	3501      	adds	r5, #1
 800946e:	e7c6      	b.n	80093fe <_printf_common+0x3e>
 8009470:	18e1      	adds	r1, r4, r3
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	2030      	movs	r0, #48	@ 0x30
 8009476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800947a:	4422      	add	r2, r4
 800947c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009484:	3302      	adds	r3, #2
 8009486:	e7c7      	b.n	8009418 <_printf_common+0x58>
 8009488:	2301      	movs	r3, #1
 800948a:	4622      	mov	r2, r4
 800948c:	4641      	mov	r1, r8
 800948e:	4638      	mov	r0, r7
 8009490:	47c8      	blx	r9
 8009492:	3001      	adds	r0, #1
 8009494:	d0e6      	beq.n	8009464 <_printf_common+0xa4>
 8009496:	3601      	adds	r6, #1
 8009498:	e7d9      	b.n	800944e <_printf_common+0x8e>
	...

0800949c <_printf_i>:
 800949c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094a0:	7e0f      	ldrb	r7, [r1, #24]
 80094a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094a4:	2f78      	cmp	r7, #120	@ 0x78
 80094a6:	4691      	mov	r9, r2
 80094a8:	4680      	mov	r8, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	469a      	mov	sl, r3
 80094ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094b2:	d807      	bhi.n	80094c4 <_printf_i+0x28>
 80094b4:	2f62      	cmp	r7, #98	@ 0x62
 80094b6:	d80a      	bhi.n	80094ce <_printf_i+0x32>
 80094b8:	2f00      	cmp	r7, #0
 80094ba:	f000 80d2 	beq.w	8009662 <_printf_i+0x1c6>
 80094be:	2f58      	cmp	r7, #88	@ 0x58
 80094c0:	f000 80b9 	beq.w	8009636 <_printf_i+0x19a>
 80094c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094cc:	e03a      	b.n	8009544 <_printf_i+0xa8>
 80094ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094d2:	2b15      	cmp	r3, #21
 80094d4:	d8f6      	bhi.n	80094c4 <_printf_i+0x28>
 80094d6:	a101      	add	r1, pc, #4	@ (adr r1, 80094dc <_printf_i+0x40>)
 80094d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094dc:	08009535 	.word	0x08009535
 80094e0:	08009549 	.word	0x08009549
 80094e4:	080094c5 	.word	0x080094c5
 80094e8:	080094c5 	.word	0x080094c5
 80094ec:	080094c5 	.word	0x080094c5
 80094f0:	080094c5 	.word	0x080094c5
 80094f4:	08009549 	.word	0x08009549
 80094f8:	080094c5 	.word	0x080094c5
 80094fc:	080094c5 	.word	0x080094c5
 8009500:	080094c5 	.word	0x080094c5
 8009504:	080094c5 	.word	0x080094c5
 8009508:	08009649 	.word	0x08009649
 800950c:	08009573 	.word	0x08009573
 8009510:	08009603 	.word	0x08009603
 8009514:	080094c5 	.word	0x080094c5
 8009518:	080094c5 	.word	0x080094c5
 800951c:	0800966b 	.word	0x0800966b
 8009520:	080094c5 	.word	0x080094c5
 8009524:	08009573 	.word	0x08009573
 8009528:	080094c5 	.word	0x080094c5
 800952c:	080094c5 	.word	0x080094c5
 8009530:	0800960b 	.word	0x0800960b
 8009534:	6833      	ldr	r3, [r6, #0]
 8009536:	1d1a      	adds	r2, r3, #4
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6032      	str	r2, [r6, #0]
 800953c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009544:	2301      	movs	r3, #1
 8009546:	e09d      	b.n	8009684 <_printf_i+0x1e8>
 8009548:	6833      	ldr	r3, [r6, #0]
 800954a:	6820      	ldr	r0, [r4, #0]
 800954c:	1d19      	adds	r1, r3, #4
 800954e:	6031      	str	r1, [r6, #0]
 8009550:	0606      	lsls	r6, r0, #24
 8009552:	d501      	bpl.n	8009558 <_printf_i+0xbc>
 8009554:	681d      	ldr	r5, [r3, #0]
 8009556:	e003      	b.n	8009560 <_printf_i+0xc4>
 8009558:	0645      	lsls	r5, r0, #25
 800955a:	d5fb      	bpl.n	8009554 <_printf_i+0xb8>
 800955c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009560:	2d00      	cmp	r5, #0
 8009562:	da03      	bge.n	800956c <_printf_i+0xd0>
 8009564:	232d      	movs	r3, #45	@ 0x2d
 8009566:	426d      	negs	r5, r5
 8009568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800956c:	4859      	ldr	r0, [pc, #356]	@ (80096d4 <_printf_i+0x238>)
 800956e:	230a      	movs	r3, #10
 8009570:	e011      	b.n	8009596 <_printf_i+0xfa>
 8009572:	6821      	ldr	r1, [r4, #0]
 8009574:	6833      	ldr	r3, [r6, #0]
 8009576:	0608      	lsls	r0, r1, #24
 8009578:	f853 5b04 	ldr.w	r5, [r3], #4
 800957c:	d402      	bmi.n	8009584 <_printf_i+0xe8>
 800957e:	0649      	lsls	r1, r1, #25
 8009580:	bf48      	it	mi
 8009582:	b2ad      	uxthmi	r5, r5
 8009584:	2f6f      	cmp	r7, #111	@ 0x6f
 8009586:	4853      	ldr	r0, [pc, #332]	@ (80096d4 <_printf_i+0x238>)
 8009588:	6033      	str	r3, [r6, #0]
 800958a:	bf14      	ite	ne
 800958c:	230a      	movne	r3, #10
 800958e:	2308      	moveq	r3, #8
 8009590:	2100      	movs	r1, #0
 8009592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009596:	6866      	ldr	r6, [r4, #4]
 8009598:	60a6      	str	r6, [r4, #8]
 800959a:	2e00      	cmp	r6, #0
 800959c:	bfa2      	ittt	ge
 800959e:	6821      	ldrge	r1, [r4, #0]
 80095a0:	f021 0104 	bicge.w	r1, r1, #4
 80095a4:	6021      	strge	r1, [r4, #0]
 80095a6:	b90d      	cbnz	r5, 80095ac <_printf_i+0x110>
 80095a8:	2e00      	cmp	r6, #0
 80095aa:	d04b      	beq.n	8009644 <_printf_i+0x1a8>
 80095ac:	4616      	mov	r6, r2
 80095ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80095b2:	fb03 5711 	mls	r7, r3, r1, r5
 80095b6:	5dc7      	ldrb	r7, [r0, r7]
 80095b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095bc:	462f      	mov	r7, r5
 80095be:	42bb      	cmp	r3, r7
 80095c0:	460d      	mov	r5, r1
 80095c2:	d9f4      	bls.n	80095ae <_printf_i+0x112>
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d10b      	bne.n	80095e0 <_printf_i+0x144>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	07df      	lsls	r7, r3, #31
 80095cc:	d508      	bpl.n	80095e0 <_printf_i+0x144>
 80095ce:	6923      	ldr	r3, [r4, #16]
 80095d0:	6861      	ldr	r1, [r4, #4]
 80095d2:	4299      	cmp	r1, r3
 80095d4:	bfde      	ittt	le
 80095d6:	2330      	movle	r3, #48	@ 0x30
 80095d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095e0:	1b92      	subs	r2, r2, r6
 80095e2:	6122      	str	r2, [r4, #16]
 80095e4:	f8cd a000 	str.w	sl, [sp]
 80095e8:	464b      	mov	r3, r9
 80095ea:	aa03      	add	r2, sp, #12
 80095ec:	4621      	mov	r1, r4
 80095ee:	4640      	mov	r0, r8
 80095f0:	f7ff fee6 	bl	80093c0 <_printf_common>
 80095f4:	3001      	adds	r0, #1
 80095f6:	d14a      	bne.n	800968e <_printf_i+0x1f2>
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	b004      	add	sp, #16
 80095fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	f043 0320 	orr.w	r3, r3, #32
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	4833      	ldr	r0, [pc, #204]	@ (80096d8 <_printf_i+0x23c>)
 800960c:	2778      	movs	r7, #120	@ 0x78
 800960e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	6831      	ldr	r1, [r6, #0]
 8009616:	061f      	lsls	r7, r3, #24
 8009618:	f851 5b04 	ldr.w	r5, [r1], #4
 800961c:	d402      	bmi.n	8009624 <_printf_i+0x188>
 800961e:	065f      	lsls	r7, r3, #25
 8009620:	bf48      	it	mi
 8009622:	b2ad      	uxthmi	r5, r5
 8009624:	6031      	str	r1, [r6, #0]
 8009626:	07d9      	lsls	r1, r3, #31
 8009628:	bf44      	itt	mi
 800962a:	f043 0320 	orrmi.w	r3, r3, #32
 800962e:	6023      	strmi	r3, [r4, #0]
 8009630:	b11d      	cbz	r5, 800963a <_printf_i+0x19e>
 8009632:	2310      	movs	r3, #16
 8009634:	e7ac      	b.n	8009590 <_printf_i+0xf4>
 8009636:	4827      	ldr	r0, [pc, #156]	@ (80096d4 <_printf_i+0x238>)
 8009638:	e7e9      	b.n	800960e <_printf_i+0x172>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	f023 0320 	bic.w	r3, r3, #32
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	e7f6      	b.n	8009632 <_printf_i+0x196>
 8009644:	4616      	mov	r6, r2
 8009646:	e7bd      	b.n	80095c4 <_printf_i+0x128>
 8009648:	6833      	ldr	r3, [r6, #0]
 800964a:	6825      	ldr	r5, [r4, #0]
 800964c:	6961      	ldr	r1, [r4, #20]
 800964e:	1d18      	adds	r0, r3, #4
 8009650:	6030      	str	r0, [r6, #0]
 8009652:	062e      	lsls	r6, r5, #24
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	d501      	bpl.n	800965c <_printf_i+0x1c0>
 8009658:	6019      	str	r1, [r3, #0]
 800965a:	e002      	b.n	8009662 <_printf_i+0x1c6>
 800965c:	0668      	lsls	r0, r5, #25
 800965e:	d5fb      	bpl.n	8009658 <_printf_i+0x1bc>
 8009660:	8019      	strh	r1, [r3, #0]
 8009662:	2300      	movs	r3, #0
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	4616      	mov	r6, r2
 8009668:	e7bc      	b.n	80095e4 <_printf_i+0x148>
 800966a:	6833      	ldr	r3, [r6, #0]
 800966c:	1d1a      	adds	r2, r3, #4
 800966e:	6032      	str	r2, [r6, #0]
 8009670:	681e      	ldr	r6, [r3, #0]
 8009672:	6862      	ldr	r2, [r4, #4]
 8009674:	2100      	movs	r1, #0
 8009676:	4630      	mov	r0, r6
 8009678:	f7f6 fdb2 	bl	80001e0 <memchr>
 800967c:	b108      	cbz	r0, 8009682 <_printf_i+0x1e6>
 800967e:	1b80      	subs	r0, r0, r6
 8009680:	6060      	str	r0, [r4, #4]
 8009682:	6863      	ldr	r3, [r4, #4]
 8009684:	6123      	str	r3, [r4, #16]
 8009686:	2300      	movs	r3, #0
 8009688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800968c:	e7aa      	b.n	80095e4 <_printf_i+0x148>
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	4632      	mov	r2, r6
 8009692:	4649      	mov	r1, r9
 8009694:	4640      	mov	r0, r8
 8009696:	47d0      	blx	sl
 8009698:	3001      	adds	r0, #1
 800969a:	d0ad      	beq.n	80095f8 <_printf_i+0x15c>
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	079b      	lsls	r3, r3, #30
 80096a0:	d413      	bmi.n	80096ca <_printf_i+0x22e>
 80096a2:	68e0      	ldr	r0, [r4, #12]
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	4298      	cmp	r0, r3
 80096a8:	bfb8      	it	lt
 80096aa:	4618      	movlt	r0, r3
 80096ac:	e7a6      	b.n	80095fc <_printf_i+0x160>
 80096ae:	2301      	movs	r3, #1
 80096b0:	4632      	mov	r2, r6
 80096b2:	4649      	mov	r1, r9
 80096b4:	4640      	mov	r0, r8
 80096b6:	47d0      	blx	sl
 80096b8:	3001      	adds	r0, #1
 80096ba:	d09d      	beq.n	80095f8 <_printf_i+0x15c>
 80096bc:	3501      	adds	r5, #1
 80096be:	68e3      	ldr	r3, [r4, #12]
 80096c0:	9903      	ldr	r1, [sp, #12]
 80096c2:	1a5b      	subs	r3, r3, r1
 80096c4:	42ab      	cmp	r3, r5
 80096c6:	dcf2      	bgt.n	80096ae <_printf_i+0x212>
 80096c8:	e7eb      	b.n	80096a2 <_printf_i+0x206>
 80096ca:	2500      	movs	r5, #0
 80096cc:	f104 0619 	add.w	r6, r4, #25
 80096d0:	e7f5      	b.n	80096be <_printf_i+0x222>
 80096d2:	bf00      	nop
 80096d4:	080098ed 	.word	0x080098ed
 80096d8:	080098fe 	.word	0x080098fe

080096dc <memmove>:
 80096dc:	4288      	cmp	r0, r1
 80096de:	b510      	push	{r4, lr}
 80096e0:	eb01 0402 	add.w	r4, r1, r2
 80096e4:	d902      	bls.n	80096ec <memmove+0x10>
 80096e6:	4284      	cmp	r4, r0
 80096e8:	4623      	mov	r3, r4
 80096ea:	d807      	bhi.n	80096fc <memmove+0x20>
 80096ec:	1e43      	subs	r3, r0, #1
 80096ee:	42a1      	cmp	r1, r4
 80096f0:	d008      	beq.n	8009704 <memmove+0x28>
 80096f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096fa:	e7f8      	b.n	80096ee <memmove+0x12>
 80096fc:	4402      	add	r2, r0
 80096fe:	4601      	mov	r1, r0
 8009700:	428a      	cmp	r2, r1
 8009702:	d100      	bne.n	8009706 <memmove+0x2a>
 8009704:	bd10      	pop	{r4, pc}
 8009706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800970a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800970e:	e7f7      	b.n	8009700 <memmove+0x24>

08009710 <_sbrk_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d06      	ldr	r5, [pc, #24]	@ (800972c <_sbrk_r+0x1c>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f7 fca4 	bl	8001068 <_sbrk>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_sbrk_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_sbrk_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	20001bc0 	.word	0x20001bc0

08009730 <_realloc_r>:
 8009730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009734:	4680      	mov	r8, r0
 8009736:	4615      	mov	r5, r2
 8009738:	460c      	mov	r4, r1
 800973a:	b921      	cbnz	r1, 8009746 <_realloc_r+0x16>
 800973c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009740:	4611      	mov	r1, r2
 8009742:	f7ff bc59 	b.w	8008ff8 <_malloc_r>
 8009746:	b92a      	cbnz	r2, 8009754 <_realloc_r+0x24>
 8009748:	f7ff fbea 	bl	8008f20 <_free_r>
 800974c:	2400      	movs	r4, #0
 800974e:	4620      	mov	r0, r4
 8009750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009754:	f000 f81a 	bl	800978c <_malloc_usable_size_r>
 8009758:	4285      	cmp	r5, r0
 800975a:	4606      	mov	r6, r0
 800975c:	d802      	bhi.n	8009764 <_realloc_r+0x34>
 800975e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009762:	d8f4      	bhi.n	800974e <_realloc_r+0x1e>
 8009764:	4629      	mov	r1, r5
 8009766:	4640      	mov	r0, r8
 8009768:	f7ff fc46 	bl	8008ff8 <_malloc_r>
 800976c:	4607      	mov	r7, r0
 800976e:	2800      	cmp	r0, #0
 8009770:	d0ec      	beq.n	800974c <_realloc_r+0x1c>
 8009772:	42b5      	cmp	r5, r6
 8009774:	462a      	mov	r2, r5
 8009776:	4621      	mov	r1, r4
 8009778:	bf28      	it	cs
 800977a:	4632      	movcs	r2, r6
 800977c:	f7ff fbc2 	bl	8008f04 <memcpy>
 8009780:	4621      	mov	r1, r4
 8009782:	4640      	mov	r0, r8
 8009784:	f7ff fbcc 	bl	8008f20 <_free_r>
 8009788:	463c      	mov	r4, r7
 800978a:	e7e0      	b.n	800974e <_realloc_r+0x1e>

0800978c <_malloc_usable_size_r>:
 800978c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009790:	1f18      	subs	r0, r3, #4
 8009792:	2b00      	cmp	r3, #0
 8009794:	bfbc      	itt	lt
 8009796:	580b      	ldrlt	r3, [r1, r0]
 8009798:	18c0      	addlt	r0, r0, r3
 800979a:	4770      	bx	lr

0800979c <_init>:
 800979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979e:	bf00      	nop
 80097a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a2:	bc08      	pop	{r3}
 80097a4:	469e      	mov	lr, r3
 80097a6:	4770      	bx	lr

080097a8 <_fini>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	bf00      	nop
 80097ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ae:	bc08      	pop	{r3}
 80097b0:	469e      	mov	lr, r3
 80097b2:	4770      	bx	lr
